// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings to GSL
class Gsl {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Gsl(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Gsl.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<size_t Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int atoi(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atol(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atoll(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  double strtod(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double strtof(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strtol(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  ffi.Pointer<ffi.Int8> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int64)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int gnu_dev_major(
    int __dev,
  ) {
    return _gnu_dev_major(
      __dev,
    );
  }

  late final _gnu_dev_majorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>(
          'gnu_dev_major');
  late final _gnu_dev_major = _gnu_dev_majorPtr.asFunction<int Function(int)>();

  int gnu_dev_minor(
    int __dev,
  ) {
    return _gnu_dev_minor(
      __dev,
    );
  }

  late final _gnu_dev_minorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint64)>>(
          'gnu_dev_minor');
  late final _gnu_dev_minor = _gnu_dev_minorPtr.asFunction<int Function(int)>();

  int gnu_dev_makedev(
    int __major,
    int __minor,
  ) {
    return _gnu_dev_makedev(
      __major,
      __minor,
    );
  }

  late final _gnu_dev_makedevPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint32, ffi.Uint32)>>(
          'gnu_dev_makedev');
  late final _gnu_dev_makedev =
      _gnu_dev_makedevPtr.asFunction<int Function(int, int)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> initstate(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Uint32, ffi.Pointer<ffi.Int8>, size_t)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Int8> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>)>>(
          'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Uint16>)>>(
          'erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.Uint16>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>>('seed48');
  late final _seed48 = _seed48Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint16>)>>(
          'lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint16>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>();

  int nrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>();

  int jrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int64, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.Uint16> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.Uint16> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      'calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void cfree(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _cfree(
      __ptr,
    );
  }

  late final _cfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'cfree');
  late final _cfree =
      _cfreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, size_t,
              size_t)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      'aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int putenv(
    ffi.Pointer<ffi.Int8> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemps(
    ffi.Pointer<ffi.Int8> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int system(
    ffi.Pointer<ffi.Int8> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, size_t, size_t, __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int32, ffi.Int32)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Int8> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Double, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(double, int, ffi.Pointer<ffi.Int8>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              size_t)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              size_t)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbtowc(
    ffi.Pointer<wchar_t> __pwc,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, size_t)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Int8> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, wchar_t)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbstowcs(
    ffi.Pointer<wchar_t> __pwcs,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>,
              size_t)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<wchar_t> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>,
              size_t)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  late final ffi.Pointer<_IO_FILE_plus> __IO_2_1_stdin_ =
      _lookup<_IO_FILE_plus>('_IO_2_1_stdin_');

  ffi.Pointer<_IO_FILE_plus> get _IO_2_1_stdin_ => __IO_2_1_stdin_;

  late final ffi.Pointer<_IO_FILE_plus> __IO_2_1_stdout_ =
      _lookup<_IO_FILE_plus>('_IO_2_1_stdout_');

  ffi.Pointer<_IO_FILE_plus> get _IO_2_1_stdout_ => __IO_2_1_stdout_;

  late final ffi.Pointer<_IO_FILE_plus> __IO_2_1_stderr_ =
      _lookup<_IO_FILE_plus>('_IO_2_1_stderr_');

  ffi.Pointer<_IO_FILE_plus> get _IO_2_1_stderr_ => __IO_2_1_stderr_;

  int __underflow(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    return ___underflow(
      arg0,
    );
  }

  late final ___underflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<_IO_FILE>)>>(
          '__underflow');
  late final ___underflow =
      ___underflowPtr.asFunction<int Function(ffi.Pointer<_IO_FILE>)>();

  int __uflow(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<_IO_FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<_IO_FILE>)>();

  int __overflow(
    ffi.Pointer<_IO_FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<_IO_FILE>, ffi.Int32)>>('__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<_IO_FILE>, int)>();

  int _IO_getc(
    ffi.Pointer<_IO_FILE> __fp,
  ) {
    return __IO_getc(
      __fp,
    );
  }

  late final __IO_getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<_IO_FILE>)>>(
          '_IO_getc');
  late final __IO_getc =
      __IO_getcPtr.asFunction<int Function(ffi.Pointer<_IO_FILE>)>();

  int _IO_putc(
    int __c,
    ffi.Pointer<_IO_FILE> __fp,
  ) {
    return __IO_putc(
      __c,
      __fp,
    );
  }

  late final __IO_putcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<_IO_FILE>)>>('_IO_putc');
  late final __IO_putc =
      __IO_putcPtr.asFunction<int Function(int, ffi.Pointer<_IO_FILE>)>();

  int _IO_feof(
    ffi.Pointer<_IO_FILE> __fp,
  ) {
    return __IO_feof(
      __fp,
    );
  }

  late final __IO_feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<_IO_FILE>)>>(
          '_IO_feof');
  late final __IO_feof =
      __IO_feofPtr.asFunction<int Function(ffi.Pointer<_IO_FILE>)>();

  int _IO_ferror(
    ffi.Pointer<_IO_FILE> __fp,
  ) {
    return __IO_ferror(
      __fp,
    );
  }

  late final __IO_ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<_IO_FILE>)>>(
          '_IO_ferror');
  late final __IO_ferror =
      __IO_ferrorPtr.asFunction<int Function(ffi.Pointer<_IO_FILE>)>();

  int _IO_peekc_locked(
    ffi.Pointer<_IO_FILE> __fp,
  ) {
    return __IO_peekc_locked(
      __fp,
    );
  }

  late final __IO_peekc_lockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<_IO_FILE>)>>(
          '_IO_peekc_locked');
  late final __IO_peekc_locked =
      __IO_peekc_lockedPtr.asFunction<int Function(ffi.Pointer<_IO_FILE>)>();

  void _IO_flockfile(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    return __IO_flockfile(
      arg0,
    );
  }

  late final __IO_flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<_IO_FILE>)>>(
          '_IO_flockfile');
  late final __IO_flockfile =
      __IO_flockfilePtr.asFunction<void Function(ffi.Pointer<_IO_FILE>)>();

  void _IO_funlockfile(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    return __IO_funlockfile(
      arg0,
    );
  }

  late final __IO_funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<_IO_FILE>)>>(
          '_IO_funlockfile');
  late final __IO_funlockfile =
      __IO_funlockfilePtr.asFunction<void Function(ffi.Pointer<_IO_FILE>)>();

  int _IO_ftrylockfile(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    return __IO_ftrylockfile(
      arg0,
    );
  }

  late final __IO_ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<_IO_FILE>)>>(
          '_IO_ftrylockfile');
  late final __IO_ftrylockfile =
      __IO_ftrylockfilePtr.asFunction<int Function(ffi.Pointer<_IO_FILE>)>();

  int _IO_vfscanf(
    ffi.Pointer<_IO_FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return __IO_vfscanf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __IO_vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<_IO_FILE>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>,
              ffi.Pointer<ffi.Int32>)>>('_IO_vfscanf');
  late final __IO_vfscanf = __IO_vfscanfPtr.asFunction<
      int Function(ffi.Pointer<_IO_FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>, ffi.Pointer<ffi.Int32>)>();

  int _IO_vfprintf(
    ffi.Pointer<_IO_FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return __IO_vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __IO_vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<_IO_FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('_IO_vfprintf');
  late final __IO_vfprintf = __IO_vfprintfPtr.asFunction<
      int Function(ffi.Pointer<_IO_FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int _IO_padn(
    ffi.Pointer<_IO_FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return __IO_padn(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __IO_padnPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<_IO_FILE>, ffi.Int32, __ssize_t)>>('_IO_padn');
  late final __IO_padn =
      __IO_padnPtr.asFunction<int Function(ffi.Pointer<_IO_FILE>, int, int)>();

  int _IO_sgetn(
    ffi.Pointer<_IO_FILE> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return __IO_sgetn(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __IO_sgetnPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<_IO_FILE>, ffi.Pointer<ffi.Void>,
              size_t)>>('_IO_sgetn');
  late final __IO_sgetn = __IO_sgetnPtr.asFunction<
      int Function(ffi.Pointer<_IO_FILE>, ffi.Pointer<ffi.Void>, int)>();

  int _IO_seekoff(
    ffi.Pointer<_IO_FILE> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return __IO_seekoff(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final __IO_seekoffPtr = _lookup<
      ffi.NativeFunction<
          __off64_t Function(ffi.Pointer<_IO_FILE>, __off64_t, ffi.Int32,
              ffi.Int32)>>('_IO_seekoff');
  late final __IO_seekoff = __IO_seekoffPtr
      .asFunction<int Function(ffi.Pointer<_IO_FILE>, int, int, int)>();

  int _IO_seekpos(
    ffi.Pointer<_IO_FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return __IO_seekpos(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __IO_seekposPtr = _lookup<
      ffi.NativeFunction<
          __off64_t Function(
              ffi.Pointer<_IO_FILE>, __off64_t, ffi.Int32)>>('_IO_seekpos');
  late final __IO_seekpos = __IO_seekposPtr
      .asFunction<int Function(ffi.Pointer<_IO_FILE>, int, int)>();

  void _IO_free_backup_area(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    return __IO_free_backup_area(
      arg0,
    );
  }

  late final __IO_free_backup_areaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<_IO_FILE>)>>(
          '_IO_free_backup_area');
  late final __IO_free_backup_area = __IO_free_backup_areaPtr
      .asFunction<void Function(ffi.Pointer<_IO_FILE>)>();

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stdin =
      _lookup<ffi.Pointer<_IO_FILE>>('stdin');

  ffi.Pointer<_IO_FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<_IO_FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stdout =
      _lookup<ffi.Pointer<_IO_FILE>>('stdout');

  ffi.Pointer<_IO_FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<_IO_FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<_IO_FILE>> _stderr =
      _lookup<ffi.Pointer<_IO_FILE>>('stderr');

  ffi.Pointer<_IO_FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<_IO_FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam(
      __s,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ffi.Int8>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<size_t> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, size_t)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, size_t)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<__va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<__va_list_tag>)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>,
              ffi.Int32,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>, int,
          ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Int32, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>, int,
          ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<size_t> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<size_t>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<size_t>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, __off_t, ffi.Int32)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_errlist.value = value;

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int32> __errno_location() {
    return ___errno_location();
  }

  late final ___errno_locationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          '__errno_location');
  late final ___errno_location =
      ___errno_locationPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  void gsl_error(
    ffi.Pointer<ffi.Int8> reason,
    ffi.Pointer<ffi.Int8> file,
    int line,
    int gsl_errno,
  ) {
    return _gsl_error(
      reason,
      file,
      line,
      gsl_errno,
    );
  }

  late final _gsl_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, ffi.Int32)>>('gsl_error');
  late final _gsl_error = _gsl_errorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int)>();

  void gsl_stream_printf(
    ffi.Pointer<ffi.Int8> label,
    ffi.Pointer<ffi.Int8> file,
    int line,
    ffi.Pointer<ffi.Int8> reason,
  ) {
    return _gsl_stream_printf(
      label,
      file,
      line,
      reason,
    );
  }

  late final _gsl_stream_printfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gsl_stream_printf');
  late final _gsl_stream_printf = _gsl_stream_printfPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> gsl_strerror(
    int gsl_errno,
  ) {
    return _gsl_strerror(
      gsl_errno,
    );
  }

  late final _gsl_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'gsl_strerror');
  late final _gsl_strerror =
      _gsl_strerrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ffi.Pointer<gsl_error_handler_t> gsl_set_error_handler(
    ffi.Pointer<gsl_error_handler_t> new_handler,
  ) {
    return _gsl_set_error_handler(
      new_handler,
    );
  }

  late final _gsl_set_error_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_error_handler_t> Function(
              ffi.Pointer<gsl_error_handler_t>)>>('gsl_set_error_handler');
  late final _gsl_set_error_handler = _gsl_set_error_handlerPtr.asFunction<
      ffi.Pointer<gsl_error_handler_t> Function(
          ffi.Pointer<gsl_error_handler_t>)>();

  ffi.Pointer<gsl_error_handler_t> gsl_set_error_handler_off() {
    return _gsl_set_error_handler_off();
  }

  late final _gsl_set_error_handler_offPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_error_handler_t> Function()>>(
          'gsl_set_error_handler_off');
  late final _gsl_set_error_handler_off = _gsl_set_error_handler_offPtr
      .asFunction<ffi.Pointer<gsl_error_handler_t> Function()>();

  ffi.Pointer<gsl_stream_handler_t> gsl_set_stream_handler(
    ffi.Pointer<gsl_stream_handler_t> new_handler,
  ) {
    return _gsl_set_stream_handler(
      new_handler,
    );
  }

  late final _gsl_set_stream_handlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_stream_handler_t> Function(
              ffi.Pointer<gsl_stream_handler_t>)>>('gsl_set_stream_handler');
  late final _gsl_set_stream_handler = _gsl_set_stream_handlerPtr.asFunction<
      ffi.Pointer<gsl_stream_handler_t> Function(
          ffi.Pointer<gsl_stream_handler_t>)>();

  ffi.Pointer<FILE> gsl_set_stream(
    ffi.Pointer<FILE> new_stream,
  ) {
    return _gsl_set_stream(
      new_stream,
    );
  }

  late final _gsl_set_streamPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.Pointer<FILE>)>>(
      'gsl_set_stream');
  late final _gsl_set_stream = _gsl_set_streamPtr
      .asFunction<ffi.Pointer<FILE> Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<gsl_block_complex_float> gsl_block_complex_float_alloc(
    int n,
  ) {
    return _gsl_block_complex_float_alloc(
      n,
    );
  }

  late final _gsl_block_complex_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_block_complex_float> Function(
              size_t)>>('gsl_block_complex_float_alloc');
  late final _gsl_block_complex_float_alloc = _gsl_block_complex_float_allocPtr
      .asFunction<ffi.Pointer<gsl_block_complex_float> Function(int)>();

  ffi.Pointer<gsl_block_complex_float> gsl_block_complex_float_calloc(
    int n,
  ) {
    return _gsl_block_complex_float_calloc(
      n,
    );
  }

  late final _gsl_block_complex_float_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_block_complex_float> Function(
              size_t)>>('gsl_block_complex_float_calloc');
  late final _gsl_block_complex_float_calloc =
      _gsl_block_complex_float_callocPtr
          .asFunction<ffi.Pointer<gsl_block_complex_float> Function(int)>();

  void gsl_block_complex_float_free(
    ffi.Pointer<gsl_block_complex_float> b,
  ) {
    return _gsl_block_complex_float_free(
      b,
    );
  }

  late final _gsl_block_complex_float_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_block_complex_float>)>>(
      'gsl_block_complex_float_free');
  late final _gsl_block_complex_float_free = _gsl_block_complex_float_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_complex_float>)>();

  int gsl_block_complex_float_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex_float> b,
  ) {
    return _gsl_block_complex_float_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_complex_float_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_float>)>>(
      'gsl_block_complex_float_fread');
  late final _gsl_block_complex_float_fread =
      _gsl_block_complex_float_freadPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_float>)>();

  int gsl_block_complex_float_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex_float> b,
  ) {
    return _gsl_block_complex_float_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_complex_float_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_float>)>>(
      'gsl_block_complex_float_fwrite');
  late final _gsl_block_complex_float_fwrite =
      _gsl_block_complex_float_fwritePtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_float>)>();

  int gsl_block_complex_float_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex_float> b,
  ) {
    return _gsl_block_complex_float_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_complex_float_fscanfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_float>)>>(
      'gsl_block_complex_float_fscanf');
  late final _gsl_block_complex_float_fscanf =
      _gsl_block_complex_float_fscanfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_float>)>();

  int gsl_block_complex_float_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex_float> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_complex_float_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_complex_float_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_complex_float>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_complex_float_fprintf');
  late final _gsl_block_complex_float_fprintf =
      _gsl_block_complex_float_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_float>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_complex_float_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Float> b,
    int n,
    int stride,
  ) {
    return _gsl_block_complex_float_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_complex_float_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_block_complex_float_raw_fread');
  late final _gsl_block_complex_float_raw_fread =
      _gsl_block_complex_float_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_block_complex_float_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Float> b,
    int n,
    int stride,
  ) {
    return _gsl_block_complex_float_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_complex_float_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_block_complex_float_raw_fwrite');
  late final _gsl_block_complex_float_raw_fwrite =
      _gsl_block_complex_float_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_block_complex_float_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Float> b,
    int n,
    int stride,
  ) {
    return _gsl_block_complex_float_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_complex_float_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_block_complex_float_raw_fscanf');
  late final _gsl_block_complex_float_raw_fscanf =
      _gsl_block_complex_float_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_block_complex_float_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Float> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_complex_float_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_complex_float_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_complex_float_raw_fprintf');
  late final _gsl_block_complex_float_raw_fprintf =
      _gsl_block_complex_float_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_complex_float_size(
    ffi.Pointer<gsl_block_complex_float> b,
  ) {
    return _gsl_block_complex_float_size(
      b,
    );
  }

  late final _gsl_block_complex_float_sizePtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_block_complex_float>)>>(
      'gsl_block_complex_float_size');
  late final _gsl_block_complex_float_size = _gsl_block_complex_float_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_complex_float>)>();

  ffi.Pointer<ffi.Float> gsl_block_complex_float_data(
    ffi.Pointer<gsl_block_complex_float> b,
  ) {
    return _gsl_block_complex_float_data(
      b,
    );
  }

  late final _gsl_block_complex_float_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Float> Function(
                  ffi.Pointer<gsl_block_complex_float>)>>(
      'gsl_block_complex_float_data');
  late final _gsl_block_complex_float_data =
      _gsl_block_complex_float_dataPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<gsl_block_complex_float>)>();

  ffi.Pointer<gsl_sum_levin_u_workspace> gsl_sum_levin_u_alloc(
    int n,
  ) {
    return _gsl_sum_levin_u_alloc(
      n,
    );
  }

  late final _gsl_sum_levin_u_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_sum_levin_u_workspace> Function(
              size_t)>>('gsl_sum_levin_u_alloc');
  late final _gsl_sum_levin_u_alloc = _gsl_sum_levin_u_allocPtr
      .asFunction<ffi.Pointer<gsl_sum_levin_u_workspace> Function(int)>();

  void gsl_sum_levin_u_free(
    ffi.Pointer<gsl_sum_levin_u_workspace> w,
  ) {
    return _gsl_sum_levin_u_free(
      w,
    );
  }

  late final _gsl_sum_levin_u_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_sum_levin_u_workspace>)>>('gsl_sum_levin_u_free');
  late final _gsl_sum_levin_u_free = _gsl_sum_levin_u_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_sum_levin_u_workspace>)>();

  int gsl_sum_levin_u_accel(
    ffi.Pointer<ffi.Double> array,
    int n,
    ffi.Pointer<gsl_sum_levin_u_workspace> w,
    ffi.Pointer<ffi.Double> sum_accel,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_sum_levin_u_accel(
      array,
      n,
      w,
      sum_accel,
      abserr,
    );
  }

  late final _gsl_sum_levin_u_accelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<gsl_sum_levin_u_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sum_levin_u_accel');
  late final _gsl_sum_levin_u_accel = _gsl_sum_levin_u_accelPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<gsl_sum_levin_u_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_sum_levin_u_minmax(
    ffi.Pointer<ffi.Double> array,
    int n,
    int min_terms,
    int max_terms,
    ffi.Pointer<gsl_sum_levin_u_workspace> w,
    ffi.Pointer<ffi.Double> sum_accel,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_sum_levin_u_minmax(
      array,
      n,
      min_terms,
      max_terms,
      w,
      sum_accel,
      abserr,
    );
  }

  late final _gsl_sum_levin_u_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              size_t,
              ffi.Pointer<gsl_sum_levin_u_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sum_levin_u_minmax');
  late final _gsl_sum_levin_u_minmax = _gsl_sum_levin_u_minmaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          int,
          int,
          int,
          ffi.Pointer<gsl_sum_levin_u_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_sum_levin_u_step(
    double term,
    int n,
    int nmax,
    ffi.Pointer<gsl_sum_levin_u_workspace> w,
    ffi.Pointer<ffi.Double> sum_accel,
  ) {
    return _gsl_sum_levin_u_step(
      term,
      n,
      nmax,
      w,
      sum_accel,
    );
  }

  late final _gsl_sum_levin_u_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              size_t,
              size_t,
              ffi.Pointer<gsl_sum_levin_u_workspace>,
              ffi.Pointer<ffi.Double>)>>('gsl_sum_levin_u_step');
  late final _gsl_sum_levin_u_step = _gsl_sum_levin_u_stepPtr.asFunction<
      int Function(double, int, int, ffi.Pointer<gsl_sum_levin_u_workspace>,
          ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_sum_levin_utrunc_workspace> gsl_sum_levin_utrunc_alloc(
    int n,
  ) {
    return _gsl_sum_levin_utrunc_alloc(
      n,
    );
  }

  late final _gsl_sum_levin_utrunc_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_sum_levin_utrunc_workspace> Function(
              size_t)>>('gsl_sum_levin_utrunc_alloc');
  late final _gsl_sum_levin_utrunc_alloc = _gsl_sum_levin_utrunc_allocPtr
      .asFunction<ffi.Pointer<gsl_sum_levin_utrunc_workspace> Function(int)>();

  void gsl_sum_levin_utrunc_free(
    ffi.Pointer<gsl_sum_levin_utrunc_workspace> w,
  ) {
    return _gsl_sum_levin_utrunc_free(
      w,
    );
  }

  late final _gsl_sum_levin_utrunc_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_sum_levin_utrunc_workspace>)>>(
      'gsl_sum_levin_utrunc_free');
  late final _gsl_sum_levin_utrunc_free = _gsl_sum_levin_utrunc_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_sum_levin_utrunc_workspace>)>();

  int gsl_sum_levin_utrunc_accel(
    ffi.Pointer<ffi.Double> array,
    int n,
    ffi.Pointer<gsl_sum_levin_utrunc_workspace> w,
    ffi.Pointer<ffi.Double> sum_accel,
    ffi.Pointer<ffi.Double> abserr_trunc,
  ) {
    return _gsl_sum_levin_utrunc_accel(
      array,
      n,
      w,
      sum_accel,
      abserr_trunc,
    );
  }

  late final _gsl_sum_levin_utrunc_accelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<gsl_sum_levin_utrunc_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sum_levin_utrunc_accel');
  late final _gsl_sum_levin_utrunc_accel =
      _gsl_sum_levin_utrunc_accelPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>,
              int,
              ffi.Pointer<gsl_sum_levin_utrunc_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sum_levin_utrunc_minmax(
    ffi.Pointer<ffi.Double> array,
    int n,
    int min_terms,
    int max_terms,
    ffi.Pointer<gsl_sum_levin_utrunc_workspace> w,
    ffi.Pointer<ffi.Double> sum_accel,
    ffi.Pointer<ffi.Double> abserr_trunc,
  ) {
    return _gsl_sum_levin_utrunc_minmax(
      array,
      n,
      min_terms,
      max_terms,
      w,
      sum_accel,
      abserr_trunc,
    );
  }

  late final _gsl_sum_levin_utrunc_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              size_t,
              ffi.Pointer<gsl_sum_levin_utrunc_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sum_levin_utrunc_minmax');
  late final _gsl_sum_levin_utrunc_minmax =
      _gsl_sum_levin_utrunc_minmaxPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>,
              int,
              int,
              int,
              ffi.Pointer<gsl_sum_levin_utrunc_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sum_levin_utrunc_step(
    double term,
    int n,
    ffi.Pointer<gsl_sum_levin_utrunc_workspace> w,
    ffi.Pointer<ffi.Double> sum_accel,
  ) {
    return _gsl_sum_levin_utrunc_step(
      term,
      n,
      w,
      sum_accel,
    );
  }

  late final _gsl_sum_levin_utrunc_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_sum_levin_utrunc_workspace>,
              ffi.Pointer<ffi.Double>)>>('gsl_sum_levin_utrunc_step');
  late final _gsl_sum_levin_utrunc_step =
      _gsl_sum_levin_utrunc_stepPtr.asFunction<
          int Function(double, int, ffi.Pointer<gsl_sum_levin_utrunc_workspace>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_result_smash_e(
    ffi.Pointer<gsl_sf_result_e10> re,
    ffi.Pointer<gsl_sf_result> r,
  ) {
    return _gsl_sf_result_smash_e(
      re,
      r,
    );
  }

  late final _gsl_sf_result_smash_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_sf_result_e10>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_result_smash_e');
  late final _gsl_sf_result_smash_e = _gsl_sf_result_smash_ePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_sf_result_e10>, ffi.Pointer<gsl_sf_result>)>();

  late final ffi.Pointer<ffi.Int32> _gsl_check_range =
      _lookup<ffi.Int32>('gsl_check_range');

  int get gsl_check_range => _gsl_check_range.value;

  set gsl_check_range(int value) => _gsl_check_range.value = value;

  ffi.Pointer<gsl_block_long_double> gsl_block_long_double_alloc(
    int n,
  ) {
    return _gsl_block_long_double_alloc(
      n,
    );
  }

  late final _gsl_block_long_double_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_block_long_double> Function(
              size_t)>>('gsl_block_long_double_alloc');
  late final _gsl_block_long_double_alloc = _gsl_block_long_double_allocPtr
      .asFunction<ffi.Pointer<gsl_block_long_double> Function(int)>();

  ffi.Pointer<gsl_block_long_double> gsl_block_long_double_calloc(
    int n,
  ) {
    return _gsl_block_long_double_calloc(
      n,
    );
  }

  late final _gsl_block_long_double_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_block_long_double> Function(
              size_t)>>('gsl_block_long_double_calloc');
  late final _gsl_block_long_double_calloc = _gsl_block_long_double_callocPtr
      .asFunction<ffi.Pointer<gsl_block_long_double> Function(int)>();

  void gsl_block_long_double_free(
    ffi.Pointer<gsl_block_long_double> b,
  ) {
    return _gsl_block_long_double_free(
      b,
    );
  }

  late final _gsl_block_long_double_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_block_long_double>)>>(
      'gsl_block_long_double_free');
  late final _gsl_block_long_double_free = _gsl_block_long_double_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_long_double>)>();

  int gsl_block_long_double_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_long_double> b,
  ) {
    return _gsl_block_long_double_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_long_double_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long_double>)>>(
      'gsl_block_long_double_fread');
  late final _gsl_block_long_double_fread =
      _gsl_block_long_double_freadPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long_double>)>();

  int gsl_block_long_double_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_long_double> b,
  ) {
    return _gsl_block_long_double_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_long_double_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long_double>)>>(
      'gsl_block_long_double_fwrite');
  late final _gsl_block_long_double_fwrite =
      _gsl_block_long_double_fwritePtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long_double>)>();

  int gsl_block_long_double_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_long_double> b,
  ) {
    return _gsl_block_long_double_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_long_double_fscanfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long_double>)>>(
      'gsl_block_long_double_fscanf');
  late final _gsl_block_long_double_fscanf =
      _gsl_block_long_double_fscanfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long_double>)>();

  int gsl_block_long_double_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_long_double> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_long_double_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_long_double_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_long_double>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_long_double_fprintf');
  late final _gsl_block_long_double_fprintf =
      _gsl_block_long_double_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long_double>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_long_double_size(
    ffi.Pointer<gsl_block_long_double> b,
  ) {
    return _gsl_block_long_double_size(
      b,
    );
  }

  late final _gsl_block_long_double_sizePtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_block_long_double>)>>(
      'gsl_block_long_double_size');
  late final _gsl_block_long_double_size = _gsl_block_long_double_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_long_double>)>();

  ffi.Pointer<gsl_vector_long_double> gsl_vector_long_double_alloc(
    int n,
  ) {
    return _gsl_vector_long_double_alloc(
      n,
    );
  }

  late final _gsl_vector_long_double_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              size_t)>>('gsl_vector_long_double_alloc');
  late final _gsl_vector_long_double_alloc = _gsl_vector_long_double_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_long_double> Function(int)>();

  ffi.Pointer<gsl_vector_long_double> gsl_vector_long_double_calloc(
    int n,
  ) {
    return _gsl_vector_long_double_calloc(
      n,
    );
  }

  late final _gsl_vector_long_double_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              size_t)>>('gsl_vector_long_double_calloc');
  late final _gsl_vector_long_double_calloc = _gsl_vector_long_double_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_long_double> Function(int)>();

  ffi.Pointer<gsl_vector_long_double> gsl_vector_long_double_alloc_from_block(
    ffi.Pointer<gsl_block_long_double> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_long_double_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_long_double_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              ffi.Pointer<gsl_block_long_double>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_long_double_alloc_from_block');
  late final _gsl_vector_long_double_alloc_from_block =
      _gsl_vector_long_double_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              ffi.Pointer<gsl_block_long_double>, int, int, int)>();

  ffi.Pointer<gsl_vector_long_double> gsl_vector_long_double_alloc_from_vector(
    ffi.Pointer<gsl_vector_long_double> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_long_double_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_long_double_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              ffi.Pointer<gsl_vector_long_double>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_long_double_alloc_from_vector');
  late final _gsl_vector_long_double_alloc_from_vector =
      _gsl_vector_long_double_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              ffi.Pointer<gsl_vector_long_double>, int, int, int)>();

  void gsl_vector_long_double_free(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_free(
      v,
    );
  }

  late final _gsl_vector_long_double_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_free');
  late final _gsl_vector_long_double_free = _gsl_vector_long_double_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_long_double>)>();

  void gsl_vector_long_double_set_zero(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_set_zero(
      v,
    );
  }

  late final _gsl_vector_long_double_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_set_zero');
  late final _gsl_vector_long_double_set_zero =
      _gsl_vector_long_double_set_zeroPtr
          .asFunction<void Function(ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_set_basis(
    ffi.Pointer<gsl_vector_long_double> v,
    int i,
  ) {
    return _gsl_vector_long_double_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_long_double_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>,
              size_t)>>('gsl_vector_long_double_set_basis');
  late final _gsl_vector_long_double_set_basis =
      _gsl_vector_long_double_set_basisPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_long_double>, int)>();

  int gsl_vector_long_double_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_long_double_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_fread');
  late final _gsl_vector_long_double_fread =
      _gsl_vector_long_double_freadPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_long_double_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_fwrite');
  late final _gsl_vector_long_double_fwrite =
      _gsl_vector_long_double_fwritePtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_long_double_fscanfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_fscanf');
  late final _gsl_vector_long_double_fscanf =
      _gsl_vector_long_double_fscanfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_long_double> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_long_double_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_long_double_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_long_double_fprintf');
  late final _gsl_vector_long_double_fprintf =
      _gsl_vector_long_double_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_long_double_memcpy(
    ffi.Pointer<gsl_vector_long_double> dest,
    ffi.Pointer<gsl_vector_long_double> src,
  ) {
    return _gsl_vector_long_double_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_long_double_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_memcpy');
  late final _gsl_vector_long_double_memcpy =
      _gsl_vector_long_double_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_reverse(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_reverse(
      v,
    );
  }

  late final _gsl_vector_long_double_reversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_reverse');
  late final _gsl_vector_long_double_reverse =
      _gsl_vector_long_double_reversePtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_swap(
    ffi.Pointer<gsl_vector_long_double> v,
    ffi.Pointer<gsl_vector_long_double> w,
  ) {
    return _gsl_vector_long_double_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_long_double_swapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_swap');
  late final _gsl_vector_long_double_swap =
      _gsl_vector_long_double_swapPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_swap_elements(
    ffi.Pointer<gsl_vector_long_double> v,
    int i,
    int j,
  ) {
    return _gsl_vector_long_double_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_long_double_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>, size_t,
              size_t)>>('gsl_vector_long_double_swap_elements');
  late final _gsl_vector_long_double_swap_elements =
      _gsl_vector_long_double_swap_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>, int, int)>();

  int gsl_vector_long_double_max_index(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_max_index(
      v,
    );
  }

  late final _gsl_vector_long_double_max_indexPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_max_index');
  late final _gsl_vector_long_double_max_index =
      _gsl_vector_long_double_max_indexPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_min_index(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_min_index(
      v,
    );
  }

  late final _gsl_vector_long_double_min_indexPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_min_index');
  late final _gsl_vector_long_double_min_index =
      _gsl_vector_long_double_min_indexPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_long_double>)>();

  void gsl_vector_long_double_minmax_index(
    ffi.Pointer<gsl_vector_long_double> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_long_double_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_long_double_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_long_double_minmax_index');
  late final _gsl_vector_long_double_minmax_index =
      _gsl_vector_long_double_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_vector_long_double_add(
    ffi.Pointer<gsl_vector_long_double> a,
    ffi.Pointer<gsl_vector_long_double> b,
  ) {
    return _gsl_vector_long_double_add(
      a,
      b,
    );
  }

  late final _gsl_vector_long_double_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_add');
  late final _gsl_vector_long_double_add =
      _gsl_vector_long_double_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_sub(
    ffi.Pointer<gsl_vector_long_double> a,
    ffi.Pointer<gsl_vector_long_double> b,
  ) {
    return _gsl_vector_long_double_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_long_double_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_sub');
  late final _gsl_vector_long_double_sub =
      _gsl_vector_long_double_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_mul(
    ffi.Pointer<gsl_vector_long_double> a,
    ffi.Pointer<gsl_vector_long_double> b,
  ) {
    return _gsl_vector_long_double_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_long_double_mulPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_mul');
  late final _gsl_vector_long_double_mul =
      _gsl_vector_long_double_mulPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_div(
    ffi.Pointer<gsl_vector_long_double> a,
    ffi.Pointer<gsl_vector_long_double> b,
  ) {
    return _gsl_vector_long_double_div(
      a,
      b,
    );
  }

  late final _gsl_vector_long_double_divPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_div');
  late final _gsl_vector_long_double_div =
      _gsl_vector_long_double_divPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_equal(
    ffi.Pointer<gsl_vector_long_double> u,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_long_double_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_equal');
  late final _gsl_vector_long_double_equal =
      _gsl_vector_long_double_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_isnull(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_isnull(
      v,
    );
  }

  late final _gsl_vector_long_double_isnullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_isnull');
  late final _gsl_vector_long_double_isnull = _gsl_vector_long_double_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_ispos(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_ispos(
      v,
    );
  }

  late final _gsl_vector_long_double_isposPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_ispos');
  late final _gsl_vector_long_double_ispos = _gsl_vector_long_double_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_isneg(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_isneg(
      v,
    );
  }

  late final _gsl_vector_long_double_isnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_isneg');
  late final _gsl_vector_long_double_isneg = _gsl_vector_long_double_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_vector_long_double_isnonneg(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_vector_long_double_isnonneg(
      v,
    );
  }

  late final _gsl_vector_long_double_isnonnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_vector_long_double_isnonneg');
  late final _gsl_vector_long_double_isnonneg =
      _gsl_vector_long_double_isnonnegPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_long_double>)>();

  ffi.Pointer<gsl_block_complex_long_double>
      gsl_block_complex_long_double_alloc(
    int n,
  ) {
    return _gsl_block_complex_long_double_alloc(
      n,
    );
  }

  late final _gsl_block_complex_long_double_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_block_complex_long_double> Function(
              size_t)>>('gsl_block_complex_long_double_alloc');
  late final _gsl_block_complex_long_double_alloc =
      _gsl_block_complex_long_double_allocPtr.asFunction<
          ffi.Pointer<gsl_block_complex_long_double> Function(int)>();

  ffi.Pointer<gsl_block_complex_long_double>
      gsl_block_complex_long_double_calloc(
    int n,
  ) {
    return _gsl_block_complex_long_double_calloc(
      n,
    );
  }

  late final _gsl_block_complex_long_double_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_block_complex_long_double> Function(
              size_t)>>('gsl_block_complex_long_double_calloc');
  late final _gsl_block_complex_long_double_calloc =
      _gsl_block_complex_long_double_callocPtr.asFunction<
          ffi.Pointer<gsl_block_complex_long_double> Function(int)>();

  void gsl_block_complex_long_double_free(
    ffi.Pointer<gsl_block_complex_long_double> b,
  ) {
    return _gsl_block_complex_long_double_free(
      b,
    );
  }

  late final _gsl_block_complex_long_double_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_block_complex_long_double>)>>(
      'gsl_block_complex_long_double_free');
  late final _gsl_block_complex_long_double_free =
      _gsl_block_complex_long_double_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_block_complex_long_double>)>();

  int gsl_block_complex_long_double_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex_long_double> b,
  ) {
    return _gsl_block_complex_long_double_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_complex_long_double_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_block_complex_long_double>)>>(
      'gsl_block_complex_long_double_fread');
  late final _gsl_block_complex_long_double_fread =
      _gsl_block_complex_long_double_freadPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_long_double>)>();

  int gsl_block_complex_long_double_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex_long_double> b,
  ) {
    return _gsl_block_complex_long_double_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_complex_long_double_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_block_complex_long_double>)>>(
      'gsl_block_complex_long_double_fwrite');
  late final _gsl_block_complex_long_double_fwrite =
      _gsl_block_complex_long_double_fwritePtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_long_double>)>();

  int gsl_block_complex_long_double_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex_long_double> b,
  ) {
    return _gsl_block_complex_long_double_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_complex_long_double_fscanfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_block_complex_long_double>)>>(
      'gsl_block_complex_long_double_fscanf');
  late final _gsl_block_complex_long_double_fscanf =
      _gsl_block_complex_long_double_fscanfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex_long_double>)>();

  int gsl_block_complex_long_double_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex_long_double> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_complex_long_double_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_complex_long_double_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_complex_long_double>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_complex_long_double_fprintf');
  late final _gsl_block_complex_long_double_fprintf =
      _gsl_block_complex_long_double_fprintfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_complex_long_double>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_complex_long_double_size(
    ffi.Pointer<gsl_block_complex_long_double> b,
  ) {
    return _gsl_block_complex_long_double_size(
      b,
    );
  }

  late final _gsl_block_complex_long_double_sizePtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_block_complex_long_double>)>>(
      'gsl_block_complex_long_double_size');
  late final _gsl_block_complex_long_double_size =
      _gsl_block_complex_long_double_sizePtr.asFunction<
          int Function(ffi.Pointer<gsl_block_complex_long_double>)>();

  ffi.Pointer<gsl_vector_complex_long_double>
      gsl_vector_complex_long_double_alloc(
    int n,
  ) {
    return _gsl_vector_complex_long_double_alloc(
      n,
    );
  }

  late final _gsl_vector_complex_long_double_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              size_t)>>('gsl_vector_complex_long_double_alloc');
  late final _gsl_vector_complex_long_double_alloc =
      _gsl_vector_complex_long_double_allocPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(int)>();

  ffi.Pointer<gsl_vector_complex_long_double>
      gsl_vector_complex_long_double_calloc(
    int n,
  ) {
    return _gsl_vector_complex_long_double_calloc(
      n,
    );
  }

  late final _gsl_vector_complex_long_double_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              size_t)>>('gsl_vector_complex_long_double_calloc');
  late final _gsl_vector_complex_long_double_calloc =
      _gsl_vector_complex_long_double_callocPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(int)>();

  ffi.Pointer<gsl_vector_complex_long_double>
      gsl_vector_complex_long_double_alloc_from_block(
    ffi.Pointer<gsl_block_complex_long_double> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_complex_long_double_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_complex_long_double_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              ffi.Pointer<gsl_block_complex_long_double>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_long_double_alloc_from_block');
  late final _gsl_vector_complex_long_double_alloc_from_block =
      _gsl_vector_complex_long_double_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              ffi.Pointer<gsl_block_complex_long_double>, int, int, int)>();

  ffi.Pointer<gsl_vector_complex_long_double>
      gsl_vector_complex_long_double_alloc_from_vector(
    ffi.Pointer<gsl_vector_complex_long_double> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_complex_long_double_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_complex_long_double_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              ffi.Pointer<gsl_vector_complex_long_double>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_long_double_alloc_from_vector');
  late final _gsl_vector_complex_long_double_alloc_from_vector =
      _gsl_vector_complex_long_double_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              ffi.Pointer<gsl_vector_complex_long_double>, int, int, int)>();

  void gsl_vector_complex_long_double_free(
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_free(
      v,
    );
  }

  late final _gsl_vector_complex_long_double_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_free');
  late final _gsl_vector_complex_long_double_free =
      _gsl_vector_complex_long_double_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_complex_long_double>)>();

  void gsl_vector_complex_long_double_set_zero(
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_set_zero(
      v,
    );
  }

  late final _gsl_vector_complex_long_double_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_set_zero');
  late final _gsl_vector_complex_long_double_set_zero =
      _gsl_vector_complex_long_double_set_zeroPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_set_basis(
    ffi.Pointer<gsl_vector_complex_long_double> v,
    int i,
  ) {
    return _gsl_vector_complex_long_double_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_long_double_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>,
              size_t)>>('gsl_vector_complex_long_double_set_basis');
  late final _gsl_vector_complex_long_double_set_basis =
      _gsl_vector_complex_long_double_set_basisPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>, int)>();

  int gsl_vector_complex_long_double_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_complex_long_double_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_fread');
  late final _gsl_vector_complex_long_double_fread =
      _gsl_vector_complex_long_double_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_complex_long_double_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_fwrite');
  late final _gsl_vector_complex_long_double_fwrite =
      _gsl_vector_complex_long_double_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_complex_long_double_fscanfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_fscanf');
  late final _gsl_vector_complex_long_double_fscanf =
      _gsl_vector_complex_long_double_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex_long_double> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_complex_long_double_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_complex_long_double_fprintfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_vector_complex_long_double>,
                  ffi.Pointer<ffi.Int8>)>>(
      'gsl_vector_complex_long_double_fprintf');
  late final _gsl_vector_complex_long_double_fprintf =
      _gsl_vector_complex_long_double_fprintfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_complex_long_double_memcpy(
    ffi.Pointer<gsl_vector_complex_long_double> dest,
    ffi.Pointer<gsl_vector_complex_long_double> src,
  ) {
    return _gsl_vector_complex_long_double_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_complex_long_double_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_memcpy');
  late final _gsl_vector_complex_long_double_memcpy =
      _gsl_vector_complex_long_double_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_reverse(
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_reverse(
      v,
    );
  }

  late final _gsl_vector_complex_long_double_reversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_reverse');
  late final _gsl_vector_complex_long_double_reverse =
      _gsl_vector_complex_long_double_reversePtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_swap(
    ffi.Pointer<gsl_vector_complex_long_double> v,
    ffi.Pointer<gsl_vector_complex_long_double> w,
  ) {
    return _gsl_vector_complex_long_double_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_complex_long_double_swapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_swap');
  late final _gsl_vector_complex_long_double_swap =
      _gsl_vector_complex_long_double_swapPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_swap_elements(
    ffi.Pointer<gsl_vector_complex_long_double> v,
    int i,
    int j,
  ) {
    return _gsl_vector_complex_long_double_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_complex_long_double_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>,
              size_t, size_t)>>('gsl_vector_complex_long_double_swap_elements');
  late final _gsl_vector_complex_long_double_swap_elements =
      _gsl_vector_complex_long_double_swap_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector_complex_long_double>, int, int)>();

  int gsl_vector_complex_long_double_equal(
    ffi.Pointer<gsl_vector_complex_long_double> u,
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_complex_long_double_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_equal');
  late final _gsl_vector_complex_long_double_equal =
      _gsl_vector_complex_long_double_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_isnull(
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_isnull(
      v,
    );
  }

  late final _gsl_vector_complex_long_double_isnullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_isnull');
  late final _gsl_vector_complex_long_double_isnull =
      _gsl_vector_complex_long_double_isnullPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_ispos(
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_ispos(
      v,
    );
  }

  late final _gsl_vector_complex_long_double_isposPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_ispos');
  late final _gsl_vector_complex_long_double_ispos =
      _gsl_vector_complex_long_double_isposPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_isneg(
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_isneg(
      v,
    );
  }

  late final _gsl_vector_complex_long_double_isnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_isneg');
  late final _gsl_vector_complex_long_double_isneg =
      _gsl_vector_complex_long_double_isnegPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_isnonneg(
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_vector_complex_long_double_isnonneg(
      v,
    );
  }

  late final _gsl_vector_complex_long_double_isnonnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_isnonneg');
  late final _gsl_vector_complex_long_double_isnonneg =
      _gsl_vector_complex_long_double_isnonnegPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_add(
    ffi.Pointer<gsl_vector_complex_long_double> a,
    ffi.Pointer<gsl_vector_complex_long_double> b,
  ) {
    return _gsl_vector_complex_long_double_add(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_long_double_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_add');
  late final _gsl_vector_complex_long_double_add =
      _gsl_vector_complex_long_double_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_sub(
    ffi.Pointer<gsl_vector_complex_long_double> a,
    ffi.Pointer<gsl_vector_complex_long_double> b,
  ) {
    return _gsl_vector_complex_long_double_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_long_double_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_sub');
  late final _gsl_vector_complex_long_double_sub =
      _gsl_vector_complex_long_double_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_mul(
    ffi.Pointer<gsl_vector_complex_long_double> a,
    ffi.Pointer<gsl_vector_complex_long_double> b,
  ) {
    return _gsl_vector_complex_long_double_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_long_double_mulPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_mul');
  late final _gsl_vector_complex_long_double_mul =
      _gsl_vector_complex_long_double_mulPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_vector_complex_long_double_div(
    ffi.Pointer<gsl_vector_complex_long_double> a,
    ffi.Pointer<gsl_vector_complex_long_double> b,
  ) {
    return _gsl_vector_complex_long_double_div(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_long_double_divPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_vector_complex_long_double_div');
  late final _gsl_vector_complex_long_double_div =
      _gsl_vector_complex_long_double_divPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  ffi.Pointer<gsl_complex_long_double> gsl_vector_complex_long_double_ptr(
    ffi.Pointer<gsl_vector_complex_long_double> v,
    int i,
  ) {
    return _gsl_vector_complex_long_double_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_long_double_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_vector_complex_long_double>,
              size_t)>>('gsl_vector_complex_long_double_ptr');
  late final _gsl_vector_complex_long_double_ptr =
      _gsl_vector_complex_long_double_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_vector_complex_long_double>, int)>();

  ffi.Pointer<gsl_complex_long_double> gsl_vector_complex_long_double_const_ptr(
    ffi.Pointer<gsl_vector_complex_long_double> v,
    int i,
  ) {
    return _gsl_vector_complex_long_double_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_long_double_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_vector_complex_long_double>,
              size_t)>>('gsl_vector_complex_long_double_const_ptr');
  late final _gsl_vector_complex_long_double_const_ptr =
      _gsl_vector_complex_long_double_const_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_vector_complex_long_double>, int)>();

  ffi.Pointer<gsl_block> gsl_block_alloc(
    int n,
  ) {
    return _gsl_block_alloc(
      n,
    );
  }

  late final _gsl_block_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block> Function(size_t)>>(
          'gsl_block_alloc');
  late final _gsl_block_alloc =
      _gsl_block_allocPtr.asFunction<ffi.Pointer<gsl_block> Function(int)>();

  ffi.Pointer<gsl_block> gsl_block_calloc(
    int n,
  ) {
    return _gsl_block_calloc(
      n,
    );
  }

  late final _gsl_block_callocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block> Function(size_t)>>(
          'gsl_block_calloc');
  late final _gsl_block_calloc =
      _gsl_block_callocPtr.asFunction<ffi.Pointer<gsl_block> Function(int)>();

  void gsl_block_free(
    ffi.Pointer<gsl_block> b,
  ) {
    return _gsl_block_free(
      b,
    );
  }

  late final _gsl_block_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block>)>>(
          'gsl_block_free');
  late final _gsl_block_free =
      _gsl_block_freePtr.asFunction<void Function(ffi.Pointer<gsl_block>)>();

  int gsl_block_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block> b,
  ) {
    return _gsl_block_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block>)>>('gsl_block_fread');
  late final _gsl_block_fread = _gsl_block_freadPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block>)>();

  int gsl_block_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block> b,
  ) {
    return _gsl_block_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block>)>>('gsl_block_fwrite');
  late final _gsl_block_fwrite = _gsl_block_fwritePtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block>)>();

  int gsl_block_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block> b,
  ) {
    return _gsl_block_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_block>)>>('gsl_block_fscanf');
  late final _gsl_block_fscanf = _gsl_block_fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block>)>();

  int gsl_block_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_fprintf');
  late final _gsl_block_fprintf = _gsl_block_fprintfPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<gsl_block>, ffi.Pointer<ffi.Int8>)>();

  int gsl_block_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Double> b,
    int n,
    int stride,
  ) {
    return _gsl_block_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_block_raw_fread');
  late final _gsl_block_raw_fread = _gsl_block_raw_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_block_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Double> b,
    int n,
    int stride,
  ) {
    return _gsl_block_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_block_raw_fwrite');
  late final _gsl_block_raw_fwrite = _gsl_block_raw_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_block_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Double> b,
    int n,
    int stride,
  ) {
    return _gsl_block_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_block_raw_fscanf');
  late final _gsl_block_raw_fscanf = _gsl_block_raw_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_block_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Double> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_raw_fprintf');
  late final _gsl_block_raw_fprintf = _gsl_block_raw_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, int, int,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_block_size(
    ffi.Pointer<gsl_block> b,
  ) {
    return _gsl_block_size(
      b,
    );
  }

  late final _gsl_block_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block>)>>(
          'gsl_block_size');
  late final _gsl_block_size =
      _gsl_block_sizePtr.asFunction<int Function(ffi.Pointer<gsl_block>)>();

  ffi.Pointer<ffi.Double> gsl_block_data(
    ffi.Pointer<gsl_block> b,
  ) {
    return _gsl_block_data(
      b,
    );
  }

  late final _gsl_block_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<gsl_block>)>>('gsl_block_data');
  late final _gsl_block_data = _gsl_block_dataPtr
      .asFunction<ffi.Pointer<ffi.Double> Function(ffi.Pointer<gsl_block>)>();

  ffi.Pointer<gsl_vector> gsl_vector_alloc(
    int n,
  ) {
    return _gsl_vector_alloc(
      n,
    );
  }

  late final _gsl_vector_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_vector> Function(size_t)>>(
          'gsl_vector_alloc');
  late final _gsl_vector_alloc =
      _gsl_vector_allocPtr.asFunction<ffi.Pointer<gsl_vector> Function(int)>();

  ffi.Pointer<gsl_vector> gsl_vector_calloc(
    int n,
  ) {
    return _gsl_vector_calloc(
      n,
    );
  }

  late final _gsl_vector_callocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_vector> Function(size_t)>>(
          'gsl_vector_calloc');
  late final _gsl_vector_calloc =
      _gsl_vector_callocPtr.asFunction<ffi.Pointer<gsl_vector> Function(int)>();

  ffi.Pointer<gsl_vector> gsl_vector_alloc_from_block(
    ffi.Pointer<gsl_block> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector> Function(ffi.Pointer<gsl_block>, size_t,
              size_t, size_t)>>('gsl_vector_alloc_from_block');
  late final _gsl_vector_alloc_from_block =
      _gsl_vector_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_block>, int, int, int)>();

  ffi.Pointer<gsl_vector> gsl_vector_alloc_from_vector(
    ffi.Pointer<gsl_vector> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector> Function(ffi.Pointer<gsl_vector>, size_t,
              size_t, size_t)>>('gsl_vector_alloc_from_vector');
  late final _gsl_vector_alloc_from_vector =
      _gsl_vector_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_vector>, int, int, int)>();

  void gsl_vector_free(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_free(
      v,
    );
  }

  late final _gsl_vector_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_free');
  late final _gsl_vector_free =
      _gsl_vector_freePtr.asFunction<void Function(ffi.Pointer<gsl_vector>)>();

  _gsl_vector_view gsl_vector_view_array(
    ffi.Pointer<ffi.Double> v,
    int n,
  ) {
    return _gsl_vector_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(
              ffi.Pointer<ffi.Double>, size_t)>>('gsl_vector_view_array');
  late final _gsl_vector_view_array = _gsl_vector_view_arrayPtr
      .asFunction<_gsl_vector_view Function(ffi.Pointer<ffi.Double>, int)>();

  _gsl_vector_view gsl_vector_view_array_with_stride(
    ffi.Pointer<ffi.Double> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_vector_view_array_with_stride');
  late final _gsl_vector_view_array_with_stride =
      _gsl_vector_view_array_with_stridePtr.asFunction<
          _gsl_vector_view Function(ffi.Pointer<ffi.Double>, int, int)>();

  _gsl_vector_const_view gsl_vector_const_view_array(
    ffi.Pointer<ffi.Double> v,
    int n,
  ) {
    return _gsl_vector_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(
              ffi.Pointer<ffi.Double>, size_t)>>('gsl_vector_const_view_array');
  late final _gsl_vector_const_view_array =
      _gsl_vector_const_view_arrayPtr.asFunction<
          _gsl_vector_const_view Function(ffi.Pointer<ffi.Double>, int)>();

  _gsl_vector_const_view gsl_vector_const_view_array_with_stride(
    ffi.Pointer<ffi.Double> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_vector_const_view_array_with_stride');
  late final _gsl_vector_const_view_array_with_stride =
      _gsl_vector_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_const_view Function(ffi.Pointer<ffi.Double>, int, int)>();

  _gsl_vector_view gsl_vector_subvector(
    ffi.Pointer<gsl_vector> v,
    int i,
    int n,
  ) {
    return _gsl_vector_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(ffi.Pointer<gsl_vector>, size_t,
              size_t)>>('gsl_vector_subvector');
  late final _gsl_vector_subvector = _gsl_vector_subvectorPtr.asFunction<
      _gsl_vector_view Function(ffi.Pointer<gsl_vector>, int, int)>();

  _gsl_vector_view gsl_vector_subvector_with_stride(
    ffi.Pointer<gsl_vector> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(ffi.Pointer<gsl_vector>, size_t, size_t,
              size_t)>>('gsl_vector_subvector_with_stride');
  late final _gsl_vector_subvector_with_stride =
      _gsl_vector_subvector_with_stridePtr.asFunction<
          _gsl_vector_view Function(ffi.Pointer<gsl_vector>, int, int, int)>();

  _gsl_vector_const_view gsl_vector_const_subvector(
    ffi.Pointer<gsl_vector> v,
    int i,
    int n,
  ) {
    return _gsl_vector_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_vector>, size_t,
              size_t)>>('gsl_vector_const_subvector');
  late final _gsl_vector_const_subvector =
      _gsl_vector_const_subvectorPtr.asFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_vector>, int, int)>();

  _gsl_vector_const_view gsl_vector_const_subvector_with_stride(
    ffi.Pointer<gsl_vector> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_vector>, size_t,
              size_t, size_t)>>('gsl_vector_const_subvector_with_stride');
  late final _gsl_vector_const_subvector_with_stride =
      _gsl_vector_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_const_view Function(
              ffi.Pointer<gsl_vector>, int, int, int)>();

  void gsl_vector_set_zero(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_set_zero(
      v,
    );
  }

  late final _gsl_vector_set_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_set_zero');
  late final _gsl_vector_set_zero = _gsl_vector_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector>)>();

  void gsl_vector_set_all(
    ffi.Pointer<gsl_vector> v,
    double x,
  ) {
    return _gsl_vector_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector>, ffi.Double)>>('gsl_vector_set_all');
  late final _gsl_vector_set_all = _gsl_vector_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector>, double)>();

  int gsl_vector_set_basis(
    ffi.Pointer<gsl_vector> v,
    int i,
  ) {
    return _gsl_vector_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>, size_t)>>('gsl_vector_set_basis');
  late final _gsl_vector_set_basis = _gsl_vector_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>, int)>();

  int gsl_vector_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_vector>)>>('gsl_vector_fread');
  late final _gsl_vector_fread = _gsl_vector_freadPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_fwrite');
  late final _gsl_vector_fwrite = _gsl_vector_fwritePtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_fscanf');
  late final _gsl_vector_fscanf = _gsl_vector_fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_fprintf');
  late final _gsl_vector_fprintf = _gsl_vector_fprintfPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_memcpy(
    ffi.Pointer<gsl_vector> dest,
    ffi.Pointer<gsl_vector> src,
  ) {
    return _gsl_vector_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_memcpy');
  late final _gsl_vector_memcpy = _gsl_vector_memcpyPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_reverse(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_reverse(
      v,
    );
  }

  late final _gsl_vector_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_reverse');
  late final _gsl_vector_reverse = _gsl_vector_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>)>();

  int gsl_vector_swap(
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_vector> w,
  ) {
    return _gsl_vector_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_swap');
  late final _gsl_vector_swap = _gsl_vector_swapPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_swap_elements(
    ffi.Pointer<gsl_vector> v,
    int i,
    int j,
  ) {
    return _gsl_vector_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, size_t,
              size_t)>>('gsl_vector_swap_elements');
  late final _gsl_vector_swap_elements = _gsl_vector_swap_elementsPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>, int, int)>();

  double gsl_vector_max(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_max(
      v,
    );
  }

  late final _gsl_vector_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_max');
  late final _gsl_vector_max =
      _gsl_vector_maxPtr.asFunction<double Function(ffi.Pointer<gsl_vector>)>();

  double gsl_vector_min(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_min(
      v,
    );
  }

  late final _gsl_vector_minPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_min');
  late final _gsl_vector_min =
      _gsl_vector_minPtr.asFunction<double Function(ffi.Pointer<gsl_vector>)>();

  void gsl_vector_minmax(
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<ffi.Double> min_out,
    ffi.Pointer<ffi.Double> max_out,
  ) {
    return _gsl_vector_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_vector_minmax');
  late final _gsl_vector_minmax = _gsl_vector_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_vector_max_index(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_max_index(
      v,
    );
  }

  late final _gsl_vector_max_indexPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_max_index');
  late final _gsl_vector_max_index = _gsl_vector_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>)>();

  int gsl_vector_min_index(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_min_index(
      v,
    );
  }

  late final _gsl_vector_min_indexPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_min_index');
  late final _gsl_vector_min_index = _gsl_vector_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>)>();

  void gsl_vector_minmax_index(
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_minmax_index');
  late final _gsl_vector_minmax_index = _gsl_vector_minmax_indexPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_vector_add(
    ffi.Pointer<gsl_vector> a,
    ffi.Pointer<gsl_vector> b,
  ) {
    return _gsl_vector_add(
      a,
      b,
    );
  }

  late final _gsl_vector_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_add');
  late final _gsl_vector_add = _gsl_vector_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_sub(
    ffi.Pointer<gsl_vector> a,
    ffi.Pointer<gsl_vector> b,
  ) {
    return _gsl_vector_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_sub');
  late final _gsl_vector_sub = _gsl_vector_subPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_mul(
    ffi.Pointer<gsl_vector> a,
    ffi.Pointer<gsl_vector> b,
  ) {
    return _gsl_vector_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_mul');
  late final _gsl_vector_mul = _gsl_vector_mulPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_div(
    ffi.Pointer<gsl_vector> a,
    ffi.Pointer<gsl_vector> b,
  ) {
    return _gsl_vector_div(
      a,
      b,
    );
  }

  late final _gsl_vector_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_div');
  late final _gsl_vector_div = _gsl_vector_divPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_scale(
    ffi.Pointer<gsl_vector> a,
    double x,
  ) {
    return _gsl_vector_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>, ffi.Double)>>('gsl_vector_scale');
  late final _gsl_vector_scale = _gsl_vector_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>, double)>();

  int gsl_vector_add_constant(
    ffi.Pointer<gsl_vector> a,
    double x,
  ) {
    return _gsl_vector_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>, ffi.Double)>>('gsl_vector_add_constant');
  late final _gsl_vector_add_constant = _gsl_vector_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>, double)>();

  int gsl_vector_axpby(
    double alpha,
    ffi.Pointer<gsl_vector> x,
    double beta,
    ffi.Pointer<gsl_vector> y,
  ) {
    return _gsl_vector_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<gsl_vector>, ffi.Double,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_axpby');
  late final _gsl_vector_axpby = _gsl_vector_axpbyPtr.asFunction<
      int Function(
          double, ffi.Pointer<gsl_vector>, double, ffi.Pointer<gsl_vector>)>();

  double gsl_vector_sum(
    ffi.Pointer<gsl_vector> a,
  ) {
    return _gsl_vector_sum(
      a,
    );
  }

  late final _gsl_vector_sumPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_sum');
  late final _gsl_vector_sum =
      _gsl_vector_sumPtr.asFunction<double Function(ffi.Pointer<gsl_vector>)>();

  int gsl_vector_equal(
    ffi.Pointer<gsl_vector> u,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_vector_equal');
  late final _gsl_vector_equal = _gsl_vector_equalPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_vector_isnull(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_isnull(
      v,
    );
  }

  late final _gsl_vector_isnullPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_isnull');
  late final _gsl_vector_isnull =
      _gsl_vector_isnullPtr.asFunction<int Function(ffi.Pointer<gsl_vector>)>();

  int gsl_vector_ispos(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_ispos(
      v,
    );
  }

  late final _gsl_vector_isposPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_ispos');
  late final _gsl_vector_ispos =
      _gsl_vector_isposPtr.asFunction<int Function(ffi.Pointer<gsl_vector>)>();

  int gsl_vector_isneg(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_isneg(
      v,
    );
  }

  late final _gsl_vector_isnegPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_isneg');
  late final _gsl_vector_isneg =
      _gsl_vector_isnegPtr.asFunction<int Function(ffi.Pointer<gsl_vector>)>();

  int gsl_vector_isnonneg(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_vector_isnonneg(
      v,
    );
  }

  late final _gsl_vector_isnonnegPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_vector_isnonneg');
  late final _gsl_vector_isnonneg = _gsl_vector_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>)>();

  double gsl_vector_get(
    ffi.Pointer<gsl_vector> v,
    int i,
  ) {
    return _gsl_vector_get(
      v,
      i,
    );
  }

  late final _gsl_vector_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_vector>, size_t)>>('gsl_vector_get');
  late final _gsl_vector_get = _gsl_vector_getPtr
      .asFunction<double Function(ffi.Pointer<gsl_vector>, int)>();

  void gsl_vector_set(
    ffi.Pointer<gsl_vector> v,
    int i,
    double x,
  ) {
    return _gsl_vector_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector>, size_t, ffi.Double)>>('gsl_vector_set');
  late final _gsl_vector_set = _gsl_vector_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector>, int, double)>();

  ffi.Pointer<ffi.Double> gsl_vector_ptr(
    ffi.Pointer<gsl_vector> v,
    int i,
  ) {
    return _gsl_vector_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<gsl_vector>, size_t)>>('gsl_vector_ptr');
  late final _gsl_vector_ptr = _gsl_vector_ptrPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<gsl_vector>, int)>();

  ffi.Pointer<ffi.Double> gsl_vector_const_ptr(
    ffi.Pointer<gsl_vector> v,
    int i,
  ) {
    return _gsl_vector_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<gsl_vector>, size_t)>>('gsl_vector_const_ptr');
  late final _gsl_vector_const_ptr = _gsl_vector_const_ptrPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<gsl_vector>, int)>();

  ffi.Pointer<gsl_block_complex> gsl_block_complex_alloc(
    int n,
  ) {
    return _gsl_block_complex_alloc(
      n,
    );
  }

  late final _gsl_block_complex_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_complex> Function(size_t)>>(
      'gsl_block_complex_alloc');
  late final _gsl_block_complex_alloc = _gsl_block_complex_allocPtr
      .asFunction<ffi.Pointer<gsl_block_complex> Function(int)>();

  ffi.Pointer<gsl_block_complex> gsl_block_complex_calloc(
    int n,
  ) {
    return _gsl_block_complex_calloc(
      n,
    );
  }

  late final _gsl_block_complex_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_complex> Function(size_t)>>(
      'gsl_block_complex_calloc');
  late final _gsl_block_complex_calloc = _gsl_block_complex_callocPtr
      .asFunction<ffi.Pointer<gsl_block_complex> Function(int)>();

  void gsl_block_complex_free(
    ffi.Pointer<gsl_block_complex> b,
  ) {
    return _gsl_block_complex_free(
      b,
    );
  }

  late final _gsl_block_complex_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_block_complex>)>>('gsl_block_complex_free');
  late final _gsl_block_complex_free = _gsl_block_complex_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_complex>)>();

  int gsl_block_complex_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex> b,
  ) {
    return _gsl_block_complex_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_complex_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_complex>)>>('gsl_block_complex_fread');
  late final _gsl_block_complex_fread = _gsl_block_complex_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex>)>();

  int gsl_block_complex_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex> b,
  ) {
    return _gsl_block_complex_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_complex_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_complex>)>>('gsl_block_complex_fwrite');
  late final _gsl_block_complex_fwrite =
      _gsl_block_complex_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex>)>();

  int gsl_block_complex_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex> b,
  ) {
    return _gsl_block_complex_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_complex_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_complex>)>>('gsl_block_complex_fscanf');
  late final _gsl_block_complex_fscanf =
      _gsl_block_complex_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex>)>();

  int gsl_block_complex_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_complex> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_complex_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_complex_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_complex_fprintf');
  late final _gsl_block_complex_fprintf =
      _gsl_block_complex_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_complex>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_complex_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Double> b,
    int n,
    int stride,
  ) {
    return _gsl_block_complex_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_complex_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_block_complex_raw_fread');
  late final _gsl_block_complex_raw_fread =
      _gsl_block_complex_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_block_complex_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Double> b,
    int n,
    int stride,
  ) {
    return _gsl_block_complex_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_complex_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_block_complex_raw_fwrite');
  late final _gsl_block_complex_raw_fwrite =
      _gsl_block_complex_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_block_complex_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Double> b,
    int n,
    int stride,
  ) {
    return _gsl_block_complex_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_complex_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_block_complex_raw_fscanf');
  late final _gsl_block_complex_raw_fscanf =
      _gsl_block_complex_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_block_complex_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Double> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_complex_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_complex_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_complex_raw_fprintf');
  late final _gsl_block_complex_raw_fprintf =
      _gsl_block_complex_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_complex_size(
    ffi.Pointer<gsl_block_complex> b,
  ) {
    return _gsl_block_complex_size(
      b,
    );
  }

  late final _gsl_block_complex_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_complex>)>>(
      'gsl_block_complex_size');
  late final _gsl_block_complex_size = _gsl_block_complex_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_complex>)>();

  ffi.Pointer<ffi.Double> gsl_block_complex_data(
    ffi.Pointer<gsl_block_complex> b,
  ) {
    return _gsl_block_complex_data(
      b,
    );
  }

  late final _gsl_block_complex_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<gsl_block_complex>)>>('gsl_block_complex_data');
  late final _gsl_block_complex_data = _gsl_block_complex_dataPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<gsl_block_complex>)>();

  ffi.Pointer<gsl_vector_complex> gsl_vector_complex_alloc(
    int n,
  ) {
    return _gsl_vector_complex_alloc(
      n,
    );
  }

  late final _gsl_vector_complex_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_complex> Function(size_t)>>(
      'gsl_vector_complex_alloc');
  late final _gsl_vector_complex_alloc = _gsl_vector_complex_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_complex> Function(int)>();

  ffi.Pointer<gsl_vector_complex> gsl_vector_complex_calloc(
    int n,
  ) {
    return _gsl_vector_complex_calloc(
      n,
    );
  }

  late final _gsl_vector_complex_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_complex> Function(size_t)>>(
      'gsl_vector_complex_calloc');
  late final _gsl_vector_complex_calloc = _gsl_vector_complex_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_complex> Function(int)>();

  ffi.Pointer<gsl_vector_complex> gsl_vector_complex_alloc_from_block(
    ffi.Pointer<gsl_block_complex> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_complex_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_complex_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex> Function(
              ffi.Pointer<gsl_block_complex>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_alloc_from_block');
  late final _gsl_vector_complex_alloc_from_block =
      _gsl_vector_complex_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_complex> Function(
              ffi.Pointer<gsl_block_complex>, int, int, int)>();

  ffi.Pointer<gsl_vector_complex> gsl_vector_complex_alloc_from_vector(
    ffi.Pointer<gsl_vector_complex> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_complex_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_complex_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex> Function(
              ffi.Pointer<gsl_vector_complex>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_alloc_from_vector');
  late final _gsl_vector_complex_alloc_from_vector =
      _gsl_vector_complex_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_complex> Function(
              ffi.Pointer<gsl_vector_complex>, int, int, int)>();

  void gsl_vector_complex_free(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_free(
      v,
    );
  }

  late final _gsl_vector_complex_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_free');
  late final _gsl_vector_complex_free = _gsl_vector_complex_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_complex>)>();

  _gsl_vector_complex_view gsl_vector_complex_view_array(
    ffi.Pointer<ffi.Double> base,
    int n,
  ) {
    return _gsl_vector_complex_view_array(
      base,
      n,
    );
  }

  late final _gsl_vector_complex_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<ffi.Double>,
              size_t)>>('gsl_vector_complex_view_array');
  late final _gsl_vector_complex_view_array =
      _gsl_vector_complex_view_arrayPtr.asFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<ffi.Double>, int)>();

  _gsl_vector_complex_view gsl_vector_complex_view_array_with_stride(
    ffi.Pointer<ffi.Double> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_complex_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_complex_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_vector_complex_view_array_with_stride');
  late final _gsl_vector_complex_view_array_with_stride =
      _gsl_vector_complex_view_array_with_stridePtr.asFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<ffi.Double>, int, int)>();

  _gsl_vector_complex_const_view gsl_vector_complex_const_view_array(
    ffi.Pointer<ffi.Double> base,
    int n,
  ) {
    return _gsl_vector_complex_const_view_array(
      base,
      n,
    );
  }

  late final _gsl_vector_complex_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(ffi.Pointer<ffi.Double>,
              size_t)>>('gsl_vector_complex_const_view_array');
  late final _gsl_vector_complex_const_view_array =
      _gsl_vector_complex_const_view_arrayPtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<ffi.Double>, int)>();

  _gsl_vector_complex_const_view
      gsl_vector_complex_const_view_array_with_stride(
    ffi.Pointer<ffi.Double> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_complex_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_complex_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t)>>('gsl_vector_complex_const_view_array_with_stride');
  late final _gsl_vector_complex_const_view_array_with_stride =
      _gsl_vector_complex_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<ffi.Double>, int, int)>();

  _gsl_vector_complex_view gsl_vector_complex_subvector(
    ffi.Pointer<gsl_vector_complex> base,
    int i,
    int n,
  ) {
    return _gsl_vector_complex_subvector(
      base,
      i,
      n,
    );
  }

  late final _gsl_vector_complex_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<gsl_vector_complex>,
              size_t, size_t)>>('gsl_vector_complex_subvector');
  late final _gsl_vector_complex_subvector =
      _gsl_vector_complex_subvectorPtr.asFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<gsl_vector_complex>, int, int)>();

  _gsl_vector_complex_view gsl_vector_complex_subvector_with_stride(
    ffi.Pointer<gsl_vector_complex> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_complex_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_complex_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<gsl_vector_complex>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_subvector_with_stride');
  late final _gsl_vector_complex_subvector_with_stride =
      _gsl_vector_complex_subvector_with_stridePtr.asFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<gsl_vector_complex>, int, int, int)>();

  _gsl_vector_complex_const_view gsl_vector_complex_const_subvector(
    ffi.Pointer<gsl_vector_complex> base,
    int i,
    int n,
  ) {
    return _gsl_vector_complex_const_subvector(
      base,
      i,
      n,
    );
  }

  late final _gsl_vector_complex_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_vector_complex>,
              size_t,
              size_t)>>('gsl_vector_complex_const_subvector');
  late final _gsl_vector_complex_const_subvector =
      _gsl_vector_complex_const_subvectorPtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_vector_complex>, int, int)>();

  _gsl_vector_complex_const_view gsl_vector_complex_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_complex> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_complex_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_complex_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_vector_complex>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_const_subvector_with_stride');
  late final _gsl_vector_complex_const_subvector_with_stride =
      _gsl_vector_complex_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_vector_complex>, int, int, int)>();

  _gsl_vector_view gsl_vector_complex_real(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_real(
      v,
    );
  }

  late final _gsl_vector_complex_realPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_real');
  late final _gsl_vector_complex_real = _gsl_vector_complex_realPtr
      .asFunction<_gsl_vector_view Function(ffi.Pointer<gsl_vector_complex>)>();

  _gsl_vector_view gsl_vector_complex_imag(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_imag(
      v,
    );
  }

  late final _gsl_vector_complex_imagPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_imag');
  late final _gsl_vector_complex_imag = _gsl_vector_complex_imagPtr
      .asFunction<_gsl_vector_view Function(ffi.Pointer<gsl_vector_complex>)>();

  _gsl_vector_const_view gsl_vector_complex_const_real(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_const_real(
      v,
    );
  }

  late final _gsl_vector_complex_const_realPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_const_view Function(
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_vector_complex_const_real');
  late final _gsl_vector_complex_const_real =
      _gsl_vector_complex_const_realPtr.asFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_vector_complex>)>();

  _gsl_vector_const_view gsl_vector_complex_const_imag(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_const_imag(
      v,
    );
  }

  late final _gsl_vector_complex_const_imagPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_const_view Function(
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_vector_complex_const_imag');
  late final _gsl_vector_complex_const_imag =
      _gsl_vector_complex_const_imagPtr.asFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_vector_complex>)>();

  void gsl_vector_complex_set_zero(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_set_zero(
      v,
    );
  }

  late final _gsl_vector_complex_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_set_zero');
  late final _gsl_vector_complex_set_zero = _gsl_vector_complex_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_complex>)>();

  void gsl_vector_complex_set_all(
    ffi.Pointer<gsl_vector_complex> v,
    gsl_complex z,
  ) {
    return _gsl_vector_complex_set_all(
      v,
      z,
    );
  }

  late final _gsl_vector_complex_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_complex>,
              gsl_complex)>>('gsl_vector_complex_set_all');
  late final _gsl_vector_complex_set_all =
      _gsl_vector_complex_set_allPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_complex>, gsl_complex)>();

  int gsl_vector_complex_set_basis(
    ffi.Pointer<gsl_vector_complex> v,
    int i,
  ) {
    return _gsl_vector_complex_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              size_t)>>('gsl_vector_complex_set_basis');
  late final _gsl_vector_complex_set_basis = _gsl_vector_complex_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_complex>, int)>();

  int gsl_vector_complex_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_complex_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_fread');
  late final _gsl_vector_complex_fread =
      _gsl_vector_complex_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_complex_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_fwrite');
  late final _gsl_vector_complex_fwrite =
      _gsl_vector_complex_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_complex_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_fscanf');
  late final _gsl_vector_complex_fscanf =
      _gsl_vector_complex_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_complex_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_complex_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_complex_fprintf');
  late final _gsl_vector_complex_fprintf =
      _gsl_vector_complex_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_complex_memcpy(
    ffi.Pointer<gsl_vector_complex> dest,
    ffi.Pointer<gsl_vector_complex> src,
  ) {
    return _gsl_vector_complex_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_complex_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_memcpy');
  late final _gsl_vector_complex_memcpy =
      _gsl_vector_complex_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_reverse(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_reverse(
      v,
    );
  }

  late final _gsl_vector_complex_reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_reverse');
  late final _gsl_vector_complex_reverse = _gsl_vector_complex_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_swap(
    ffi.Pointer<gsl_vector_complex> v,
    ffi.Pointer<gsl_vector_complex> w,
  ) {
    return _gsl_vector_complex_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_complex_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_swap');
  late final _gsl_vector_complex_swap = _gsl_vector_complex_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_swap_elements(
    ffi.Pointer<gsl_vector_complex> v,
    int i,
    int j,
  ) {
    return _gsl_vector_complex_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_complex_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>, size_t,
              size_t)>>('gsl_vector_complex_swap_elements');
  late final _gsl_vector_complex_swap_elements =
      _gsl_vector_complex_swap_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex>, int, int)>();

  int gsl_vector_complex_equal(
    ffi.Pointer<gsl_vector_complex> u,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_complex_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_equal');
  late final _gsl_vector_complex_equal =
      _gsl_vector_complex_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_isnull(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_isnull(
      v,
    );
  }

  late final _gsl_vector_complex_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_isnull');
  late final _gsl_vector_complex_isnull = _gsl_vector_complex_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_ispos(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_ispos(
      v,
    );
  }

  late final _gsl_vector_complex_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_ispos');
  late final _gsl_vector_complex_ispos = _gsl_vector_complex_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_isneg(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_isneg(
      v,
    );
  }

  late final _gsl_vector_complex_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_isneg');
  late final _gsl_vector_complex_isneg = _gsl_vector_complex_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_isnonneg(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_vector_complex_isnonneg(
      v,
    );
  }

  late final _gsl_vector_complex_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_isnonneg');
  late final _gsl_vector_complex_isnonneg = _gsl_vector_complex_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_add(
    ffi.Pointer<gsl_vector_complex> a,
    ffi.Pointer<gsl_vector_complex> b,
  ) {
    return _gsl_vector_complex_add(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_add');
  late final _gsl_vector_complex_add = _gsl_vector_complex_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_sub(
    ffi.Pointer<gsl_vector_complex> a,
    ffi.Pointer<gsl_vector_complex> b,
  ) {
    return _gsl_vector_complex_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_sub');
  late final _gsl_vector_complex_sub = _gsl_vector_complex_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_mul(
    ffi.Pointer<gsl_vector_complex> a,
    ffi.Pointer<gsl_vector_complex> b,
  ) {
    return _gsl_vector_complex_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_mul');
  late final _gsl_vector_complex_mul = _gsl_vector_complex_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_div(
    ffi.Pointer<gsl_vector_complex> a,
    ffi.Pointer<gsl_vector_complex> b,
  ) {
    return _gsl_vector_complex_div(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_div');
  late final _gsl_vector_complex_div = _gsl_vector_complex_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_vector_complex_scale(
    ffi.Pointer<gsl_vector_complex> a,
    gsl_complex x,
  ) {
    return _gsl_vector_complex_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_complex_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              gsl_complex)>>('gsl_vector_complex_scale');
  late final _gsl_vector_complex_scale = _gsl_vector_complex_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_complex>, gsl_complex)>();

  int gsl_vector_complex_add_constant(
    ffi.Pointer<gsl_vector_complex> a,
    gsl_complex x,
  ) {
    return _gsl_vector_complex_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_complex_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              gsl_complex)>>('gsl_vector_complex_add_constant');
  late final _gsl_vector_complex_add_constant =
      _gsl_vector_complex_add_constantPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex>, gsl_complex)>();

  int gsl_vector_complex_axpby(
    gsl_complex alpha,
    ffi.Pointer<gsl_vector_complex> x,
    gsl_complex beta,
    ffi.Pointer<gsl_vector_complex> y,
  ) {
    return _gsl_vector_complex_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_complex_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gsl_complex,
              ffi.Pointer<gsl_vector_complex>,
              gsl_complex,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_vector_complex_axpby');
  late final _gsl_vector_complex_axpby =
      _gsl_vector_complex_axpbyPtr.asFunction<
          int Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
              gsl_complex, ffi.Pointer<gsl_vector_complex>)>();

  gsl_complex gsl_vector_complex_get(
    ffi.Pointer<gsl_vector_complex> v,
    int i,
  ) {
    return _gsl_vector_complex_get(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_getPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex Function(ffi.Pointer<gsl_vector_complex>,
              size_t)>>('gsl_vector_complex_get');
  late final _gsl_vector_complex_get = _gsl_vector_complex_getPtr
      .asFunction<gsl_complex Function(ffi.Pointer<gsl_vector_complex>, int)>();

  void gsl_vector_complex_set(
    ffi.Pointer<gsl_vector_complex> v,
    int i,
    gsl_complex z,
  ) {
    return _gsl_vector_complex_set(
      v,
      i,
      z,
    );
  }

  late final _gsl_vector_complex_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_complex>, size_t,
              gsl_complex)>>('gsl_vector_complex_set');
  late final _gsl_vector_complex_set = _gsl_vector_complex_setPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector_complex>, int, gsl_complex)>();

  ffi.Pointer<gsl_complex> gsl_vector_complex_ptr(
    ffi.Pointer<gsl_vector_complex> v,
    int i,
  ) {
    return _gsl_vector_complex_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex> Function(ffi.Pointer<gsl_vector_complex>,
              size_t)>>('gsl_vector_complex_ptr');
  late final _gsl_vector_complex_ptr = _gsl_vector_complex_ptrPtr.asFunction<
      ffi.Pointer<gsl_complex> Function(
          ffi.Pointer<gsl_vector_complex>, int)>();

  ffi.Pointer<gsl_complex> gsl_vector_complex_const_ptr(
    ffi.Pointer<gsl_vector_complex> v,
    int i,
  ) {
    return _gsl_vector_complex_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex> Function(ffi.Pointer<gsl_vector_complex>,
              size_t)>>('gsl_vector_complex_const_ptr');
  late final _gsl_vector_complex_const_ptr =
      _gsl_vector_complex_const_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex> Function(
              ffi.Pointer<gsl_vector_complex>, int)>();

  ffi.Pointer<gsl_block_float> gsl_block_float_alloc(
    int n,
  ) {
    return _gsl_block_float_alloc(
      n,
    );
  }

  late final _gsl_block_float_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_float> Function(size_t)>>(
      'gsl_block_float_alloc');
  late final _gsl_block_float_alloc = _gsl_block_float_allocPtr
      .asFunction<ffi.Pointer<gsl_block_float> Function(int)>();

  ffi.Pointer<gsl_block_float> gsl_block_float_calloc(
    int n,
  ) {
    return _gsl_block_float_calloc(
      n,
    );
  }

  late final _gsl_block_float_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_float> Function(size_t)>>(
      'gsl_block_float_calloc');
  late final _gsl_block_float_calloc = _gsl_block_float_callocPtr
      .asFunction<ffi.Pointer<gsl_block_float> Function(int)>();

  void gsl_block_float_free(
    ffi.Pointer<gsl_block_float> b,
  ) {
    return _gsl_block_float_free(
      b,
    );
  }

  late final _gsl_block_float_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block_float>)>>(
      'gsl_block_float_free');
  late final _gsl_block_float_free = _gsl_block_float_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_float>)>();

  int gsl_block_float_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_float> b,
  ) {
    return _gsl_block_float_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_float_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_float>)>>('gsl_block_float_fread');
  late final _gsl_block_float_fread = _gsl_block_float_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_float>)>();

  int gsl_block_float_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_float> b,
  ) {
    return _gsl_block_float_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_float_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_float>)>>('gsl_block_float_fwrite');
  late final _gsl_block_float_fwrite = _gsl_block_float_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_float>)>();

  int gsl_block_float_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_float> b,
  ) {
    return _gsl_block_float_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_float_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_float>)>>('gsl_block_float_fscanf');
  late final _gsl_block_float_fscanf = _gsl_block_float_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_float>)>();

  int gsl_block_float_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_float> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_float_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_float_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_float>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_float_fprintf');
  late final _gsl_block_float_fprintf = _gsl_block_float_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_float>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_block_float_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Float> b,
    int n,
    int stride,
  ) {
    return _gsl_block_float_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_float_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_block_float_raw_fread');
  late final _gsl_block_float_raw_fread =
      _gsl_block_float_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_block_float_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Float> b,
    int n,
    int stride,
  ) {
    return _gsl_block_float_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_float_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_block_float_raw_fwrite');
  late final _gsl_block_float_raw_fwrite =
      _gsl_block_float_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_block_float_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Float> b,
    int n,
    int stride,
  ) {
    return _gsl_block_float_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_float_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_block_float_raw_fscanf');
  late final _gsl_block_float_raw_fscanf =
      _gsl_block_float_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_block_float_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Float> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_float_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_float_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_float_raw_fprintf');
  late final _gsl_block_float_raw_fprintf =
      _gsl_block_float_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_float_size(
    ffi.Pointer<gsl_block_float> b,
  ) {
    return _gsl_block_float_size(
      b,
    );
  }

  late final _gsl_block_float_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_float>)>>(
      'gsl_block_float_size');
  late final _gsl_block_float_size = _gsl_block_float_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_float>)>();

  ffi.Pointer<ffi.Float> gsl_block_float_data(
    ffi.Pointer<gsl_block_float> b,
  ) {
    return _gsl_block_float_data(
      b,
    );
  }

  late final _gsl_block_float_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<gsl_block_float>)>>('gsl_block_float_data');
  late final _gsl_block_float_data = _gsl_block_float_dataPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<gsl_block_float>)>();

  ffi.Pointer<gsl_vector_float> gsl_vector_float_alloc(
    int n,
  ) {
    return _gsl_vector_float_alloc(
      n,
    );
  }

  late final _gsl_vector_float_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_float> Function(size_t)>>(
      'gsl_vector_float_alloc');
  late final _gsl_vector_float_alloc = _gsl_vector_float_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_float> Function(int)>();

  ffi.Pointer<gsl_vector_float> gsl_vector_float_calloc(
    int n,
  ) {
    return _gsl_vector_float_calloc(
      n,
    );
  }

  late final _gsl_vector_float_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_float> Function(size_t)>>(
      'gsl_vector_float_calloc');
  late final _gsl_vector_float_calloc = _gsl_vector_float_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_float> Function(int)>();

  ffi.Pointer<gsl_vector_float> gsl_vector_float_alloc_from_block(
    ffi.Pointer<gsl_block_float> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_float_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_float_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_float> Function(ffi.Pointer<gsl_block_float>,
              size_t, size_t, size_t)>>('gsl_vector_float_alloc_from_block');
  late final _gsl_vector_float_alloc_from_block =
      _gsl_vector_float_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_float> Function(
              ffi.Pointer<gsl_block_float>, int, int, int)>();

  ffi.Pointer<gsl_vector_float> gsl_vector_float_alloc_from_vector(
    ffi.Pointer<gsl_vector_float> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_float_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_float_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_float> Function(ffi.Pointer<gsl_vector_float>,
              size_t, size_t, size_t)>>('gsl_vector_float_alloc_from_vector');
  late final _gsl_vector_float_alloc_from_vector =
      _gsl_vector_float_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_float> Function(
              ffi.Pointer<gsl_vector_float>, int, int, int)>();

  void gsl_vector_float_free(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_free(
      v,
    );
  }

  late final _gsl_vector_float_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_float>)>>(
      'gsl_vector_float_free');
  late final _gsl_vector_float_free = _gsl_vector_float_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_float>)>();

  _gsl_vector_float_view gsl_vector_float_view_array(
    ffi.Pointer<ffi.Float> v,
    int n,
  ) {
    return _gsl_vector_float_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_float_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<ffi.Float>, size_t)>>('gsl_vector_float_view_array');
  late final _gsl_vector_float_view_array =
      _gsl_vector_float_view_arrayPtr.asFunction<
          _gsl_vector_float_view Function(ffi.Pointer<ffi.Float>, int)>();

  _gsl_vector_float_view gsl_vector_float_view_array_with_stride(
    ffi.Pointer<ffi.Float> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_float_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_float_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_vector_float_view_array_with_stride');
  late final _gsl_vector_float_view_array_with_stride =
      _gsl_vector_float_view_array_with_stridePtr.asFunction<
          _gsl_vector_float_view Function(ffi.Pointer<ffi.Float>, int, int)>();

  _gsl_vector_float_const_view gsl_vector_float_const_view_array(
    ffi.Pointer<ffi.Float> v,
    int n,
  ) {
    return _gsl_vector_float_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_float_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<ffi.Float>,
              size_t)>>('gsl_vector_float_const_view_array');
  late final _gsl_vector_float_const_view_array =
      _gsl_vector_float_const_view_arrayPtr.asFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<ffi.Float>, int)>();

  _gsl_vector_float_const_view gsl_vector_float_const_view_array_with_stride(
    ffi.Pointer<ffi.Float> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_float_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_float_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_vector_float_const_view_array_with_stride');
  late final _gsl_vector_float_const_view_array_with_stride =
      _gsl_vector_float_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<ffi.Float>, int, int)>();

  _gsl_vector_float_view gsl_vector_float_subvector(
    ffi.Pointer<gsl_vector_float> v,
    int i,
    int n,
  ) {
    return _gsl_vector_float_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_float_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(ffi.Pointer<gsl_vector_float>, size_t,
              size_t)>>('gsl_vector_float_subvector');
  late final _gsl_vector_float_subvector =
      _gsl_vector_float_subvectorPtr.asFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<gsl_vector_float>, int, int)>();

  _gsl_vector_float_view gsl_vector_float_subvector_with_stride(
    ffi.Pointer<gsl_vector_float> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_float_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_float_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(ffi.Pointer<gsl_vector_float>, size_t,
              size_t, size_t)>>('gsl_vector_float_subvector_with_stride');
  late final _gsl_vector_float_subvector_with_stride =
      _gsl_vector_float_subvector_with_stridePtr.asFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<gsl_vector_float>, int, int, int)>();

  _gsl_vector_float_const_view gsl_vector_float_const_subvector(
    ffi.Pointer<gsl_vector_float> v,
    int i,
    int n,
  ) {
    return _gsl_vector_float_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_float_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<gsl_vector_float>,
              size_t, size_t)>>('gsl_vector_float_const_subvector');
  late final _gsl_vector_float_const_subvector =
      _gsl_vector_float_const_subvectorPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_vector_float>, int, int)>();

  _gsl_vector_float_const_view gsl_vector_float_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_float> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_float_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_float_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_vector_float>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_float_const_subvector_with_stride');
  late final _gsl_vector_float_const_subvector_with_stride =
      _gsl_vector_float_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_vector_float>, int, int, int)>();

  void gsl_vector_float_set_zero(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_set_zero(
      v,
    );
  }

  late final _gsl_vector_float_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_float>)>>(
      'gsl_vector_float_set_zero');
  late final _gsl_vector_float_set_zero = _gsl_vector_float_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_float>)>();

  void gsl_vector_float_set_all(
    ffi.Pointer<gsl_vector_float> v,
    double x,
  ) {
    return _gsl_vector_float_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_float_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_float>,
              ffi.Float)>>('gsl_vector_float_set_all');
  late final _gsl_vector_float_set_all = _gsl_vector_float_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_float>, double)>();

  int gsl_vector_float_set_basis(
    ffi.Pointer<gsl_vector_float> v,
    int i,
  ) {
    return _gsl_vector_float_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_float_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              size_t)>>('gsl_vector_float_set_basis');
  late final _gsl_vector_float_set_basis = _gsl_vector_float_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>, int)>();

  int gsl_vector_float_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_float_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_fread');
  late final _gsl_vector_float_fread = _gsl_vector_float_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_float_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_fwrite');
  late final _gsl_vector_float_fwrite = _gsl_vector_float_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_float_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_fscanf');
  late final _gsl_vector_float_fscanf = _gsl_vector_float_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_float> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_float_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_float_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_float_fprintf');
  late final _gsl_vector_float_fprintf =
      _gsl_vector_float_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_float_memcpy(
    ffi.Pointer<gsl_vector_float> dest,
    ffi.Pointer<gsl_vector_float> src,
  ) {
    return _gsl_vector_float_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_float_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_memcpy');
  late final _gsl_vector_float_memcpy = _gsl_vector_float_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_reverse(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_reverse(
      v,
    );
  }

  late final _gsl_vector_float_reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_reverse');
  late final _gsl_vector_float_reverse = _gsl_vector_float_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_swap(
    ffi.Pointer<gsl_vector_float> v,
    ffi.Pointer<gsl_vector_float> w,
  ) {
    return _gsl_vector_float_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_float_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_swap');
  late final _gsl_vector_float_swap = _gsl_vector_float_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_swap_elements(
    ffi.Pointer<gsl_vector_float> v,
    int i,
    int j,
  ) {
    return _gsl_vector_float_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_float_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>, size_t,
              size_t)>>('gsl_vector_float_swap_elements');
  late final _gsl_vector_float_swap_elements =
      _gsl_vector_float_swap_elementsPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_float>, int, int)>();

  double gsl_vector_float_max(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_max(
      v,
    );
  }

  late final _gsl_vector_float_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_max');
  late final _gsl_vector_float_max = _gsl_vector_float_maxPtr
      .asFunction<double Function(ffi.Pointer<gsl_vector_float>)>();

  double gsl_vector_float_min(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_min(
      v,
    );
  }

  late final _gsl_vector_float_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_min');
  late final _gsl_vector_float_min = _gsl_vector_float_minPtr
      .asFunction<double Function(ffi.Pointer<gsl_vector_float>)>();

  void gsl_vector_float_minmax(
    ffi.Pointer<gsl_vector_float> v,
    ffi.Pointer<ffi.Float> min_out,
    ffi.Pointer<ffi.Float> max_out,
  ) {
    return _gsl_vector_float_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_float_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('gsl_vector_float_minmax');
  late final _gsl_vector_float_minmax = _gsl_vector_float_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector_float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>)>();

  int gsl_vector_float_max_index(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_max_index(
      v,
    );
  }

  late final _gsl_vector_float_max_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_float>)>>(
      'gsl_vector_float_max_index');
  late final _gsl_vector_float_max_index = _gsl_vector_float_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_min_index(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_min_index(
      v,
    );
  }

  late final _gsl_vector_float_min_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_float>)>>(
      'gsl_vector_float_min_index');
  late final _gsl_vector_float_min_index = _gsl_vector_float_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>)>();

  void gsl_vector_float_minmax_index(
    ffi.Pointer<gsl_vector_float> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_float_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_float_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_float>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_float_minmax_index');
  late final _gsl_vector_float_minmax_index =
      _gsl_vector_float_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_float>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_vector_float_add(
    ffi.Pointer<gsl_vector_float> a,
    ffi.Pointer<gsl_vector_float> b,
  ) {
    return _gsl_vector_float_add(
      a,
      b,
    );
  }

  late final _gsl_vector_float_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_add');
  late final _gsl_vector_float_add = _gsl_vector_float_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_sub(
    ffi.Pointer<gsl_vector_float> a,
    ffi.Pointer<gsl_vector_float> b,
  ) {
    return _gsl_vector_float_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_float_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_sub');
  late final _gsl_vector_float_sub = _gsl_vector_float_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_mul(
    ffi.Pointer<gsl_vector_float> a,
    ffi.Pointer<gsl_vector_float> b,
  ) {
    return _gsl_vector_float_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_float_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_mul');
  late final _gsl_vector_float_mul = _gsl_vector_float_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_div(
    ffi.Pointer<gsl_vector_float> a,
    ffi.Pointer<gsl_vector_float> b,
  ) {
    return _gsl_vector_float_div(
      a,
      b,
    );
  }

  late final _gsl_vector_float_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_div');
  late final _gsl_vector_float_div = _gsl_vector_float_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_scale(
    ffi.Pointer<gsl_vector_float> a,
    double x,
  ) {
    return _gsl_vector_float_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_float_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Float)>>('gsl_vector_float_scale');
  late final _gsl_vector_float_scale = _gsl_vector_float_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>, double)>();

  int gsl_vector_float_add_constant(
    ffi.Pointer<gsl_vector_float> a,
    double x,
  ) {
    return _gsl_vector_float_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_float_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Float)>>('gsl_vector_float_add_constant');
  late final _gsl_vector_float_add_constant = _gsl_vector_float_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>, double)>();

  int gsl_vector_float_axpby(
    double alpha,
    ffi.Pointer<gsl_vector_float> x,
    double beta,
    ffi.Pointer<gsl_vector_float> y,
  ) {
    return _gsl_vector_float_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_float_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Float,
              ffi.Pointer<gsl_vector_float>,
              ffi.Float,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_axpby');
  late final _gsl_vector_float_axpby = _gsl_vector_float_axpbyPtr.asFunction<
      int Function(double, ffi.Pointer<gsl_vector_float>, double,
          ffi.Pointer<gsl_vector_float>)>();

  double gsl_vector_float_sum(
    ffi.Pointer<gsl_vector_float> a,
  ) {
    return _gsl_vector_float_sum(
      a,
    );
  }

  late final _gsl_vector_float_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_sum');
  late final _gsl_vector_float_sum = _gsl_vector_float_sumPtr
      .asFunction<double Function(ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_equal(
    ffi.Pointer<gsl_vector_float> u,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_float_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_equal');
  late final _gsl_vector_float_equal = _gsl_vector_float_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_isnull(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_isnull(
      v,
    );
  }

  late final _gsl_vector_float_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_isnull');
  late final _gsl_vector_float_isnull = _gsl_vector_float_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_ispos(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_ispos(
      v,
    );
  }

  late final _gsl_vector_float_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_ispos');
  late final _gsl_vector_float_ispos = _gsl_vector_float_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_isneg(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_isneg(
      v,
    );
  }

  late final _gsl_vector_float_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_isneg');
  late final _gsl_vector_float_isneg = _gsl_vector_float_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>)>();

  int gsl_vector_float_isnonneg(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_vector_float_isnonneg(
      v,
    );
  }

  late final _gsl_vector_float_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>)>>('gsl_vector_float_isnonneg');
  late final _gsl_vector_float_isnonneg = _gsl_vector_float_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>)>();

  double gsl_vector_float_get(
    ffi.Pointer<gsl_vector_float> v,
    int i,
  ) {
    return _gsl_vector_float_get(
      v,
      i,
    );
  }

  late final _gsl_vector_float_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_vector_float>, size_t)>>('gsl_vector_float_get');
  late final _gsl_vector_float_get = _gsl_vector_float_getPtr
      .asFunction<double Function(ffi.Pointer<gsl_vector_float>, int)>();

  void gsl_vector_float_set(
    ffi.Pointer<gsl_vector_float> v,
    int i,
    double x,
  ) {
    return _gsl_vector_float_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_float_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_float>, size_t,
              ffi.Float)>>('gsl_vector_float_set');
  late final _gsl_vector_float_set = _gsl_vector_float_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_float>, int, double)>();

  ffi.Pointer<ffi.Float> gsl_vector_float_ptr(
    ffi.Pointer<gsl_vector_float> v,
    int i,
  ) {
    return _gsl_vector_float_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_float_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<gsl_vector_float>, size_t)>>('gsl_vector_float_ptr');
  late final _gsl_vector_float_ptr = _gsl_vector_float_ptrPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<gsl_vector_float>, int)>();

  ffi.Pointer<ffi.Float> gsl_vector_float_const_ptr(
    ffi.Pointer<gsl_vector_float> v,
    int i,
  ) {
    return _gsl_vector_float_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_float_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<gsl_vector_float>,
              size_t)>>('gsl_vector_float_const_ptr');
  late final _gsl_vector_float_const_ptr =
      _gsl_vector_float_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<gsl_vector_float>, int)>();

  ffi.Pointer<gsl_vector_complex_float> gsl_vector_complex_float_alloc(
    int n,
  ) {
    return _gsl_vector_complex_float_alloc(
      n,
    );
  }

  late final _gsl_vector_complex_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              size_t)>>('gsl_vector_complex_float_alloc');
  late final _gsl_vector_complex_float_alloc =
      _gsl_vector_complex_float_allocPtr
          .asFunction<ffi.Pointer<gsl_vector_complex_float> Function(int)>();

  ffi.Pointer<gsl_vector_complex_float> gsl_vector_complex_float_calloc(
    int n,
  ) {
    return _gsl_vector_complex_float_calloc(
      n,
    );
  }

  late final _gsl_vector_complex_float_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              size_t)>>('gsl_vector_complex_float_calloc');
  late final _gsl_vector_complex_float_calloc =
      _gsl_vector_complex_float_callocPtr
          .asFunction<ffi.Pointer<gsl_vector_complex_float> Function(int)>();

  ffi.Pointer<gsl_vector_complex_float>
      gsl_vector_complex_float_alloc_from_block(
    ffi.Pointer<gsl_block_complex_float1> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_complex_float_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_complex_float_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              ffi.Pointer<gsl_block_complex_float1>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_float_alloc_from_block');
  late final _gsl_vector_complex_float_alloc_from_block =
      _gsl_vector_complex_float_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              ffi.Pointer<gsl_block_complex_float1>, int, int, int)>();

  ffi.Pointer<gsl_vector_complex_float>
      gsl_vector_complex_float_alloc_from_vector(
    ffi.Pointer<gsl_vector_complex_float> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_complex_float_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_complex_float_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_float_alloc_from_vector');
  late final _gsl_vector_complex_float_alloc_from_vector =
      _gsl_vector_complex_float_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              ffi.Pointer<gsl_vector_complex_float>, int, int, int)>();

  void gsl_vector_complex_float_free(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_free(
      v,
    );
  }

  late final _gsl_vector_complex_float_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_free');
  late final _gsl_vector_complex_float_free = _gsl_vector_complex_float_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_complex_float>)>();

  _gsl_vector_complex_float_view gsl_vector_complex_float_view_array(
    ffi.Pointer<ffi.Float> base,
    int n,
  ) {
    return _gsl_vector_complex_float_view_array(
      base,
      n,
    );
  }

  late final _gsl_vector_complex_float_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(ffi.Pointer<ffi.Float>,
              size_t)>>('gsl_vector_complex_float_view_array');
  late final _gsl_vector_complex_float_view_array =
      _gsl_vector_complex_float_view_arrayPtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<ffi.Float>, int)>();

  _gsl_vector_complex_float_view
      gsl_vector_complex_float_view_array_with_stride(
    ffi.Pointer<ffi.Float> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_complex_float_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_complex_float_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_vector_complex_float_view_array_with_stride');
  late final _gsl_vector_complex_float_view_array_with_stride =
      _gsl_vector_complex_float_view_array_with_stridePtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<ffi.Float>, int, int)>();

  _gsl_vector_complex_float_const_view
      gsl_vector_complex_float_const_view_array(
    ffi.Pointer<ffi.Float> base,
    int n,
  ) {
    return _gsl_vector_complex_float_const_view_array(
      base,
      n,
    );
  }

  late final _gsl_vector_complex_float_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_const_view Function(ffi.Pointer<ffi.Float>,
              size_t)>>('gsl_vector_complex_float_const_view_array');
  late final _gsl_vector_complex_float_const_view_array =
      _gsl_vector_complex_float_const_view_arrayPtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<ffi.Float>, int)>();

  _gsl_vector_complex_float_const_view
      gsl_vector_complex_float_const_view_array_with_stride(
    ffi.Pointer<ffi.Float> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_complex_float_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_complex_float_const_view_array_with_stridePtr =
      _lookup<
              ffi.NativeFunction<
                  _gsl_vector_complex_float_const_view Function(
                      ffi.Pointer<ffi.Float>, size_t, size_t)>>(
          'gsl_vector_complex_float_const_view_array_with_stride');
  late final _gsl_vector_complex_float_const_view_array_with_stride =
      _gsl_vector_complex_float_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<ffi.Float>, int, int)>();

  _gsl_vector_complex_float_view gsl_vector_complex_float_subvector(
    ffi.Pointer<gsl_vector_complex_float> base,
    int i,
    int n,
  ) {
    return _gsl_vector_complex_float_subvector(
      base,
      i,
      n,
    );
  }

  late final _gsl_vector_complex_float_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t,
              size_t)>>('gsl_vector_complex_float_subvector');
  late final _gsl_vector_complex_float_subvector =
      _gsl_vector_complex_float_subvectorPtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>, int, int)>();

  _gsl_vector_complex_float_view gsl_vector_complex_float_subvector_with_stride(
    ffi.Pointer<gsl_vector_complex_float> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_complex_float_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_complex_float_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_float_subvector_with_stride');
  late final _gsl_vector_complex_float_subvector_with_stride =
      _gsl_vector_complex_float_subvector_with_stridePtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>, int, int, int)>();

  _gsl_vector_complex_float_const_view gsl_vector_complex_float_const_subvector(
    ffi.Pointer<gsl_vector_complex_float> base,
    int i,
    int n,
  ) {
    return _gsl_vector_complex_float_const_subvector(
      base,
      i,
      n,
    );
  }

  late final _gsl_vector_complex_float_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t,
              size_t)>>('gsl_vector_complex_float_const_subvector');
  late final _gsl_vector_complex_float_const_subvector =
      _gsl_vector_complex_float_const_subvectorPtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>, int, int)>();

  _gsl_vector_complex_float_const_view
      gsl_vector_complex_float_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_complex_float> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_complex_float_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_complex_float_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_complex_float_const_subvector_with_stride');
  late final _gsl_vector_complex_float_const_subvector_with_stride =
      _gsl_vector_complex_float_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>, int, int, int)>();

  _gsl_vector_float_view gsl_vector_complex_float_real(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_real(
      v,
    );
  }

  late final _gsl_vector_complex_float_realPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_float_view Function(
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_real');
  late final _gsl_vector_complex_float_real =
      _gsl_vector_complex_float_realPtr.asFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>)>();

  _gsl_vector_float_view gsl_vector_complex_float_imag(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_imag(
      v,
    );
  }

  late final _gsl_vector_complex_float_imagPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_float_view Function(
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_imag');
  late final _gsl_vector_complex_float_imag =
      _gsl_vector_complex_float_imagPtr.asFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>)>();

  _gsl_vector_float_const_view gsl_vector_complex_float_const_real(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_const_real(
      v,
    );
  }

  late final _gsl_vector_complex_float_const_realPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_float_const_view Function(
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_const_real');
  late final _gsl_vector_complex_float_const_real =
      _gsl_vector_complex_float_const_realPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>)>();

  _gsl_vector_float_const_view gsl_vector_complex_float_const_imag(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_const_imag(
      v,
    );
  }

  late final _gsl_vector_complex_float_const_imagPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_float_const_view Function(
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_const_imag');
  late final _gsl_vector_complex_float_const_imag =
      _gsl_vector_complex_float_const_imagPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>)>();

  void gsl_vector_complex_float_set_zero(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_set_zero(
      v,
    );
  }

  late final _gsl_vector_complex_float_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_set_zero');
  late final _gsl_vector_complex_float_set_zero =
      _gsl_vector_complex_float_set_zeroPtr
          .asFunction<void Function(ffi.Pointer<gsl_vector_complex_float>)>();

  void gsl_vector_complex_float_set_all(
    ffi.Pointer<gsl_vector_complex_float> v,
    gsl_complex_float z,
  ) {
    return _gsl_vector_complex_float_set_all(
      v,
      z,
    );
  }

  late final _gsl_vector_complex_float_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_complex_float>,
              gsl_complex_float)>>('gsl_vector_complex_float_set_all');
  late final _gsl_vector_complex_float_set_all =
      _gsl_vector_complex_float_set_allPtr.asFunction<
          void Function(
              ffi.Pointer<gsl_vector_complex_float>, gsl_complex_float)>();

  int gsl_vector_complex_float_set_basis(
    ffi.Pointer<gsl_vector_complex_float> v,
    int i,
  ) {
    return _gsl_vector_complex_float_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_float_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
              size_t)>>('gsl_vector_complex_float_set_basis');
  late final _gsl_vector_complex_float_set_basis =
      _gsl_vector_complex_float_set_basisPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>, int)>();

  int gsl_vector_complex_float_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_complex_float_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_fread');
  late final _gsl_vector_complex_float_fread =
      _gsl_vector_complex_float_freadPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_complex_float_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_fwrite');
  late final _gsl_vector_complex_float_fwrite =
      _gsl_vector_complex_float_fwritePtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_complex_float_fscanfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_fscanf');
  late final _gsl_vector_complex_float_fscanf =
      _gsl_vector_complex_float_fscanfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_complex_float> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_complex_float_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_complex_float_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_complex_float_fprintf');
  late final _gsl_vector_complex_float_fprintf =
      _gsl_vector_complex_float_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_complex_float_memcpy(
    ffi.Pointer<gsl_vector_complex_float> dest,
    ffi.Pointer<gsl_vector_complex_float> src,
  ) {
    return _gsl_vector_complex_float_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_complex_float_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_memcpy');
  late final _gsl_vector_complex_float_memcpy =
      _gsl_vector_complex_float_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_reverse(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_reverse(
      v,
    );
  }

  late final _gsl_vector_complex_float_reversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_reverse');
  late final _gsl_vector_complex_float_reverse =
      _gsl_vector_complex_float_reversePtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_swap(
    ffi.Pointer<gsl_vector_complex_float> v,
    ffi.Pointer<gsl_vector_complex_float> w,
  ) {
    return _gsl_vector_complex_float_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_complex_float_swapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_swap');
  late final _gsl_vector_complex_float_swap =
      _gsl_vector_complex_float_swapPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_swap_elements(
    ffi.Pointer<gsl_vector_complex_float> v,
    int i,
    int j,
  ) {
    return _gsl_vector_complex_float_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_complex_float_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>, size_t,
              size_t)>>('gsl_vector_complex_float_swap_elements');
  late final _gsl_vector_complex_float_swap_elements =
      _gsl_vector_complex_float_swap_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>, int, int)>();

  int gsl_vector_complex_float_equal(
    ffi.Pointer<gsl_vector_complex_float> u,
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_complex_float_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_equal');
  late final _gsl_vector_complex_float_equal =
      _gsl_vector_complex_float_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_isnull(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_isnull(
      v,
    );
  }

  late final _gsl_vector_complex_float_isnullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_isnull');
  late final _gsl_vector_complex_float_isnull =
      _gsl_vector_complex_float_isnullPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_ispos(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_ispos(
      v,
    );
  }

  late final _gsl_vector_complex_float_isposPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_ispos');
  late final _gsl_vector_complex_float_ispos =
      _gsl_vector_complex_float_isposPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_isneg(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_isneg(
      v,
    );
  }

  late final _gsl_vector_complex_float_isnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_isneg');
  late final _gsl_vector_complex_float_isneg =
      _gsl_vector_complex_float_isnegPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_isnonneg(
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_vector_complex_float_isnonneg(
      v,
    );
  }

  late final _gsl_vector_complex_float_isnonnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_isnonneg');
  late final _gsl_vector_complex_float_isnonneg =
      _gsl_vector_complex_float_isnonnegPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_add(
    ffi.Pointer<gsl_vector_complex_float> a,
    ffi.Pointer<gsl_vector_complex_float> b,
  ) {
    return _gsl_vector_complex_float_add(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_float_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_add');
  late final _gsl_vector_complex_float_add =
      _gsl_vector_complex_float_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_sub(
    ffi.Pointer<gsl_vector_complex_float> a,
    ffi.Pointer<gsl_vector_complex_float> b,
  ) {
    return _gsl_vector_complex_float_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_float_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_sub');
  late final _gsl_vector_complex_float_sub =
      _gsl_vector_complex_float_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_mul(
    ffi.Pointer<gsl_vector_complex_float> a,
    ffi.Pointer<gsl_vector_complex_float> b,
  ) {
    return _gsl_vector_complex_float_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_float_mulPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_mul');
  late final _gsl_vector_complex_float_mul =
      _gsl_vector_complex_float_mulPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_div(
    ffi.Pointer<gsl_vector_complex_float> a,
    ffi.Pointer<gsl_vector_complex_float> b,
  ) {
    return _gsl_vector_complex_float_div(
      a,
      b,
    );
  }

  late final _gsl_vector_complex_float_divPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_div');
  late final _gsl_vector_complex_float_div =
      _gsl_vector_complex_float_divPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_vector_complex_float_scale(
    ffi.Pointer<gsl_vector_complex_float> a,
    gsl_complex_float x,
  ) {
    return _gsl_vector_complex_float_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_complex_float_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
              gsl_complex_float)>>('gsl_vector_complex_float_scale');
  late final _gsl_vector_complex_float_scale =
      _gsl_vector_complex_float_scalePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector_complex_float>, gsl_complex_float)>();

  int gsl_vector_complex_float_add_constant(
    ffi.Pointer<gsl_vector_complex_float> a,
    gsl_complex_float x,
  ) {
    return _gsl_vector_complex_float_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_complex_float_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
              gsl_complex_float)>>('gsl_vector_complex_float_add_constant');
  late final _gsl_vector_complex_float_add_constant =
      _gsl_vector_complex_float_add_constantPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector_complex_float>, gsl_complex_float)>();

  int gsl_vector_complex_float_axpby(
    gsl_complex_float alpha,
    ffi.Pointer<gsl_vector_complex_float> x,
    gsl_complex_float beta,
    ffi.Pointer<gsl_vector_complex_float> y,
  ) {
    return _gsl_vector_complex_float_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_complex_float_axpbyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  gsl_complex_float,
                  ffi.Pointer<gsl_vector_complex_float>,
                  gsl_complex_float,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_vector_complex_float_axpby');
  late final _gsl_vector_complex_float_axpby =
      _gsl_vector_complex_float_axpbyPtr.asFunction<
          int Function(gsl_complex_float, ffi.Pointer<gsl_vector_complex_float>,
              gsl_complex_float, ffi.Pointer<gsl_vector_complex_float>)>();

  gsl_complex_float gsl_vector_complex_float_get(
    ffi.Pointer<gsl_vector_complex_float> v,
    int i,
  ) {
    return _gsl_vector_complex_float_get(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_float_getPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex_float Function(ffi.Pointer<gsl_vector_complex_float>,
              size_t)>>('gsl_vector_complex_float_get');
  late final _gsl_vector_complex_float_get =
      _gsl_vector_complex_float_getPtr.asFunction<
          gsl_complex_float Function(
              ffi.Pointer<gsl_vector_complex_float>, int)>();

  void gsl_vector_complex_float_set(
    ffi.Pointer<gsl_vector_complex_float> v,
    int i,
    gsl_complex_float z,
  ) {
    return _gsl_vector_complex_float_set(
      v,
      i,
      z,
    );
  }

  late final _gsl_vector_complex_float_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_complex_float>, size_t,
              gsl_complex_float)>>('gsl_vector_complex_float_set');
  late final _gsl_vector_complex_float_set =
      _gsl_vector_complex_float_setPtr.asFunction<
          void Function(
              ffi.Pointer<gsl_vector_complex_float>, int, gsl_complex_float)>();

  ffi.Pointer<gsl_complex_float> gsl_vector_complex_float_ptr(
    ffi.Pointer<gsl_vector_complex_float> v,
    int i,
  ) {
    return _gsl_vector_complex_float_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_float_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t)>>('gsl_vector_complex_float_ptr');
  late final _gsl_vector_complex_float_ptr =
      _gsl_vector_complex_float_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_vector_complex_float>, int)>();

  ffi.Pointer<gsl_complex_float> gsl_vector_complex_float_const_ptr(
    ffi.Pointer<gsl_vector_complex_float> v,
    int i,
  ) {
    return _gsl_vector_complex_float_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_complex_float_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t)>>('gsl_vector_complex_float_const_ptr');
  late final _gsl_vector_complex_float_const_ptr =
      _gsl_vector_complex_float_const_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_vector_complex_float>, int)>();

  ffi.Pointer<gsl_block_ulong> gsl_block_ulong_alloc(
    int n,
  ) {
    return _gsl_block_ulong_alloc(
      n,
    );
  }

  late final _gsl_block_ulong_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_ulong> Function(size_t)>>(
      'gsl_block_ulong_alloc');
  late final _gsl_block_ulong_alloc = _gsl_block_ulong_allocPtr
      .asFunction<ffi.Pointer<gsl_block_ulong> Function(int)>();

  ffi.Pointer<gsl_block_ulong> gsl_block_ulong_calloc(
    int n,
  ) {
    return _gsl_block_ulong_calloc(
      n,
    );
  }

  late final _gsl_block_ulong_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_ulong> Function(size_t)>>(
      'gsl_block_ulong_calloc');
  late final _gsl_block_ulong_calloc = _gsl_block_ulong_callocPtr
      .asFunction<ffi.Pointer<gsl_block_ulong> Function(int)>();

  void gsl_block_ulong_free(
    ffi.Pointer<gsl_block_ulong> b,
  ) {
    return _gsl_block_ulong_free(
      b,
    );
  }

  late final _gsl_block_ulong_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block_ulong>)>>(
      'gsl_block_ulong_free');
  late final _gsl_block_ulong_free = _gsl_block_ulong_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_ulong>)>();

  int gsl_block_ulong_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_ulong> b,
  ) {
    return _gsl_block_ulong_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_ulong_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_ulong>)>>('gsl_block_ulong_fread');
  late final _gsl_block_ulong_fread = _gsl_block_ulong_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ulong>)>();

  int gsl_block_ulong_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_ulong> b,
  ) {
    return _gsl_block_ulong_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_ulong_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_ulong>)>>('gsl_block_ulong_fwrite');
  late final _gsl_block_ulong_fwrite = _gsl_block_ulong_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ulong>)>();

  int gsl_block_ulong_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_ulong> b,
  ) {
    return _gsl_block_ulong_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_ulong_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_ulong>)>>('gsl_block_ulong_fscanf');
  late final _gsl_block_ulong_fscanf = _gsl_block_ulong_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ulong>)>();

  int gsl_block_ulong_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_ulong> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_ulong_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_ulong_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ulong>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_ulong_fprintf');
  late final _gsl_block_ulong_fprintf = _gsl_block_ulong_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ulong>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_block_ulong_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint64> b,
    int n,
    int stride,
  ) {
    return _gsl_block_ulong_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_ulong_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_block_ulong_raw_fread');
  late final _gsl_block_ulong_raw_fread =
      _gsl_block_ulong_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_block_ulong_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint64> b,
    int n,
    int stride,
  ) {
    return _gsl_block_ulong_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_ulong_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_block_ulong_raw_fwrite');
  late final _gsl_block_ulong_raw_fwrite =
      _gsl_block_ulong_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_block_ulong_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint64> b,
    int n,
    int stride,
  ) {
    return _gsl_block_ulong_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_ulong_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_block_ulong_raw_fscanf');
  late final _gsl_block_ulong_raw_fscanf =
      _gsl_block_ulong_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_block_ulong_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint64> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_ulong_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_ulong_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint64>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_ulong_raw_fprintf');
  late final _gsl_block_ulong_raw_fprintf =
      _gsl_block_ulong_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint64>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_ulong_size(
    ffi.Pointer<gsl_block_ulong> b,
  ) {
    return _gsl_block_ulong_size(
      b,
    );
  }

  late final _gsl_block_ulong_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_ulong>)>>(
      'gsl_block_ulong_size');
  late final _gsl_block_ulong_size = _gsl_block_ulong_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_ulong>)>();

  ffi.Pointer<ffi.Uint64> gsl_block_ulong_data(
    ffi.Pointer<gsl_block_ulong> b,
  ) {
    return _gsl_block_ulong_data(
      b,
    );
  }

  late final _gsl_block_ulong_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint64> Function(
              ffi.Pointer<gsl_block_ulong>)>>('gsl_block_ulong_data');
  late final _gsl_block_ulong_data = _gsl_block_ulong_dataPtr.asFunction<
      ffi.Pointer<ffi.Uint64> Function(ffi.Pointer<gsl_block_ulong>)>();

  ffi.Pointer<gsl_vector_ulong> gsl_vector_ulong_alloc(
    int n,
  ) {
    return _gsl_vector_ulong_alloc(
      n,
    );
  }

  late final _gsl_vector_ulong_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_ulong> Function(size_t)>>(
      'gsl_vector_ulong_alloc');
  late final _gsl_vector_ulong_alloc = _gsl_vector_ulong_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_ulong> Function(int)>();

  ffi.Pointer<gsl_vector_ulong> gsl_vector_ulong_calloc(
    int n,
  ) {
    return _gsl_vector_ulong_calloc(
      n,
    );
  }

  late final _gsl_vector_ulong_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_ulong> Function(size_t)>>(
      'gsl_vector_ulong_calloc');
  late final _gsl_vector_ulong_calloc = _gsl_vector_ulong_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_ulong> Function(int)>();

  ffi.Pointer<gsl_vector_ulong> gsl_vector_ulong_alloc_from_block(
    ffi.Pointer<gsl_block_ulong> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_ulong_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_ulong_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_ulong> Function(ffi.Pointer<gsl_block_ulong>,
              size_t, size_t, size_t)>>('gsl_vector_ulong_alloc_from_block');
  late final _gsl_vector_ulong_alloc_from_block =
      _gsl_vector_ulong_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_ulong> Function(
              ffi.Pointer<gsl_block_ulong>, int, int, int)>();

  ffi.Pointer<gsl_vector_ulong> gsl_vector_ulong_alloc_from_vector(
    ffi.Pointer<gsl_vector_ulong> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_ulong_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_ulong_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_ulong> Function(ffi.Pointer<gsl_vector_ulong>,
              size_t, size_t, size_t)>>('gsl_vector_ulong_alloc_from_vector');
  late final _gsl_vector_ulong_alloc_from_vector =
      _gsl_vector_ulong_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_ulong> Function(
              ffi.Pointer<gsl_vector_ulong>, int, int, int)>();

  void gsl_vector_ulong_free(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_free(
      v,
    );
  }

  late final _gsl_vector_ulong_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_vector_ulong_free');
  late final _gsl_vector_ulong_free = _gsl_vector_ulong_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ulong>)>();

  _gsl_vector_ulong_view gsl_vector_ulong_view_array(
    ffi.Pointer<ffi.Uint64> v,
    int n,
  ) {
    return _gsl_vector_ulong_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_ulong_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(
              ffi.Pointer<ffi.Uint64>, size_t)>>('gsl_vector_ulong_view_array');
  late final _gsl_vector_ulong_view_array =
      _gsl_vector_ulong_view_arrayPtr.asFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<ffi.Uint64>, int)>();

  _gsl_vector_ulong_view gsl_vector_ulong_view_array_with_stride(
    ffi.Pointer<ffi.Uint64> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_ulong_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_ulong_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_vector_ulong_view_array_with_stride');
  late final _gsl_vector_ulong_view_array_with_stride =
      _gsl_vector_ulong_view_array_with_stridePtr.asFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  _gsl_vector_ulong_const_view gsl_vector_ulong_const_view_array(
    ffi.Pointer<ffi.Uint64> v,
    int n,
  ) {
    return _gsl_vector_ulong_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_ulong_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(ffi.Pointer<ffi.Uint64>,
              size_t)>>('gsl_vector_ulong_const_view_array');
  late final _gsl_vector_ulong_const_view_array =
      _gsl_vector_ulong_const_view_arrayPtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<ffi.Uint64>, int)>();

  _gsl_vector_ulong_const_view gsl_vector_ulong_const_view_array_with_stride(
    ffi.Pointer<ffi.Uint64> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_ulong_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_ulong_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_vector_ulong_const_view_array_with_stride');
  late final _gsl_vector_ulong_const_view_array_with_stride =
      _gsl_vector_ulong_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<ffi.Uint64>, int, int)>();

  _gsl_vector_ulong_view gsl_vector_ulong_subvector(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
    int n,
  ) {
    return _gsl_vector_ulong_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_ulong_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<gsl_vector_ulong>, size_t,
              size_t)>>('gsl_vector_ulong_subvector');
  late final _gsl_vector_ulong_subvector =
      _gsl_vector_ulong_subvectorPtr.asFunction<
          _gsl_vector_ulong_view Function(
              ffi.Pointer<gsl_vector_ulong>, int, int)>();

  _gsl_vector_ulong_view gsl_vector_ulong_subvector_with_stride(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_ulong_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_ulong_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<gsl_vector_ulong>, size_t,
              size_t, size_t)>>('gsl_vector_ulong_subvector_with_stride');
  late final _gsl_vector_ulong_subvector_with_stride =
      _gsl_vector_ulong_subvector_with_stridePtr.asFunction<
          _gsl_vector_ulong_view Function(
              ffi.Pointer<gsl_vector_ulong>, int, int, int)>();

  _gsl_vector_ulong_const_view gsl_vector_ulong_const_subvector(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
    int n,
  ) {
    return _gsl_vector_ulong_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_ulong_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(ffi.Pointer<gsl_vector_ulong>,
              size_t, size_t)>>('gsl_vector_ulong_const_subvector');
  late final _gsl_vector_ulong_const_subvector =
      _gsl_vector_ulong_const_subvectorPtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_vector_ulong>, int, int)>();

  _gsl_vector_ulong_const_view gsl_vector_ulong_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_ulong_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_ulong_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_vector_ulong>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_ulong_const_subvector_with_stride');
  late final _gsl_vector_ulong_const_subvector_with_stride =
      _gsl_vector_ulong_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_vector_ulong>, int, int, int)>();

  void gsl_vector_ulong_set_zero(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_set_zero(
      v,
    );
  }

  late final _gsl_vector_ulong_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_vector_ulong_set_zero');
  late final _gsl_vector_ulong_set_zero = _gsl_vector_ulong_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ulong>)>();

  void gsl_vector_ulong_set_all(
    ffi.Pointer<gsl_vector_ulong> v,
    int x,
  ) {
    return _gsl_vector_ulong_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_ulong_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Uint64)>>('gsl_vector_ulong_set_all');
  late final _gsl_vector_ulong_set_all = _gsl_vector_ulong_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ulong>, int)>();

  int gsl_vector_ulong_set_basis(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
  ) {
    return _gsl_vector_ulong_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_ulong_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              size_t)>>('gsl_vector_ulong_set_basis');
  late final _gsl_vector_ulong_set_basis = _gsl_vector_ulong_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>, int)>();

  int gsl_vector_ulong_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_ulong_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_fread');
  late final _gsl_vector_ulong_fread = _gsl_vector_ulong_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_ulong_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_fwrite');
  late final _gsl_vector_ulong_fwrite = _gsl_vector_ulong_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_ulong_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_fscanf');
  late final _gsl_vector_ulong_fscanf = _gsl_vector_ulong_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_ulong> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_ulong_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_ulong_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_ulong_fprintf');
  late final _gsl_vector_ulong_fprintf =
      _gsl_vector_ulong_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_ulong_memcpy(
    ffi.Pointer<gsl_vector_ulong> dest,
    ffi.Pointer<gsl_vector_ulong> src,
  ) {
    return _gsl_vector_ulong_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_ulong_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_memcpy');
  late final _gsl_vector_ulong_memcpy = _gsl_vector_ulong_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_reverse(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_reverse(
      v,
    );
  }

  late final _gsl_vector_ulong_reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_reverse');
  late final _gsl_vector_ulong_reverse = _gsl_vector_ulong_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_swap(
    ffi.Pointer<gsl_vector_ulong> v,
    ffi.Pointer<gsl_vector_ulong> w,
  ) {
    return _gsl_vector_ulong_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_ulong_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_swap');
  late final _gsl_vector_ulong_swap = _gsl_vector_ulong_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_swap_elements(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
    int j,
  ) {
    return _gsl_vector_ulong_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_ulong_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>, size_t,
              size_t)>>('gsl_vector_ulong_swap_elements');
  late final _gsl_vector_ulong_swap_elements =
      _gsl_vector_ulong_swap_elementsPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>, int, int)>();

  int gsl_vector_ulong_max(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_max(
      v,
    );
  }

  late final _gsl_vector_ulong_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_max');
  late final _gsl_vector_ulong_max = _gsl_vector_ulong_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_min(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_min(
      v,
    );
  }

  late final _gsl_vector_ulong_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_min');
  late final _gsl_vector_ulong_min = _gsl_vector_ulong_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  void gsl_vector_ulong_minmax(
    ffi.Pointer<gsl_vector_ulong> v,
    ffi.Pointer<ffi.Uint64> min_out,
    ffi.Pointer<ffi.Uint64> max_out,
  ) {
    return _gsl_vector_ulong_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_ulong_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>)>>('gsl_vector_ulong_minmax');
  late final _gsl_vector_ulong_minmax = _gsl_vector_ulong_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<ffi.Uint64>)>();

  int gsl_vector_ulong_max_index(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_max_index(
      v,
    );
  }

  late final _gsl_vector_ulong_max_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_vector_ulong_max_index');
  late final _gsl_vector_ulong_max_index = _gsl_vector_ulong_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_min_index(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_min_index(
      v,
    );
  }

  late final _gsl_vector_ulong_min_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_vector_ulong_min_index');
  late final _gsl_vector_ulong_min_index = _gsl_vector_ulong_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  void gsl_vector_ulong_minmax_index(
    ffi.Pointer<gsl_vector_ulong> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_ulong_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_ulong_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_ulong_minmax_index');
  late final _gsl_vector_ulong_minmax_index =
      _gsl_vector_ulong_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_vector_ulong_add(
    ffi.Pointer<gsl_vector_ulong> a,
    ffi.Pointer<gsl_vector_ulong> b,
  ) {
    return _gsl_vector_ulong_add(
      a,
      b,
    );
  }

  late final _gsl_vector_ulong_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_add');
  late final _gsl_vector_ulong_add = _gsl_vector_ulong_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_sub(
    ffi.Pointer<gsl_vector_ulong> a,
    ffi.Pointer<gsl_vector_ulong> b,
  ) {
    return _gsl_vector_ulong_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_ulong_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_sub');
  late final _gsl_vector_ulong_sub = _gsl_vector_ulong_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_mul(
    ffi.Pointer<gsl_vector_ulong> a,
    ffi.Pointer<gsl_vector_ulong> b,
  ) {
    return _gsl_vector_ulong_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_ulong_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_mul');
  late final _gsl_vector_ulong_mul = _gsl_vector_ulong_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_div(
    ffi.Pointer<gsl_vector_ulong> a,
    ffi.Pointer<gsl_vector_ulong> b,
  ) {
    return _gsl_vector_ulong_div(
      a,
      b,
    );
  }

  late final _gsl_vector_ulong_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_div');
  late final _gsl_vector_ulong_div = _gsl_vector_ulong_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_scale(
    ffi.Pointer<gsl_vector_ulong> a,
    int x,
  ) {
    return _gsl_vector_ulong_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_ulong_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Uint64)>>('gsl_vector_ulong_scale');
  late final _gsl_vector_ulong_scale = _gsl_vector_ulong_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>, int)>();

  int gsl_vector_ulong_add_constant(
    ffi.Pointer<gsl_vector_ulong> a,
    int x,
  ) {
    return _gsl_vector_ulong_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_ulong_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Uint64)>>('gsl_vector_ulong_add_constant');
  late final _gsl_vector_ulong_add_constant = _gsl_vector_ulong_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>, int)>();

  int gsl_vector_ulong_axpby(
    int alpha,
    ffi.Pointer<gsl_vector_ulong> x,
    int beta,
    ffi.Pointer<gsl_vector_ulong> y,
  ) {
    return _gsl_vector_ulong_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_ulong_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<gsl_vector_ulong>,
              ffi.Uint64,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_axpby');
  late final _gsl_vector_ulong_axpby = _gsl_vector_ulong_axpbyPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector_ulong>, int,
          ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_sum(
    ffi.Pointer<gsl_vector_ulong> a,
  ) {
    return _gsl_vector_ulong_sum(
      a,
    );
  }

  late final _gsl_vector_ulong_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_sum');
  late final _gsl_vector_ulong_sum = _gsl_vector_ulong_sumPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_equal(
    ffi.Pointer<gsl_vector_ulong> u,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_ulong_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_equal');
  late final _gsl_vector_ulong_equal = _gsl_vector_ulong_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_isnull(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_isnull(
      v,
    );
  }

  late final _gsl_vector_ulong_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_isnull');
  late final _gsl_vector_ulong_isnull = _gsl_vector_ulong_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_ispos(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_ispos(
      v,
    );
  }

  late final _gsl_vector_ulong_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_ispos');
  late final _gsl_vector_ulong_ispos = _gsl_vector_ulong_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_isneg(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_isneg(
      v,
    );
  }

  late final _gsl_vector_ulong_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_isneg');
  late final _gsl_vector_ulong_isneg = _gsl_vector_ulong_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_isnonneg(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_vector_ulong_isnonneg(
      v,
    );
  }

  late final _gsl_vector_ulong_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_vector_ulong_isnonneg');
  late final _gsl_vector_ulong_isnonneg = _gsl_vector_ulong_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_vector_ulong_get(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
  ) {
    return _gsl_vector_ulong_get(
      v,
      i,
    );
  }

  late final _gsl_vector_ulong_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<gsl_vector_ulong>, size_t)>>('gsl_vector_ulong_get');
  late final _gsl_vector_ulong_get = _gsl_vector_ulong_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ulong>, int)>();

  void gsl_vector_ulong_set(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
    int x,
  ) {
    return _gsl_vector_ulong_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_ulong_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_ulong>, size_t,
              ffi.Uint64)>>('gsl_vector_ulong_set');
  late final _gsl_vector_ulong_set = _gsl_vector_ulong_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ulong>, int, int)>();

  ffi.Pointer<ffi.Uint64> gsl_vector_ulong_ptr(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
  ) {
    return _gsl_vector_ulong_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_ulong_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint64> Function(
              ffi.Pointer<gsl_vector_ulong>, size_t)>>('gsl_vector_ulong_ptr');
  late final _gsl_vector_ulong_ptr = _gsl_vector_ulong_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint64> Function(ffi.Pointer<gsl_vector_ulong>, int)>();

  ffi.Pointer<ffi.Uint64> gsl_vector_ulong_const_ptr(
    ffi.Pointer<gsl_vector_ulong> v,
    int i,
  ) {
    return _gsl_vector_ulong_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_ulong_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint64> Function(ffi.Pointer<gsl_vector_ulong>,
              size_t)>>('gsl_vector_ulong_const_ptr');
  late final _gsl_vector_ulong_const_ptr =
      _gsl_vector_ulong_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Uint64> Function(
              ffi.Pointer<gsl_vector_ulong>, int)>();

  ffi.Pointer<gsl_block_long> gsl_block_long_alloc(
    int n,
  ) {
    return _gsl_block_long_alloc(
      n,
    );
  }

  late final _gsl_block_long_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block_long> Function(size_t)>>(
          'gsl_block_long_alloc');
  late final _gsl_block_long_alloc = _gsl_block_long_allocPtr
      .asFunction<ffi.Pointer<gsl_block_long> Function(int)>();

  ffi.Pointer<gsl_block_long> gsl_block_long_calloc(
    int n,
  ) {
    return _gsl_block_long_calloc(
      n,
    );
  }

  late final _gsl_block_long_callocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block_long> Function(size_t)>>(
          'gsl_block_long_calloc');
  late final _gsl_block_long_calloc = _gsl_block_long_callocPtr
      .asFunction<ffi.Pointer<gsl_block_long> Function(int)>();

  void gsl_block_long_free(
    ffi.Pointer<gsl_block_long> b,
  ) {
    return _gsl_block_long_free(
      b,
    );
  }

  late final _gsl_block_long_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block_long>)>>(
      'gsl_block_long_free');
  late final _gsl_block_long_free = _gsl_block_long_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_long>)>();

  int gsl_block_long_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_long> b,
  ) {
    return _gsl_block_long_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_long_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_long>)>>('gsl_block_long_fread');
  late final _gsl_block_long_fread = _gsl_block_long_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long>)>();

  int gsl_block_long_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_long> b,
  ) {
    return _gsl_block_long_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_long_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_long>)>>('gsl_block_long_fwrite');
  late final _gsl_block_long_fwrite = _gsl_block_long_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long>)>();

  int gsl_block_long_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_long> b,
  ) {
    return _gsl_block_long_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_long_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_long>)>>('gsl_block_long_fscanf');
  late final _gsl_block_long_fscanf = _gsl_block_long_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long>)>();

  int gsl_block_long_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_long> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_long_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_long_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_long_fprintf');
  late final _gsl_block_long_fprintf = _gsl_block_long_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_long>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_block_long_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int64> b,
    int n,
    int stride,
  ) {
    return _gsl_block_long_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_long_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_block_long_raw_fread');
  late final _gsl_block_long_raw_fread =
      _gsl_block_long_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_block_long_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int64> b,
    int n,
    int stride,
  ) {
    return _gsl_block_long_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_long_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_block_long_raw_fwrite');
  late final _gsl_block_long_raw_fwrite =
      _gsl_block_long_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_block_long_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int64> b,
    int n,
    int stride,
  ) {
    return _gsl_block_long_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_long_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_block_long_raw_fscanf');
  late final _gsl_block_long_raw_fscanf =
      _gsl_block_long_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_block_long_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int64> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_long_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_long_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int64>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_long_raw_fprintf');
  late final _gsl_block_long_raw_fprintf =
      _gsl_block_long_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int64>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_long_size(
    ffi.Pointer<gsl_block_long> b,
  ) {
    return _gsl_block_long_size(
      b,
    );
  }

  late final _gsl_block_long_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_long>)>>(
          'gsl_block_long_size');
  late final _gsl_block_long_size = _gsl_block_long_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_long>)>();

  ffi.Pointer<ffi.Int64> gsl_block_long_data(
    ffi.Pointer<gsl_block_long> b,
  ) {
    return _gsl_block_long_data(
      b,
    );
  }

  late final _gsl_block_long_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int64> Function(
              ffi.Pointer<gsl_block_long>)>>('gsl_block_long_data');
  late final _gsl_block_long_data = _gsl_block_long_dataPtr.asFunction<
      ffi.Pointer<ffi.Int64> Function(ffi.Pointer<gsl_block_long>)>();

  ffi.Pointer<gsl_vector_long> gsl_vector_long_alloc(
    int n,
  ) {
    return _gsl_vector_long_alloc(
      n,
    );
  }

  late final _gsl_vector_long_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_long> Function(size_t)>>(
      'gsl_vector_long_alloc');
  late final _gsl_vector_long_alloc = _gsl_vector_long_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_long> Function(int)>();

  ffi.Pointer<gsl_vector_long> gsl_vector_long_calloc(
    int n,
  ) {
    return _gsl_vector_long_calloc(
      n,
    );
  }

  late final _gsl_vector_long_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_long> Function(size_t)>>(
      'gsl_vector_long_calloc');
  late final _gsl_vector_long_calloc = _gsl_vector_long_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_long> Function(int)>();

  ffi.Pointer<gsl_vector_long> gsl_vector_long_alloc_from_block(
    ffi.Pointer<gsl_block_long> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_long_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_long_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long> Function(ffi.Pointer<gsl_block_long>,
              size_t, size_t, size_t)>>('gsl_vector_long_alloc_from_block');
  late final _gsl_vector_long_alloc_from_block =
      _gsl_vector_long_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_long> Function(
              ffi.Pointer<gsl_block_long>, int, int, int)>();

  ffi.Pointer<gsl_vector_long> gsl_vector_long_alloc_from_vector(
    ffi.Pointer<gsl_vector_long> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_long_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_long_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long> Function(ffi.Pointer<gsl_vector_long>,
              size_t, size_t, size_t)>>('gsl_vector_long_alloc_from_vector');
  late final _gsl_vector_long_alloc_from_vector =
      _gsl_vector_long_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_long> Function(
              ffi.Pointer<gsl_vector_long>, int, int, int)>();

  void gsl_vector_long_free(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_free(
      v,
    );
  }

  late final _gsl_vector_long_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_free');
  late final _gsl_vector_long_free = _gsl_vector_long_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_long>)>();

  _gsl_vector_long_view gsl_vector_long_view_array(
    ffi.Pointer<ffi.Int64> v,
    int n,
  ) {
    return _gsl_vector_long_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_long_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(
              ffi.Pointer<ffi.Int64>, size_t)>>('gsl_vector_long_view_array');
  late final _gsl_vector_long_view_array =
      _gsl_vector_long_view_arrayPtr.asFunction<
          _gsl_vector_long_view Function(ffi.Pointer<ffi.Int64>, int)>();

  _gsl_vector_long_view gsl_vector_long_view_array_with_stride(
    ffi.Pointer<ffi.Int64> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_long_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_long_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_vector_long_view_array_with_stride');
  late final _gsl_vector_long_view_array_with_stride =
      _gsl_vector_long_view_array_with_stridePtr.asFunction<
          _gsl_vector_long_view Function(ffi.Pointer<ffi.Int64>, int, int)>();

  _gsl_vector_long_const_view gsl_vector_long_const_view_array(
    ffi.Pointer<ffi.Int64> v,
    int n,
  ) {
    return _gsl_vector_long_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_long_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<ffi.Int64>,
              size_t)>>('gsl_vector_long_const_view_array');
  late final _gsl_vector_long_const_view_array =
      _gsl_vector_long_const_view_arrayPtr.asFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<ffi.Int64>, int)>();

  _gsl_vector_long_const_view gsl_vector_long_const_view_array_with_stride(
    ffi.Pointer<ffi.Int64> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_long_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_long_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_vector_long_const_view_array_with_stride');
  late final _gsl_vector_long_const_view_array_with_stride =
      _gsl_vector_long_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<ffi.Int64>, int, int)>();

  _gsl_vector_long_view gsl_vector_long_subvector(
    ffi.Pointer<gsl_vector_long> v,
    int i,
    int n,
  ) {
    return _gsl_vector_long_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_long_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(ffi.Pointer<gsl_vector_long>, size_t,
              size_t)>>('gsl_vector_long_subvector');
  late final _gsl_vector_long_subvector =
      _gsl_vector_long_subvectorPtr.asFunction<
          _gsl_vector_long_view Function(
              ffi.Pointer<gsl_vector_long>, int, int)>();

  _gsl_vector_long_view gsl_vector_long_subvector_with_stride(
    ffi.Pointer<gsl_vector_long> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_long_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_long_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(ffi.Pointer<gsl_vector_long>, size_t,
              size_t, size_t)>>('gsl_vector_long_subvector_with_stride');
  late final _gsl_vector_long_subvector_with_stride =
      _gsl_vector_long_subvector_with_stridePtr.asFunction<
          _gsl_vector_long_view Function(
              ffi.Pointer<gsl_vector_long>, int, int, int)>();

  _gsl_vector_long_const_view gsl_vector_long_const_subvector(
    ffi.Pointer<gsl_vector_long> v,
    int i,
    int n,
  ) {
    return _gsl_vector_long_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_long_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<gsl_vector_long>,
              size_t, size_t)>>('gsl_vector_long_const_subvector');
  late final _gsl_vector_long_const_subvector =
      _gsl_vector_long_const_subvectorPtr.asFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_vector_long>, int, int)>();

  _gsl_vector_long_const_view gsl_vector_long_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_long> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_long_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_long_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_vector_long>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_long_const_subvector_with_stride');
  late final _gsl_vector_long_const_subvector_with_stride =
      _gsl_vector_long_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_vector_long>, int, int, int)>();

  void gsl_vector_long_set_zero(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_set_zero(
      v,
    );
  }

  late final _gsl_vector_long_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_set_zero');
  late final _gsl_vector_long_set_zero = _gsl_vector_long_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_long>)>();

  void gsl_vector_long_set_all(
    ffi.Pointer<gsl_vector_long> v,
    int x,
  ) {
    return _gsl_vector_long_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_long_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_long>,
              ffi.Int64)>>('gsl_vector_long_set_all');
  late final _gsl_vector_long_set_all = _gsl_vector_long_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_long>, int)>();

  int gsl_vector_long_set_basis(
    ffi.Pointer<gsl_vector_long> v,
    int i,
  ) {
    return _gsl_vector_long_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_long_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              size_t)>>('gsl_vector_long_set_basis');
  late final _gsl_vector_long_set_basis = _gsl_vector_long_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>, int)>();

  int gsl_vector_long_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_long_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_fread');
  late final _gsl_vector_long_fread = _gsl_vector_long_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_long_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_fwrite');
  late final _gsl_vector_long_fwrite = _gsl_vector_long_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_long_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_fscanf');
  late final _gsl_vector_long_fscanf = _gsl_vector_long_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_long> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_long_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_long_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_long_fprintf');
  late final _gsl_vector_long_fprintf = _gsl_vector_long_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_long>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_long_memcpy(
    ffi.Pointer<gsl_vector_long> dest,
    ffi.Pointer<gsl_vector_long> src,
  ) {
    return _gsl_vector_long_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_long_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_memcpy');
  late final _gsl_vector_long_memcpy = _gsl_vector_long_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_reverse(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_reverse(
      v,
    );
  }

  late final _gsl_vector_long_reversePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_reverse');
  late final _gsl_vector_long_reverse = _gsl_vector_long_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_swap(
    ffi.Pointer<gsl_vector_long> v,
    ffi.Pointer<gsl_vector_long> w,
  ) {
    return _gsl_vector_long_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_long_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_swap');
  late final _gsl_vector_long_swap = _gsl_vector_long_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_swap_elements(
    ffi.Pointer<gsl_vector_long> v,
    int i,
    int j,
  ) {
    return _gsl_vector_long_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_long_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>, size_t,
              size_t)>>('gsl_vector_long_swap_elements');
  late final _gsl_vector_long_swap_elements = _gsl_vector_long_swap_elementsPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>, int, int)>();

  int gsl_vector_long_max(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_max(
      v,
    );
  }

  late final _gsl_vector_long_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_max');
  late final _gsl_vector_long_max = _gsl_vector_long_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_min(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_min(
      v,
    );
  }

  late final _gsl_vector_long_minPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_min');
  late final _gsl_vector_long_min = _gsl_vector_long_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  void gsl_vector_long_minmax(
    ffi.Pointer<gsl_vector_long> v,
    ffi.Pointer<ffi.Int64> min_out,
    ffi.Pointer<ffi.Int64> max_out,
  ) {
    return _gsl_vector_long_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_long_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('gsl_vector_long_minmax');
  late final _gsl_vector_long_minmax = _gsl_vector_long_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector_long>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>)>();

  int gsl_vector_long_max_index(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_max_index(
      v,
    );
  }

  late final _gsl_vector_long_max_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_max_index');
  late final _gsl_vector_long_max_index = _gsl_vector_long_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_min_index(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_min_index(
      v,
    );
  }

  late final _gsl_vector_long_min_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_min_index');
  late final _gsl_vector_long_min_index = _gsl_vector_long_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  void gsl_vector_long_minmax_index(
    ffi.Pointer<gsl_vector_long> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_long_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_long_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_long>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_long_minmax_index');
  late final _gsl_vector_long_minmax_index =
      _gsl_vector_long_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_long>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_vector_long_add(
    ffi.Pointer<gsl_vector_long> a,
    ffi.Pointer<gsl_vector_long> b,
  ) {
    return _gsl_vector_long_add(
      a,
      b,
    );
  }

  late final _gsl_vector_long_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_add');
  late final _gsl_vector_long_add = _gsl_vector_long_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_sub(
    ffi.Pointer<gsl_vector_long> a,
    ffi.Pointer<gsl_vector_long> b,
  ) {
    return _gsl_vector_long_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_long_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_sub');
  late final _gsl_vector_long_sub = _gsl_vector_long_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_mul(
    ffi.Pointer<gsl_vector_long> a,
    ffi.Pointer<gsl_vector_long> b,
  ) {
    return _gsl_vector_long_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_long_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_mul');
  late final _gsl_vector_long_mul = _gsl_vector_long_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_div(
    ffi.Pointer<gsl_vector_long> a,
    ffi.Pointer<gsl_vector_long> b,
  ) {
    return _gsl_vector_long_div(
      a,
      b,
    );
  }

  late final _gsl_vector_long_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_div');
  late final _gsl_vector_long_div = _gsl_vector_long_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_scale(
    ffi.Pointer<gsl_vector_long> a,
    int x,
  ) {
    return _gsl_vector_long_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_long_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              ffi.Int64)>>('gsl_vector_long_scale');
  late final _gsl_vector_long_scale = _gsl_vector_long_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>, int)>();

  int gsl_vector_long_add_constant(
    ffi.Pointer<gsl_vector_long> a,
    int x,
  ) {
    return _gsl_vector_long_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_long_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              ffi.Int64)>>('gsl_vector_long_add_constant');
  late final _gsl_vector_long_add_constant = _gsl_vector_long_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>, int)>();

  int gsl_vector_long_axpby(
    int alpha,
    ffi.Pointer<gsl_vector_long> x,
    int beta,
    ffi.Pointer<gsl_vector_long> y,
  ) {
    return _gsl_vector_long_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_long_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int64, ffi.Pointer<gsl_vector_long>, ffi.Int64,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_axpby');
  late final _gsl_vector_long_axpby = _gsl_vector_long_axpbyPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector_long>, int,
          ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_sum(
    ffi.Pointer<gsl_vector_long> a,
  ) {
    return _gsl_vector_long_sum(
      a,
    );
  }

  late final _gsl_vector_long_sumPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_sum');
  late final _gsl_vector_long_sum = _gsl_vector_long_sumPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_equal(
    ffi.Pointer<gsl_vector_long> u,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_long_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_vector_long_equal');
  late final _gsl_vector_long_equal = _gsl_vector_long_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_isnull(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_isnull(
      v,
    );
  }

  late final _gsl_vector_long_isnullPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_isnull');
  late final _gsl_vector_long_isnull = _gsl_vector_long_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_ispos(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_ispos(
      v,
    );
  }

  late final _gsl_vector_long_isposPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_ispos');
  late final _gsl_vector_long_ispos = _gsl_vector_long_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_isneg(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_isneg(
      v,
    );
  }

  late final _gsl_vector_long_isnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_isneg');
  late final _gsl_vector_long_isneg = _gsl_vector_long_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_isnonneg(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_vector_long_isnonneg(
      v,
    );
  }

  late final _gsl_vector_long_isnonnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_vector_long_isnonneg');
  late final _gsl_vector_long_isnonneg = _gsl_vector_long_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>)>();

  int gsl_vector_long_get(
    ffi.Pointer<gsl_vector_long> v,
    int i,
  ) {
    return _gsl_vector_long_get(
      v,
      i,
    );
  }

  late final _gsl_vector_long_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<gsl_vector_long>, size_t)>>('gsl_vector_long_get');
  late final _gsl_vector_long_get = _gsl_vector_long_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_long>, int)>();

  void gsl_vector_long_set(
    ffi.Pointer<gsl_vector_long> v,
    int i,
    int x,
  ) {
    return _gsl_vector_long_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_long_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_long>, size_t,
              ffi.Int64)>>('gsl_vector_long_set');
  late final _gsl_vector_long_set = _gsl_vector_long_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_long>, int, int)>();

  ffi.Pointer<ffi.Int64> gsl_vector_long_ptr(
    ffi.Pointer<gsl_vector_long> v,
    int i,
  ) {
    return _gsl_vector_long_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_long_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int64> Function(
              ffi.Pointer<gsl_vector_long>, size_t)>>('gsl_vector_long_ptr');
  late final _gsl_vector_long_ptr = _gsl_vector_long_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int64> Function(ffi.Pointer<gsl_vector_long>, int)>();

  ffi.Pointer<ffi.Int64> gsl_vector_long_const_ptr(
    ffi.Pointer<gsl_vector_long> v,
    int i,
  ) {
    return _gsl_vector_long_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_long_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int64> Function(ffi.Pointer<gsl_vector_long>,
              size_t)>>('gsl_vector_long_const_ptr');
  late final _gsl_vector_long_const_ptr =
      _gsl_vector_long_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Int64> Function(ffi.Pointer<gsl_vector_long>, int)>();

  ffi.Pointer<gsl_block_uint> gsl_block_uint_alloc(
    int n,
  ) {
    return _gsl_block_uint_alloc(
      n,
    );
  }

  late final _gsl_block_uint_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block_uint> Function(size_t)>>(
          'gsl_block_uint_alloc');
  late final _gsl_block_uint_alloc = _gsl_block_uint_allocPtr
      .asFunction<ffi.Pointer<gsl_block_uint> Function(int)>();

  ffi.Pointer<gsl_block_uint> gsl_block_uint_calloc(
    int n,
  ) {
    return _gsl_block_uint_calloc(
      n,
    );
  }

  late final _gsl_block_uint_callocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block_uint> Function(size_t)>>(
          'gsl_block_uint_calloc');
  late final _gsl_block_uint_calloc = _gsl_block_uint_callocPtr
      .asFunction<ffi.Pointer<gsl_block_uint> Function(int)>();

  void gsl_block_uint_free(
    ffi.Pointer<gsl_block_uint> b,
  ) {
    return _gsl_block_uint_free(
      b,
    );
  }

  late final _gsl_block_uint_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block_uint>)>>(
      'gsl_block_uint_free');
  late final _gsl_block_uint_free = _gsl_block_uint_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_uint>)>();

  int gsl_block_uint_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_uint> b,
  ) {
    return _gsl_block_uint_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_uint_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_uint>)>>('gsl_block_uint_fread');
  late final _gsl_block_uint_fread = _gsl_block_uint_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uint>)>();

  int gsl_block_uint_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_uint> b,
  ) {
    return _gsl_block_uint_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_uint_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_uint>)>>('gsl_block_uint_fwrite');
  late final _gsl_block_uint_fwrite = _gsl_block_uint_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uint>)>();

  int gsl_block_uint_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_uint> b,
  ) {
    return _gsl_block_uint_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_uint_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_uint>)>>('gsl_block_uint_fscanf');
  late final _gsl_block_uint_fscanf = _gsl_block_uint_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uint>)>();

  int gsl_block_uint_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_uint> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_uint_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_uint_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uint>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_uint_fprintf');
  late final _gsl_block_uint_fprintf = _gsl_block_uint_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uint>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_block_uint_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint32> b,
    int n,
    int stride,
  ) {
    return _gsl_block_uint_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_uint_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_block_uint_raw_fread');
  late final _gsl_block_uint_raw_fread =
      _gsl_block_uint_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_block_uint_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint32> b,
    int n,
    int stride,
  ) {
    return _gsl_block_uint_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_uint_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_block_uint_raw_fwrite');
  late final _gsl_block_uint_raw_fwrite =
      _gsl_block_uint_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_block_uint_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint32> b,
    int n,
    int stride,
  ) {
    return _gsl_block_uint_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_uint_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_block_uint_raw_fscanf');
  late final _gsl_block_uint_raw_fscanf =
      _gsl_block_uint_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_block_uint_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint32> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_uint_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_uint_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint32>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_uint_raw_fprintf');
  late final _gsl_block_uint_raw_fprintf =
      _gsl_block_uint_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint32>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_uint_size(
    ffi.Pointer<gsl_block_uint> b,
  ) {
    return _gsl_block_uint_size(
      b,
    );
  }

  late final _gsl_block_uint_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_uint>)>>(
          'gsl_block_uint_size');
  late final _gsl_block_uint_size = _gsl_block_uint_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_uint>)>();

  ffi.Pointer<ffi.Uint32> gsl_block_uint_data(
    ffi.Pointer<gsl_block_uint> b,
  ) {
    return _gsl_block_uint_data(
      b,
    );
  }

  late final _gsl_block_uint_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<gsl_block_uint>)>>('gsl_block_uint_data');
  late final _gsl_block_uint_data = _gsl_block_uint_dataPtr.asFunction<
      ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<gsl_block_uint>)>();

  ffi.Pointer<gsl_vector_uint> gsl_vector_uint_alloc(
    int n,
  ) {
    return _gsl_vector_uint_alloc(
      n,
    );
  }

  late final _gsl_vector_uint_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_uint> Function(size_t)>>(
      'gsl_vector_uint_alloc');
  late final _gsl_vector_uint_alloc = _gsl_vector_uint_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_uint> Function(int)>();

  ffi.Pointer<gsl_vector_uint> gsl_vector_uint_calloc(
    int n,
  ) {
    return _gsl_vector_uint_calloc(
      n,
    );
  }

  late final _gsl_vector_uint_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_uint> Function(size_t)>>(
      'gsl_vector_uint_calloc');
  late final _gsl_vector_uint_calloc = _gsl_vector_uint_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_uint> Function(int)>();

  ffi.Pointer<gsl_vector_uint> gsl_vector_uint_alloc_from_block(
    ffi.Pointer<gsl_block_uint> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_uint_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_uint_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_uint> Function(ffi.Pointer<gsl_block_uint>,
              size_t, size_t, size_t)>>('gsl_vector_uint_alloc_from_block');
  late final _gsl_vector_uint_alloc_from_block =
      _gsl_vector_uint_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_uint> Function(
              ffi.Pointer<gsl_block_uint>, int, int, int)>();

  ffi.Pointer<gsl_vector_uint> gsl_vector_uint_alloc_from_vector(
    ffi.Pointer<gsl_vector_uint> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_uint_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_uint_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_uint> Function(ffi.Pointer<gsl_vector_uint>,
              size_t, size_t, size_t)>>('gsl_vector_uint_alloc_from_vector');
  late final _gsl_vector_uint_alloc_from_vector =
      _gsl_vector_uint_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_uint> Function(
              ffi.Pointer<gsl_vector_uint>, int, int, int)>();

  void gsl_vector_uint_free(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_free(
      v,
    );
  }

  late final _gsl_vector_uint_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_vector_uint_free');
  late final _gsl_vector_uint_free = _gsl_vector_uint_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uint>)>();

  _gsl_vector_uint_view gsl_vector_uint_view_array(
    ffi.Pointer<ffi.Uint32> v,
    int n,
  ) {
    return _gsl_vector_uint_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_uint_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(
              ffi.Pointer<ffi.Uint32>, size_t)>>('gsl_vector_uint_view_array');
  late final _gsl_vector_uint_view_array =
      _gsl_vector_uint_view_arrayPtr.asFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<ffi.Uint32>, int)>();

  _gsl_vector_uint_view gsl_vector_uint_view_array_with_stride(
    ffi.Pointer<ffi.Uint32> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_uint_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_uint_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_vector_uint_view_array_with_stride');
  late final _gsl_vector_uint_view_array_with_stride =
      _gsl_vector_uint_view_array_with_stridePtr.asFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  _gsl_vector_uint_const_view gsl_vector_uint_const_view_array(
    ffi.Pointer<ffi.Uint32> v,
    int n,
  ) {
    return _gsl_vector_uint_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_uint_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<ffi.Uint32>,
              size_t)>>('gsl_vector_uint_const_view_array');
  late final _gsl_vector_uint_const_view_array =
      _gsl_vector_uint_const_view_arrayPtr.asFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<ffi.Uint32>, int)>();

  _gsl_vector_uint_const_view gsl_vector_uint_const_view_array_with_stride(
    ffi.Pointer<ffi.Uint32> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_uint_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_uint_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_vector_uint_const_view_array_with_stride');
  late final _gsl_vector_uint_const_view_array_with_stride =
      _gsl_vector_uint_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<ffi.Uint32>, int, int)>();

  _gsl_vector_uint_view gsl_vector_uint_subvector(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
    int n,
  ) {
    return _gsl_vector_uint_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_uint_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<gsl_vector_uint>, size_t,
              size_t)>>('gsl_vector_uint_subvector');
  late final _gsl_vector_uint_subvector =
      _gsl_vector_uint_subvectorPtr.asFunction<
          _gsl_vector_uint_view Function(
              ffi.Pointer<gsl_vector_uint>, int, int)>();

  _gsl_vector_uint_view gsl_vector_uint_subvector_with_stride(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_uint_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_uint_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<gsl_vector_uint>, size_t,
              size_t, size_t)>>('gsl_vector_uint_subvector_with_stride');
  late final _gsl_vector_uint_subvector_with_stride =
      _gsl_vector_uint_subvector_with_stridePtr.asFunction<
          _gsl_vector_uint_view Function(
              ffi.Pointer<gsl_vector_uint>, int, int, int)>();

  _gsl_vector_uint_const_view gsl_vector_uint_const_subvector(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
    int n,
  ) {
    return _gsl_vector_uint_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_uint_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<gsl_vector_uint>,
              size_t, size_t)>>('gsl_vector_uint_const_subvector');
  late final _gsl_vector_uint_const_subvector =
      _gsl_vector_uint_const_subvectorPtr.asFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_vector_uint>, int, int)>();

  _gsl_vector_uint_const_view gsl_vector_uint_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_uint_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_uint_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_vector_uint>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_uint_const_subvector_with_stride');
  late final _gsl_vector_uint_const_subvector_with_stride =
      _gsl_vector_uint_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_vector_uint>, int, int, int)>();

  void gsl_vector_uint_set_zero(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_set_zero(
      v,
    );
  }

  late final _gsl_vector_uint_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_vector_uint_set_zero');
  late final _gsl_vector_uint_set_zero = _gsl_vector_uint_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uint>)>();

  void gsl_vector_uint_set_all(
    ffi.Pointer<gsl_vector_uint> v,
    int x,
  ) {
    return _gsl_vector_uint_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_uint_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Uint32)>>('gsl_vector_uint_set_all');
  late final _gsl_vector_uint_set_all = _gsl_vector_uint_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uint>, int)>();

  int gsl_vector_uint_set_basis(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
  ) {
    return _gsl_vector_uint_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_uint_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              size_t)>>('gsl_vector_uint_set_basis');
  late final _gsl_vector_uint_set_basis = _gsl_vector_uint_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>, int)>();

  int gsl_vector_uint_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_uint_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_fread');
  late final _gsl_vector_uint_fread = _gsl_vector_uint_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_uint_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_fwrite');
  late final _gsl_vector_uint_fwrite = _gsl_vector_uint_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_uint_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_fscanf');
  late final _gsl_vector_uint_fscanf = _gsl_vector_uint_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_uint> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_uint_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_uint_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_uint_fprintf');
  late final _gsl_vector_uint_fprintf = _gsl_vector_uint_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uint>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_uint_memcpy(
    ffi.Pointer<gsl_vector_uint> dest,
    ffi.Pointer<gsl_vector_uint> src,
  ) {
    return _gsl_vector_uint_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_uint_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_memcpy');
  late final _gsl_vector_uint_memcpy = _gsl_vector_uint_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_reverse(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_reverse(
      v,
    );
  }

  late final _gsl_vector_uint_reversePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_vector_uint_reverse');
  late final _gsl_vector_uint_reverse = _gsl_vector_uint_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_swap(
    ffi.Pointer<gsl_vector_uint> v,
    ffi.Pointer<gsl_vector_uint> w,
  ) {
    return _gsl_vector_uint_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_uint_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_swap');
  late final _gsl_vector_uint_swap = _gsl_vector_uint_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_swap_elements(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
    int j,
  ) {
    return _gsl_vector_uint_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_uint_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>, size_t,
              size_t)>>('gsl_vector_uint_swap_elements');
  late final _gsl_vector_uint_swap_elements = _gsl_vector_uint_swap_elementsPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>, int, int)>();

  int gsl_vector_uint_max(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_max(
      v,
    );
  }

  late final _gsl_vector_uint_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_max');
  late final _gsl_vector_uint_max = _gsl_vector_uint_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_min(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_min(
      v,
    );
  }

  late final _gsl_vector_uint_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_min');
  late final _gsl_vector_uint_min = _gsl_vector_uint_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  void gsl_vector_uint_minmax(
    ffi.Pointer<gsl_vector_uint> v,
    ffi.Pointer<ffi.Uint32> min_out,
    ffi.Pointer<ffi.Uint32> max_out,
  ) {
    return _gsl_vector_uint_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_uint_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('gsl_vector_uint_minmax');
  late final _gsl_vector_uint_minmax = _gsl_vector_uint_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector_uint>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  int gsl_vector_uint_max_index(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_max_index(
      v,
    );
  }

  late final _gsl_vector_uint_max_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_vector_uint_max_index');
  late final _gsl_vector_uint_max_index = _gsl_vector_uint_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_min_index(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_min_index(
      v,
    );
  }

  late final _gsl_vector_uint_min_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_vector_uint_min_index');
  late final _gsl_vector_uint_min_index = _gsl_vector_uint_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  void gsl_vector_uint_minmax_index(
    ffi.Pointer<gsl_vector_uint> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_uint_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_uint_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_uint>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_uint_minmax_index');
  late final _gsl_vector_uint_minmax_index =
      _gsl_vector_uint_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_uint>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_vector_uint_add(
    ffi.Pointer<gsl_vector_uint> a,
    ffi.Pointer<gsl_vector_uint> b,
  ) {
    return _gsl_vector_uint_add(
      a,
      b,
    );
  }

  late final _gsl_vector_uint_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_add');
  late final _gsl_vector_uint_add = _gsl_vector_uint_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_sub(
    ffi.Pointer<gsl_vector_uint> a,
    ffi.Pointer<gsl_vector_uint> b,
  ) {
    return _gsl_vector_uint_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_uint_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_sub');
  late final _gsl_vector_uint_sub = _gsl_vector_uint_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_mul(
    ffi.Pointer<gsl_vector_uint> a,
    ffi.Pointer<gsl_vector_uint> b,
  ) {
    return _gsl_vector_uint_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_uint_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_mul');
  late final _gsl_vector_uint_mul = _gsl_vector_uint_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_div(
    ffi.Pointer<gsl_vector_uint> a,
    ffi.Pointer<gsl_vector_uint> b,
  ) {
    return _gsl_vector_uint_div(
      a,
      b,
    );
  }

  late final _gsl_vector_uint_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_div');
  late final _gsl_vector_uint_div = _gsl_vector_uint_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_scale(
    ffi.Pointer<gsl_vector_uint> a,
    int x,
  ) {
    return _gsl_vector_uint_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_uint_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Uint32)>>('gsl_vector_uint_scale');
  late final _gsl_vector_uint_scale = _gsl_vector_uint_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>, int)>();

  int gsl_vector_uint_add_constant(
    ffi.Pointer<gsl_vector_uint> a,
    int x,
  ) {
    return _gsl_vector_uint_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_uint_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Uint32)>>('gsl_vector_uint_add_constant');
  late final _gsl_vector_uint_add_constant = _gsl_vector_uint_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>, int)>();

  int gsl_vector_uint_axpby(
    int alpha,
    ffi.Pointer<gsl_vector_uint> x,
    int beta,
    ffi.Pointer<gsl_vector_uint> y,
  ) {
    return _gsl_vector_uint_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_uint_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32,
              ffi.Pointer<gsl_vector_uint>,
              ffi.Uint32,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_axpby');
  late final _gsl_vector_uint_axpby = _gsl_vector_uint_axpbyPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector_uint>, int,
          ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_sum(
    ffi.Pointer<gsl_vector_uint> a,
  ) {
    return _gsl_vector_uint_sum(
      a,
    );
  }

  late final _gsl_vector_uint_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_sum');
  late final _gsl_vector_uint_sum = _gsl_vector_uint_sumPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_equal(
    ffi.Pointer<gsl_vector_uint> u,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_uint_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_vector_uint_equal');
  late final _gsl_vector_uint_equal = _gsl_vector_uint_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_isnull(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_isnull(
      v,
    );
  }

  late final _gsl_vector_uint_isnullPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_vector_uint_isnull');
  late final _gsl_vector_uint_isnull = _gsl_vector_uint_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_ispos(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_ispos(
      v,
    );
  }

  late final _gsl_vector_uint_isposPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_vector_uint_ispos');
  late final _gsl_vector_uint_ispos = _gsl_vector_uint_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_isneg(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_isneg(
      v,
    );
  }

  late final _gsl_vector_uint_isnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_vector_uint_isneg');
  late final _gsl_vector_uint_isneg = _gsl_vector_uint_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_isnonneg(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_vector_uint_isnonneg(
      v,
    );
  }

  late final _gsl_vector_uint_isnonnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_vector_uint_isnonneg');
  late final _gsl_vector_uint_isnonneg = _gsl_vector_uint_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>)>();

  int gsl_vector_uint_get(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
  ) {
    return _gsl_vector_uint_get(
      v,
      i,
    );
  }

  late final _gsl_vector_uint_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_vector_uint>, size_t)>>('gsl_vector_uint_get');
  late final _gsl_vector_uint_get = _gsl_vector_uint_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uint>, int)>();

  void gsl_vector_uint_set(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
    int x,
  ) {
    return _gsl_vector_uint_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_uint_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_uint>, size_t,
              ffi.Uint32)>>('gsl_vector_uint_set');
  late final _gsl_vector_uint_set = _gsl_vector_uint_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uint>, int, int)>();

  ffi.Pointer<ffi.Uint32> gsl_vector_uint_ptr(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
  ) {
    return _gsl_vector_uint_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_uint_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<gsl_vector_uint>, size_t)>>('gsl_vector_uint_ptr');
  late final _gsl_vector_uint_ptr = _gsl_vector_uint_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<gsl_vector_uint>, int)>();

  ffi.Pointer<ffi.Uint32> gsl_vector_uint_const_ptr(
    ffi.Pointer<gsl_vector_uint> v,
    int i,
  ) {
    return _gsl_vector_uint_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_uint_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<gsl_vector_uint>,
              size_t)>>('gsl_vector_uint_const_ptr');
  late final _gsl_vector_uint_const_ptr =
      _gsl_vector_uint_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<gsl_vector_uint>, int)>();

  ffi.Pointer<gsl_block_int> gsl_block_int_alloc(
    int n,
  ) {
    return _gsl_block_int_alloc(
      n,
    );
  }

  late final _gsl_block_int_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block_int> Function(size_t)>>(
          'gsl_block_int_alloc');
  late final _gsl_block_int_alloc = _gsl_block_int_allocPtr
      .asFunction<ffi.Pointer<gsl_block_int> Function(int)>();

  ffi.Pointer<gsl_block_int> gsl_block_int_calloc(
    int n,
  ) {
    return _gsl_block_int_calloc(
      n,
    );
  }

  late final _gsl_block_int_callocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block_int> Function(size_t)>>(
          'gsl_block_int_calloc');
  late final _gsl_block_int_calloc = _gsl_block_int_callocPtr
      .asFunction<ffi.Pointer<gsl_block_int> Function(int)>();

  void gsl_block_int_free(
    ffi.Pointer<gsl_block_int> b,
  ) {
    return _gsl_block_int_free(
      b,
    );
  }

  late final _gsl_block_int_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block_int>)>>(
      'gsl_block_int_free');
  late final _gsl_block_int_free = _gsl_block_int_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_int>)>();

  int gsl_block_int_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_int> b,
  ) {
    return _gsl_block_int_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_int_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_int>)>>('gsl_block_int_fread');
  late final _gsl_block_int_fread = _gsl_block_int_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_int>)>();

  int gsl_block_int_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_int> b,
  ) {
    return _gsl_block_int_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_int_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_int>)>>('gsl_block_int_fwrite');
  late final _gsl_block_int_fwrite = _gsl_block_int_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_int>)>();

  int gsl_block_int_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_int> b,
  ) {
    return _gsl_block_int_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_int_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_int>)>>('gsl_block_int_fscanf');
  late final _gsl_block_int_fscanf = _gsl_block_int_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_int>)>();

  int gsl_block_int_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_int> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_int_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_int_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_int>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_int_fprintf');
  late final _gsl_block_int_fprintf = _gsl_block_int_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_int>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_block_int_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int32> b,
    int n,
    int stride,
  ) {
    return _gsl_block_int_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_int_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_block_int_raw_fread');
  late final _gsl_block_int_raw_fread = _gsl_block_int_raw_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_block_int_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int32> b,
    int n,
    int stride,
  ) {
    return _gsl_block_int_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_int_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_block_int_raw_fwrite');
  late final _gsl_block_int_raw_fwrite =
      _gsl_block_int_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_block_int_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int32> b,
    int n,
    int stride,
  ) {
    return _gsl_block_int_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_int_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_block_int_raw_fscanf');
  late final _gsl_block_int_raw_fscanf =
      _gsl_block_int_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_block_int_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int32> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_int_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_int_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int32>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_int_raw_fprintf');
  late final _gsl_block_int_raw_fprintf =
      _gsl_block_int_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int32>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_int_size(
    ffi.Pointer<gsl_block_int> b,
  ) {
    return _gsl_block_int_size(
      b,
    );
  }

  late final _gsl_block_int_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_int>)>>(
          'gsl_block_int_size');
  late final _gsl_block_int_size = _gsl_block_int_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_int>)>();

  ffi.Pointer<ffi.Int32> gsl_block_int_data(
    ffi.Pointer<gsl_block_int> b,
  ) {
    return _gsl_block_int_data(
      b,
    );
  }

  late final _gsl_block_int_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(
              ffi.Pointer<gsl_block_int>)>>('gsl_block_int_data');
  late final _gsl_block_int_data = _gsl_block_int_dataPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function(ffi.Pointer<gsl_block_int>)>();

  ffi.Pointer<gsl_vector_int> gsl_vector_int_alloc(
    int n,
  ) {
    return _gsl_vector_int_alloc(
      n,
    );
  }

  late final _gsl_vector_int_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_vector_int> Function(size_t)>>(
          'gsl_vector_int_alloc');
  late final _gsl_vector_int_alloc = _gsl_vector_int_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_int> Function(int)>();

  ffi.Pointer<gsl_vector_int> gsl_vector_int_calloc(
    int n,
  ) {
    return _gsl_vector_int_calloc(
      n,
    );
  }

  late final _gsl_vector_int_callocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_vector_int> Function(size_t)>>(
          'gsl_vector_int_calloc');
  late final _gsl_vector_int_calloc = _gsl_vector_int_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_int> Function(int)>();

  ffi.Pointer<gsl_vector_int> gsl_vector_int_alloc_from_block(
    ffi.Pointer<gsl_block_int> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_int_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_int_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_int> Function(ffi.Pointer<gsl_block_int>,
              size_t, size_t, size_t)>>('gsl_vector_int_alloc_from_block');
  late final _gsl_vector_int_alloc_from_block =
      _gsl_vector_int_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_int> Function(
              ffi.Pointer<gsl_block_int>, int, int, int)>();

  ffi.Pointer<gsl_vector_int> gsl_vector_int_alloc_from_vector(
    ffi.Pointer<gsl_vector_int> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_int_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_int_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_int> Function(ffi.Pointer<gsl_vector_int>,
              size_t, size_t, size_t)>>('gsl_vector_int_alloc_from_vector');
  late final _gsl_vector_int_alloc_from_vector =
      _gsl_vector_int_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_int> Function(
              ffi.Pointer<gsl_vector_int>, int, int, int)>();

  void gsl_vector_int_free(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_free(
      v,
    );
  }

  late final _gsl_vector_int_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_free');
  late final _gsl_vector_int_free = _gsl_vector_int_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_int>)>();

  _gsl_vector_int_view gsl_vector_int_view_array(
    ffi.Pointer<ffi.Int32> v,
    int n,
  ) {
    return _gsl_vector_int_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_int_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(
              ffi.Pointer<ffi.Int32>, size_t)>>('gsl_vector_int_view_array');
  late final _gsl_vector_int_view_array = _gsl_vector_int_view_arrayPtr
      .asFunction<_gsl_vector_int_view Function(ffi.Pointer<ffi.Int32>, int)>();

  _gsl_vector_int_view gsl_vector_int_view_array_with_stride(
    ffi.Pointer<ffi.Int32> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_int_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_int_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_vector_int_view_array_with_stride');
  late final _gsl_vector_int_view_array_with_stride =
      _gsl_vector_int_view_array_with_stridePtr.asFunction<
          _gsl_vector_int_view Function(ffi.Pointer<ffi.Int32>, int, int)>();

  _gsl_vector_int_const_view gsl_vector_int_const_view_array(
    ffi.Pointer<ffi.Int32> v,
    int n,
  ) {
    return _gsl_vector_int_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_int_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<ffi.Int32>,
              size_t)>>('gsl_vector_int_const_view_array');
  late final _gsl_vector_int_const_view_array =
      _gsl_vector_int_const_view_arrayPtr.asFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<ffi.Int32>, int)>();

  _gsl_vector_int_const_view gsl_vector_int_const_view_array_with_stride(
    ffi.Pointer<ffi.Int32> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_int_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_int_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_vector_int_const_view_array_with_stride');
  late final _gsl_vector_int_const_view_array_with_stride =
      _gsl_vector_int_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<ffi.Int32>, int, int)>();

  _gsl_vector_int_view gsl_vector_int_subvector(
    ffi.Pointer<gsl_vector_int> v,
    int i,
    int n,
  ) {
    return _gsl_vector_int_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_int_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(ffi.Pointer<gsl_vector_int>, size_t,
              size_t)>>('gsl_vector_int_subvector');
  late final _gsl_vector_int_subvector =
      _gsl_vector_int_subvectorPtr.asFunction<
          _gsl_vector_int_view Function(
              ffi.Pointer<gsl_vector_int>, int, int)>();

  _gsl_vector_int_view gsl_vector_int_subvector_with_stride(
    ffi.Pointer<gsl_vector_int> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_int_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_int_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(ffi.Pointer<gsl_vector_int>, size_t,
              size_t, size_t)>>('gsl_vector_int_subvector_with_stride');
  late final _gsl_vector_int_subvector_with_stride =
      _gsl_vector_int_subvector_with_stridePtr.asFunction<
          _gsl_vector_int_view Function(
              ffi.Pointer<gsl_vector_int>, int, int, int)>();

  _gsl_vector_int_const_view gsl_vector_int_const_subvector(
    ffi.Pointer<gsl_vector_int> v,
    int i,
    int n,
  ) {
    return _gsl_vector_int_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_int_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<gsl_vector_int>,
              size_t, size_t)>>('gsl_vector_int_const_subvector');
  late final _gsl_vector_int_const_subvector =
      _gsl_vector_int_const_subvectorPtr.asFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_vector_int>, int, int)>();

  _gsl_vector_int_const_view gsl_vector_int_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_int> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_int_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_int_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_vector_int>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_int_const_subvector_with_stride');
  late final _gsl_vector_int_const_subvector_with_stride =
      _gsl_vector_int_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_vector_int>, int, int, int)>();

  void gsl_vector_int_set_zero(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_set_zero(
      v,
    );
  }

  late final _gsl_vector_int_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_set_zero');
  late final _gsl_vector_int_set_zero = _gsl_vector_int_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_int>)>();

  void gsl_vector_int_set_all(
    ffi.Pointer<gsl_vector_int> v,
    int x,
  ) {
    return _gsl_vector_int_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_int_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_int>,
              ffi.Int32)>>('gsl_vector_int_set_all');
  late final _gsl_vector_int_set_all = _gsl_vector_int_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_int>, int)>();

  int gsl_vector_int_set_basis(
    ffi.Pointer<gsl_vector_int> v,
    int i,
  ) {
    return _gsl_vector_int_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_int_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              size_t)>>('gsl_vector_int_set_basis');
  late final _gsl_vector_int_set_basis = _gsl_vector_int_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>, int)>();

  int gsl_vector_int_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_int_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_fread');
  late final _gsl_vector_int_fread = _gsl_vector_int_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_int_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_fwrite');
  late final _gsl_vector_int_fwrite = _gsl_vector_int_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_int_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_fscanf');
  late final _gsl_vector_int_fscanf = _gsl_vector_int_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_int> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_int_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_int_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_int_fprintf');
  late final _gsl_vector_int_fprintf = _gsl_vector_int_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_int>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_int_memcpy(
    ffi.Pointer<gsl_vector_int> dest,
    ffi.Pointer<gsl_vector_int> src,
  ) {
    return _gsl_vector_int_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_int_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_memcpy');
  late final _gsl_vector_int_memcpy = _gsl_vector_int_memcpyPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_reverse(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_reverse(
      v,
    );
  }

  late final _gsl_vector_int_reversePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_reverse');
  late final _gsl_vector_int_reverse = _gsl_vector_int_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_swap(
    ffi.Pointer<gsl_vector_int> v,
    ffi.Pointer<gsl_vector_int> w,
  ) {
    return _gsl_vector_int_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_int_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_swap');
  late final _gsl_vector_int_swap = _gsl_vector_int_swapPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_swap_elements(
    ffi.Pointer<gsl_vector_int> v,
    int i,
    int j,
  ) {
    return _gsl_vector_int_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_int_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>, size_t,
              size_t)>>('gsl_vector_int_swap_elements');
  late final _gsl_vector_int_swap_elements = _gsl_vector_int_swap_elementsPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>, int, int)>();

  int gsl_vector_int_max(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_max(
      v,
    );
  }

  late final _gsl_vector_int_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_max');
  late final _gsl_vector_int_max = _gsl_vector_int_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_min(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_min(
      v,
    );
  }

  late final _gsl_vector_int_minPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_min');
  late final _gsl_vector_int_min = _gsl_vector_int_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  void gsl_vector_int_minmax(
    ffi.Pointer<gsl_vector_int> v,
    ffi.Pointer<ffi.Int32> min_out,
    ffi.Pointer<ffi.Int32> max_out,
  ) {
    return _gsl_vector_int_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_int_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('gsl_vector_int_minmax');
  late final _gsl_vector_int_minmax = _gsl_vector_int_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  int gsl_vector_int_max_index(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_max_index(
      v,
    );
  }

  late final _gsl_vector_int_max_indexPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_int>)>>(
          'gsl_vector_int_max_index');
  late final _gsl_vector_int_max_index = _gsl_vector_int_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_min_index(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_min_index(
      v,
    );
  }

  late final _gsl_vector_int_min_indexPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_int>)>>(
          'gsl_vector_int_min_index');
  late final _gsl_vector_int_min_index = _gsl_vector_int_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  void gsl_vector_int_minmax_index(
    ffi.Pointer<gsl_vector_int> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_int_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_int_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_int_minmax_index');
  late final _gsl_vector_int_minmax_index =
      _gsl_vector_int_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_vector_int_add(
    ffi.Pointer<gsl_vector_int> a,
    ffi.Pointer<gsl_vector_int> b,
  ) {
    return _gsl_vector_int_add(
      a,
      b,
    );
  }

  late final _gsl_vector_int_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_add');
  late final _gsl_vector_int_add = _gsl_vector_int_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_sub(
    ffi.Pointer<gsl_vector_int> a,
    ffi.Pointer<gsl_vector_int> b,
  ) {
    return _gsl_vector_int_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_int_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_sub');
  late final _gsl_vector_int_sub = _gsl_vector_int_subPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_mul(
    ffi.Pointer<gsl_vector_int> a,
    ffi.Pointer<gsl_vector_int> b,
  ) {
    return _gsl_vector_int_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_int_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_mul');
  late final _gsl_vector_int_mul = _gsl_vector_int_mulPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_div(
    ffi.Pointer<gsl_vector_int> a,
    ffi.Pointer<gsl_vector_int> b,
  ) {
    return _gsl_vector_int_div(
      a,
      b,
    );
  }

  late final _gsl_vector_int_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_div');
  late final _gsl_vector_int_div = _gsl_vector_int_divPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_scale(
    ffi.Pointer<gsl_vector_int> a,
    int x,
  ) {
    return _gsl_vector_int_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_int_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_int>, ffi.Int32)>>('gsl_vector_int_scale');
  late final _gsl_vector_int_scale = _gsl_vector_int_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>, int)>();

  int gsl_vector_int_add_constant(
    ffi.Pointer<gsl_vector_int> a,
    int x,
  ) {
    return _gsl_vector_int_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_int_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Int32)>>('gsl_vector_int_add_constant');
  late final _gsl_vector_int_add_constant = _gsl_vector_int_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>, int)>();

  int gsl_vector_int_axpby(
    int alpha,
    ffi.Pointer<gsl_vector_int> x,
    int beta,
    ffi.Pointer<gsl_vector_int> y,
  ) {
    return _gsl_vector_int_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_int_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<gsl_vector_int>, ffi.Int32,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_axpby');
  late final _gsl_vector_int_axpby = _gsl_vector_int_axpbyPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector_int>, int,
          ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_sum(
    ffi.Pointer<gsl_vector_int> a,
  ) {
    return _gsl_vector_int_sum(
      a,
    );
  }

  late final _gsl_vector_int_sumPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_sum');
  late final _gsl_vector_int_sum = _gsl_vector_int_sumPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_equal(
    ffi.Pointer<gsl_vector_int> u,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_int_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_vector_int_equal');
  late final _gsl_vector_int_equal = _gsl_vector_int_equalPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_isnull(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_isnull(
      v,
    );
  }

  late final _gsl_vector_int_isnullPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_isnull');
  late final _gsl_vector_int_isnull = _gsl_vector_int_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_ispos(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_ispos(
      v,
    );
  }

  late final _gsl_vector_int_isposPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_ispos');
  late final _gsl_vector_int_ispos = _gsl_vector_int_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_isneg(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_isneg(
      v,
    );
  }

  late final _gsl_vector_int_isnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_isneg');
  late final _gsl_vector_int_isneg = _gsl_vector_int_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_isnonneg(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_vector_int_isnonneg(
      v,
    );
  }

  late final _gsl_vector_int_isnonnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_vector_int_isnonneg');
  late final _gsl_vector_int_isnonneg = _gsl_vector_int_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>)>();

  int gsl_vector_int_get(
    ffi.Pointer<gsl_vector_int> v,
    int i,
  ) {
    return _gsl_vector_int_get(
      v,
      i,
    );
  }

  late final _gsl_vector_int_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_int>, size_t)>>('gsl_vector_int_get');
  late final _gsl_vector_int_get = _gsl_vector_int_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_int>, int)>();

  void gsl_vector_int_set(
    ffi.Pointer<gsl_vector_int> v,
    int i,
    int x,
  ) {
    return _gsl_vector_int_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_int_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_int>, size_t,
              ffi.Int32)>>('gsl_vector_int_set');
  late final _gsl_vector_int_set = _gsl_vector_int_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_int>, int, int)>();

  ffi.Pointer<ffi.Int32> gsl_vector_int_ptr(
    ffi.Pointer<gsl_vector_int> v,
    int i,
  ) {
    return _gsl_vector_int_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_int_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(
              ffi.Pointer<gsl_vector_int>, size_t)>>('gsl_vector_int_ptr');
  late final _gsl_vector_int_ptr = _gsl_vector_int_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function(ffi.Pointer<gsl_vector_int>, int)>();

  ffi.Pointer<ffi.Int32> gsl_vector_int_const_ptr(
    ffi.Pointer<gsl_vector_int> v,
    int i,
  ) {
    return _gsl_vector_int_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_int_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Pointer<gsl_vector_int>,
              size_t)>>('gsl_vector_int_const_ptr');
  late final _gsl_vector_int_const_ptr =
      _gsl_vector_int_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Pointer<gsl_vector_int>, int)>();

  ffi.Pointer<gsl_block_ushort> gsl_block_ushort_alloc(
    int n,
  ) {
    return _gsl_block_ushort_alloc(
      n,
    );
  }

  late final _gsl_block_ushort_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_ushort> Function(size_t)>>(
      'gsl_block_ushort_alloc');
  late final _gsl_block_ushort_alloc = _gsl_block_ushort_allocPtr
      .asFunction<ffi.Pointer<gsl_block_ushort> Function(int)>();

  ffi.Pointer<gsl_block_ushort> gsl_block_ushort_calloc(
    int n,
  ) {
    return _gsl_block_ushort_calloc(
      n,
    );
  }

  late final _gsl_block_ushort_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_ushort> Function(size_t)>>(
      'gsl_block_ushort_calloc');
  late final _gsl_block_ushort_calloc = _gsl_block_ushort_callocPtr
      .asFunction<ffi.Pointer<gsl_block_ushort> Function(int)>();

  void gsl_block_ushort_free(
    ffi.Pointer<gsl_block_ushort> b,
  ) {
    return _gsl_block_ushort_free(
      b,
    );
  }

  late final _gsl_block_ushort_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block_ushort>)>>(
      'gsl_block_ushort_free');
  late final _gsl_block_ushort_free = _gsl_block_ushort_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_ushort>)>();

  int gsl_block_ushort_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_ushort> b,
  ) {
    return _gsl_block_ushort_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_ushort_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_ushort>)>>('gsl_block_ushort_fread');
  late final _gsl_block_ushort_fread = _gsl_block_ushort_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ushort>)>();

  int gsl_block_ushort_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_ushort> b,
  ) {
    return _gsl_block_ushort_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_ushort_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_ushort>)>>('gsl_block_ushort_fwrite');
  late final _gsl_block_ushort_fwrite = _gsl_block_ushort_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ushort>)>();

  int gsl_block_ushort_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_ushort> b,
  ) {
    return _gsl_block_ushort_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_ushort_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_ushort>)>>('gsl_block_ushort_fscanf');
  late final _gsl_block_ushort_fscanf = _gsl_block_ushort_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ushort>)>();

  int gsl_block_ushort_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_ushort> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_ushort_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_ushort_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ushort>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_ushort_fprintf');
  late final _gsl_block_ushort_fprintf =
      _gsl_block_ushort_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_ushort>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_ushort_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint16> b,
    int n,
    int stride,
  ) {
    return _gsl_block_ushort_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_ushort_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_block_ushort_raw_fread');
  late final _gsl_block_ushort_raw_fread =
      _gsl_block_ushort_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_block_ushort_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint16> b,
    int n,
    int stride,
  ) {
    return _gsl_block_ushort_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_ushort_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_block_ushort_raw_fwrite');
  late final _gsl_block_ushort_raw_fwrite =
      _gsl_block_ushort_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_block_ushort_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint16> b,
    int n,
    int stride,
  ) {
    return _gsl_block_ushort_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_ushort_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_block_ushort_raw_fscanf');
  late final _gsl_block_ushort_raw_fscanf =
      _gsl_block_ushort_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_block_ushort_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint16> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_ushort_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_ushort_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint16>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_ushort_raw_fprintf');
  late final _gsl_block_ushort_raw_fprintf =
      _gsl_block_ushort_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint16>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_ushort_size(
    ffi.Pointer<gsl_block_ushort> b,
  ) {
    return _gsl_block_ushort_size(
      b,
    );
  }

  late final _gsl_block_ushort_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_ushort>)>>(
      'gsl_block_ushort_size');
  late final _gsl_block_ushort_size = _gsl_block_ushort_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_ushort>)>();

  ffi.Pointer<ffi.Uint16> gsl_block_ushort_data(
    ffi.Pointer<gsl_block_ushort> b,
  ) {
    return _gsl_block_ushort_data(
      b,
    );
  }

  late final _gsl_block_ushort_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(
              ffi.Pointer<gsl_block_ushort>)>>('gsl_block_ushort_data');
  late final _gsl_block_ushort_data = _gsl_block_ushort_dataPtr.asFunction<
      ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<gsl_block_ushort>)>();

  ffi.Pointer<gsl_vector_ushort> gsl_vector_ushort_alloc(
    int n,
  ) {
    return _gsl_vector_ushort_alloc(
      n,
    );
  }

  late final _gsl_vector_ushort_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_ushort> Function(size_t)>>(
      'gsl_vector_ushort_alloc');
  late final _gsl_vector_ushort_alloc = _gsl_vector_ushort_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_ushort> Function(int)>();

  ffi.Pointer<gsl_vector_ushort> gsl_vector_ushort_calloc(
    int n,
  ) {
    return _gsl_vector_ushort_calloc(
      n,
    );
  }

  late final _gsl_vector_ushort_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_ushort> Function(size_t)>>(
      'gsl_vector_ushort_calloc');
  late final _gsl_vector_ushort_calloc = _gsl_vector_ushort_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_ushort> Function(int)>();

  ffi.Pointer<gsl_vector_ushort> gsl_vector_ushort_alloc_from_block(
    ffi.Pointer<gsl_block_ushort> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_ushort_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_ushort_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_ushort> Function(ffi.Pointer<gsl_block_ushort>,
              size_t, size_t, size_t)>>('gsl_vector_ushort_alloc_from_block');
  late final _gsl_vector_ushort_alloc_from_block =
      _gsl_vector_ushort_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_ushort> Function(
              ffi.Pointer<gsl_block_ushort>, int, int, int)>();

  ffi.Pointer<gsl_vector_ushort> gsl_vector_ushort_alloc_from_vector(
    ffi.Pointer<gsl_vector_ushort> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_ushort_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_ushort_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_ushort> Function(
              ffi.Pointer<gsl_vector_ushort>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_ushort_alloc_from_vector');
  late final _gsl_vector_ushort_alloc_from_vector =
      _gsl_vector_ushort_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_ushort> Function(
              ffi.Pointer<gsl_vector_ushort>, int, int, int)>();

  void gsl_vector_ushort_free(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_free(
      v,
    );
  }

  late final _gsl_vector_ushort_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_free');
  late final _gsl_vector_ushort_free = _gsl_vector_ushort_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ushort>)>();

  _gsl_vector_ushort_view gsl_vector_ushort_view_array(
    ffi.Pointer<ffi.Uint16> v,
    int n,
  ) {
    return _gsl_vector_ushort_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_ushort_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<ffi.Uint16>,
              size_t)>>('gsl_vector_ushort_view_array');
  late final _gsl_vector_ushort_view_array =
      _gsl_vector_ushort_view_arrayPtr.asFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<ffi.Uint16>, int)>();

  _gsl_vector_ushort_view gsl_vector_ushort_view_array_with_stride(
    ffi.Pointer<ffi.Uint16> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_ushort_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_ushort_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_vector_ushort_view_array_with_stride');
  late final _gsl_vector_ushort_view_array_with_stride =
      _gsl_vector_ushort_view_array_with_stridePtr.asFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<ffi.Uint16>, int, int)>();

  _gsl_vector_ushort_const_view gsl_vector_ushort_const_view_array(
    ffi.Pointer<ffi.Uint16> v,
    int n,
  ) {
    return _gsl_vector_ushort_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_ushort_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(ffi.Pointer<ffi.Uint16>,
              size_t)>>('gsl_vector_ushort_const_view_array');
  late final _gsl_vector_ushort_const_view_array =
      _gsl_vector_ushort_const_view_arrayPtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<ffi.Uint16>, int)>();

  _gsl_vector_ushort_const_view gsl_vector_ushort_const_view_array_with_stride(
    ffi.Pointer<ffi.Uint16> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_ushort_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_ushort_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_vector_ushort_const_view_array_with_stride');
  late final _gsl_vector_ushort_const_view_array_with_stride =
      _gsl_vector_ushort_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<ffi.Uint16>, int, int)>();

  _gsl_vector_ushort_view gsl_vector_ushort_subvector(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
    int n,
  ) {
    return _gsl_vector_ushort_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_ushort_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<gsl_vector_ushort>,
              size_t, size_t)>>('gsl_vector_ushort_subvector');
  late final _gsl_vector_ushort_subvector =
      _gsl_vector_ushort_subvectorPtr.asFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<gsl_vector_ushort>, int, int)>();

  _gsl_vector_ushort_view gsl_vector_ushort_subvector_with_stride(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_ushort_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_ushort_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<gsl_vector_ushort>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_ushort_subvector_with_stride');
  late final _gsl_vector_ushort_subvector_with_stride =
      _gsl_vector_ushort_subvector_with_stridePtr.asFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<gsl_vector_ushort>, int, int, int)>();

  _gsl_vector_ushort_const_view gsl_vector_ushort_const_subvector(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
    int n,
  ) {
    return _gsl_vector_ushort_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_ushort_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(ffi.Pointer<gsl_vector_ushort>,
              size_t, size_t)>>('gsl_vector_ushort_const_subvector');
  late final _gsl_vector_ushort_const_subvector =
      _gsl_vector_ushort_const_subvectorPtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_vector_ushort>, int, int)>();

  _gsl_vector_ushort_const_view gsl_vector_ushort_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_ushort_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_ushort_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_vector_ushort>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_ushort_const_subvector_with_stride');
  late final _gsl_vector_ushort_const_subvector_with_stride =
      _gsl_vector_ushort_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_vector_ushort>, int, int, int)>();

  void gsl_vector_ushort_set_zero(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_set_zero(
      v,
    );
  }

  late final _gsl_vector_ushort_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_set_zero');
  late final _gsl_vector_ushort_set_zero = _gsl_vector_ushort_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ushort>)>();

  void gsl_vector_ushort_set_all(
    ffi.Pointer<gsl_vector_ushort> v,
    int x,
  ) {
    return _gsl_vector_ushort_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_ushort_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Uint16)>>('gsl_vector_ushort_set_all');
  late final _gsl_vector_ushort_set_all = _gsl_vector_ushort_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ushort>, int)>();

  int gsl_vector_ushort_set_basis(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
  ) {
    return _gsl_vector_ushort_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_ushort_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              size_t)>>('gsl_vector_ushort_set_basis');
  late final _gsl_vector_ushort_set_basis = _gsl_vector_ushort_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>, int)>();

  int gsl_vector_ushort_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_ushort_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_fread');
  late final _gsl_vector_ushort_fread = _gsl_vector_ushort_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_ushort_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_fwrite');
  late final _gsl_vector_ushort_fwrite =
      _gsl_vector_ushort_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_ushort_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_fscanf');
  late final _gsl_vector_ushort_fscanf =
      _gsl_vector_ushort_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_ushort> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_ushort_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_ushort_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_ushort_fprintf');
  late final _gsl_vector_ushort_fprintf =
      _gsl_vector_ushort_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_ushort_memcpy(
    ffi.Pointer<gsl_vector_ushort> dest,
    ffi.Pointer<gsl_vector_ushort> src,
  ) {
    return _gsl_vector_ushort_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_ushort_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_memcpy');
  late final _gsl_vector_ushort_memcpy =
      _gsl_vector_ushort_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_reverse(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_reverse(
      v,
    );
  }

  late final _gsl_vector_ushort_reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_reverse');
  late final _gsl_vector_ushort_reverse = _gsl_vector_ushort_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_swap(
    ffi.Pointer<gsl_vector_ushort> v,
    ffi.Pointer<gsl_vector_ushort> w,
  ) {
    return _gsl_vector_ushort_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_ushort_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_swap');
  late final _gsl_vector_ushort_swap = _gsl_vector_ushort_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_swap_elements(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
    int j,
  ) {
    return _gsl_vector_ushort_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_ushort_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>, size_t,
              size_t)>>('gsl_vector_ushort_swap_elements');
  late final _gsl_vector_ushort_swap_elements =
      _gsl_vector_ushort_swap_elementsPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>, int, int)>();

  int gsl_vector_ushort_max(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_max(
      v,
    );
  }

  late final _gsl_vector_ushort_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_max');
  late final _gsl_vector_ushort_max = _gsl_vector_ushort_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_min(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_min(
      v,
    );
  }

  late final _gsl_vector_ushort_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_min');
  late final _gsl_vector_ushort_min = _gsl_vector_ushort_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  void gsl_vector_ushort_minmax(
    ffi.Pointer<gsl_vector_ushort> v,
    ffi.Pointer<ffi.Uint16> min_out,
    ffi.Pointer<ffi.Uint16> max_out,
  ) {
    return _gsl_vector_ushort_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_ushort_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>)>>('gsl_vector_ushort_minmax');
  late final _gsl_vector_ushort_minmax =
      _gsl_vector_ushort_minmaxPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>)>();

  int gsl_vector_ushort_max_index(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_max_index(
      v,
    );
  }

  late final _gsl_vector_ushort_max_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_vector_ushort_max_index');
  late final _gsl_vector_ushort_max_index = _gsl_vector_ushort_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_min_index(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_min_index(
      v,
    );
  }

  late final _gsl_vector_ushort_min_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_vector_ushort_min_index');
  late final _gsl_vector_ushort_min_index = _gsl_vector_ushort_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  void gsl_vector_ushort_minmax_index(
    ffi.Pointer<gsl_vector_ushort> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_ushort_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_ushort_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_ushort_minmax_index');
  late final _gsl_vector_ushort_minmax_index =
      _gsl_vector_ushort_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_vector_ushort_add(
    ffi.Pointer<gsl_vector_ushort> a,
    ffi.Pointer<gsl_vector_ushort> b,
  ) {
    return _gsl_vector_ushort_add(
      a,
      b,
    );
  }

  late final _gsl_vector_ushort_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_add');
  late final _gsl_vector_ushort_add = _gsl_vector_ushort_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_sub(
    ffi.Pointer<gsl_vector_ushort> a,
    ffi.Pointer<gsl_vector_ushort> b,
  ) {
    return _gsl_vector_ushort_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_ushort_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_sub');
  late final _gsl_vector_ushort_sub = _gsl_vector_ushort_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_mul(
    ffi.Pointer<gsl_vector_ushort> a,
    ffi.Pointer<gsl_vector_ushort> b,
  ) {
    return _gsl_vector_ushort_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_ushort_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_mul');
  late final _gsl_vector_ushort_mul = _gsl_vector_ushort_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_div(
    ffi.Pointer<gsl_vector_ushort> a,
    ffi.Pointer<gsl_vector_ushort> b,
  ) {
    return _gsl_vector_ushort_div(
      a,
      b,
    );
  }

  late final _gsl_vector_ushort_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_div');
  late final _gsl_vector_ushort_div = _gsl_vector_ushort_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_scale(
    ffi.Pointer<gsl_vector_ushort> a,
    int x,
  ) {
    return _gsl_vector_ushort_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_ushort_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Uint16)>>('gsl_vector_ushort_scale');
  late final _gsl_vector_ushort_scale = _gsl_vector_ushort_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>, int)>();

  int gsl_vector_ushort_add_constant(
    ffi.Pointer<gsl_vector_ushort> a,
    int x,
  ) {
    return _gsl_vector_ushort_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_ushort_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Uint16)>>('gsl_vector_ushort_add_constant');
  late final _gsl_vector_ushort_add_constant =
      _gsl_vector_ushort_add_constantPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>, int)>();

  int gsl_vector_ushort_axpby(
    int alpha,
    ffi.Pointer<gsl_vector_ushort> x,
    int beta,
    ffi.Pointer<gsl_vector_ushort> y,
  ) {
    return _gsl_vector_ushort_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_ushort_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint16,
              ffi.Pointer<gsl_vector_ushort>,
              ffi.Uint16,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_axpby');
  late final _gsl_vector_ushort_axpby = _gsl_vector_ushort_axpbyPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector_ushort>, int,
          ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_sum(
    ffi.Pointer<gsl_vector_ushort> a,
  ) {
    return _gsl_vector_ushort_sum(
      a,
    );
  }

  late final _gsl_vector_ushort_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_sum');
  late final _gsl_vector_ushort_sum = _gsl_vector_ushort_sumPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_equal(
    ffi.Pointer<gsl_vector_ushort> u,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_ushort_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_equal');
  late final _gsl_vector_ushort_equal = _gsl_vector_ushort_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_isnull(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_isnull(
      v,
    );
  }

  late final _gsl_vector_ushort_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_isnull');
  late final _gsl_vector_ushort_isnull = _gsl_vector_ushort_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_ispos(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_ispos(
      v,
    );
  }

  late final _gsl_vector_ushort_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_ispos');
  late final _gsl_vector_ushort_ispos = _gsl_vector_ushort_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_isneg(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_isneg(
      v,
    );
  }

  late final _gsl_vector_ushort_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_isneg');
  late final _gsl_vector_ushort_isneg = _gsl_vector_ushort_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_isnonneg(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_vector_ushort_isnonneg(
      v,
    );
  }

  late final _gsl_vector_ushort_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_vector_ushort_isnonneg');
  late final _gsl_vector_ushort_isnonneg = _gsl_vector_ushort_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_vector_ushort_get(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
  ) {
    return _gsl_vector_ushort_get(
      v,
      i,
    );
  }

  late final _gsl_vector_ushort_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<gsl_vector_ushort>,
              size_t)>>('gsl_vector_ushort_get');
  late final _gsl_vector_ushort_get = _gsl_vector_ushort_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_ushort>, int)>();

  void gsl_vector_ushort_set(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
    int x,
  ) {
    return _gsl_vector_ushort_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_ushort_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_ushort>, size_t,
              ffi.Uint16)>>('gsl_vector_ushort_set');
  late final _gsl_vector_ushort_set = _gsl_vector_ushort_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ushort>, int, int)>();

  ffi.Pointer<ffi.Uint16> gsl_vector_ushort_ptr(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
  ) {
    return _gsl_vector_ushort_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_ushort_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<gsl_vector_ushort>,
              size_t)>>('gsl_vector_ushort_ptr');
  late final _gsl_vector_ushort_ptr = _gsl_vector_ushort_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<gsl_vector_ushort>, int)>();

  ffi.Pointer<ffi.Uint16> gsl_vector_ushort_const_ptr(
    ffi.Pointer<gsl_vector_ushort> v,
    int i,
  ) {
    return _gsl_vector_ushort_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_ushort_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<gsl_vector_ushort>,
              size_t)>>('gsl_vector_ushort_const_ptr');
  late final _gsl_vector_ushort_const_ptr =
      _gsl_vector_ushort_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Uint16> Function(
              ffi.Pointer<gsl_vector_ushort>, int)>();

  ffi.Pointer<gsl_block_short> gsl_block_short_alloc(
    int n,
  ) {
    return _gsl_block_short_alloc(
      n,
    );
  }

  late final _gsl_block_short_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_short> Function(size_t)>>(
      'gsl_block_short_alloc');
  late final _gsl_block_short_alloc = _gsl_block_short_allocPtr
      .asFunction<ffi.Pointer<gsl_block_short> Function(int)>();

  ffi.Pointer<gsl_block_short> gsl_block_short_calloc(
    int n,
  ) {
    return _gsl_block_short_calloc(
      n,
    );
  }

  late final _gsl_block_short_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_short> Function(size_t)>>(
      'gsl_block_short_calloc');
  late final _gsl_block_short_calloc = _gsl_block_short_callocPtr
      .asFunction<ffi.Pointer<gsl_block_short> Function(int)>();

  void gsl_block_short_free(
    ffi.Pointer<gsl_block_short> b,
  ) {
    return _gsl_block_short_free(
      b,
    );
  }

  late final _gsl_block_short_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block_short>)>>(
      'gsl_block_short_free');
  late final _gsl_block_short_free = _gsl_block_short_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_short>)>();

  int gsl_block_short_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_short> b,
  ) {
    return _gsl_block_short_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_short_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_short>)>>('gsl_block_short_fread');
  late final _gsl_block_short_fread = _gsl_block_short_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_short>)>();

  int gsl_block_short_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_short> b,
  ) {
    return _gsl_block_short_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_short_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_short>)>>('gsl_block_short_fwrite');
  late final _gsl_block_short_fwrite = _gsl_block_short_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_short>)>();

  int gsl_block_short_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_short> b,
  ) {
    return _gsl_block_short_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_short_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_short>)>>('gsl_block_short_fscanf');
  late final _gsl_block_short_fscanf = _gsl_block_short_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_short>)>();

  int gsl_block_short_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_short> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_short_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_short_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_short>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_short_fprintf');
  late final _gsl_block_short_fprintf = _gsl_block_short_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_short>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_block_short_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int16> b,
    int n,
    int stride,
  ) {
    return _gsl_block_short_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_short_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_block_short_raw_fread');
  late final _gsl_block_short_raw_fread =
      _gsl_block_short_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_block_short_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int16> b,
    int n,
    int stride,
  ) {
    return _gsl_block_short_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_short_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_block_short_raw_fwrite');
  late final _gsl_block_short_raw_fwrite =
      _gsl_block_short_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_block_short_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int16> b,
    int n,
    int stride,
  ) {
    return _gsl_block_short_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_short_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_block_short_raw_fscanf');
  late final _gsl_block_short_raw_fscanf =
      _gsl_block_short_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_block_short_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int16> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_short_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_short_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int16>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_short_raw_fprintf');
  late final _gsl_block_short_raw_fprintf =
      _gsl_block_short_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int16>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_short_size(
    ffi.Pointer<gsl_block_short> b,
  ) {
    return _gsl_block_short_size(
      b,
    );
  }

  late final _gsl_block_short_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_short>)>>(
      'gsl_block_short_size');
  late final _gsl_block_short_size = _gsl_block_short_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_short>)>();

  ffi.Pointer<ffi.Int16> gsl_block_short_data(
    ffi.Pointer<gsl_block_short> b,
  ) {
    return _gsl_block_short_data(
      b,
    );
  }

  late final _gsl_block_short_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int16> Function(
              ffi.Pointer<gsl_block_short>)>>('gsl_block_short_data');
  late final _gsl_block_short_data = _gsl_block_short_dataPtr.asFunction<
      ffi.Pointer<ffi.Int16> Function(ffi.Pointer<gsl_block_short>)>();

  ffi.Pointer<gsl_vector_short> gsl_vector_short_alloc(
    int n,
  ) {
    return _gsl_vector_short_alloc(
      n,
    );
  }

  late final _gsl_vector_short_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_short> Function(size_t)>>(
      'gsl_vector_short_alloc');
  late final _gsl_vector_short_alloc = _gsl_vector_short_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_short> Function(int)>();

  ffi.Pointer<gsl_vector_short> gsl_vector_short_calloc(
    int n,
  ) {
    return _gsl_vector_short_calloc(
      n,
    );
  }

  late final _gsl_vector_short_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_short> Function(size_t)>>(
      'gsl_vector_short_calloc');
  late final _gsl_vector_short_calloc = _gsl_vector_short_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_short> Function(int)>();

  ffi.Pointer<gsl_vector_short> gsl_vector_short_alloc_from_block(
    ffi.Pointer<gsl_block_short> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_short_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_short_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_short> Function(ffi.Pointer<gsl_block_short>,
              size_t, size_t, size_t)>>('gsl_vector_short_alloc_from_block');
  late final _gsl_vector_short_alloc_from_block =
      _gsl_vector_short_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_short> Function(
              ffi.Pointer<gsl_block_short>, int, int, int)>();

  ffi.Pointer<gsl_vector_short> gsl_vector_short_alloc_from_vector(
    ffi.Pointer<gsl_vector_short> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_short_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_short_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_short> Function(ffi.Pointer<gsl_vector_short>,
              size_t, size_t, size_t)>>('gsl_vector_short_alloc_from_vector');
  late final _gsl_vector_short_alloc_from_vector =
      _gsl_vector_short_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_short> Function(
              ffi.Pointer<gsl_vector_short>, int, int, int)>();

  void gsl_vector_short_free(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_free(
      v,
    );
  }

  late final _gsl_vector_short_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_short>)>>(
      'gsl_vector_short_free');
  late final _gsl_vector_short_free = _gsl_vector_short_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_short>)>();

  _gsl_vector_short_view gsl_vector_short_view_array(
    ffi.Pointer<ffi.Int16> v,
    int n,
  ) {
    return _gsl_vector_short_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_short_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(
              ffi.Pointer<ffi.Int16>, size_t)>>('gsl_vector_short_view_array');
  late final _gsl_vector_short_view_array =
      _gsl_vector_short_view_arrayPtr.asFunction<
          _gsl_vector_short_view Function(ffi.Pointer<ffi.Int16>, int)>();

  _gsl_vector_short_view gsl_vector_short_view_array_with_stride(
    ffi.Pointer<ffi.Int16> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_short_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_short_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_vector_short_view_array_with_stride');
  late final _gsl_vector_short_view_array_with_stride =
      _gsl_vector_short_view_array_with_stridePtr.asFunction<
          _gsl_vector_short_view Function(ffi.Pointer<ffi.Int16>, int, int)>();

  _gsl_vector_short_const_view gsl_vector_short_const_view_array(
    ffi.Pointer<ffi.Int16> v,
    int n,
  ) {
    return _gsl_vector_short_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_short_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<ffi.Int16>,
              size_t)>>('gsl_vector_short_const_view_array');
  late final _gsl_vector_short_const_view_array =
      _gsl_vector_short_const_view_arrayPtr.asFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<ffi.Int16>, int)>();

  _gsl_vector_short_const_view gsl_vector_short_const_view_array_with_stride(
    ffi.Pointer<ffi.Int16> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_short_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_short_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_vector_short_const_view_array_with_stride');
  late final _gsl_vector_short_const_view_array_with_stride =
      _gsl_vector_short_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<ffi.Int16>, int, int)>();

  _gsl_vector_short_view gsl_vector_short_subvector(
    ffi.Pointer<gsl_vector_short> v,
    int i,
    int n,
  ) {
    return _gsl_vector_short_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_short_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(ffi.Pointer<gsl_vector_short>, size_t,
              size_t)>>('gsl_vector_short_subvector');
  late final _gsl_vector_short_subvector =
      _gsl_vector_short_subvectorPtr.asFunction<
          _gsl_vector_short_view Function(
              ffi.Pointer<gsl_vector_short>, int, int)>();

  _gsl_vector_short_view gsl_vector_short_subvector_with_stride(
    ffi.Pointer<gsl_vector_short> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_short_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_short_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(ffi.Pointer<gsl_vector_short>, size_t,
              size_t, size_t)>>('gsl_vector_short_subvector_with_stride');
  late final _gsl_vector_short_subvector_with_stride =
      _gsl_vector_short_subvector_with_stridePtr.asFunction<
          _gsl_vector_short_view Function(
              ffi.Pointer<gsl_vector_short>, int, int, int)>();

  _gsl_vector_short_const_view gsl_vector_short_const_subvector(
    ffi.Pointer<gsl_vector_short> v,
    int i,
    int n,
  ) {
    return _gsl_vector_short_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_short_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<gsl_vector_short>,
              size_t, size_t)>>('gsl_vector_short_const_subvector');
  late final _gsl_vector_short_const_subvector =
      _gsl_vector_short_const_subvectorPtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_vector_short>, int, int)>();

  _gsl_vector_short_const_view gsl_vector_short_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_short> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_short_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_short_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_vector_short>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_short_const_subvector_with_stride');
  late final _gsl_vector_short_const_subvector_with_stride =
      _gsl_vector_short_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_vector_short>, int, int, int)>();

  void gsl_vector_short_set_zero(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_set_zero(
      v,
    );
  }

  late final _gsl_vector_short_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_short>)>>(
      'gsl_vector_short_set_zero');
  late final _gsl_vector_short_set_zero = _gsl_vector_short_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_short>)>();

  void gsl_vector_short_set_all(
    ffi.Pointer<gsl_vector_short> v,
    int x,
  ) {
    return _gsl_vector_short_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_short_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_short>,
              ffi.Int16)>>('gsl_vector_short_set_all');
  late final _gsl_vector_short_set_all = _gsl_vector_short_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_short>, int)>();

  int gsl_vector_short_set_basis(
    ffi.Pointer<gsl_vector_short> v,
    int i,
  ) {
    return _gsl_vector_short_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_short_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              size_t)>>('gsl_vector_short_set_basis');
  late final _gsl_vector_short_set_basis = _gsl_vector_short_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>, int)>();

  int gsl_vector_short_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_short_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_fread');
  late final _gsl_vector_short_fread = _gsl_vector_short_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_short_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_fwrite');
  late final _gsl_vector_short_fwrite = _gsl_vector_short_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_short_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_fscanf');
  late final _gsl_vector_short_fscanf = _gsl_vector_short_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_short> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_short_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_short_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_short_fprintf');
  late final _gsl_vector_short_fprintf =
      _gsl_vector_short_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_short_memcpy(
    ffi.Pointer<gsl_vector_short> dest,
    ffi.Pointer<gsl_vector_short> src,
  ) {
    return _gsl_vector_short_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_short_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_memcpy');
  late final _gsl_vector_short_memcpy = _gsl_vector_short_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_reverse(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_reverse(
      v,
    );
  }

  late final _gsl_vector_short_reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_reverse');
  late final _gsl_vector_short_reverse = _gsl_vector_short_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_swap(
    ffi.Pointer<gsl_vector_short> v,
    ffi.Pointer<gsl_vector_short> w,
  ) {
    return _gsl_vector_short_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_short_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_swap');
  late final _gsl_vector_short_swap = _gsl_vector_short_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_swap_elements(
    ffi.Pointer<gsl_vector_short> v,
    int i,
    int j,
  ) {
    return _gsl_vector_short_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_short_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>, size_t,
              size_t)>>('gsl_vector_short_swap_elements');
  late final _gsl_vector_short_swap_elements =
      _gsl_vector_short_swap_elementsPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_short>, int, int)>();

  int gsl_vector_short_max(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_max(
      v,
    );
  }

  late final _gsl_vector_short_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_max');
  late final _gsl_vector_short_max = _gsl_vector_short_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_min(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_min(
      v,
    );
  }

  late final _gsl_vector_short_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_min');
  late final _gsl_vector_short_min = _gsl_vector_short_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  void gsl_vector_short_minmax(
    ffi.Pointer<gsl_vector_short> v,
    ffi.Pointer<ffi.Int16> min_out,
    ffi.Pointer<ffi.Int16> max_out,
  ) {
    return _gsl_vector_short_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_short_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int16>)>>('gsl_vector_short_minmax');
  late final _gsl_vector_short_minmax = _gsl_vector_short_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector_short>, ffi.Pointer<ffi.Int16>,
          ffi.Pointer<ffi.Int16>)>();

  int gsl_vector_short_max_index(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_max_index(
      v,
    );
  }

  late final _gsl_vector_short_max_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_short>)>>(
      'gsl_vector_short_max_index');
  late final _gsl_vector_short_max_index = _gsl_vector_short_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_min_index(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_min_index(
      v,
    );
  }

  late final _gsl_vector_short_min_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_short>)>>(
      'gsl_vector_short_min_index');
  late final _gsl_vector_short_min_index = _gsl_vector_short_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  void gsl_vector_short_minmax_index(
    ffi.Pointer<gsl_vector_short> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_short_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_short_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_short>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_short_minmax_index');
  late final _gsl_vector_short_minmax_index =
      _gsl_vector_short_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_short>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_vector_short_add(
    ffi.Pointer<gsl_vector_short> a,
    ffi.Pointer<gsl_vector_short> b,
  ) {
    return _gsl_vector_short_add(
      a,
      b,
    );
  }

  late final _gsl_vector_short_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_add');
  late final _gsl_vector_short_add = _gsl_vector_short_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_sub(
    ffi.Pointer<gsl_vector_short> a,
    ffi.Pointer<gsl_vector_short> b,
  ) {
    return _gsl_vector_short_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_short_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_sub');
  late final _gsl_vector_short_sub = _gsl_vector_short_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_mul(
    ffi.Pointer<gsl_vector_short> a,
    ffi.Pointer<gsl_vector_short> b,
  ) {
    return _gsl_vector_short_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_short_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_mul');
  late final _gsl_vector_short_mul = _gsl_vector_short_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_div(
    ffi.Pointer<gsl_vector_short> a,
    ffi.Pointer<gsl_vector_short> b,
  ) {
    return _gsl_vector_short_div(
      a,
      b,
    );
  }

  late final _gsl_vector_short_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_div');
  late final _gsl_vector_short_div = _gsl_vector_short_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_scale(
    ffi.Pointer<gsl_vector_short> a,
    int x,
  ) {
    return _gsl_vector_short_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_short_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              ffi.Int16)>>('gsl_vector_short_scale');
  late final _gsl_vector_short_scale = _gsl_vector_short_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>, int)>();

  int gsl_vector_short_add_constant(
    ffi.Pointer<gsl_vector_short> a,
    int x,
  ) {
    return _gsl_vector_short_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_short_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              ffi.Int16)>>('gsl_vector_short_add_constant');
  late final _gsl_vector_short_add_constant = _gsl_vector_short_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>, int)>();

  int gsl_vector_short_axpby(
    int alpha,
    ffi.Pointer<gsl_vector_short> x,
    int beta,
    ffi.Pointer<gsl_vector_short> y,
  ) {
    return _gsl_vector_short_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_short_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int16,
              ffi.Pointer<gsl_vector_short>,
              ffi.Int16,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_axpby');
  late final _gsl_vector_short_axpby = _gsl_vector_short_axpbyPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector_short>, int,
          ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_sum(
    ffi.Pointer<gsl_vector_short> a,
  ) {
    return _gsl_vector_short_sum(
      a,
    );
  }

  late final _gsl_vector_short_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_sum');
  late final _gsl_vector_short_sum = _gsl_vector_short_sumPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_equal(
    ffi.Pointer<gsl_vector_short> u,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_short_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_equal');
  late final _gsl_vector_short_equal = _gsl_vector_short_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_isnull(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_isnull(
      v,
    );
  }

  late final _gsl_vector_short_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_isnull');
  late final _gsl_vector_short_isnull = _gsl_vector_short_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_ispos(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_ispos(
      v,
    );
  }

  late final _gsl_vector_short_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_ispos');
  late final _gsl_vector_short_ispos = _gsl_vector_short_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_isneg(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_isneg(
      v,
    );
  }

  late final _gsl_vector_short_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_isneg');
  late final _gsl_vector_short_isneg = _gsl_vector_short_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_isnonneg(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_vector_short_isnonneg(
      v,
    );
  }

  late final _gsl_vector_short_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_short>)>>('gsl_vector_short_isnonneg');
  late final _gsl_vector_short_isnonneg = _gsl_vector_short_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>)>();

  int gsl_vector_short_get(
    ffi.Pointer<gsl_vector_short> v,
    int i,
  ) {
    return _gsl_vector_short_get(
      v,
      i,
    );
  }

  late final _gsl_vector_short_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<gsl_vector_short>, size_t)>>('gsl_vector_short_get');
  late final _gsl_vector_short_get = _gsl_vector_short_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_short>, int)>();

  void gsl_vector_short_set(
    ffi.Pointer<gsl_vector_short> v,
    int i,
    int x,
  ) {
    return _gsl_vector_short_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_short_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_short>, size_t,
              ffi.Int16)>>('gsl_vector_short_set');
  late final _gsl_vector_short_set = _gsl_vector_short_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_short>, int, int)>();

  ffi.Pointer<ffi.Int16> gsl_vector_short_ptr(
    ffi.Pointer<gsl_vector_short> v,
    int i,
  ) {
    return _gsl_vector_short_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_short_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int16> Function(
              ffi.Pointer<gsl_vector_short>, size_t)>>('gsl_vector_short_ptr');
  late final _gsl_vector_short_ptr = _gsl_vector_short_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int16> Function(ffi.Pointer<gsl_vector_short>, int)>();

  ffi.Pointer<ffi.Int16> gsl_vector_short_const_ptr(
    ffi.Pointer<gsl_vector_short> v,
    int i,
  ) {
    return _gsl_vector_short_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_short_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int16> Function(ffi.Pointer<gsl_vector_short>,
              size_t)>>('gsl_vector_short_const_ptr');
  late final _gsl_vector_short_const_ptr =
      _gsl_vector_short_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Int16> Function(
              ffi.Pointer<gsl_vector_short>, int)>();

  ffi.Pointer<gsl_block_uchar> gsl_block_uchar_alloc(
    int n,
  ) {
    return _gsl_block_uchar_alloc(
      n,
    );
  }

  late final _gsl_block_uchar_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_uchar> Function(size_t)>>(
      'gsl_block_uchar_alloc');
  late final _gsl_block_uchar_alloc = _gsl_block_uchar_allocPtr
      .asFunction<ffi.Pointer<gsl_block_uchar> Function(int)>();

  ffi.Pointer<gsl_block_uchar> gsl_block_uchar_calloc(
    int n,
  ) {
    return _gsl_block_uchar_calloc(
      n,
    );
  }

  late final _gsl_block_uchar_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_block_uchar> Function(size_t)>>(
      'gsl_block_uchar_calloc');
  late final _gsl_block_uchar_calloc = _gsl_block_uchar_callocPtr
      .asFunction<ffi.Pointer<gsl_block_uchar> Function(int)>();

  void gsl_block_uchar_free(
    ffi.Pointer<gsl_block_uchar> b,
  ) {
    return _gsl_block_uchar_free(
      b,
    );
  }

  late final _gsl_block_uchar_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block_uchar>)>>(
      'gsl_block_uchar_free');
  late final _gsl_block_uchar_free = _gsl_block_uchar_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_uchar>)>();

  int gsl_block_uchar_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_uchar> b,
  ) {
    return _gsl_block_uchar_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_uchar_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_uchar>)>>('gsl_block_uchar_fread');
  late final _gsl_block_uchar_fread = _gsl_block_uchar_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uchar>)>();

  int gsl_block_uchar_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_uchar> b,
  ) {
    return _gsl_block_uchar_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_uchar_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_uchar>)>>('gsl_block_uchar_fwrite');
  late final _gsl_block_uchar_fwrite = _gsl_block_uchar_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uchar>)>();

  int gsl_block_uchar_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_uchar> b,
  ) {
    return _gsl_block_uchar_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_uchar_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_uchar>)>>('gsl_block_uchar_fscanf');
  late final _gsl_block_uchar_fscanf = _gsl_block_uchar_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uchar>)>();

  int gsl_block_uchar_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_uchar> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_uchar_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_uchar_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uchar>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_uchar_fprintf');
  late final _gsl_block_uchar_fprintf = _gsl_block_uchar_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_uchar>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_block_uchar_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint8> b,
    int n,
    int stride,
  ) {
    return _gsl_block_uchar_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_uchar_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_block_uchar_raw_fread');
  late final _gsl_block_uchar_raw_fread =
      _gsl_block_uchar_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_block_uchar_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint8> b,
    int n,
    int stride,
  ) {
    return _gsl_block_uchar_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_uchar_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_block_uchar_raw_fwrite');
  late final _gsl_block_uchar_raw_fwrite =
      _gsl_block_uchar_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_block_uchar_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint8> b,
    int n,
    int stride,
  ) {
    return _gsl_block_uchar_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_uchar_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_block_uchar_raw_fscanf');
  late final _gsl_block_uchar_raw_fscanf =
      _gsl_block_uchar_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_block_uchar_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Uint8> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_uchar_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_uchar_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint8>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_uchar_raw_fprintf');
  late final _gsl_block_uchar_raw_fprintf =
      _gsl_block_uchar_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Uint8>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_uchar_size(
    ffi.Pointer<gsl_block_uchar> b,
  ) {
    return _gsl_block_uchar_size(
      b,
    );
  }

  late final _gsl_block_uchar_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_uchar>)>>(
      'gsl_block_uchar_size');
  late final _gsl_block_uchar_size = _gsl_block_uchar_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_uchar>)>();

  ffi.Pointer<ffi.Uint8> gsl_block_uchar_data(
    ffi.Pointer<gsl_block_uchar> b,
  ) {
    return _gsl_block_uchar_data(
      b,
    );
  }

  late final _gsl_block_uchar_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<gsl_block_uchar>)>>('gsl_block_uchar_data');
  late final _gsl_block_uchar_data = _gsl_block_uchar_dataPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<gsl_block_uchar>)>();

  ffi.Pointer<gsl_vector_uchar> gsl_vector_uchar_alloc(
    int n,
  ) {
    return _gsl_vector_uchar_alloc(
      n,
    );
  }

  late final _gsl_vector_uchar_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_uchar> Function(size_t)>>(
      'gsl_vector_uchar_alloc');
  late final _gsl_vector_uchar_alloc = _gsl_vector_uchar_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_uchar> Function(int)>();

  ffi.Pointer<gsl_vector_uchar> gsl_vector_uchar_calloc(
    int n,
  ) {
    return _gsl_vector_uchar_calloc(
      n,
    );
  }

  late final _gsl_vector_uchar_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_uchar> Function(size_t)>>(
      'gsl_vector_uchar_calloc');
  late final _gsl_vector_uchar_calloc = _gsl_vector_uchar_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_uchar> Function(int)>();

  ffi.Pointer<gsl_vector_uchar> gsl_vector_uchar_alloc_from_block(
    ffi.Pointer<gsl_block_uchar> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_uchar_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_uchar_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_uchar> Function(ffi.Pointer<gsl_block_uchar>,
              size_t, size_t, size_t)>>('gsl_vector_uchar_alloc_from_block');
  late final _gsl_vector_uchar_alloc_from_block =
      _gsl_vector_uchar_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_uchar> Function(
              ffi.Pointer<gsl_block_uchar>, int, int, int)>();

  ffi.Pointer<gsl_vector_uchar> gsl_vector_uchar_alloc_from_vector(
    ffi.Pointer<gsl_vector_uchar> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_uchar_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_uchar_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_uchar> Function(ffi.Pointer<gsl_vector_uchar>,
              size_t, size_t, size_t)>>('gsl_vector_uchar_alloc_from_vector');
  late final _gsl_vector_uchar_alloc_from_vector =
      _gsl_vector_uchar_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_uchar> Function(
              ffi.Pointer<gsl_vector_uchar>, int, int, int)>();

  void gsl_vector_uchar_free(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_free(
      v,
    );
  }

  late final _gsl_vector_uchar_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_vector_uchar_free');
  late final _gsl_vector_uchar_free = _gsl_vector_uchar_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uchar>)>();

  _gsl_vector_uchar_view gsl_vector_uchar_view_array(
    ffi.Pointer<ffi.Uint8> v,
    int n,
  ) {
    return _gsl_vector_uchar_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_uchar_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(
              ffi.Pointer<ffi.Uint8>, size_t)>>('gsl_vector_uchar_view_array');
  late final _gsl_vector_uchar_view_array =
      _gsl_vector_uchar_view_arrayPtr.asFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<ffi.Uint8>, int)>();

  _gsl_vector_uchar_view gsl_vector_uchar_view_array_with_stride(
    ffi.Pointer<ffi.Uint8> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_uchar_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_uchar_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_vector_uchar_view_array_with_stride');
  late final _gsl_vector_uchar_view_array_with_stride =
      _gsl_vector_uchar_view_array_with_stridePtr.asFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  _gsl_vector_uchar_const_view gsl_vector_uchar_const_view_array(
    ffi.Pointer<ffi.Uint8> v,
    int n,
  ) {
    return _gsl_vector_uchar_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_uchar_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<ffi.Uint8>,
              size_t)>>('gsl_vector_uchar_const_view_array');
  late final _gsl_vector_uchar_const_view_array =
      _gsl_vector_uchar_const_view_arrayPtr.asFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<ffi.Uint8>, int)>();

  _gsl_vector_uchar_const_view gsl_vector_uchar_const_view_array_with_stride(
    ffi.Pointer<ffi.Uint8> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_uchar_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_uchar_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_vector_uchar_const_view_array_with_stride');
  late final _gsl_vector_uchar_const_view_array_with_stride =
      _gsl_vector_uchar_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<ffi.Uint8>, int, int)>();

  _gsl_vector_uchar_view gsl_vector_uchar_subvector(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
    int n,
  ) {
    return _gsl_vector_uchar_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_uchar_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<gsl_vector_uchar>, size_t,
              size_t)>>('gsl_vector_uchar_subvector');
  late final _gsl_vector_uchar_subvector =
      _gsl_vector_uchar_subvectorPtr.asFunction<
          _gsl_vector_uchar_view Function(
              ffi.Pointer<gsl_vector_uchar>, int, int)>();

  _gsl_vector_uchar_view gsl_vector_uchar_subvector_with_stride(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_uchar_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_uchar_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<gsl_vector_uchar>, size_t,
              size_t, size_t)>>('gsl_vector_uchar_subvector_with_stride');
  late final _gsl_vector_uchar_subvector_with_stride =
      _gsl_vector_uchar_subvector_with_stridePtr.asFunction<
          _gsl_vector_uchar_view Function(
              ffi.Pointer<gsl_vector_uchar>, int, int, int)>();

  _gsl_vector_uchar_const_view gsl_vector_uchar_const_subvector(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
    int n,
  ) {
    return _gsl_vector_uchar_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_uchar_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<gsl_vector_uchar>,
              size_t, size_t)>>('gsl_vector_uchar_const_subvector');
  late final _gsl_vector_uchar_const_subvector =
      _gsl_vector_uchar_const_subvectorPtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_vector_uchar>, int, int)>();

  _gsl_vector_uchar_const_view gsl_vector_uchar_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_uchar_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_uchar_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_vector_uchar>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_uchar_const_subvector_with_stride');
  late final _gsl_vector_uchar_const_subvector_with_stride =
      _gsl_vector_uchar_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_vector_uchar>, int, int, int)>();

  void gsl_vector_uchar_set_zero(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_set_zero(
      v,
    );
  }

  late final _gsl_vector_uchar_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_vector_uchar_set_zero');
  late final _gsl_vector_uchar_set_zero = _gsl_vector_uchar_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uchar>)>();

  void gsl_vector_uchar_set_all(
    ffi.Pointer<gsl_vector_uchar> v,
    int x,
  ) {
    return _gsl_vector_uchar_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_uchar_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Uint8)>>('gsl_vector_uchar_set_all');
  late final _gsl_vector_uchar_set_all = _gsl_vector_uchar_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uchar>, int)>();

  int gsl_vector_uchar_set_basis(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
  ) {
    return _gsl_vector_uchar_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_uchar_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              size_t)>>('gsl_vector_uchar_set_basis');
  late final _gsl_vector_uchar_set_basis = _gsl_vector_uchar_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>, int)>();

  int gsl_vector_uchar_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_uchar_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_fread');
  late final _gsl_vector_uchar_fread = _gsl_vector_uchar_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_uchar_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_fwrite');
  late final _gsl_vector_uchar_fwrite = _gsl_vector_uchar_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_uchar_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_fscanf');
  late final _gsl_vector_uchar_fscanf = _gsl_vector_uchar_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_uchar> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_uchar_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_uchar_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_uchar_fprintf');
  late final _gsl_vector_uchar_fprintf =
      _gsl_vector_uchar_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_uchar_memcpy(
    ffi.Pointer<gsl_vector_uchar> dest,
    ffi.Pointer<gsl_vector_uchar> src,
  ) {
    return _gsl_vector_uchar_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_uchar_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_memcpy');
  late final _gsl_vector_uchar_memcpy = _gsl_vector_uchar_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_reverse(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_reverse(
      v,
    );
  }

  late final _gsl_vector_uchar_reversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_reverse');
  late final _gsl_vector_uchar_reverse = _gsl_vector_uchar_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_swap(
    ffi.Pointer<gsl_vector_uchar> v,
    ffi.Pointer<gsl_vector_uchar> w,
  ) {
    return _gsl_vector_uchar_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_uchar_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_swap');
  late final _gsl_vector_uchar_swap = _gsl_vector_uchar_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_swap_elements(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
    int j,
  ) {
    return _gsl_vector_uchar_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_uchar_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>, size_t,
              size_t)>>('gsl_vector_uchar_swap_elements');
  late final _gsl_vector_uchar_swap_elements =
      _gsl_vector_uchar_swap_elementsPtr
          .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>, int, int)>();

  int gsl_vector_uchar_max(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_max(
      v,
    );
  }

  late final _gsl_vector_uchar_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_max');
  late final _gsl_vector_uchar_max = _gsl_vector_uchar_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_min(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_min(
      v,
    );
  }

  late final _gsl_vector_uchar_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_min');
  late final _gsl_vector_uchar_min = _gsl_vector_uchar_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  void gsl_vector_uchar_minmax(
    ffi.Pointer<gsl_vector_uchar> v,
    ffi.Pointer<ffi.Uint8> min_out,
    ffi.Pointer<ffi.Uint8> max_out,
  ) {
    return _gsl_vector_uchar_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_uchar_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('gsl_vector_uchar_minmax');
  late final _gsl_vector_uchar_minmax = _gsl_vector_uchar_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  int gsl_vector_uchar_max_index(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_max_index(
      v,
    );
  }

  late final _gsl_vector_uchar_max_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_vector_uchar_max_index');
  late final _gsl_vector_uchar_max_index = _gsl_vector_uchar_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_min_index(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_min_index(
      v,
    );
  }

  late final _gsl_vector_uchar_min_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_vector_uchar_min_index');
  late final _gsl_vector_uchar_min_index = _gsl_vector_uchar_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  void gsl_vector_uchar_minmax_index(
    ffi.Pointer<gsl_vector_uchar> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_uchar_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_uchar_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_uchar_minmax_index');
  late final _gsl_vector_uchar_minmax_index =
      _gsl_vector_uchar_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_vector_uchar_add(
    ffi.Pointer<gsl_vector_uchar> a,
    ffi.Pointer<gsl_vector_uchar> b,
  ) {
    return _gsl_vector_uchar_add(
      a,
      b,
    );
  }

  late final _gsl_vector_uchar_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_add');
  late final _gsl_vector_uchar_add = _gsl_vector_uchar_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_sub(
    ffi.Pointer<gsl_vector_uchar> a,
    ffi.Pointer<gsl_vector_uchar> b,
  ) {
    return _gsl_vector_uchar_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_uchar_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_sub');
  late final _gsl_vector_uchar_sub = _gsl_vector_uchar_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_mul(
    ffi.Pointer<gsl_vector_uchar> a,
    ffi.Pointer<gsl_vector_uchar> b,
  ) {
    return _gsl_vector_uchar_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_uchar_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_mul');
  late final _gsl_vector_uchar_mul = _gsl_vector_uchar_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_div(
    ffi.Pointer<gsl_vector_uchar> a,
    ffi.Pointer<gsl_vector_uchar> b,
  ) {
    return _gsl_vector_uchar_div(
      a,
      b,
    );
  }

  late final _gsl_vector_uchar_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_div');
  late final _gsl_vector_uchar_div = _gsl_vector_uchar_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_scale(
    ffi.Pointer<gsl_vector_uchar> a,
    int x,
  ) {
    return _gsl_vector_uchar_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_uchar_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Uint8)>>('gsl_vector_uchar_scale');
  late final _gsl_vector_uchar_scale = _gsl_vector_uchar_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>, int)>();

  int gsl_vector_uchar_add_constant(
    ffi.Pointer<gsl_vector_uchar> a,
    int x,
  ) {
    return _gsl_vector_uchar_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_uchar_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Uint8)>>('gsl_vector_uchar_add_constant');
  late final _gsl_vector_uchar_add_constant = _gsl_vector_uchar_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>, int)>();

  int gsl_vector_uchar_axpby(
    int alpha,
    ffi.Pointer<gsl_vector_uchar> x,
    int beta,
    ffi.Pointer<gsl_vector_uchar> y,
  ) {
    return _gsl_vector_uchar_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_uchar_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint8,
              ffi.Pointer<gsl_vector_uchar>,
              ffi.Uint8,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_axpby');
  late final _gsl_vector_uchar_axpby = _gsl_vector_uchar_axpbyPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector_uchar>, int,
          ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_sum(
    ffi.Pointer<gsl_vector_uchar> a,
  ) {
    return _gsl_vector_uchar_sum(
      a,
    );
  }

  late final _gsl_vector_uchar_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_sum');
  late final _gsl_vector_uchar_sum = _gsl_vector_uchar_sumPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_equal(
    ffi.Pointer<gsl_vector_uchar> u,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_uchar_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_equal');
  late final _gsl_vector_uchar_equal = _gsl_vector_uchar_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_isnull(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_isnull(
      v,
    );
  }

  late final _gsl_vector_uchar_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_isnull');
  late final _gsl_vector_uchar_isnull = _gsl_vector_uchar_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_ispos(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_ispos(
      v,
    );
  }

  late final _gsl_vector_uchar_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_ispos');
  late final _gsl_vector_uchar_ispos = _gsl_vector_uchar_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_isneg(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_isneg(
      v,
    );
  }

  late final _gsl_vector_uchar_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_isneg');
  late final _gsl_vector_uchar_isneg = _gsl_vector_uchar_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_isnonneg(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_vector_uchar_isnonneg(
      v,
    );
  }

  late final _gsl_vector_uchar_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_vector_uchar_isnonneg');
  late final _gsl_vector_uchar_isnonneg = _gsl_vector_uchar_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_vector_uchar_get(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
  ) {
    return _gsl_vector_uchar_get(
      v,
      i,
    );
  }

  late final _gsl_vector_uchar_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gsl_vector_uchar>, size_t)>>('gsl_vector_uchar_get');
  late final _gsl_vector_uchar_get = _gsl_vector_uchar_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_uchar>, int)>();

  void gsl_vector_uchar_set(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
    int x,
  ) {
    return _gsl_vector_uchar_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_uchar_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_uchar>, size_t,
              ffi.Uint8)>>('gsl_vector_uchar_set');
  late final _gsl_vector_uchar_set = _gsl_vector_uchar_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uchar>, int, int)>();

  ffi.Pointer<ffi.Uint8> gsl_vector_uchar_ptr(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
  ) {
    return _gsl_vector_uchar_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_uchar_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<gsl_vector_uchar>, size_t)>>('gsl_vector_uchar_ptr');
  late final _gsl_vector_uchar_ptr = _gsl_vector_uchar_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<gsl_vector_uchar>, int)>();

  ffi.Pointer<ffi.Uint8> gsl_vector_uchar_const_ptr(
    ffi.Pointer<gsl_vector_uchar> v,
    int i,
  ) {
    return _gsl_vector_uchar_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_uchar_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<gsl_vector_uchar>,
              size_t)>>('gsl_vector_uchar_const_ptr');
  late final _gsl_vector_uchar_const_ptr =
      _gsl_vector_uchar_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<gsl_vector_uchar>, int)>();

  ffi.Pointer<gsl_block_char> gsl_block_char_alloc(
    int n,
  ) {
    return _gsl_block_char_alloc(
      n,
    );
  }

  late final _gsl_block_char_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block_char> Function(size_t)>>(
          'gsl_block_char_alloc');
  late final _gsl_block_char_alloc = _gsl_block_char_allocPtr
      .asFunction<ffi.Pointer<gsl_block_char> Function(int)>();

  ffi.Pointer<gsl_block_char> gsl_block_char_calloc(
    int n,
  ) {
    return _gsl_block_char_calloc(
      n,
    );
  }

  late final _gsl_block_char_callocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_block_char> Function(size_t)>>(
          'gsl_block_char_calloc');
  late final _gsl_block_char_calloc = _gsl_block_char_callocPtr
      .asFunction<ffi.Pointer<gsl_block_char> Function(int)>();

  void gsl_block_char_free(
    ffi.Pointer<gsl_block_char> b,
  ) {
    return _gsl_block_char_free(
      b,
    );
  }

  late final _gsl_block_char_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_block_char>)>>(
      'gsl_block_char_free');
  late final _gsl_block_char_free = _gsl_block_char_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_block_char>)>();

  int gsl_block_char_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_char> b,
  ) {
    return _gsl_block_char_fread(
      stream,
      b,
    );
  }

  late final _gsl_block_char_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_char>)>>('gsl_block_char_fread');
  late final _gsl_block_char_fread = _gsl_block_char_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_char>)>();

  int gsl_block_char_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_char> b,
  ) {
    return _gsl_block_char_fwrite(
      stream,
      b,
    );
  }

  late final _gsl_block_char_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_char>)>>('gsl_block_char_fwrite');
  late final _gsl_block_char_fwrite = _gsl_block_char_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_char>)>();

  int gsl_block_char_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_char> b,
  ) {
    return _gsl_block_char_fscanf(
      stream,
      b,
    );
  }

  late final _gsl_block_char_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_block_char>)>>('gsl_block_char_fscanf');
  late final _gsl_block_char_fscanf = _gsl_block_char_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_char>)>();

  int gsl_block_char_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_block_char> b,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_char_fprintf(
      stream,
      b,
      format,
    );
  }

  late final _gsl_block_char_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_char>,
              ffi.Pointer<ffi.Int8>)>>('gsl_block_char_fprintf');
  late final _gsl_block_char_fprintf = _gsl_block_char_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_block_char>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_block_char_raw_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int8> b,
    int n,
    int stride,
  ) {
    return _gsl_block_char_raw_fread(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_char_raw_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_block_char_raw_fread');
  late final _gsl_block_char_raw_fread =
      _gsl_block_char_raw_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_block_char_raw_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int8> b,
    int n,
    int stride,
  ) {
    return _gsl_block_char_raw_fwrite(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_char_raw_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_block_char_raw_fwrite');
  late final _gsl_block_char_raw_fwrite =
      _gsl_block_char_raw_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_block_char_raw_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int8> b,
    int n,
    int stride,
  ) {
    return _gsl_block_char_raw_fscanf(
      stream,
      b,
      n,
      stride,
    );
  }

  late final _gsl_block_char_raw_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_block_char_raw_fscanf');
  late final _gsl_block_char_raw_fscanf =
      _gsl_block_char_raw_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_block_char_raw_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Int8> b,
    int n,
    int stride,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_block_char_raw_fprintf(
      stream,
      b,
      n,
      stride,
      format,
    );
  }

  late final _gsl_block_char_raw_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, size_t,
              size_t, ffi.Pointer<ffi.Int8>)>>('gsl_block_char_raw_fprintf');
  late final _gsl_block_char_raw_fprintf =
      _gsl_block_char_raw_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_block_char_size(
    ffi.Pointer<gsl_block_char> b,
  ) {
    return _gsl_block_char_size(
      b,
    );
  }

  late final _gsl_block_char_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_block_char>)>>(
          'gsl_block_char_size');
  late final _gsl_block_char_size = _gsl_block_char_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_block_char>)>();

  ffi.Pointer<ffi.Int8> gsl_block_char_data(
    ffi.Pointer<gsl_block_char> b,
  ) {
    return _gsl_block_char_data(
      b,
    );
  }

  late final _gsl_block_char_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_block_char>)>>('gsl_block_char_data');
  late final _gsl_block_char_data = _gsl_block_char_dataPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_block_char>)>();

  ffi.Pointer<gsl_vector_char> gsl_vector_char_alloc(
    int n,
  ) {
    return _gsl_vector_char_alloc(
      n,
    );
  }

  late final _gsl_vector_char_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_char> Function(size_t)>>(
      'gsl_vector_char_alloc');
  late final _gsl_vector_char_alloc = _gsl_vector_char_allocPtr
      .asFunction<ffi.Pointer<gsl_vector_char> Function(int)>();

  ffi.Pointer<gsl_vector_char> gsl_vector_char_calloc(
    int n,
  ) {
    return _gsl_vector_char_calloc(
      n,
    );
  }

  late final _gsl_vector_char_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_vector_char> Function(size_t)>>(
      'gsl_vector_char_calloc');
  late final _gsl_vector_char_calloc = _gsl_vector_char_callocPtr
      .asFunction<ffi.Pointer<gsl_vector_char> Function(int)>();

  ffi.Pointer<gsl_vector_char> gsl_vector_char_alloc_from_block(
    ffi.Pointer<gsl_block_char> b,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_char_alloc_from_block(
      b,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_char_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_char> Function(ffi.Pointer<gsl_block_char>,
              size_t, size_t, size_t)>>('gsl_vector_char_alloc_from_block');
  late final _gsl_vector_char_alloc_from_block =
      _gsl_vector_char_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_vector_char> Function(
              ffi.Pointer<gsl_block_char>, int, int, int)>();

  ffi.Pointer<gsl_vector_char> gsl_vector_char_alloc_from_vector(
    ffi.Pointer<gsl_vector_char> v,
    int offset,
    int n,
    int stride,
  ) {
    return _gsl_vector_char_alloc_from_vector(
      v,
      offset,
      n,
      stride,
    );
  }

  late final _gsl_vector_char_alloc_from_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_char> Function(ffi.Pointer<gsl_vector_char>,
              size_t, size_t, size_t)>>('gsl_vector_char_alloc_from_vector');
  late final _gsl_vector_char_alloc_from_vector =
      _gsl_vector_char_alloc_from_vectorPtr.asFunction<
          ffi.Pointer<gsl_vector_char> Function(
              ffi.Pointer<gsl_vector_char>, int, int, int)>();

  void gsl_vector_char_free(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_free(
      v,
    );
  }

  late final _gsl_vector_char_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_free');
  late final _gsl_vector_char_free = _gsl_vector_char_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_char>)>();

  _gsl_vector_char_view gsl_vector_char_view_array(
    ffi.Pointer<ffi.Int8> v,
    int n,
  ) {
    return _gsl_vector_char_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_char_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(
              ffi.Pointer<ffi.Int8>, size_t)>>('gsl_vector_char_view_array');
  late final _gsl_vector_char_view_array = _gsl_vector_char_view_arrayPtr
      .asFunction<_gsl_vector_char_view Function(ffi.Pointer<ffi.Int8>, int)>();

  _gsl_vector_char_view gsl_vector_char_view_array_with_stride(
    ffi.Pointer<ffi.Int8> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_char_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_char_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_vector_char_view_array_with_stride');
  late final _gsl_vector_char_view_array_with_stride =
      _gsl_vector_char_view_array_with_stridePtr.asFunction<
          _gsl_vector_char_view Function(ffi.Pointer<ffi.Int8>, int, int)>();

  _gsl_vector_char_const_view gsl_vector_char_const_view_array(
    ffi.Pointer<ffi.Int8> v,
    int n,
  ) {
    return _gsl_vector_char_const_view_array(
      v,
      n,
    );
  }

  late final _gsl_vector_char_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<ffi.Int8>,
              size_t)>>('gsl_vector_char_const_view_array');
  late final _gsl_vector_char_const_view_array =
      _gsl_vector_char_const_view_arrayPtr.asFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<ffi.Int8>, int)>();

  _gsl_vector_char_const_view gsl_vector_char_const_view_array_with_stride(
    ffi.Pointer<ffi.Int8> base,
    int stride,
    int n,
  ) {
    return _gsl_vector_char_const_view_array_with_stride(
      base,
      stride,
      n,
    );
  }

  late final _gsl_vector_char_const_view_array_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_vector_char_const_view_array_with_stride');
  late final _gsl_vector_char_const_view_array_with_stride =
      _gsl_vector_char_const_view_array_with_stridePtr.asFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<ffi.Int8>, int, int)>();

  _gsl_vector_char_view gsl_vector_char_subvector(
    ffi.Pointer<gsl_vector_char> v,
    int i,
    int n,
  ) {
    return _gsl_vector_char_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_char_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(ffi.Pointer<gsl_vector_char>, size_t,
              size_t)>>('gsl_vector_char_subvector');
  late final _gsl_vector_char_subvector =
      _gsl_vector_char_subvectorPtr.asFunction<
          _gsl_vector_char_view Function(
              ffi.Pointer<gsl_vector_char>, int, int)>();

  _gsl_vector_char_view gsl_vector_char_subvector_with_stride(
    ffi.Pointer<gsl_vector_char> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_char_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_char_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(ffi.Pointer<gsl_vector_char>, size_t,
              size_t, size_t)>>('gsl_vector_char_subvector_with_stride');
  late final _gsl_vector_char_subvector_with_stride =
      _gsl_vector_char_subvector_with_stridePtr.asFunction<
          _gsl_vector_char_view Function(
              ffi.Pointer<gsl_vector_char>, int, int, int)>();

  _gsl_vector_char_const_view gsl_vector_char_const_subvector(
    ffi.Pointer<gsl_vector_char> v,
    int i,
    int n,
  ) {
    return _gsl_vector_char_const_subvector(
      v,
      i,
      n,
    );
  }

  late final _gsl_vector_char_const_subvectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<gsl_vector_char>,
              size_t, size_t)>>('gsl_vector_char_const_subvector');
  late final _gsl_vector_char_const_subvector =
      _gsl_vector_char_const_subvectorPtr.asFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_vector_char>, int, int)>();

  _gsl_vector_char_const_view gsl_vector_char_const_subvector_with_stride(
    ffi.Pointer<gsl_vector_char> v,
    int i,
    int stride,
    int n,
  ) {
    return _gsl_vector_char_const_subvector_with_stride(
      v,
      i,
      stride,
      n,
    );
  }

  late final _gsl_vector_char_const_subvector_with_stridePtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_vector_char>,
              size_t,
              size_t,
              size_t)>>('gsl_vector_char_const_subvector_with_stride');
  late final _gsl_vector_char_const_subvector_with_stride =
      _gsl_vector_char_const_subvector_with_stridePtr.asFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_vector_char>, int, int, int)>();

  void gsl_vector_char_set_zero(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_set_zero(
      v,
    );
  }

  late final _gsl_vector_char_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_set_zero');
  late final _gsl_vector_char_set_zero = _gsl_vector_char_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_char>)>();

  void gsl_vector_char_set_all(
    ffi.Pointer<gsl_vector_char> v,
    int x,
  ) {
    return _gsl_vector_char_set_all(
      v,
      x,
    );
  }

  late final _gsl_vector_char_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_char>,
              ffi.Int8)>>('gsl_vector_char_set_all');
  late final _gsl_vector_char_set_all = _gsl_vector_char_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_char>, int)>();

  int gsl_vector_char_set_basis(
    ffi.Pointer<gsl_vector_char> v,
    int i,
  ) {
    return _gsl_vector_char_set_basis(
      v,
      i,
    );
  }

  late final _gsl_vector_char_set_basisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              size_t)>>('gsl_vector_char_set_basis');
  late final _gsl_vector_char_set_basis = _gsl_vector_char_set_basisPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>, int)>();

  int gsl_vector_char_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_fread(
      stream,
      v,
    );
  }

  late final _gsl_vector_char_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_fread');
  late final _gsl_vector_char_fread = _gsl_vector_char_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_fwrite(
      stream,
      v,
    );
  }

  late final _gsl_vector_char_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_fwrite');
  late final _gsl_vector_char_fwrite = _gsl_vector_char_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_fscanf(
      stream,
      v,
    );
  }

  late final _gsl_vector_char_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_fscanf');
  late final _gsl_vector_char_fscanf = _gsl_vector_char_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_vector_char> v,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_vector_char_fprintf(
      stream,
      v,
      format,
    );
  }

  late final _gsl_vector_char_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_char_fprintf');
  late final _gsl_vector_char_fprintf = _gsl_vector_char_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_vector_char>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_char_memcpy(
    ffi.Pointer<gsl_vector_char> dest,
    ffi.Pointer<gsl_vector_char> src,
  ) {
    return _gsl_vector_char_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_vector_char_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_memcpy');
  late final _gsl_vector_char_memcpy = _gsl_vector_char_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_reverse(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_reverse(
      v,
    );
  }

  late final _gsl_vector_char_reversePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_reverse');
  late final _gsl_vector_char_reverse = _gsl_vector_char_reversePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_swap(
    ffi.Pointer<gsl_vector_char> v,
    ffi.Pointer<gsl_vector_char> w,
  ) {
    return _gsl_vector_char_swap(
      v,
      w,
    );
  }

  late final _gsl_vector_char_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_swap');
  late final _gsl_vector_char_swap = _gsl_vector_char_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_swap_elements(
    ffi.Pointer<gsl_vector_char> v,
    int i,
    int j,
  ) {
    return _gsl_vector_char_swap_elements(
      v,
      i,
      j,
    );
  }

  late final _gsl_vector_char_swap_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>, size_t,
              size_t)>>('gsl_vector_char_swap_elements');
  late final _gsl_vector_char_swap_elements = _gsl_vector_char_swap_elementsPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>, int, int)>();

  int gsl_vector_char_max(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_max(
      v,
    );
  }

  late final _gsl_vector_char_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_max');
  late final _gsl_vector_char_max = _gsl_vector_char_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_min(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_min(
      v,
    );
  }

  late final _gsl_vector_char_minPtr = _lookup<
          ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_min');
  late final _gsl_vector_char_min = _gsl_vector_char_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  void gsl_vector_char_minmax(
    ffi.Pointer<gsl_vector_char> v,
    ffi.Pointer<ffi.Int8> min_out,
    ffi.Pointer<ffi.Int8> max_out,
  ) {
    return _gsl_vector_char_minmax(
      v,
      min_out,
      max_out,
    );
  }

  late final _gsl_vector_char_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_char>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('gsl_vector_char_minmax');
  late final _gsl_vector_char_minmax = _gsl_vector_char_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector_char>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_vector_char_max_index(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_max_index(
      v,
    );
  }

  late final _gsl_vector_char_max_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_max_index');
  late final _gsl_vector_char_max_index = _gsl_vector_char_max_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_min_index(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_min_index(
      v,
    );
  }

  late final _gsl_vector_char_min_indexPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_min_index');
  late final _gsl_vector_char_min_index = _gsl_vector_char_min_indexPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  void gsl_vector_char_minmax_index(
    ffi.Pointer<gsl_vector_char> v,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> imax,
  ) {
    return _gsl_vector_char_minmax_index(
      v,
      imin,
      imax,
    );
  }

  late final _gsl_vector_char_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_char>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_vector_char_minmax_index');
  late final _gsl_vector_char_minmax_index =
      _gsl_vector_char_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_char>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_vector_char_add(
    ffi.Pointer<gsl_vector_char> a,
    ffi.Pointer<gsl_vector_char> b,
  ) {
    return _gsl_vector_char_add(
      a,
      b,
    );
  }

  late final _gsl_vector_char_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_add');
  late final _gsl_vector_char_add = _gsl_vector_char_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_sub(
    ffi.Pointer<gsl_vector_char> a,
    ffi.Pointer<gsl_vector_char> b,
  ) {
    return _gsl_vector_char_sub(
      a,
      b,
    );
  }

  late final _gsl_vector_char_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_sub');
  late final _gsl_vector_char_sub = _gsl_vector_char_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_mul(
    ffi.Pointer<gsl_vector_char> a,
    ffi.Pointer<gsl_vector_char> b,
  ) {
    return _gsl_vector_char_mul(
      a,
      b,
    );
  }

  late final _gsl_vector_char_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_mul');
  late final _gsl_vector_char_mul = _gsl_vector_char_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_div(
    ffi.Pointer<gsl_vector_char> a,
    ffi.Pointer<gsl_vector_char> b,
  ) {
    return _gsl_vector_char_div(
      a,
      b,
    );
  }

  late final _gsl_vector_char_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_div');
  late final _gsl_vector_char_div = _gsl_vector_char_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_scale(
    ffi.Pointer<gsl_vector_char> a,
    int x,
  ) {
    return _gsl_vector_char_scale(
      a,
      x,
    );
  }

  late final _gsl_vector_char_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              ffi.Int8)>>('gsl_vector_char_scale');
  late final _gsl_vector_char_scale = _gsl_vector_char_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>, int)>();

  int gsl_vector_char_add_constant(
    ffi.Pointer<gsl_vector_char> a,
    int x,
  ) {
    return _gsl_vector_char_add_constant(
      a,
      x,
    );
  }

  late final _gsl_vector_char_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              ffi.Int8)>>('gsl_vector_char_add_constant');
  late final _gsl_vector_char_add_constant = _gsl_vector_char_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>, int)>();

  int gsl_vector_char_axpby(
    int alpha,
    ffi.Pointer<gsl_vector_char> x,
    int beta,
    ffi.Pointer<gsl_vector_char> y,
  ) {
    return _gsl_vector_char_axpby(
      alpha,
      x,
      beta,
      y,
    );
  }

  late final _gsl_vector_char_axpbyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int8, ffi.Pointer<gsl_vector_char>, ffi.Int8,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_axpby');
  late final _gsl_vector_char_axpby = _gsl_vector_char_axpbyPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector_char>, int,
          ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_sum(
    ffi.Pointer<gsl_vector_char> a,
  ) {
    return _gsl_vector_char_sum(
      a,
    );
  }

  late final _gsl_vector_char_sumPtr = _lookup<
          ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_sum');
  late final _gsl_vector_char_sum = _gsl_vector_char_sumPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_equal(
    ffi.Pointer<gsl_vector_char> u,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_equal(
      u,
      v,
    );
  }

  late final _gsl_vector_char_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_vector_char_equal');
  late final _gsl_vector_char_equal = _gsl_vector_char_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_isnull(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_isnull(
      v,
    );
  }

  late final _gsl_vector_char_isnullPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_isnull');
  late final _gsl_vector_char_isnull = _gsl_vector_char_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_ispos(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_ispos(
      v,
    );
  }

  late final _gsl_vector_char_isposPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_ispos');
  late final _gsl_vector_char_ispos = _gsl_vector_char_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_isneg(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_isneg(
      v,
    );
  }

  late final _gsl_vector_char_isnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_isneg');
  late final _gsl_vector_char_isneg = _gsl_vector_char_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_isnonneg(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_vector_char_isnonneg(
      v,
    );
  }

  late final _gsl_vector_char_isnonnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_vector_char_isnonneg');
  late final _gsl_vector_char_isnonneg = _gsl_vector_char_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>)>();

  int gsl_vector_char_get(
    ffi.Pointer<gsl_vector_char> v,
    int i,
  ) {
    return _gsl_vector_char_get(
      v,
      i,
    );
  }

  late final _gsl_vector_char_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<gsl_vector_char>, size_t)>>('gsl_vector_char_get');
  late final _gsl_vector_char_get = _gsl_vector_char_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_char>, int)>();

  void gsl_vector_char_set(
    ffi.Pointer<gsl_vector_char> v,
    int i,
    int x,
  ) {
    return _gsl_vector_char_set(
      v,
      i,
      x,
    );
  }

  late final _gsl_vector_char_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_char>, size_t,
              ffi.Int8)>>('gsl_vector_char_set');
  late final _gsl_vector_char_set = _gsl_vector_char_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_char>, int, int)>();

  ffi.Pointer<ffi.Int8> gsl_vector_char_ptr(
    ffi.Pointer<gsl_vector_char> v,
    int i,
  ) {
    return _gsl_vector_char_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_char_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_vector_char>, size_t)>>('gsl_vector_char_ptr');
  late final _gsl_vector_char_ptr = _gsl_vector_char_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_vector_char>, int)>();

  ffi.Pointer<ffi.Int8> gsl_vector_char_const_ptr(
    ffi.Pointer<gsl_vector_char> v,
    int i,
  ) {
    return _gsl_vector_char_const_ptr(
      v,
      i,
    );
  }

  late final _gsl_vector_char_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_vector_char>,
              size_t)>>('gsl_vector_char_const_ptr');
  late final _gsl_vector_char_const_ptr =
      _gsl_vector_char_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_vector_char>, int)>();

  double cblas_sdsdot(
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_sdsdot(
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_sdsdotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Int32, ffi.Float, ffi.Pointer<ffi.Float>,
              ffi.Int32, ffi.Pointer<ffi.Float>, ffi.Int32)>>('cblas_sdsdot');
  late final _cblas_sdsdot = _cblas_sdsdotPtr.asFunction<
      double Function(int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int)>();

  double cblas_dsdot(
    int N,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_dsdot(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_dsdotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Pointer<ffi.Float>, ffi.Int32,
              ffi.Pointer<ffi.Float>, ffi.Int32)>>('cblas_dsdot');
  late final _cblas_dsdot = _cblas_dsdotPtr.asFunction<
      double Function(
          int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int)>();

  double cblas_sdot(
    int N,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_sdot(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_sdotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Int32, ffi.Pointer<ffi.Float>, ffi.Int32,
              ffi.Pointer<ffi.Float>, ffi.Int32)>>('cblas_sdot');
  late final _cblas_sdot = _cblas_sdotPtr.asFunction<
      double Function(
          int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int)>();

  double cblas_ddot(
    int N,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Y,
    int incY,
  ) {
    return _cblas_ddot(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_ddotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Pointer<ffi.Double>, ffi.Int32,
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('cblas_ddot');
  late final _cblas_ddot = _cblas_ddotPtr.asFunction<
      double Function(
          int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int)>();

  void cblas_cdotu_sub(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> dotu,
  ) {
    return _cblas_cdotu_sub(
      N,
      X,
      incX,
      Y,
      incY,
      dotu,
    );
  }

  late final _cblas_cdotu_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('cblas_cdotu_sub');
  late final _cblas_cdotu_sub = _cblas_cdotu_subPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>)>();

  void cblas_cdotc_sub(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> dotc,
  ) {
    return _cblas_cdotc_sub(
      N,
      X,
      incX,
      Y,
      incY,
      dotc,
    );
  }

  late final _cblas_cdotc_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('cblas_cdotc_sub');
  late final _cblas_cdotc_sub = _cblas_cdotc_subPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>)>();

  void cblas_zdotu_sub(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> dotu,
  ) {
    return _cblas_zdotu_sub(
      N,
      X,
      incX,
      Y,
      incY,
      dotu,
    );
  }

  late final _cblas_zdotu_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('cblas_zdotu_sub');
  late final _cblas_zdotu_sub = _cblas_zdotu_subPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>)>();

  void cblas_zdotc_sub(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> dotc,
  ) {
    return _cblas_zdotc_sub(
      N,
      X,
      incX,
      Y,
      incY,
      dotc,
    );
  }

  late final _cblas_zdotc_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('cblas_zdotc_sub');
  late final _cblas_zdotc_sub = _cblas_zdotc_subPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>)>();

  double cblas_snrm2(
    int N,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_snrm2(
      N,
      X,
      incX,
    );
  }

  late final _cblas_snrm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Int32, ffi.Pointer<ffi.Float>, ffi.Int32)>>('cblas_snrm2');
  late final _cblas_snrm2 = _cblas_snrm2Ptr
      .asFunction<double Function(int, ffi.Pointer<ffi.Float>, int)>();

  double cblas_sasum(
    int N,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_sasum(
      N,
      X,
      incX,
    );
  }

  late final _cblas_sasumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Int32, ffi.Pointer<ffi.Float>, ffi.Int32)>>('cblas_sasum');
  late final _cblas_sasum = _cblas_sasumPtr
      .asFunction<double Function(int, ffi.Pointer<ffi.Float>, int)>();

  double cblas_dnrm2(
    int N,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_dnrm2(
      N,
      X,
      incX,
    );
  }

  late final _cblas_dnrm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Pointer<ffi.Double>, ffi.Int32)>>('cblas_dnrm2');
  late final _cblas_dnrm2 = _cblas_dnrm2Ptr
      .asFunction<double Function(int, ffi.Pointer<ffi.Double>, int)>();

  double cblas_dasum(
    int N,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_dasum(
      N,
      X,
      incX,
    );
  }

  late final _cblas_dasumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Pointer<ffi.Double>, ffi.Int32)>>('cblas_dasum');
  late final _cblas_dasum = _cblas_dasumPtr
      .asFunction<double Function(int, ffi.Pointer<ffi.Double>, int)>();

  double cblas_scnrm2(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_scnrm2(
      N,
      X,
      incX,
    );
  }

  late final _cblas_scnrm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_scnrm2');
  late final _cblas_scnrm2 = _cblas_scnrm2Ptr
      .asFunction<double Function(int, ffi.Pointer<ffi.Void>, int)>();

  double cblas_scasum(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_scasum(
      N,
      X,
      incX,
    );
  }

  late final _cblas_scasumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_scasum');
  late final _cblas_scasum = _cblas_scasumPtr
      .asFunction<double Function(int, ffi.Pointer<ffi.Void>, int)>();

  double cblas_dznrm2(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_dznrm2(
      N,
      X,
      incX,
    );
  }

  late final _cblas_dznrm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_dznrm2');
  late final _cblas_dznrm2 = _cblas_dznrm2Ptr
      .asFunction<double Function(int, ffi.Pointer<ffi.Void>, int)>();

  double cblas_dzasum(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_dzasum(
      N,
      X,
      incX,
    );
  }

  late final _cblas_dzasumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_dzasum');
  late final _cblas_dzasum = _cblas_dzasumPtr
      .asFunction<double Function(int, ffi.Pointer<ffi.Void>, int)>();

  int cblas_isamax(
    int N,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_isamax(
      N,
      X,
      incX,
    );
  }

  late final _cblas_isamaxPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Int32, ffi.Pointer<ffi.Float>, ffi.Int32)>>('cblas_isamax');
  late final _cblas_isamax = _cblas_isamaxPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Float>, int)>();

  int cblas_idamax(
    int N,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_idamax(
      N,
      X,
      incX,
    );
  }

  late final _cblas_idamaxPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Int32, ffi.Pointer<ffi.Double>, ffi.Int32)>>('cblas_idamax');
  late final _cblas_idamax = _cblas_idamaxPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Double>, int)>();

  int cblas_icamax(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_icamax(
      N,
      X,
      incX,
    );
  }

  late final _cblas_icamaxPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_icamax');
  late final _cblas_icamax = _cblas_icamaxPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int cblas_izamax(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_izamax(
      N,
      X,
      incX,
    );
  }

  late final _cblas_izamaxPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_izamax');
  late final _cblas_izamax = _cblas_izamaxPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_sswap(
    int N,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_sswap(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_sswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Float>, ffi.Int32,
              ffi.Pointer<ffi.Float>, ffi.Int32)>>('cblas_sswap');
  late final _cblas_sswap = _cblas_sswapPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int)>();

  void cblas_scopy(
    int N,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_scopy(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_scopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Float>, ffi.Int32,
              ffi.Pointer<ffi.Float>, ffi.Int32)>>('cblas_scopy');
  late final _cblas_scopy = _cblas_scopyPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int)>();

  void cblas_saxpy(
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_saxpy(
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_saxpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Float, ffi.Pointer<ffi.Float>,
              ffi.Int32, ffi.Pointer<ffi.Float>, ffi.Int32)>>('cblas_saxpy');
  late final _cblas_saxpy = _cblas_saxpyPtr.asFunction<
      void Function(int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int)>();

  void cblas_dswap(
    int N,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Y,
    int incY,
  ) {
    return _cblas_dswap(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_dswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Double>, ffi.Int32,
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('cblas_dswap');
  late final _cblas_dswap = _cblas_dswapPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int)>();

  void cblas_dcopy(
    int N,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Y,
    int incY,
  ) {
    return _cblas_dcopy(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_dcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Double>, ffi.Int32,
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('cblas_dcopy');
  late final _cblas_dcopy = _cblas_dcopyPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int)>();

  void cblas_daxpy(
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Y,
    int incY,
  ) {
    return _cblas_daxpy(
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_daxpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Int32, ffi.Pointer<ffi.Double>, ffi.Int32)>>('cblas_daxpy');
  late final _cblas_daxpy = _cblas_daxpyPtr.asFunction<
      void Function(int, double, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>, int)>();

  void cblas_cswap(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_cswap(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_cswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_cswap');
  late final _cblas_cswap = _cblas_cswapPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_ccopy(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_ccopy(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_ccopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_ccopy');
  late final _cblas_ccopy = _cblas_ccopyPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_caxpy(
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_caxpy(
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_caxpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_caxpy');
  late final _cblas_caxpy = _cblas_caxpyPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_zswap(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_zswap(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_zswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_zswap');
  late final _cblas_zswap = _cblas_zswapPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_zcopy(
    int N,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_zcopy(
      N,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_zcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_zcopy');
  late final _cblas_zcopy = _cblas_zcopyPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_zaxpy(
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_zaxpy(
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
    );
  }

  late final _cblas_zaxpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zaxpy');
  late final _cblas_zaxpy = _cblas_zaxpyPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_srotg(
    ffi.Pointer<ffi.Float> a,
    ffi.Pointer<ffi.Float> b,
    ffi.Pointer<ffi.Float> c,
    ffi.Pointer<ffi.Float> s,
  ) {
    return _cblas_srotg(
      a,
      b,
      c,
      s,
    );
  }

  late final _cblas_srotgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>>('cblas_srotg');
  late final _cblas_srotg = _cblas_srotgPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  void cblas_srotmg(
    ffi.Pointer<ffi.Float> d1,
    ffi.Pointer<ffi.Float> d2,
    ffi.Pointer<ffi.Float> b1,
    double b2,
    ffi.Pointer<ffi.Float> P,
  ) {
    return _cblas_srotmg(
      d1,
      d2,
      b1,
      b2,
      P,
    );
  }

  late final _cblas_srotmgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Pointer<ffi.Float>)>>('cblas_srotmg');
  late final _cblas_srotmg = _cblas_srotmgPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, double, ffi.Pointer<ffi.Float>)>();

  void cblas_srot(
    int N,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
    double c,
    double s,
  ) {
    return _cblas_srot(
      N,
      X,
      incX,
      Y,
      incY,
      c,
      s,
    );
  }

  late final _cblas_srotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Float)>>('cblas_srot');
  late final _cblas_srot = _cblas_srotPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
          int, double, double)>();

  void cblas_srotm(
    int N,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
    ffi.Pointer<ffi.Float> P,
  ) {
    return _cblas_srotm(
      N,
      X,
      incX,
      Y,
      incY,
      P,
    );
  }

  late final _cblas_srotmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>)>>('cblas_srotm');
  late final _cblas_srotm = _cblas_srotmPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
          int, ffi.Pointer<ffi.Float>)>();

  void cblas_drotg(
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> b,
    ffi.Pointer<ffi.Double> c,
    ffi.Pointer<ffi.Double> s,
  ) {
    return _cblas_drotg(
      a,
      b,
      c,
      s,
    );
  }

  late final _cblas_drotgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cblas_drotg');
  late final _cblas_drotg = _cblas_drotgPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void cblas_drotmg(
    ffi.Pointer<ffi.Double> d1,
    ffi.Pointer<ffi.Double> d2,
    ffi.Pointer<ffi.Double> b1,
    double b2,
    ffi.Pointer<ffi.Double> P,
  ) {
    return _cblas_drotmg(
      d1,
      d2,
      b1,
      b2,
      P,
    );
  }

  late final _cblas_drotmgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Double>)>>('cblas_drotmg');
  late final _cblas_drotmg = _cblas_drotmgPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, double, ffi.Pointer<ffi.Double>)>();

  void cblas_drot(
    int N,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Y,
    int incY,
    double c,
    double s,
  ) {
    return _cblas_drot(
      N,
      X,
      incX,
      Y,
      incY,
      c,
      s,
    );
  }

  late final _cblas_drotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('cblas_drot');
  late final _cblas_drot = _cblas_drotPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
          int, double, double)>();

  void cblas_drotm(
    int N,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Y,
    int incY,
    ffi.Pointer<ffi.Double> P,
  ) {
    return _cblas_drotm(
      N,
      X,
      incX,
      Y,
      incY,
      P,
    );
  }

  late final _cblas_drotmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>)>>('cblas_drotm');
  late final _cblas_drotm = _cblas_drotmPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
          int, ffi.Pointer<ffi.Double>)>();

  void cblas_sscal(
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_sscal(
      N,
      alpha,
      X,
      incX,
    );
  }

  late final _cblas_sscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Float, ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_sscal');
  late final _cblas_sscal = _cblas_sscalPtr
      .asFunction<void Function(int, double, ffi.Pointer<ffi.Float>, int)>();

  void cblas_dscal(
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_dscal(
      N,
      alpha,
      X,
      incX,
    );
  }

  late final _cblas_dscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dscal');
  late final _cblas_dscal = _cblas_dscalPtr
      .asFunction<void Function(int, double, ffi.Pointer<ffi.Double>, int)>();

  void cblas_cscal(
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_cscal(
      N,
      alpha,
      X,
      incX,
    );
  }

  late final _cblas_cscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_cscal');
  late final _cblas_cscal = _cblas_cscalPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void cblas_zscal(
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_zscal(
      N,
      alpha,
      X,
      incX,
    );
  }

  late final _cblas_zscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('cblas_zscal');
  late final _cblas_zscal = _cblas_zscalPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void cblas_csscal(
    int N,
    double alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_csscal(
      N,
      alpha,
      X,
      incX,
    );
  }

  late final _cblas_csscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Float, ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_csscal');
  late final _cblas_csscal = _cblas_csscalPtr
      .asFunction<void Function(int, double, ffi.Pointer<ffi.Void>, int)>();

  void cblas_zdscal(
    int N,
    double alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_zdscal(
      N,
      alpha,
      X,
      incX,
    );
  }

  late final _cblas_zdscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Double, ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zdscal');
  late final _cblas_zdscal = _cblas_zdscalPtr
      .asFunction<void Function(int, double, ffi.Pointer<ffi.Void>, int)>();

  void cblas_sgemv(
    int order,
    int TransA,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_sgemv(
      order,
      TransA,
      M,
      N,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_sgemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_sgemv');
  late final _cblas_sgemv = _cblas_sgemvPtr.asFunction<
      void Function(int, int, int, int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int, double, ffi.Pointer<ffi.Float>, int)>();

  void cblas_sgbmv(
    int order,
    int TransA,
    int M,
    int N,
    int KL,
    int KU,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_sgbmv(
      order,
      TransA,
      M,
      N,
      KL,
      KU,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_sgbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_sgbmv');
  late final _cblas_sgbmv = _cblas_sgbmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          double,
          ffi.Pointer<ffi.Float>,
          int)>();

  void cblas_strmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_strmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_strmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_strmv');
  late final _cblas_strmv = _cblas_strmvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int)>();

  void cblas_stbmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    int K,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_stbmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      K,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_stbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_stbmv');
  late final _cblas_stbmv = _cblas_stbmvPtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int)>();

  void cblas_stpmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Float> Ap,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_stpmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      Ap,
      X,
      incX,
    );
  }

  late final _cblas_stpmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_stpmv');
  late final _cblas_stpmv = _cblas_stpmvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, int)>();

  void cblas_strsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_strsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_strsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_strsv');
  late final _cblas_strsv = _cblas_strsvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int)>();

  void cblas_stbsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    int K,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_stbsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      K,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_stbsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_stbsv');
  late final _cblas_stbsv = _cblas_stbsvPtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int)>();

  void cblas_stpsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Float> Ap,
    ffi.Pointer<ffi.Float> X,
    int incX,
  ) {
    return _cblas_stpsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      Ap,
      X,
      incX,
    );
  }

  late final _cblas_stpsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_stpsv');
  late final _cblas_stpsv = _cblas_stpsvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, int)>();

  void cblas_dgemv(
    int order,
    int TransA,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Double> Y,
    int incY,
  ) {
    return _cblas_dgemv(
      order,
      TransA,
      M,
      N,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_dgemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dgemv');
  late final _cblas_dgemv = _cblas_dgemvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int)>();

  void cblas_dgbmv(
    int order,
    int TransA,
    int M,
    int N,
    int KL,
    int KU,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Double> Y,
    int incY,
  ) {
    return _cblas_dgbmv(
      order,
      TransA,
      M,
      N,
      KL,
      KU,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_dgbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dgbmv');
  late final _cblas_dgbmv = _cblas_dgbmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int)>();

  void cblas_dtrmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_dtrmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_dtrmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dtrmv');
  late final _cblas_dtrmv = _cblas_dtrmvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>, int)>();

  void cblas_dtbmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    int K,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_dtbmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      K,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_dtbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dtbmv');
  late final _cblas_dtbmv = _cblas_dtbmvPtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>, int)>();

  void cblas_dtpmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Double> Ap,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_dtpmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      Ap,
      X,
      incX,
    );
  }

  late final _cblas_dtpmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dtpmv');
  late final _cblas_dtpmv = _cblas_dtpmvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int)>();

  void cblas_dtrsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_dtrsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_dtrsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dtrsv');
  late final _cblas_dtrsv = _cblas_dtrsvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>, int)>();

  void cblas_dtbsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    int K,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_dtbsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      K,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_dtbsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dtbsv');
  late final _cblas_dtbsv = _cblas_dtbsvPtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>, int)>();

  void cblas_dtpsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Double> Ap,
    ffi.Pointer<ffi.Double> X,
    int incX,
  ) {
    return _cblas_dtpsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      Ap,
      X,
      incX,
    );
  }

  late final _cblas_dtpsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dtpsv');
  late final _cblas_dtpsv = _cblas_dtpsvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int)>();

  void cblas_cgemv(
    int order,
    int TransA,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_cgemv(
      order,
      TransA,
      M,
      N,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_cgemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_cgemv');
  late final _cblas_cgemv = _cblas_cgemvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_cgbmv(
    int order,
    int TransA,
    int M,
    int N,
    int KL,
    int KU,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_cgbmv(
      order,
      TransA,
      M,
      N,
      KL,
      KU,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_cgbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_cgbmv');
  late final _cblas_cgbmv = _cblas_cgbmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_ctrmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ctrmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_ctrmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ctrmv');
  late final _cblas_ctrmv = _cblas_ctrmvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ctbmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    int K,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ctbmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      K,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_ctbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ctbmv');
  late final _cblas_ctbmv = _cblas_ctbmvPtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ctpmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Void> Ap,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ctpmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      Ap,
      X,
      incX,
    );
  }

  late final _cblas_ctpmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ctpmv');
  late final _cblas_ctpmv = _cblas_ctpmvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ctrsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ctrsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_ctrsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ctrsv');
  late final _cblas_ctrsv = _cblas_ctrsvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ctbsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    int K,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ctbsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      K,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_ctbsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ctbsv');
  late final _cblas_ctbsv = _cblas_ctbsvPtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ctpsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Void> Ap,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ctpsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      Ap,
      X,
      incX,
    );
  }

  late final _cblas_ctpsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ctpsv');
  late final _cblas_ctpsv = _cblas_ctpsvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_zgemv(
    int order,
    int TransA,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_zgemv(
      order,
      TransA,
      M,
      N,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_zgemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zgemv');
  late final _cblas_zgemv = _cblas_zgemvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_zgbmv(
    int order,
    int TransA,
    int M,
    int N,
    int KL,
    int KU,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_zgbmv(
      order,
      TransA,
      M,
      N,
      KL,
      KU,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_zgbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zgbmv');
  late final _cblas_zgbmv = _cblas_zgbmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_ztrmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ztrmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_ztrmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ztrmv');
  late final _cblas_ztrmv = _cblas_ztrmvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ztbmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    int K,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ztbmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      K,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_ztbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ztbmv');
  late final _cblas_ztbmv = _cblas_ztbmvPtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ztpmv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Void> Ap,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ztpmv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      Ap,
      X,
      incX,
    );
  }

  late final _cblas_ztpmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ztpmv');
  late final _cblas_ztpmv = _cblas_ztpmvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ztrsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ztrsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_ztrsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ztrsv');
  late final _cblas_ztrsv = _cblas_ztrsvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ztbsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    int K,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ztbsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      K,
      A,
      lda,
      X,
      incX,
    );
  }

  late final _cblas_ztbsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ztbsv');
  late final _cblas_ztbsv = _cblas_ztbsvPtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ztpsv(
    int order,
    int Uplo,
    int TransA,
    int Diag,
    int N,
    ffi.Pointer<ffi.Void> Ap,
    ffi.Pointer<ffi.Void> X,
    int incX,
  ) {
    return _cblas_ztpsv(
      order,
      Uplo,
      TransA,
      Diag,
      N,
      Ap,
      X,
      incX,
    );
  }

  late final _cblas_ztpsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ztpsv');
  late final _cblas_ztpsv = _cblas_ztpsvPtr.asFunction<
      void Function(int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_ssymv(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_ssymv(
      order,
      Uplo,
      N,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_ssymvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_ssymv');
  late final _cblas_ssymv = _cblas_ssymvPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int, double, ffi.Pointer<ffi.Float>, int)>();

  void cblas_ssbmv(
    int order,
    int Uplo,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_ssbmv(
      order,
      Uplo,
      N,
      K,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_ssbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_ssbmv');
  late final _cblas_ssbmv = _cblas_ssbmvPtr.asFunction<
      void Function(int, int, int, int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int, double, ffi.Pointer<ffi.Float>, int)>();

  void cblas_sspmv(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> Ap,
    ffi.Pointer<ffi.Float> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Float> Y,
    int incY,
  ) {
    return _cblas_sspmv(
      order,
      Uplo,
      N,
      alpha,
      Ap,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_sspmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_sspmv');
  late final _cblas_sspmv = _cblas_sspmvPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, int, double, ffi.Pointer<ffi.Float>, int)>();

  void cblas_sger(
    int order,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
    ffi.Pointer<ffi.Float> A,
    int lda,
  ) {
    return _cblas_sger(
      order,
      M,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_sgerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_sger');
  late final _cblas_sger = _cblas_sgerPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int)>();

  void cblas_ssyr(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> A,
    int lda,
  ) {
    return _cblas_ssyr(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      A,
      lda,
    );
  }

  late final _cblas_ssyrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_ssyr');
  late final _cblas_ssyr = _cblas_ssyrPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int)>();

  void cblas_sspr(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Ap,
  ) {
    return _cblas_sspr(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Ap,
    );
  }

  late final _cblas_ssprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>)>>('cblas_sspr');
  late final _cblas_sspr = _cblas_ssprPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>)>();

  void cblas_ssyr2(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
    ffi.Pointer<ffi.Float> A,
    int lda,
  ) {
    return _cblas_ssyr2(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_ssyr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_ssyr2');
  late final _cblas_ssyr2 = _cblas_ssyr2Ptr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int)>();

  void cblas_sspr2(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> X,
    int incX,
    ffi.Pointer<ffi.Float> Y,
    int incY,
    ffi.Pointer<ffi.Float> A,
  ) {
    return _cblas_sspr2(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
    );
  }

  late final _cblas_sspr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>)>>('cblas_sspr2');
  late final _cblas_sspr2 = _cblas_sspr2Ptr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>)>();

  void cblas_dsymv(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Double> Y,
    int incY,
  ) {
    return _cblas_dsymv(
      order,
      Uplo,
      N,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_dsymvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dsymv');
  late final _cblas_dsymv = _cblas_dsymvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int)>();

  void cblas_dsbmv(
    int order,
    int Uplo,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Double> Y,
    int incY,
  ) {
    return _cblas_dsbmv(
      order,
      Uplo,
      N,
      K,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_dsbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dsbmv');
  late final _cblas_dsbmv = _cblas_dsbmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int)>();

  void cblas_dspmv(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> Ap,
    ffi.Pointer<ffi.Double> X,
    int incX,
    double beta,
    ffi.Pointer<ffi.Double> Y,
    int incY,
  ) {
    return _cblas_dspmv(
      order,
      Uplo,
      N,
      alpha,
      Ap,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_dspmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dspmv');
  late final _cblas_dspmv = _cblas_dspmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int)>();

  void cblas_dger(
    int order,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Y,
    int incY,
    ffi.Pointer<ffi.Double> A,
    int lda,
  ) {
    return _cblas_dger(
      order,
      M,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_dgerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dger');
  late final _cblas_dger = _cblas_dgerPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int)>();

  void cblas_dsyr(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> A,
    int lda,
  ) {
    return _cblas_dsyr(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      A,
      lda,
    );
  }

  late final _cblas_dsyrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dsyr');
  late final _cblas_dsyr = _cblas_dsyrPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>, int)>();

  void cblas_dspr(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Ap,
  ) {
    return _cblas_dspr(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Ap,
    );
  }

  late final _cblas_dsprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>)>>('cblas_dspr');
  late final _cblas_dspr = _cblas_dsprPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>)>();

  void cblas_dsyr2(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Y,
    int incY,
    ffi.Pointer<ffi.Double> A,
    int lda,
  ) {
    return _cblas_dsyr2(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_dsyr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dsyr2');
  late final _cblas_dsyr2 = _cblas_dsyr2Ptr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int)>();

  void cblas_dspr2(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> X,
    int incX,
    ffi.Pointer<ffi.Double> Y,
    int incY,
    ffi.Pointer<ffi.Double> A,
  ) {
    return _cblas_dspr2(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
    );
  }

  late final _cblas_dspr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>)>>('cblas_dspr2');
  late final _cblas_dspr2 = _cblas_dspr2Ptr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>)>();

  void cblas_chemv(
    int order,
    int Uplo,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_chemv(
      order,
      Uplo,
      N,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_chemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_chemv');
  late final _cblas_chemv = _cblas_chemvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_chbmv(
    int order,
    int Uplo,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_chbmv(
      order,
      Uplo,
      N,
      K,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_chbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_chbmv');
  late final _cblas_chbmv = _cblas_chbmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_chpmv(
    int order,
    int Uplo,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> Ap,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_chpmv(
      order,
      Uplo,
      N,
      alpha,
      Ap,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_chpmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_chpmv');
  late final _cblas_chpmv = _cblas_chpmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_cgeru(
    int order,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> A,
    int lda,
  ) {
    return _cblas_cgeru(
      order,
      M,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_cgeruPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_cgeru');
  late final _cblas_cgeru = _cblas_cgeruPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_cgerc(
    int order,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> A,
    int lda,
  ) {
    return _cblas_cgerc(
      order,
      M,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_cgercPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_cgerc');
  late final _cblas_cgerc = _cblas_cgercPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_cher(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> A,
    int lda,
  ) {
    return _cblas_cher(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      A,
      lda,
    );
  }

  late final _cblas_cherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_cher');
  late final _cblas_cher = _cblas_cherPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_chpr(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> A,
  ) {
    return _cblas_chpr(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      A,
    );
  }

  late final _cblas_chprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('cblas_chpr');
  late final _cblas_chpr = _cblas_chprPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>)>();

  void cblas_cher2(
    int order,
    int Uplo,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> A,
    int lda,
  ) {
    return _cblas_cher2(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_cher2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_cher2');
  late final _cblas_cher2 = _cblas_cher2Ptr.asFunction<
      void Function(int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_chpr2(
    int order,
    int Uplo,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> Ap,
  ) {
    return _cblas_chpr2(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      Ap,
    );
  }

  late final _cblas_chpr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('cblas_chpr2');
  late final _cblas_chpr2 = _cblas_chpr2Ptr.asFunction<
      void Function(int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  void cblas_zhemv(
    int order,
    int Uplo,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_zhemv(
      order,
      Uplo,
      N,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_zhemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zhemv');
  late final _cblas_zhemv = _cblas_zhemvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_zhbmv(
    int order,
    int Uplo,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_zhbmv(
      order,
      Uplo,
      N,
      K,
      alpha,
      A,
      lda,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_zhbmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zhbmv');
  late final _cblas_zhbmv = _cblas_zhbmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_zhpmv(
    int order,
    int Uplo,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> Ap,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> Y,
    int incY,
  ) {
    return _cblas_zhpmv(
      order,
      Uplo,
      N,
      alpha,
      Ap,
      X,
      incX,
      beta,
      Y,
      incY,
    );
  }

  late final _cblas_zhpmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zhpmv');
  late final _cblas_zhpmv = _cblas_zhpmvPtr.asFunction<
      void Function(
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_zgeru(
    int order,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> A,
    int lda,
  ) {
    return _cblas_zgeru(
      order,
      M,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_zgeruPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zgeru');
  late final _cblas_zgeru = _cblas_zgeruPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_zgerc(
    int order,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> A,
    int lda,
  ) {
    return _cblas_zgerc(
      order,
      M,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_zgercPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zgerc');
  late final _cblas_zgerc = _cblas_zgercPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_zher(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> A,
    int lda,
  ) {
    return _cblas_zher(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      A,
      lda,
    );
  }

  late final _cblas_zherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zher');
  late final _cblas_zher = _cblas_zherPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  void cblas_zhpr(
    int order,
    int Uplo,
    int N,
    double alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> A,
  ) {
    return _cblas_zhpr(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      A,
    );
  }

  late final _cblas_zhprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('cblas_zhpr');
  late final _cblas_zhpr = _cblas_zhprPtr.asFunction<
      void Function(int, int, int, double, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>)>();

  void cblas_zher2(
    int order,
    int Uplo,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> A,
    int lda,
  ) {
    return _cblas_zher2(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      A,
      lda,
    );
  }

  late final _cblas_zher2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zher2');
  late final _cblas_zher2 = _cblas_zher2Ptr.asFunction<
      void Function(int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_zhpr2(
    int order,
    int Uplo,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> X,
    int incX,
    ffi.Pointer<ffi.Void> Y,
    int incY,
    ffi.Pointer<ffi.Void> Ap,
  ) {
    return _cblas_zhpr2(
      order,
      Uplo,
      N,
      alpha,
      X,
      incX,
      Y,
      incY,
      Ap,
    );
  }

  late final _cblas_zhpr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('cblas_zhpr2');
  late final _cblas_zhpr2 = _cblas_zhpr2Ptr.asFunction<
      void Function(int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  void cblas_sgemm(
    int Order,
    int TransA,
    int TransB,
    int M,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> B,
    int ldb,
    double beta,
    ffi.Pointer<ffi.Float> C,
    int ldc,
  ) {
    return _cblas_sgemm(
      Order,
      TransA,
      TransB,
      M,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_sgemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_sgemm');
  late final _cblas_sgemm = _cblas_sgemmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          double,
          ffi.Pointer<ffi.Float>,
          int)>();

  void cblas_ssymm(
    int Order,
    int Side,
    int Uplo,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> B,
    int ldb,
    double beta,
    ffi.Pointer<ffi.Float> C,
    int ldc,
  ) {
    return _cblas_ssymm(
      Order,
      Side,
      Uplo,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_ssymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_ssymm');
  late final _cblas_ssymm = _cblas_ssymmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          double,
          ffi.Pointer<ffi.Float>,
          int)>();

  void cblas_ssyrk(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    double beta,
    ffi.Pointer<ffi.Float> C,
    int ldc,
  ) {
    return _cblas_ssyrk(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_ssyrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_ssyrk');
  late final _cblas_ssyrk = _cblas_ssyrkPtr.asFunction<
      void Function(int, int, int, int, int, double, ffi.Pointer<ffi.Float>,
          int, double, ffi.Pointer<ffi.Float>, int)>();

  void cblas_ssyr2k(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> B,
    int ldb,
    double beta,
    ffi.Pointer<ffi.Float> C,
    int ldc,
  ) {
    return _cblas_ssyr2k(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_ssyr2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_ssyr2k');
  late final _cblas_ssyr2k = _cblas_ssyr2kPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Float>,
          int,
          ffi.Pointer<ffi.Float>,
          int,
          double,
          ffi.Pointer<ffi.Float>,
          int)>();

  void cblas_strmm(
    int Order,
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> B,
    int ldb,
  ) {
    return _cblas_strmm(
      Order,
      Side,
      Uplo,
      TransA,
      Diag,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
    );
  }

  late final _cblas_strmmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_strmm');
  late final _cblas_strmm = _cblas_strmmPtr.asFunction<
      void Function(int, int, int, int, int, int, int, double,
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int)>();

  void cblas_strsm(
    int Order,
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Float> A,
    int lda,
    ffi.Pointer<ffi.Float> B,
    int ldb,
  ) {
    return _cblas_strsm(
      Order,
      Side,
      Uplo,
      TransA,
      Diag,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
    );
  }

  late final _cblas_strsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Int32,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('cblas_strsm');
  late final _cblas_strsm = _cblas_strsmPtr.asFunction<
      void Function(int, int, int, int, int, int, int, double,
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int)>();

  void cblas_dgemm(
    int Order,
    int TransA,
    int TransB,
    int M,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> B,
    int ldb,
    double beta,
    ffi.Pointer<ffi.Double> C,
    int ldc,
  ) {
    return _cblas_dgemm(
      Order,
      TransA,
      TransB,
      M,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_dgemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dgemm');
  late final _cblas_dgemm = _cblas_dgemmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int)>();

  void cblas_dsymm(
    int Order,
    int Side,
    int Uplo,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> B,
    int ldb,
    double beta,
    ffi.Pointer<ffi.Double> C,
    int ldc,
  ) {
    return _cblas_dsymm(
      Order,
      Side,
      Uplo,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_dsymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dsymm');
  late final _cblas_dsymm = _cblas_dsymmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int)>();

  void cblas_dsyrk(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    double beta,
    ffi.Pointer<ffi.Double> C,
    int ldc,
  ) {
    return _cblas_dsyrk(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_dsyrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dsyrk');
  late final _cblas_dsyrk = _cblas_dsyrkPtr.asFunction<
      void Function(int, int, int, int, int, double, ffi.Pointer<ffi.Double>,
          int, double, ffi.Pointer<ffi.Double>, int)>();

  void cblas_dsyr2k(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> B,
    int ldb,
    double beta,
    ffi.Pointer<ffi.Double> C,
    int ldc,
  ) {
    return _cblas_dsyr2k(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_dsyr2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dsyr2k');
  late final _cblas_dsyr2k = _cblas_dsyr2kPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          ffi.Pointer<ffi.Double>,
          int)>();

  void cblas_dtrmm(
    int Order,
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> B,
    int ldb,
  ) {
    return _cblas_dtrmm(
      Order,
      Side,
      Uplo,
      TransA,
      Diag,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
    );
  }

  late final _cblas_dtrmmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dtrmm');
  late final _cblas_dtrmm = _cblas_dtrmmPtr.asFunction<
      void Function(int, int, int, int, int, int, int, double,
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int)>();

  void cblas_dtrsm(
    int Order,
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    int M,
    int N,
    double alpha,
    ffi.Pointer<ffi.Double> A,
    int lda,
    ffi.Pointer<ffi.Double> B,
    int ldb,
  ) {
    return _cblas_dtrsm(
      Order,
      Side,
      Uplo,
      TransA,
      Diag,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
    );
  }

  late final _cblas_dtrsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('cblas_dtrsm');
  late final _cblas_dtrsm = _cblas_dtrsmPtr.asFunction<
      void Function(int, int, int, int, int, int, int, double,
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int)>();

  void cblas_cgemm(
    int Order,
    int TransA,
    int TransB,
    int M,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_cgemm(
      Order,
      TransA,
      TransB,
      M,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_cgemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_cgemm');
  late final _cblas_cgemm = _cblas_cgemmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_csymm(
    int Order,
    int Side,
    int Uplo,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_csymm(
      Order,
      Side,
      Uplo,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_csymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_csymm');
  late final _cblas_csymm = _cblas_csymmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_csyrk(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_csyrk(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_csyrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_csyrk');
  late final _cblas_csyrk = _cblas_csyrkPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_csyr2k(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_csyr2k(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_csyr2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_csyr2k');
  late final _cblas_csyr2k = _cblas_csyr2kPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_ctrmm(
    int Order,
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
  ) {
    return _cblas_ctrmm(
      Order,
      Side,
      Uplo,
      TransA,
      Diag,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
    );
  }

  late final _cblas_ctrmmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ctrmm');
  late final _cblas_ctrmm = _cblas_ctrmmPtr.asFunction<
      void Function(int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_ctrsm(
    int Order,
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
  ) {
    return _cblas_ctrsm(
      Order,
      Side,
      Uplo,
      TransA,
      Diag,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
    );
  }

  late final _cblas_ctrsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ctrsm');
  late final _cblas_ctrsm = _cblas_ctrsmPtr.asFunction<
      void Function(int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_zgemm(
    int Order,
    int TransA,
    int TransB,
    int M,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_zgemm(
      Order,
      TransA,
      TransB,
      M,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_zgemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zgemm');
  late final _cblas_zgemm = _cblas_zgemmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_zsymm(
    int Order,
    int Side,
    int Uplo,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_zsymm(
      Order,
      Side,
      Uplo,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_zsymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zsymm');
  late final _cblas_zsymm = _cblas_zsymmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_zsyrk(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_zsyrk(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_zsyrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zsyrk');
  late final _cblas_zsyrk = _cblas_zsyrkPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_zsyr2k(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_zsyr2k(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_zsyr2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zsyr2k');
  late final _cblas_zsyr2k = _cblas_zsyr2kPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_ztrmm(
    int Order,
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
  ) {
    return _cblas_ztrmm(
      Order,
      Side,
      Uplo,
      TransA,
      Diag,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
    );
  }

  late final _cblas_ztrmmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ztrmm');
  late final _cblas_ztrmm = _cblas_ztrmmPtr.asFunction<
      void Function(int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_ztrsm(
    int Order,
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
  ) {
    return _cblas_ztrsm(
      Order,
      Side,
      Uplo,
      TransA,
      Diag,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
    );
  }

  late final _cblas_ztrsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_ztrsm');
  late final _cblas_ztrsm = _cblas_ztrsmPtr.asFunction<
      void Function(int, int, int, int, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void cblas_chemm(
    int Order,
    int Side,
    int Uplo,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_chemm(
      Order,
      Side,
      Uplo,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_chemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_chemm');
  late final _cblas_chemm = _cblas_chemmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_cherk(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    double beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_cherk(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_cherkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_cherk');
  late final _cblas_cherk = _cblas_cherkPtr.asFunction<
      void Function(int, int, int, int, int, double, ffi.Pointer<ffi.Void>, int,
          double, ffi.Pointer<ffi.Void>, int)>();

  void cblas_cher2k(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    double beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_cher2k(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_cher2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_cher2k');
  late final _cblas_cher2k = _cblas_cher2kPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          double,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_zhemm(
    int Order,
    int Side,
    int Uplo,
    int M,
    int N,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    ffi.Pointer<ffi.Void> beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_zhemm(
      Order,
      Side,
      Uplo,
      M,
      N,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_zhemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zhemm');
  late final _cblas_zhemm = _cblas_zhemmPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_zherk(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    double alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    double beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_zherk(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_zherkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zherk');
  late final _cblas_zherk = _cblas_zherkPtr.asFunction<
      void Function(int, int, int, int, int, double, ffi.Pointer<ffi.Void>, int,
          double, ffi.Pointer<ffi.Void>, int)>();

  void cblas_zher2k(
    int Order,
    int Uplo,
    int Trans,
    int N,
    int K,
    ffi.Pointer<ffi.Void> alpha,
    ffi.Pointer<ffi.Void> A,
    int lda,
    ffi.Pointer<ffi.Void> B,
    int ldb,
    double beta,
    ffi.Pointer<ffi.Void> C,
    int ldc,
  ) {
    return _cblas_zher2k(
      Order,
      Uplo,
      Trans,
      N,
      K,
      alpha,
      A,
      lda,
      B,
      ldb,
      beta,
      C,
      ldc,
    );
  }

  late final _cblas_zher2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('cblas_zher2k');
  late final _cblas_zher2k = _cblas_zher2kPtr.asFunction<
      void Function(
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          double,
          ffi.Pointer<ffi.Void>,
          int)>();

  void cblas_xerbla(
    int p,
    ffi.Pointer<ffi.Int8> rout,
    ffi.Pointer<ffi.Int8> form,
  ) {
    return _cblas_xerbla(
      p,
      rout,
      form,
    );
  }

  late final _cblas_xerblaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('cblas_xerbla');
  late final _cblas_xerbla = _cblas_xerblaPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_matrix_complex_long_double>
      gsl_matrix_complex_long_double_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_long_double_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_long_double_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex_long_double> Function(
              size_t, size_t)>>('gsl_matrix_complex_long_double_alloc');
  late final _gsl_matrix_complex_long_double_alloc =
      _gsl_matrix_complex_long_double_allocPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex_long_double> Function(int, int)>();

  ffi.Pointer<gsl_matrix_complex_long_double>
      gsl_matrix_complex_long_double_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_long_double_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_long_double_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex_long_double> Function(
              size_t, size_t)>>('gsl_matrix_complex_long_double_calloc');
  late final _gsl_matrix_complex_long_double_calloc =
      _gsl_matrix_complex_long_double_callocPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex_long_double> Function(int, int)>();

  ffi.Pointer<gsl_matrix_complex_long_double>
      gsl_matrix_complex_long_double_alloc_from_block(
    ffi.Pointer<gsl_block_complex_long_double> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_complex_long_double_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_complex_long_double_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex_long_double> Function(
              ffi.Pointer<gsl_block_complex_long_double>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_long_double_alloc_from_block');
  late final _gsl_matrix_complex_long_double_alloc_from_block =
      _gsl_matrix_complex_long_double_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex_long_double> Function(
              ffi.Pointer<gsl_block_complex_long_double>,
              int,
              int,
              int,
              int)>();

  ffi.Pointer<gsl_matrix_complex_long_double>
      gsl_matrix_complex_long_double_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_complex_long_double> b,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_long_double_alloc_from_matrix(
      b,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_long_double_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_long_double_alloc_from_matrix');
  late final _gsl_matrix_complex_long_double_alloc_from_matrix =
      _gsl_matrix_complex_long_double_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>,
              int,
              int,
              int,
              int)>();

  ffi.Pointer<gsl_vector_complex_long_double>
      gsl_vector_complex_long_double_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int i,
  ) {
    return _gsl_vector_complex_long_double_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_complex_long_double_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t)>>('gsl_vector_complex_long_double_alloc_row_from_matrix');
  late final _gsl_vector_complex_long_double_alloc_row_from_matrix =
      _gsl_vector_complex_long_double_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>, int)>();

  ffi.Pointer<gsl_vector_complex_long_double>
      gsl_vector_complex_long_double_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int j,
  ) {
    return _gsl_vector_complex_long_double_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_complex_long_double_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t)>>('gsl_vector_complex_long_double_alloc_col_from_matrix');
  late final _gsl_vector_complex_long_double_alloc_col_from_matrix =
      _gsl_vector_complex_long_double_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>, int)>();

  void gsl_matrix_complex_long_double_free(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_free(
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_free');
  late final _gsl_matrix_complex_long_double_free =
      _gsl_matrix_complex_long_double_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_complex_long_double>)>();

  void gsl_matrix_complex_long_double_set_zero(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_set_zero(
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_set_zero');
  late final _gsl_matrix_complex_long_double_set_zero =
      _gsl_matrix_complex_long_double_set_zeroPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_complex_long_double>)>();

  void gsl_matrix_complex_long_double_set_identity(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_set_identity(
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_set_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_set_identity');
  late final _gsl_matrix_complex_long_double_set_identity =
      _gsl_matrix_complex_long_double_set_identityPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_fread');
  late final _gsl_matrix_complex_long_double_fread =
      _gsl_matrix_complex_long_double_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_fwrite');
  late final _gsl_matrix_complex_long_double_fwrite =
      _gsl_matrix_complex_long_double_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_fscanfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_fscanf');
  late final _gsl_matrix_complex_long_double_fscanf =
      _gsl_matrix_complex_long_double_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_complex_long_double_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_complex_long_double_fprintfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<ffi.Int8>)>>(
      'gsl_matrix_complex_long_double_fprintf');
  late final _gsl_matrix_complex_long_double_fprintf =
      _gsl_matrix_complex_long_double_fprintfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_complex_long_double_memcpy(
    ffi.Pointer<gsl_matrix_complex_long_double> dest,
    ffi.Pointer<gsl_matrix_complex_long_double> src,
  ) {
    return _gsl_matrix_complex_long_double_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_long_double_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_memcpy');
  late final _gsl_matrix_complex_long_double_memcpy =
      _gsl_matrix_complex_long_double_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_swap(
    ffi.Pointer<gsl_matrix_complex_long_double> m1,
    ffi.Pointer<gsl_matrix_complex_long_double> m2,
  ) {
    return _gsl_matrix_complex_long_double_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_complex_long_double_swapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_swap');
  late final _gsl_matrix_complex_long_double_swap =
      _gsl_matrix_complex_long_double_swapPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_complex_long_double> dest,
    ffi.Pointer<gsl_matrix_complex_long_double> src,
  ) {
    return _gsl_matrix_complex_long_double_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_long_double_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_tricpy');
  late final _gsl_matrix_complex_long_double_tricpy =
      _gsl_matrix_complex_long_double_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_swap_rows(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_long_double_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_long_double_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t, size_t)>>('gsl_matrix_complex_long_double_swap_rows');
  late final _gsl_matrix_complex_long_double_swap_rows =
      _gsl_matrix_complex_long_double_swap_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex_long_double>, int, int)>();

  int gsl_matrix_complex_long_double_swap_columns(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_long_double_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_long_double_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t, size_t)>>('gsl_matrix_complex_long_double_swap_columns');
  late final _gsl_matrix_complex_long_double_swap_columns =
      _gsl_matrix_complex_long_double_swap_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex_long_double>, int, int)>();

  int gsl_matrix_complex_long_double_swap_rowcol(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_long_double_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_long_double_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t, size_t)>>('gsl_matrix_complex_long_double_swap_rowcol');
  late final _gsl_matrix_complex_long_double_swap_rowcol =
      _gsl_matrix_complex_long_double_swap_rowcolPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex_long_double>, int, int)>();

  int gsl_matrix_complex_long_double_transpose(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_transpose(
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_transpose');
  late final _gsl_matrix_complex_long_double_transpose =
      _gsl_matrix_complex_long_double_transposePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_transpose_memcpy(
    ffi.Pointer<gsl_matrix_complex_long_double> dest,
    ffi.Pointer<gsl_matrix_complex_long_double> src,
  ) {
    return _gsl_matrix_complex_long_double_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_long_double_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_transpose_memcpy');
  late final _gsl_matrix_complex_long_double_transpose_memcpy =
      _gsl_matrix_complex_long_double_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_complex_long_double> dest,
    ffi.Pointer<gsl_matrix_complex_long_double> src,
  ) {
    return _gsl_matrix_complex_long_double_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_long_double_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_transpose_tricpy');
  late final _gsl_matrix_complex_long_double_transpose_tricpy =
      _gsl_matrix_complex_long_double_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_conjtrans_memcpy(
    ffi.Pointer<gsl_matrix_complex_long_double> dest,
    ffi.Pointer<gsl_matrix_complex_long_double> src,
  ) {
    return _gsl_matrix_complex_long_double_conjtrans_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_long_double_conjtrans_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_conjtrans_memcpy');
  late final _gsl_matrix_complex_long_double_conjtrans_memcpy =
      _gsl_matrix_complex_long_double_conjtrans_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_equal(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_matrix_complex_long_double> b,
  ) {
    return _gsl_matrix_complex_long_double_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_long_double_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_equal');
  late final _gsl_matrix_complex_long_double_equal =
      _gsl_matrix_complex_long_double_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_isnull(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_isnull(
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_isnullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_isnull');
  late final _gsl_matrix_complex_long_double_isnull =
      _gsl_matrix_complex_long_double_isnullPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_ispos(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_ispos(
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_isposPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_ispos');
  late final _gsl_matrix_complex_long_double_ispos =
      _gsl_matrix_complex_long_double_isposPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_isneg(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_isneg(
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_isnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_isneg');
  late final _gsl_matrix_complex_long_double_isneg =
      _gsl_matrix_complex_long_double_isnegPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_isnonneg(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
  ) {
    return _gsl_matrix_complex_long_double_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_complex_long_double_isnonnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_isnonneg');
  late final _gsl_matrix_complex_long_double_isnonneg =
      _gsl_matrix_complex_long_double_isnonnegPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_add(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_matrix_complex_long_double> b,
  ) {
    return _gsl_matrix_complex_long_double_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_long_double_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_add');
  late final _gsl_matrix_complex_long_double_add =
      _gsl_matrix_complex_long_double_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_sub(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_matrix_complex_long_double> b,
  ) {
    return _gsl_matrix_complex_long_double_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_long_double_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_sub');
  late final _gsl_matrix_complex_long_double_sub =
      _gsl_matrix_complex_long_double_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_mul_elements(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_matrix_complex_long_double> b,
  ) {
    return _gsl_matrix_complex_long_double_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_long_double_mul_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_mul_elements');
  late final _gsl_matrix_complex_long_double_mul_elements =
      _gsl_matrix_complex_long_double_mul_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_div_elements(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_matrix_complex_long_double> b,
  ) {
    return _gsl_matrix_complex_long_double_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_long_double_div_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_div_elements');
  late final _gsl_matrix_complex_long_double_div_elements =
      _gsl_matrix_complex_long_double_div_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_matrix_complex_long_double_scale_rows(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_vector_complex_long_double> x,
  ) {
    return _gsl_matrix_complex_long_double_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_long_double_scale_rowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_scale_rows');
  late final _gsl_matrix_complex_long_double_scale_rows =
      _gsl_matrix_complex_long_double_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_matrix_complex_long_double_scale_columns(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_vector_complex_long_double> x,
  ) {
    return _gsl_matrix_complex_long_double_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_long_double_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_scale_columns');
  late final _gsl_matrix_complex_long_double_scale_columns =
      _gsl_matrix_complex_long_double_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_matrix_complex_long_double_get_row(
    ffi.Pointer<gsl_vector_complex_long_double> v,
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int i,
  ) {
    return _gsl_matrix_complex_long_double_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_complex_long_double_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t)>>('gsl_matrix_complex_long_double_get_row');
  late final _gsl_matrix_complex_long_double_get_row =
      _gsl_matrix_complex_long_double_get_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>, int)>();

  int gsl_matrix_complex_long_double_get_col(
    ffi.Pointer<gsl_vector_complex_long_double> v,
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int j,
  ) {
    return _gsl_matrix_complex_long_double_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_complex_long_double_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t)>>('gsl_matrix_complex_long_double_get_col');
  late final _gsl_matrix_complex_long_double_get_col =
      _gsl_matrix_complex_long_double_get_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>, int)>();

  int gsl_matrix_complex_long_double_set_row(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int i,
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_matrix_complex_long_double_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_complex_long_double_set_rowPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  size_t, ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_set_row');
  late final _gsl_matrix_complex_long_double_set_row =
      _gsl_matrix_complex_long_double_set_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>, int,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_matrix_complex_long_double_set_col(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int j,
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_matrix_complex_long_double_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_complex_long_double_set_colPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  size_t, ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_matrix_complex_long_double_set_col');
  late final _gsl_matrix_complex_long_double_set_col =
      _gsl_matrix_complex_long_double_set_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>, int,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  ffi.Pointer<gsl_complex_long_double> gsl_matrix_complex_long_double_ptr(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_long_double_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_long_double_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t,
              size_t)>>('gsl_matrix_complex_long_double_ptr');
  late final _gsl_matrix_complex_long_double_ptr =
      _gsl_matrix_complex_long_double_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>, int, int)>();

  ffi.Pointer<gsl_complex_long_double> gsl_matrix_complex_long_double_const_ptr(
    ffi.Pointer<gsl_matrix_complex_long_double> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_long_double_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_long_double_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>,
              size_t,
              size_t)>>('gsl_matrix_complex_long_double_const_ptr');
  late final _gsl_matrix_complex_long_double_const_ptr =
      _gsl_matrix_complex_long_double_const_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_matrix_complex_long_double>, int, int)>();

  ffi.Pointer<gsl_matrix_complex> gsl_matrix_complex_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex> Function(
              size_t, size_t)>>('gsl_matrix_complex_alloc');
  late final _gsl_matrix_complex_alloc = _gsl_matrix_complex_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_complex> Function(int, int)>();

  ffi.Pointer<gsl_matrix_complex> gsl_matrix_complex_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex> Function(
              size_t, size_t)>>('gsl_matrix_complex_calloc');
  late final _gsl_matrix_complex_calloc = _gsl_matrix_complex_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_complex> Function(int, int)>();

  ffi.Pointer<gsl_matrix_complex> gsl_matrix_complex_alloc_from_block(
    ffi.Pointer<gsl_block_complex> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_complex_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_complex_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex> Function(
              ffi.Pointer<gsl_block_complex>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_alloc_from_block');
  late final _gsl_matrix_complex_alloc_from_block =
      _gsl_matrix_complex_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex> Function(
              ffi.Pointer<gsl_block_complex>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_complex> gsl_matrix_complex_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_complex> b,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_alloc_from_matrix(
      b,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex> Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_alloc_from_matrix');
  late final _gsl_matrix_complex_alloc_from_matrix =
      _gsl_matrix_complex_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex> Function(
              ffi.Pointer<gsl_matrix_complex>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_complex> gsl_vector_complex_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
  ) {
    return _gsl_vector_complex_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_complex_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex> Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_vector_complex_alloc_row_from_matrix');
  late final _gsl_vector_complex_alloc_row_from_matrix =
      _gsl_vector_complex_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_complex> Function(
              ffi.Pointer<gsl_matrix_complex>, int)>();

  ffi.Pointer<gsl_vector_complex> gsl_vector_complex_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_complex> m,
    int j,
  ) {
    return _gsl_vector_complex_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_complex_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex> Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_vector_complex_alloc_col_from_matrix');
  late final _gsl_vector_complex_alloc_col_from_matrix =
      _gsl_vector_complex_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_complex> Function(
              ffi.Pointer<gsl_matrix_complex>, int)>();

  void gsl_matrix_complex_free(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_free(
      m,
    );
  }

  late final _gsl_matrix_complex_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_free');
  late final _gsl_matrix_complex_free = _gsl_matrix_complex_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_complex>)>();

  _gsl_matrix_complex_view gsl_matrix_complex_submatrix(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_view Function(ffi.Pointer<gsl_matrix_complex>,
              size_t, size_t, size_t, size_t)>>('gsl_matrix_complex_submatrix');
  late final _gsl_matrix_complex_submatrix =
      _gsl_matrix_complex_submatrixPtr.asFunction<
          _gsl_matrix_complex_view Function(
              ffi.Pointer<gsl_matrix_complex>, int, int, int, int)>();

  _gsl_vector_complex_view gsl_matrix_complex_row(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
  ) {
    return _gsl_matrix_complex_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_complex_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_row');
  late final _gsl_matrix_complex_row = _gsl_matrix_complex_rowPtr.asFunction<
      _gsl_vector_complex_view Function(
          ffi.Pointer<gsl_matrix_complex>, int)>();

  _gsl_vector_complex_view gsl_matrix_complex_column(
    ffi.Pointer<gsl_matrix_complex> m,
    int j,
  ) {
    return _gsl_matrix_complex_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_complex_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_column');
  late final _gsl_matrix_complex_column =
      _gsl_matrix_complex_columnPtr.asFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<gsl_matrix_complex>, int)>();

  _gsl_vector_complex_view gsl_matrix_complex_diagonal(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_diagonal(
      m,
    );
  }

  late final _gsl_matrix_complex_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_diagonal');
  late final _gsl_matrix_complex_diagonal =
      _gsl_matrix_complex_diagonalPtr.asFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<gsl_matrix_complex>)>();

  _gsl_vector_complex_view gsl_matrix_complex_subdiagonal(
    ffi.Pointer<gsl_matrix_complex> m,
    int k,
  ) {
    return _gsl_matrix_complex_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_complex_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_subdiagonal');
  late final _gsl_matrix_complex_subdiagonal =
      _gsl_matrix_complex_subdiagonalPtr.asFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<gsl_matrix_complex>, int)>();

  _gsl_vector_complex_view gsl_matrix_complex_superdiagonal(
    ffi.Pointer<gsl_matrix_complex> m,
    int k,
  ) {
    return _gsl_matrix_complex_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_complex_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_superdiagonal');
  late final _gsl_matrix_complex_superdiagonal =
      _gsl_matrix_complex_superdiagonalPtr.asFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<gsl_matrix_complex>, int)>();

  _gsl_vector_complex_view gsl_matrix_complex_subrow(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_complex_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_complex_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<gsl_matrix_complex>,
              size_t, size_t, size_t)>>('gsl_matrix_complex_subrow');
  late final _gsl_matrix_complex_subrow =
      _gsl_matrix_complex_subrowPtr.asFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<gsl_matrix_complex>, int, int, int)>();

  _gsl_vector_complex_view gsl_matrix_complex_subcolumn(
    ffi.Pointer<gsl_matrix_complex> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_complex_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_complex_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_view Function(ffi.Pointer<gsl_matrix_complex>,
              size_t, size_t, size_t)>>('gsl_matrix_complex_subcolumn');
  late final _gsl_matrix_complex_subcolumn =
      _gsl_matrix_complex_subcolumnPtr.asFunction<
          _gsl_vector_complex_view Function(
              ffi.Pointer<gsl_matrix_complex>, int, int, int)>();

  _gsl_matrix_complex_view gsl_matrix_complex_view_array(
    ffi.Pointer<ffi.Double> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_view Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_matrix_complex_view_array');
  late final _gsl_matrix_complex_view_array =
      _gsl_matrix_complex_view_arrayPtr.asFunction<
          _gsl_matrix_complex_view Function(
              ffi.Pointer<ffi.Double>, int, int)>();

  _gsl_matrix_complex_view gsl_matrix_complex_view_array_with_tda(
    ffi.Pointer<ffi.Double> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_complex_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_complex_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_view Function(ffi.Pointer<ffi.Double>, size_t,
              size_t, size_t)>>('gsl_matrix_complex_view_array_with_tda');
  late final _gsl_matrix_complex_view_array_with_tda =
      _gsl_matrix_complex_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_complex_view Function(
              ffi.Pointer<ffi.Double>, int, int, int)>();

  _gsl_matrix_complex_view gsl_matrix_complex_view_vector(
    ffi.Pointer<gsl_vector_complex> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_view Function(ffi.Pointer<gsl_vector_complex>,
              size_t, size_t)>>('gsl_matrix_complex_view_vector');
  late final _gsl_matrix_complex_view_vector =
      _gsl_matrix_complex_view_vectorPtr.asFunction<
          _gsl_matrix_complex_view Function(
              ffi.Pointer<gsl_vector_complex>, int, int)>();

  _gsl_matrix_complex_view gsl_matrix_complex_view_vector_with_tda(
    ffi.Pointer<gsl_vector_complex> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_complex_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_complex_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_view Function(
              ffi.Pointer<gsl_vector_complex>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_view_vector_with_tda');
  late final _gsl_matrix_complex_view_vector_with_tda =
      _gsl_matrix_complex_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_complex_view Function(
              ffi.Pointer<gsl_vector_complex>, int, int, int)>();

  _gsl_matrix_complex_const_view gsl_matrix_complex_const_submatrix(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_const_submatrix');
  late final _gsl_matrix_complex_const_submatrix =
      _gsl_matrix_complex_const_submatrixPtr.asFunction<
          _gsl_matrix_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>, int, int, int, int)>();

  _gsl_vector_complex_const_view gsl_matrix_complex_const_row(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
  ) {
    return _gsl_matrix_complex_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_complex_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_const_row');
  late final _gsl_matrix_complex_const_row =
      _gsl_matrix_complex_const_rowPtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>, int)>();

  _gsl_vector_complex_const_view gsl_matrix_complex_const_column(
    ffi.Pointer<gsl_matrix_complex> m,
    int j,
  ) {
    return _gsl_matrix_complex_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_complex_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_const_column');
  late final _gsl_matrix_complex_const_column =
      _gsl_matrix_complex_const_columnPtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>, int)>();

  _gsl_vector_complex_const_view gsl_matrix_complex_const_diagonal(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_complex_const_diagonalPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_complex_const_view Function(
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_matrix_complex_const_diagonal');
  late final _gsl_matrix_complex_const_diagonal =
      _gsl_matrix_complex_const_diagonalPtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>)>();

  _gsl_vector_complex_const_view gsl_matrix_complex_const_subdiagonal(
    ffi.Pointer<gsl_matrix_complex> m,
    int k,
  ) {
    return _gsl_matrix_complex_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_complex_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_const_subdiagonal');
  late final _gsl_matrix_complex_const_subdiagonal =
      _gsl_matrix_complex_const_subdiagonalPtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>, int)>();

  _gsl_vector_complex_const_view gsl_matrix_complex_const_superdiagonal(
    ffi.Pointer<gsl_matrix_complex> m,
    int k,
  ) {
    return _gsl_matrix_complex_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_complex_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_const_superdiagonal');
  late final _gsl_matrix_complex_const_superdiagonal =
      _gsl_matrix_complex_const_superdiagonalPtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>, int)>();

  _gsl_vector_complex_const_view gsl_matrix_complex_const_subrow(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_complex_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_complex_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_const_subrow');
  late final _gsl_matrix_complex_const_subrow =
      _gsl_matrix_complex_const_subrowPtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>, int, int, int)>();

  _gsl_vector_complex_const_view gsl_matrix_complex_const_subcolumn(
    ffi.Pointer<gsl_matrix_complex> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_complex_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_complex_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_const_subcolumn');
  late final _gsl_matrix_complex_const_subcolumn =
      _gsl_matrix_complex_const_subcolumnPtr.asFunction<
          _gsl_vector_complex_const_view Function(
              ffi.Pointer<gsl_matrix_complex>, int, int, int)>();

  _gsl_matrix_complex_const_view gsl_matrix_complex_const_view_array(
    ffi.Pointer<ffi.Double> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_const_view Function(ffi.Pointer<ffi.Double>,
              size_t, size_t)>>('gsl_matrix_complex_const_view_array');
  late final _gsl_matrix_complex_const_view_array =
      _gsl_matrix_complex_const_view_arrayPtr.asFunction<
          _gsl_matrix_complex_const_view Function(
              ffi.Pointer<ffi.Double>, int, int)>();

  _gsl_matrix_complex_const_view gsl_matrix_complex_const_view_array_with_tda(
    ffi.Pointer<ffi.Double> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_complex_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_complex_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_const_view Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_const_view_array_with_tda');
  late final _gsl_matrix_complex_const_view_array_with_tda =
      _gsl_matrix_complex_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_complex_const_view Function(
              ffi.Pointer<ffi.Double>, int, int, int)>();

  _gsl_matrix_complex_const_view gsl_matrix_complex_const_view_vector(
    ffi.Pointer<gsl_vector_complex> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_const_view Function(
              ffi.Pointer<gsl_vector_complex>,
              size_t,
              size_t)>>('gsl_matrix_complex_const_view_vector');
  late final _gsl_matrix_complex_const_view_vector =
      _gsl_matrix_complex_const_view_vectorPtr.asFunction<
          _gsl_matrix_complex_const_view Function(
              ffi.Pointer<gsl_vector_complex>, int, int)>();

  _gsl_matrix_complex_const_view gsl_matrix_complex_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_complex> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_complex_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_complex_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_const_view Function(
              ffi.Pointer<gsl_vector_complex>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_const_view_vector_with_tda');
  late final _gsl_matrix_complex_const_view_vector_with_tda =
      _gsl_matrix_complex_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_complex_const_view Function(
              ffi.Pointer<gsl_vector_complex>, int, int, int)>();

  void gsl_matrix_complex_set_zero(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_set_zero(
      m,
    );
  }

  late final _gsl_matrix_complex_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_set_zero');
  late final _gsl_matrix_complex_set_zero = _gsl_matrix_complex_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_complex>)>();

  void gsl_matrix_complex_set_identity(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_set_identity(
      m,
    );
  }

  late final _gsl_matrix_complex_set_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_matrix_complex_set_identity');
  late final _gsl_matrix_complex_set_identity =
      _gsl_matrix_complex_set_identityPtr
          .asFunction<void Function(ffi.Pointer<gsl_matrix_complex>)>();

  void gsl_matrix_complex_set_all(
    ffi.Pointer<gsl_matrix_complex> m,
    gsl_complex x,
  ) {
    return _gsl_matrix_complex_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_complex_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_complex>,
              gsl_complex)>>('gsl_matrix_complex_set_all');
  late final _gsl_matrix_complex_set_all =
      _gsl_matrix_complex_set_allPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_complex>, gsl_complex)>();

  int gsl_matrix_complex_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_complex_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_fread');
  late final _gsl_matrix_complex_fread =
      _gsl_matrix_complex_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_complex_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_fwrite');
  late final _gsl_matrix_complex_fwrite =
      _gsl_matrix_complex_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_complex_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_fscanf');
  late final _gsl_matrix_complex_fscanf =
      _gsl_matrix_complex_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_complex_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_complex_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_complex_fprintf');
  late final _gsl_matrix_complex_fprintf =
      _gsl_matrix_complex_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_complex_memcpy(
    ffi.Pointer<gsl_matrix_complex> dest,
    ffi.Pointer<gsl_matrix_complex> src,
  ) {
    return _gsl_matrix_complex_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_memcpy');
  late final _gsl_matrix_complex_memcpy =
      _gsl_matrix_complex_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_swap(
    ffi.Pointer<gsl_matrix_complex> m1,
    ffi.Pointer<gsl_matrix_complex> m2,
  ) {
    return _gsl_matrix_complex_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_complex_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_swap');
  late final _gsl_matrix_complex_swap = _gsl_matrix_complex_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_complex>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_complex> dest,
    ffi.Pointer<gsl_matrix_complex> src,
  ) {
    return _gsl_matrix_complex_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_tricpy');
  late final _gsl_matrix_complex_tricpy =
      _gsl_matrix_complex_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_swap_rows(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>, size_t,
              size_t)>>('gsl_matrix_complex_swap_rows');
  late final _gsl_matrix_complex_swap_rows = _gsl_matrix_complex_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>, int, int)>();

  int gsl_matrix_complex_swap_columns(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>, size_t,
              size_t)>>('gsl_matrix_complex_swap_columns');
  late final _gsl_matrix_complex_swap_columns =
      _gsl_matrix_complex_swap_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>, int, int)>();

  int gsl_matrix_complex_swap_rowcol(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>, size_t,
              size_t)>>('gsl_matrix_complex_swap_rowcol');
  late final _gsl_matrix_complex_swap_rowcol =
      _gsl_matrix_complex_swap_rowcolPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>, int, int)>();

  int gsl_matrix_complex_transpose(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_transpose(
      m,
    );
  }

  late final _gsl_matrix_complex_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_matrix_complex_transpose');
  late final _gsl_matrix_complex_transpose = _gsl_matrix_complex_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_transpose_memcpy(
    ffi.Pointer<gsl_matrix_complex> dest,
    ffi.Pointer<gsl_matrix_complex> src,
  ) {
    return _gsl_matrix_complex_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_matrix_complex_transpose_memcpy');
  late final _gsl_matrix_complex_transpose_memcpy =
      _gsl_matrix_complex_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_complex> dest,
    ffi.Pointer<gsl_matrix_complex> src,
  ) {
    return _gsl_matrix_complex_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_matrix_complex_transpose_tricpy');
  late final _gsl_matrix_complex_transpose_tricpy =
      _gsl_matrix_complex_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_conjtrans_memcpy(
    ffi.Pointer<gsl_matrix_complex> dest,
    ffi.Pointer<gsl_matrix_complex> src,
  ) {
    return _gsl_matrix_complex_conjtrans_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_conjtrans_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_matrix_complex_conjtrans_memcpy');
  late final _gsl_matrix_complex_conjtrans_memcpy =
      _gsl_matrix_complex_conjtrans_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_equal(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_matrix_complex> b,
  ) {
    return _gsl_matrix_complex_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_equal');
  late final _gsl_matrix_complex_equal =
      _gsl_matrix_complex_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_isnull(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_isnull(
      m,
    );
  }

  late final _gsl_matrix_complex_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_isnull');
  late final _gsl_matrix_complex_isnull = _gsl_matrix_complex_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_ispos(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_ispos(
      m,
    );
  }

  late final _gsl_matrix_complex_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_ispos');
  late final _gsl_matrix_complex_ispos = _gsl_matrix_complex_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_isneg(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_isneg(
      m,
    );
  }

  late final _gsl_matrix_complex_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_isneg');
  late final _gsl_matrix_complex_isneg = _gsl_matrix_complex_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_isnonneg(
    ffi.Pointer<gsl_matrix_complex> m,
  ) {
    return _gsl_matrix_complex_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_complex_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_isnonneg');
  late final _gsl_matrix_complex_isnonneg = _gsl_matrix_complex_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_add(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_matrix_complex> b,
  ) {
    return _gsl_matrix_complex_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_add');
  late final _gsl_matrix_complex_add = _gsl_matrix_complex_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_complex>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_sub(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_matrix_complex> b,
  ) {
    return _gsl_matrix_complex_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_matrix_complex_sub');
  late final _gsl_matrix_complex_sub = _gsl_matrix_complex_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_complex>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_mul_elements(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_matrix_complex> b,
  ) {
    return _gsl_matrix_complex_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_mul_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_matrix_complex_mul_elements');
  late final _gsl_matrix_complex_mul_elements =
      _gsl_matrix_complex_mul_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_div_elements(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_matrix_complex> b,
  ) {
    return _gsl_matrix_complex_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_div_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_matrix_complex_div_elements');
  late final _gsl_matrix_complex_div_elements =
      _gsl_matrix_complex_div_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_matrix_complex_scale(
    ffi.Pointer<gsl_matrix_complex> a,
    gsl_complex x,
  ) {
    return _gsl_matrix_complex_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              gsl_complex)>>('gsl_matrix_complex_scale');
  late final _gsl_matrix_complex_scale = _gsl_matrix_complex_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>, gsl_complex)>();

  int gsl_matrix_complex_scale_rows(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_matrix_complex_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_scale_rowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_matrix_complex_scale_rows');
  late final _gsl_matrix_complex_scale_rows =
      _gsl_matrix_complex_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_matrix_complex_scale_columns(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_matrix_complex_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_matrix_complex_scale_columns');
  late final _gsl_matrix_complex_scale_columns =
      _gsl_matrix_complex_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_matrix_complex_add_constant(
    ffi.Pointer<gsl_matrix_complex> a,
    gsl_complex x,
  ) {
    return _gsl_matrix_complex_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              gsl_complex)>>('gsl_matrix_complex_add_constant');
  late final _gsl_matrix_complex_add_constant =
      _gsl_matrix_complex_add_constantPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>, gsl_complex)>();

  int gsl_matrix_complex_add_diagonal(
    ffi.Pointer<gsl_matrix_complex> a,
    gsl_complex x,
  ) {
    return _gsl_matrix_complex_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              gsl_complex)>>('gsl_matrix_complex_add_diagonal');
  late final _gsl_matrix_complex_add_diagonal =
      _gsl_matrix_complex_add_diagonalPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>, gsl_complex)>();

  int gsl_matrix_complex_get_row(
    ffi.Pointer<gsl_vector_complex> v,
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
  ) {
    return _gsl_matrix_complex_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_complex_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_get_row');
  late final _gsl_matrix_complex_get_row =
      _gsl_matrix_complex_get_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>, int)>();

  int gsl_matrix_complex_get_col(
    ffi.Pointer<gsl_vector_complex> v,
    ffi.Pointer<gsl_matrix_complex> m,
    int j,
  ) {
    return _gsl_matrix_complex_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_complex_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              size_t)>>('gsl_matrix_complex_get_col');
  late final _gsl_matrix_complex_get_col =
      _gsl_matrix_complex_get_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>, int)>();

  int gsl_matrix_complex_set_row(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_matrix_complex_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_complex_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>, size_t,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_matrix_complex_set_row');
  late final _gsl_matrix_complex_set_row =
      _gsl_matrix_complex_set_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>, int,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_matrix_complex_set_col(
    ffi.Pointer<gsl_matrix_complex> m,
    int j,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_matrix_complex_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_complex_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>, size_t,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_matrix_complex_set_col');
  late final _gsl_matrix_complex_set_col =
      _gsl_matrix_complex_set_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>, int,
              ffi.Pointer<gsl_vector_complex>)>();

  gsl_complex gsl_matrix_complex_get(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_getPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex Function(ffi.Pointer<gsl_matrix_complex>, size_t,
              size_t)>>('gsl_matrix_complex_get');
  late final _gsl_matrix_complex_get = _gsl_matrix_complex_getPtr.asFunction<
      gsl_complex Function(ffi.Pointer<gsl_matrix_complex>, int, int)>();

  void gsl_matrix_complex_set(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int j,
    gsl_complex x,
  ) {
    return _gsl_matrix_complex_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_complex_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_complex>, size_t, size_t,
              gsl_complex)>>('gsl_matrix_complex_set');
  late final _gsl_matrix_complex_set = _gsl_matrix_complex_setPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_complex>, int, int, gsl_complex)>();

  ffi.Pointer<gsl_complex> gsl_matrix_complex_ptr(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex> Function(ffi.Pointer<gsl_matrix_complex>,
              size_t, size_t)>>('gsl_matrix_complex_ptr');
  late final _gsl_matrix_complex_ptr = _gsl_matrix_complex_ptrPtr.asFunction<
      ffi.Pointer<gsl_complex> Function(
          ffi.Pointer<gsl_matrix_complex>, int, int)>();

  ffi.Pointer<gsl_complex> gsl_matrix_complex_const_ptr(
    ffi.Pointer<gsl_matrix_complex> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex> Function(ffi.Pointer<gsl_matrix_complex>,
              size_t, size_t)>>('gsl_matrix_complex_const_ptr');
  late final _gsl_matrix_complex_const_ptr =
      _gsl_matrix_complex_const_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex> Function(
              ffi.Pointer<gsl_matrix_complex>, int, int)>();

  ffi.Pointer<gsl_matrix_complex_float> gsl_matrix_complex_float_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_float_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex_float> Function(
              size_t, size_t)>>('gsl_matrix_complex_float_alloc');
  late final _gsl_matrix_complex_float_alloc =
      _gsl_matrix_complex_float_allocPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex_float> Function(int, int)>();

  ffi.Pointer<gsl_matrix_complex_float> gsl_matrix_complex_float_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_float_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_float_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex_float> Function(
              size_t, size_t)>>('gsl_matrix_complex_float_calloc');
  late final _gsl_matrix_complex_float_calloc =
      _gsl_matrix_complex_float_callocPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex_float> Function(int, int)>();

  ffi.Pointer<gsl_matrix_complex_float>
      gsl_matrix_complex_float_alloc_from_block(
    ffi.Pointer<gsl_block_complex_float1> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_complex_float_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_complex_float_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex_float> Function(
              ffi.Pointer<gsl_block_complex_float1>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_alloc_from_block');
  late final _gsl_matrix_complex_float_alloc_from_block =
      _gsl_matrix_complex_float_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex_float> Function(
              ffi.Pointer<gsl_block_complex_float1>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_complex_float>
      gsl_matrix_complex_float_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_complex_float> b,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_float_alloc_from_matrix(
      b,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_float_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_alloc_from_matrix');
  late final _gsl_matrix_complex_float_alloc_from_matrix =
      _gsl_matrix_complex_float_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_complex_float>
      gsl_vector_complex_float_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
  ) {
    return _gsl_vector_complex_float_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_complex_float_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_vector_complex_float_alloc_row_from_matrix');
  late final _gsl_vector_complex_float_alloc_row_from_matrix =
      _gsl_vector_complex_float_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  ffi.Pointer<gsl_vector_complex_float>
      gsl_vector_complex_float_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int j,
  ) {
    return _gsl_vector_complex_float_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_complex_float_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_vector_complex_float_alloc_col_from_matrix');
  late final _gsl_vector_complex_float_alloc_col_from_matrix =
      _gsl_vector_complex_float_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  void gsl_matrix_complex_float_free(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_free(
      m,
    );
  }

  late final _gsl_matrix_complex_float_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_free');
  late final _gsl_matrix_complex_float_free = _gsl_matrix_complex_float_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_complex_float>)>();

  _gsl_matrix_complex_float_view gsl_matrix_complex_float_submatrix(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_float_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_float_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_submatrix');
  late final _gsl_matrix_complex_float_submatrix =
      _gsl_matrix_complex_float_submatrixPtr.asFunction<
          _gsl_matrix_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int, int, int)>();

  _gsl_vector_complex_float_view gsl_matrix_complex_float_row(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
  ) {
    return _gsl_matrix_complex_float_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_complex_float_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_row');
  late final _gsl_matrix_complex_float_row =
      _gsl_matrix_complex_float_rowPtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  _gsl_vector_complex_float_view gsl_matrix_complex_float_column(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int j,
  ) {
    return _gsl_matrix_complex_float_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_complex_float_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_column');
  late final _gsl_matrix_complex_float_column =
      _gsl_matrix_complex_float_columnPtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  _gsl_vector_complex_float_view gsl_matrix_complex_float_diagonal(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_diagonal(
      m,
    );
  }

  late final _gsl_matrix_complex_float_diagonalPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_complex_float_view Function(
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_diagonal');
  late final _gsl_matrix_complex_float_diagonal =
      _gsl_matrix_complex_float_diagonalPtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>)>();

  _gsl_vector_complex_float_view gsl_matrix_complex_float_subdiagonal(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int k,
  ) {
    return _gsl_matrix_complex_float_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_complex_float_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_subdiagonal');
  late final _gsl_matrix_complex_float_subdiagonal =
      _gsl_matrix_complex_float_subdiagonalPtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  _gsl_vector_complex_float_view gsl_matrix_complex_float_superdiagonal(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int k,
  ) {
    return _gsl_matrix_complex_float_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_complex_float_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_superdiagonal');
  late final _gsl_matrix_complex_float_superdiagonal =
      _gsl_matrix_complex_float_superdiagonalPtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  _gsl_vector_complex_float_view gsl_matrix_complex_float_subrow(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_complex_float_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_complex_float_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_subrow');
  late final _gsl_matrix_complex_float_subrow =
      _gsl_matrix_complex_float_subrowPtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int, int)>();

  _gsl_vector_complex_float_view gsl_matrix_complex_float_subcolumn(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_complex_float_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_complex_float_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_subcolumn');
  late final _gsl_matrix_complex_float_subcolumn =
      _gsl_matrix_complex_float_subcolumnPtr.asFunction<
          _gsl_vector_complex_float_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int, int)>();

  _gsl_matrix_complex_float_view gsl_matrix_complex_float_view_array(
    ffi.Pointer<ffi.Float> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_float_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_float_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_view Function(ffi.Pointer<ffi.Float>,
              size_t, size_t)>>('gsl_matrix_complex_float_view_array');
  late final _gsl_matrix_complex_float_view_array =
      _gsl_matrix_complex_float_view_arrayPtr.asFunction<
          _gsl_matrix_complex_float_view Function(
              ffi.Pointer<ffi.Float>, int, int)>();

  _gsl_matrix_complex_float_view gsl_matrix_complex_float_view_array_with_tda(
    ffi.Pointer<ffi.Float> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_complex_float_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_complex_float_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_view Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_view_array_with_tda');
  late final _gsl_matrix_complex_float_view_array_with_tda =
      _gsl_matrix_complex_float_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_complex_float_view Function(
              ffi.Pointer<ffi.Float>, int, int, int)>();

  _gsl_matrix_complex_float_view gsl_matrix_complex_float_view_vector(
    ffi.Pointer<gsl_vector_complex_float> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_float_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_float_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t,
              size_t)>>('gsl_matrix_complex_float_view_vector');
  late final _gsl_matrix_complex_float_view_vector =
      _gsl_matrix_complex_float_view_vectorPtr.asFunction<
          _gsl_matrix_complex_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>, int, int)>();

  _gsl_matrix_complex_float_view gsl_matrix_complex_float_view_vector_with_tda(
    ffi.Pointer<gsl_vector_complex_float> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_complex_float_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_complex_float_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_view_vector_with_tda');
  late final _gsl_matrix_complex_float_view_vector_with_tda =
      _gsl_matrix_complex_float_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_complex_float_view Function(
              ffi.Pointer<gsl_vector_complex_float>, int, int, int)>();

  _gsl_matrix_complex_float_const_view gsl_matrix_complex_float_const_submatrix(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_float_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_float_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_const_submatrix');
  late final _gsl_matrix_complex_float_const_submatrix =
      _gsl_matrix_complex_float_const_submatrixPtr.asFunction<
          _gsl_matrix_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int, int, int)>();

  _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_row(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
  ) {
    return _gsl_matrix_complex_float_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_complex_float_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_const_row');
  late final _gsl_matrix_complex_float_const_row =
      _gsl_matrix_complex_float_const_rowPtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_column(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int j,
  ) {
    return _gsl_matrix_complex_float_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_complex_float_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_const_column');
  late final _gsl_matrix_complex_float_const_column =
      _gsl_matrix_complex_float_const_columnPtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_diagonal(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_complex_float_const_diagonalPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_complex_float_const_view Function(
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_const_diagonal');
  late final _gsl_matrix_complex_float_const_diagonal =
      _gsl_matrix_complex_float_const_diagonalPtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>)>();

  _gsl_vector_complex_float_const_view
      gsl_matrix_complex_float_const_subdiagonal(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int k,
  ) {
    return _gsl_matrix_complex_float_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_complex_float_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_const_subdiagonal');
  late final _gsl_matrix_complex_float_const_subdiagonal =
      _gsl_matrix_complex_float_const_subdiagonalPtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  _gsl_vector_complex_float_const_view
      gsl_matrix_complex_float_const_superdiagonal(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int k,
  ) {
    return _gsl_matrix_complex_float_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_complex_float_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_const_superdiagonal');
  late final _gsl_matrix_complex_float_const_superdiagonal =
      _gsl_matrix_complex_float_const_superdiagonalPtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_subrow(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_complex_float_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_complex_float_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_const_subrow');
  late final _gsl_matrix_complex_float_const_subrow =
      _gsl_matrix_complex_float_const_subrowPtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int, int)>();

  _gsl_vector_complex_float_const_view gsl_matrix_complex_float_const_subcolumn(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_complex_float_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_complex_float_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_const_subcolumn');
  late final _gsl_matrix_complex_float_const_subcolumn =
      _gsl_matrix_complex_float_const_subcolumnPtr.asFunction<
          _gsl_vector_complex_float_const_view Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int, int)>();

  _gsl_matrix_complex_float_const_view
      gsl_matrix_complex_float_const_view_array(
    ffi.Pointer<ffi.Float> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_float_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_float_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_const_view Function(ffi.Pointer<ffi.Float>,
              size_t, size_t)>>('gsl_matrix_complex_float_const_view_array');
  late final _gsl_matrix_complex_float_const_view_array =
      _gsl_matrix_complex_float_const_view_arrayPtr.asFunction<
          _gsl_matrix_complex_float_const_view Function(
              ffi.Pointer<ffi.Float>, int, int)>();

  _gsl_matrix_complex_float_const_view
      gsl_matrix_complex_float_const_view_array_with_tda(
    ffi.Pointer<ffi.Float> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_complex_float_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_complex_float_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_const_view Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_const_view_array_with_tda');
  late final _gsl_matrix_complex_float_const_view_array_with_tda =
      _gsl_matrix_complex_float_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_complex_float_const_view Function(
              ffi.Pointer<ffi.Float>, int, int, int)>();

  _gsl_matrix_complex_float_const_view
      gsl_matrix_complex_float_const_view_vector(
    ffi.Pointer<gsl_vector_complex_float> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_complex_float_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_complex_float_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t,
              size_t)>>('gsl_matrix_complex_float_const_view_vector');
  late final _gsl_matrix_complex_float_const_view_vector =
      _gsl_matrix_complex_float_const_view_vectorPtr.asFunction<
          _gsl_matrix_complex_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>, int, int)>();

  _gsl_matrix_complex_float_const_view
      gsl_matrix_complex_float_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_complex_float> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_complex_float_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_complex_float_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_complex_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_complex_float_const_view_vector_with_tda');
  late final _gsl_matrix_complex_float_const_view_vector_with_tda =
      _gsl_matrix_complex_float_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_complex_float_const_view Function(
              ffi.Pointer<gsl_vector_complex_float>, int, int, int)>();

  void gsl_matrix_complex_float_set_zero(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_set_zero(
      m,
    );
  }

  late final _gsl_matrix_complex_float_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_set_zero');
  late final _gsl_matrix_complex_float_set_zero =
      _gsl_matrix_complex_float_set_zeroPtr
          .asFunction<void Function(ffi.Pointer<gsl_matrix_complex_float>)>();

  void gsl_matrix_complex_float_set_identity(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_set_identity(
      m,
    );
  }

  late final _gsl_matrix_complex_float_set_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_set_identity');
  late final _gsl_matrix_complex_float_set_identity =
      _gsl_matrix_complex_float_set_identityPtr
          .asFunction<void Function(ffi.Pointer<gsl_matrix_complex_float>)>();

  void gsl_matrix_complex_float_set_all(
    ffi.Pointer<gsl_matrix_complex_float> m,
    gsl_complex_float x,
  ) {
    return _gsl_matrix_complex_float_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_complex_float_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_complex_float>,
              gsl_complex_float)>>('gsl_matrix_complex_float_set_all');
  late final _gsl_matrix_complex_float_set_all =
      _gsl_matrix_complex_float_set_allPtr.asFunction<
          void Function(
              ffi.Pointer<gsl_matrix_complex_float>, gsl_complex_float)>();

  int gsl_matrix_complex_float_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_complex_float_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_fread');
  late final _gsl_matrix_complex_float_fread =
      _gsl_matrix_complex_float_freadPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_complex_float_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_fwrite');
  late final _gsl_matrix_complex_float_fwrite =
      _gsl_matrix_complex_float_fwritePtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_complex_float_fscanfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_fscanf');
  late final _gsl_matrix_complex_float_fscanf =
      _gsl_matrix_complex_float_fscanfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_complex_float> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_complex_float_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_complex_float_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_complex_float_fprintf');
  late final _gsl_matrix_complex_float_fprintf =
      _gsl_matrix_complex_float_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_complex_float_memcpy(
    ffi.Pointer<gsl_matrix_complex_float> dest,
    ffi.Pointer<gsl_matrix_complex_float> src,
  ) {
    return _gsl_matrix_complex_float_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_float_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_memcpy');
  late final _gsl_matrix_complex_float_memcpy =
      _gsl_matrix_complex_float_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_swap(
    ffi.Pointer<gsl_matrix_complex_float> m1,
    ffi.Pointer<gsl_matrix_complex_float> m2,
  ) {
    return _gsl_matrix_complex_float_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_complex_float_swapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_swap');
  late final _gsl_matrix_complex_float_swap =
      _gsl_matrix_complex_float_swapPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_complex_float> dest,
    ffi.Pointer<gsl_matrix_complex_float> src,
  ) {
    return _gsl_matrix_complex_float_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_float_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_tricpy');
  late final _gsl_matrix_complex_float_tricpy =
      _gsl_matrix_complex_float_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_swap_rows(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_float_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_float_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>, size_t,
              size_t)>>('gsl_matrix_complex_float_swap_rows');
  late final _gsl_matrix_complex_float_swap_rows =
      _gsl_matrix_complex_float_swap_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>, int, int)>();

  int gsl_matrix_complex_float_swap_columns(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_float_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_float_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>, size_t,
              size_t)>>('gsl_matrix_complex_float_swap_columns');
  late final _gsl_matrix_complex_float_swap_columns =
      _gsl_matrix_complex_float_swap_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>, int, int)>();

  int gsl_matrix_complex_float_swap_rowcol(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_float_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_float_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>, size_t,
              size_t)>>('gsl_matrix_complex_float_swap_rowcol');
  late final _gsl_matrix_complex_float_swap_rowcol =
      _gsl_matrix_complex_float_swap_rowcolPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>, int, int)>();

  int gsl_matrix_complex_float_transpose(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_transpose(
      m,
    );
  }

  late final _gsl_matrix_complex_float_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_transpose');
  late final _gsl_matrix_complex_float_transpose =
      _gsl_matrix_complex_float_transposePtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_transpose_memcpy(
    ffi.Pointer<gsl_matrix_complex_float> dest,
    ffi.Pointer<gsl_matrix_complex_float> src,
  ) {
    return _gsl_matrix_complex_float_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_float_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_transpose_memcpy');
  late final _gsl_matrix_complex_float_transpose_memcpy =
      _gsl_matrix_complex_float_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_complex_float> dest,
    ffi.Pointer<gsl_matrix_complex_float> src,
  ) {
    return _gsl_matrix_complex_float_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_float_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_transpose_tricpy');
  late final _gsl_matrix_complex_float_transpose_tricpy =
      _gsl_matrix_complex_float_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_conjtrans_memcpy(
    ffi.Pointer<gsl_matrix_complex_float> dest,
    ffi.Pointer<gsl_matrix_complex_float> src,
  ) {
    return _gsl_matrix_complex_float_conjtrans_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_complex_float_conjtrans_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_conjtrans_memcpy');
  late final _gsl_matrix_complex_float_conjtrans_memcpy =
      _gsl_matrix_complex_float_conjtrans_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_equal(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_matrix_complex_float> b,
  ) {
    return _gsl_matrix_complex_float_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_float_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_equal');
  late final _gsl_matrix_complex_float_equal =
      _gsl_matrix_complex_float_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_isnull(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_isnull(
      m,
    );
  }

  late final _gsl_matrix_complex_float_isnullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_isnull');
  late final _gsl_matrix_complex_float_isnull =
      _gsl_matrix_complex_float_isnullPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_ispos(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_ispos(
      m,
    );
  }

  late final _gsl_matrix_complex_float_isposPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_ispos');
  late final _gsl_matrix_complex_float_ispos =
      _gsl_matrix_complex_float_isposPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_isneg(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_isneg(
      m,
    );
  }

  late final _gsl_matrix_complex_float_isnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_isneg');
  late final _gsl_matrix_complex_float_isneg =
      _gsl_matrix_complex_float_isnegPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_isnonneg(
    ffi.Pointer<gsl_matrix_complex_float> m,
  ) {
    return _gsl_matrix_complex_float_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_complex_float_isnonnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_isnonneg');
  late final _gsl_matrix_complex_float_isnonneg =
      _gsl_matrix_complex_float_isnonnegPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_add(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_matrix_complex_float> b,
  ) {
    return _gsl_matrix_complex_float_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_float_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_add');
  late final _gsl_matrix_complex_float_add =
      _gsl_matrix_complex_float_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_sub(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_matrix_complex_float> b,
  ) {
    return _gsl_matrix_complex_float_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_float_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_sub');
  late final _gsl_matrix_complex_float_sub =
      _gsl_matrix_complex_float_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_mul_elements(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_matrix_complex_float> b,
  ) {
    return _gsl_matrix_complex_float_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_float_mul_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_mul_elements');
  late final _gsl_matrix_complex_float_mul_elements =
      _gsl_matrix_complex_float_mul_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_div_elements(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_matrix_complex_float> b,
  ) {
    return _gsl_matrix_complex_float_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_complex_float_div_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_matrix_complex_float_div_elements');
  late final _gsl_matrix_complex_float_div_elements =
      _gsl_matrix_complex_float_div_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_matrix_complex_float_scale(
    ffi.Pointer<gsl_matrix_complex_float> a,
    gsl_complex_float x,
  ) {
    return _gsl_matrix_complex_float_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_float_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
              gsl_complex_float)>>('gsl_matrix_complex_float_scale');
  late final _gsl_matrix_complex_float_scale =
      _gsl_matrix_complex_float_scalePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex_float>, gsl_complex_float)>();

  int gsl_matrix_complex_float_scale_rows(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_vector_complex_float> x,
  ) {
    return _gsl_matrix_complex_float_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_float_scale_rowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_matrix_complex_float_scale_rows');
  late final _gsl_matrix_complex_float_scale_rows =
      _gsl_matrix_complex_float_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_matrix_complex_float_scale_columns(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_vector_complex_float> x,
  ) {
    return _gsl_matrix_complex_float_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_float_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_matrix_complex_float_scale_columns');
  late final _gsl_matrix_complex_float_scale_columns =
      _gsl_matrix_complex_float_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_matrix_complex_float_add_constant(
    ffi.Pointer<gsl_matrix_complex_float> a,
    gsl_complex_float x,
  ) {
    return _gsl_matrix_complex_float_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_float_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
              gsl_complex_float)>>('gsl_matrix_complex_float_add_constant');
  late final _gsl_matrix_complex_float_add_constant =
      _gsl_matrix_complex_float_add_constantPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex_float>, gsl_complex_float)>();

  int gsl_matrix_complex_float_add_diagonal(
    ffi.Pointer<gsl_matrix_complex_float> a,
    gsl_complex_float x,
  ) {
    return _gsl_matrix_complex_float_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_complex_float_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
              gsl_complex_float)>>('gsl_matrix_complex_float_add_diagonal');
  late final _gsl_matrix_complex_float_add_diagonal =
      _gsl_matrix_complex_float_add_diagonalPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex_float>, gsl_complex_float)>();

  int gsl_matrix_complex_float_get_row(
    ffi.Pointer<gsl_vector_complex_float> v,
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
  ) {
    return _gsl_matrix_complex_float_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_complex_float_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_get_row');
  late final _gsl_matrix_complex_float_get_row =
      _gsl_matrix_complex_float_get_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  int gsl_matrix_complex_float_get_col(
    ffi.Pointer<gsl_vector_complex_float> v,
    ffi.Pointer<gsl_matrix_complex_float> m,
    int j,
  ) {
    return _gsl_matrix_complex_float_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_complex_float_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t)>>('gsl_matrix_complex_float_get_col');
  late final _gsl_matrix_complex_float_get_col =
      _gsl_matrix_complex_float_get_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>, int)>();

  int gsl_matrix_complex_float_set_row(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_matrix_complex_float_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_complex_float_set_rowPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>, size_t,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_matrix_complex_float_set_row');
  late final _gsl_matrix_complex_float_set_row =
      _gsl_matrix_complex_float_set_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>, int,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_matrix_complex_float_set_col(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int j,
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_matrix_complex_float_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_complex_float_set_colPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>, size_t,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_matrix_complex_float_set_col');
  late final _gsl_matrix_complex_float_set_col =
      _gsl_matrix_complex_float_set_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>, int,
              ffi.Pointer<gsl_vector_complex_float>)>();

  gsl_complex_float gsl_matrix_complex_float_get(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_float_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_float_getPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex_float Function(ffi.Pointer<gsl_matrix_complex_float>,
              size_t, size_t)>>('gsl_matrix_complex_float_get');
  late final _gsl_matrix_complex_float_get =
      _gsl_matrix_complex_float_getPtr.asFunction<
          gsl_complex_float Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int)>();

  void gsl_matrix_complex_float_set(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int j,
    gsl_complex_float x,
  ) {
    return _gsl_matrix_complex_float_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_complex_float_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_complex_float>, size_t,
              size_t, gsl_complex_float)>>('gsl_matrix_complex_float_set');
  late final _gsl_matrix_complex_float_set =
      _gsl_matrix_complex_float_setPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_complex_float>, int, int,
              gsl_complex_float)>();

  ffi.Pointer<gsl_complex_float> gsl_matrix_complex_float_ptr(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_float_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_float_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t,
              size_t)>>('gsl_matrix_complex_float_ptr');
  late final _gsl_matrix_complex_float_ptr =
      _gsl_matrix_complex_float_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int)>();

  ffi.Pointer<gsl_complex_float> gsl_matrix_complex_float_const_ptr(
    ffi.Pointer<gsl_matrix_complex_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_complex_float_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_complex_float_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>,
              size_t,
              size_t)>>('gsl_matrix_complex_float_const_ptr');
  late final _gsl_matrix_complex_float_const_ptr =
      _gsl_matrix_complex_float_const_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_matrix_complex_float>, int, int)>();

  ffi.Pointer<gsl_matrix_long_double> gsl_matrix_long_double_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_double_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_double_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_long_double> Function(
              size_t, size_t)>>('gsl_matrix_long_double_alloc');
  late final _gsl_matrix_long_double_alloc = _gsl_matrix_long_double_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_long_double> Function(int, int)>();

  ffi.Pointer<gsl_matrix_long_double> gsl_matrix_long_double_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_double_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_double_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_long_double> Function(
              size_t, size_t)>>('gsl_matrix_long_double_calloc');
  late final _gsl_matrix_long_double_calloc = _gsl_matrix_long_double_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_long_double> Function(int, int)>();

  ffi.Pointer<gsl_matrix_long_double> gsl_matrix_long_double_alloc_from_block(
    ffi.Pointer<gsl_block_long_double> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_long_double_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_long_double_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_long_double> Function(
              ffi.Pointer<gsl_block_long_double>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_long_double_alloc_from_block');
  late final _gsl_matrix_long_double_alloc_from_block =
      _gsl_matrix_long_double_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_long_double> Function(
              ffi.Pointer<gsl_block_long_double>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_long_double> gsl_matrix_long_double_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_long_double> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_double_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_double_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_long_double> Function(
              ffi.Pointer<gsl_matrix_long_double>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_long_double_alloc_from_matrix');
  late final _gsl_matrix_long_double_alloc_from_matrix =
      _gsl_matrix_long_double_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_long_double> Function(
              ffi.Pointer<gsl_matrix_long_double>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_long_double>
      gsl_vector_long_double_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_long_double> m,
    int i,
  ) {
    return _gsl_vector_long_double_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_long_double_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              ffi.Pointer<gsl_matrix_long_double>,
              size_t)>>('gsl_vector_long_double_alloc_row_from_matrix');
  late final _gsl_vector_long_double_alloc_row_from_matrix =
      _gsl_vector_long_double_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              ffi.Pointer<gsl_matrix_long_double>, int)>();

  ffi.Pointer<gsl_vector_long_double>
      gsl_vector_long_double_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_long_double> m,
    int j,
  ) {
    return _gsl_vector_long_double_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_long_double_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              ffi.Pointer<gsl_matrix_long_double>,
              size_t)>>('gsl_vector_long_double_alloc_col_from_matrix');
  late final _gsl_vector_long_double_alloc_col_from_matrix =
      _gsl_vector_long_double_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_long_double> Function(
              ffi.Pointer<gsl_matrix_long_double>, int)>();

  void gsl_matrix_long_double_free(
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_free(
      m,
    );
  }

  late final _gsl_matrix_long_double_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_free');
  late final _gsl_matrix_long_double_free = _gsl_matrix_long_double_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_long_double>)>();

  void gsl_matrix_long_double_set_zero(
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_set_zero(
      m,
    );
  }

  late final _gsl_matrix_long_double_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_set_zero');
  late final _gsl_matrix_long_double_set_zero =
      _gsl_matrix_long_double_set_zeroPtr
          .asFunction<void Function(ffi.Pointer<gsl_matrix_long_double>)>();

  void gsl_matrix_long_double_set_identity(
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_set_identity(
      m,
    );
  }

  late final _gsl_matrix_long_double_set_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_set_identity');
  late final _gsl_matrix_long_double_set_identity =
      _gsl_matrix_long_double_set_identityPtr
          .asFunction<void Function(ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_long_double_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_fread');
  late final _gsl_matrix_long_double_fread =
      _gsl_matrix_long_double_freadPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_long_double_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_fwrite');
  late final _gsl_matrix_long_double_fwrite =
      _gsl_matrix_long_double_fwritePtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_long_double_fscanfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_fscanf');
  late final _gsl_matrix_long_double_fscanf =
      _gsl_matrix_long_double_fscanfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_long_double> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_long_double_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_long_double_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_long_double_fprintf');
  late final _gsl_matrix_long_double_fprintf =
      _gsl_matrix_long_double_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_long_double_memcpy(
    ffi.Pointer<gsl_matrix_long_double> dest,
    ffi.Pointer<gsl_matrix_long_double> src,
  ) {
    return _gsl_matrix_long_double_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_long_double_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_memcpy');
  late final _gsl_matrix_long_double_memcpy =
      _gsl_matrix_long_double_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_swap(
    ffi.Pointer<gsl_matrix_long_double> m1,
    ffi.Pointer<gsl_matrix_long_double> m2,
  ) {
    return _gsl_matrix_long_double_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_long_double_swapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_swap');
  late final _gsl_matrix_long_double_swap =
      _gsl_matrix_long_double_swapPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_long_double> dest,
    ffi.Pointer<gsl_matrix_long_double> src,
  ) {
    return _gsl_matrix_long_double_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_long_double_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_tricpy');
  late final _gsl_matrix_long_double_tricpy =
      _gsl_matrix_long_double_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_swap_rows(
    ffi.Pointer<gsl_matrix_long_double> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_long_double_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_long_double_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>, size_t,
              size_t)>>('gsl_matrix_long_double_swap_rows');
  late final _gsl_matrix_long_double_swap_rows =
      _gsl_matrix_long_double_swap_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>, int, int)>();

  int gsl_matrix_long_double_swap_columns(
    ffi.Pointer<gsl_matrix_long_double> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_long_double_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_long_double_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>, size_t,
              size_t)>>('gsl_matrix_long_double_swap_columns');
  late final _gsl_matrix_long_double_swap_columns =
      _gsl_matrix_long_double_swap_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>, int, int)>();

  int gsl_matrix_long_double_swap_rowcol(
    ffi.Pointer<gsl_matrix_long_double> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_long_double_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_long_double_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>, size_t,
              size_t)>>('gsl_matrix_long_double_swap_rowcol');
  late final _gsl_matrix_long_double_swap_rowcol =
      _gsl_matrix_long_double_swap_rowcolPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>, int, int)>();

  int gsl_matrix_long_double_transpose(
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_transpose(
      m,
    );
  }

  late final _gsl_matrix_long_double_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_transpose');
  late final _gsl_matrix_long_double_transpose =
      _gsl_matrix_long_double_transposePtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_transpose_memcpy(
    ffi.Pointer<gsl_matrix_long_double> dest,
    ffi.Pointer<gsl_matrix_long_double> src,
  ) {
    return _gsl_matrix_long_double_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_long_double_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_transpose_memcpy');
  late final _gsl_matrix_long_double_transpose_memcpy =
      _gsl_matrix_long_double_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_long_double> dest,
    ffi.Pointer<gsl_matrix_long_double> src,
  ) {
    return _gsl_matrix_long_double_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_long_double_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_transpose_tricpy');
  late final _gsl_matrix_long_double_transpose_tricpy =
      _gsl_matrix_long_double_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  void gsl_matrix_long_double_max_index(
    ffi.Pointer<gsl_matrix_long_double> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_long_double_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_long_double_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_long_double_max_index');
  late final _gsl_matrix_long_double_max_index =
      _gsl_matrix_long_double_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  void gsl_matrix_long_double_min_index(
    ffi.Pointer<gsl_matrix_long_double> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_long_double_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_long_double_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_long_double_min_index');
  late final _gsl_matrix_long_double_min_index =
      _gsl_matrix_long_double_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  void gsl_matrix_long_double_minmax_index(
    ffi.Pointer<gsl_matrix_long_double> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_long_double_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_long_double_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_long_double_minmax_index');
  late final _gsl_matrix_long_double_minmax_index =
      _gsl_matrix_long_double_minmax_indexPtr.asFunction<
          void Function(
              ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_matrix_long_double_equal(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_matrix_long_double> b,
  ) {
    return _gsl_matrix_long_double_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_double_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_equal');
  late final _gsl_matrix_long_double_equal =
      _gsl_matrix_long_double_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_isnull(
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_isnull(
      m,
    );
  }

  late final _gsl_matrix_long_double_isnullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_isnull');
  late final _gsl_matrix_long_double_isnull = _gsl_matrix_long_double_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_ispos(
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_ispos(
      m,
    );
  }

  late final _gsl_matrix_long_double_isposPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_ispos');
  late final _gsl_matrix_long_double_ispos = _gsl_matrix_long_double_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_isneg(
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_isneg(
      m,
    );
  }

  late final _gsl_matrix_long_double_isnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_isneg');
  late final _gsl_matrix_long_double_isneg = _gsl_matrix_long_double_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_isnonneg(
    ffi.Pointer<gsl_matrix_long_double> m,
  ) {
    return _gsl_matrix_long_double_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_long_double_isnonnegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_isnonneg');
  late final _gsl_matrix_long_double_isnonneg =
      _gsl_matrix_long_double_isnonnegPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_add(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_matrix_long_double> b,
  ) {
    return _gsl_matrix_long_double_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_double_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_add');
  late final _gsl_matrix_long_double_add =
      _gsl_matrix_long_double_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_sub(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_matrix_long_double> b,
  ) {
    return _gsl_matrix_long_double_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_double_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_sub');
  late final _gsl_matrix_long_double_sub =
      _gsl_matrix_long_double_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_mul_elements(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_matrix_long_double> b,
  ) {
    return _gsl_matrix_long_double_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_double_mul_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_mul_elements');
  late final _gsl_matrix_long_double_mul_elements =
      _gsl_matrix_long_double_mul_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_div_elements(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_matrix_long_double> b,
  ) {
    return _gsl_matrix_long_double_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_double_div_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_matrix_long_double_div_elements');
  late final _gsl_matrix_long_double_div_elements =
      _gsl_matrix_long_double_div_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_matrix_long_double_scale_rows(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_vector_long_double> x,
  ) {
    return _gsl_matrix_long_double_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_long_double_scale_rowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_matrix_long_double_scale_rows');
  late final _gsl_matrix_long_double_scale_rows =
      _gsl_matrix_long_double_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_matrix_long_double_scale_columns(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_vector_long_double> x,
  ) {
    return _gsl_matrix_long_double_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_long_double_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_matrix_long_double_scale_columns');
  late final _gsl_matrix_long_double_scale_columns =
      _gsl_matrix_long_double_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_matrix_long_double_get_row(
    ffi.Pointer<gsl_vector_long_double> v,
    ffi.Pointer<gsl_matrix_long_double> m,
    int i,
  ) {
    return _gsl_matrix_long_double_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_long_double_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_matrix_long_double>,
              size_t)>>('gsl_matrix_long_double_get_row');
  late final _gsl_matrix_long_double_get_row =
      _gsl_matrix_long_double_get_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_matrix_long_double>, int)>();

  int gsl_matrix_long_double_get_col(
    ffi.Pointer<gsl_vector_long_double> v,
    ffi.Pointer<gsl_matrix_long_double> m,
    int j,
  ) {
    return _gsl_matrix_long_double_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_long_double_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_matrix_long_double>,
              size_t)>>('gsl_matrix_long_double_get_col');
  late final _gsl_matrix_long_double_get_col =
      _gsl_matrix_long_double_get_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_matrix_long_double>, int)>();

  int gsl_matrix_long_double_set_row(
    ffi.Pointer<gsl_matrix_long_double> m,
    int i,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_matrix_long_double_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_long_double_set_rowPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>, size_t,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_matrix_long_double_set_row');
  late final _gsl_matrix_long_double_set_row =
      _gsl_matrix_long_double_set_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>, int,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_matrix_long_double_set_col(
    ffi.Pointer<gsl_matrix_long_double> m,
    int j,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_matrix_long_double_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_long_double_set_colPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>, size_t,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_matrix_long_double_set_col');
  late final _gsl_matrix_long_double_set_col =
      _gsl_matrix_long_double_set_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>, int,
              ffi.Pointer<gsl_vector_long_double>)>();

  ffi.Pointer<gsl_matrix> gsl_matrix_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_matrix> Function(size_t, size_t)>>(
      'gsl_matrix_alloc');
  late final _gsl_matrix_alloc = _gsl_matrix_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix> Function(int, int)>();

  ffi.Pointer<gsl_matrix> gsl_matrix_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_matrix> Function(size_t, size_t)>>(
      'gsl_matrix_calloc');
  late final _gsl_matrix_calloc = _gsl_matrix_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix> Function(int, int)>();

  ffi.Pointer<gsl_matrix> gsl_matrix_alloc_from_block(
    ffi.Pointer<gsl_block> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix> Function(ffi.Pointer<gsl_block>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_alloc_from_block');
  late final _gsl_matrix_alloc_from_block =
      _gsl_matrix_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix> Function(
              ffi.Pointer<gsl_block>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix> gsl_matrix_alloc_from_matrix(
    ffi.Pointer<gsl_matrix> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix> Function(ffi.Pointer<gsl_matrix>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_alloc_from_matrix');
  late final _gsl_matrix_alloc_from_matrix =
      _gsl_matrix_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix> Function(
              ffi.Pointer<gsl_matrix>, int, int, int, int)>();

  ffi.Pointer<gsl_vector> gsl_vector_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix> m,
    int i,
  ) {
    return _gsl_vector_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector> Function(ffi.Pointer<gsl_matrix>,
              size_t)>>('gsl_vector_alloc_row_from_matrix');
  late final _gsl_vector_alloc_row_from_matrix =
      _gsl_vector_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(ffi.Pointer<gsl_matrix>, int)>();

  ffi.Pointer<gsl_vector> gsl_vector_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix> m,
    int j,
  ) {
    return _gsl_vector_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector> Function(ffi.Pointer<gsl_matrix>,
              size_t)>>('gsl_vector_alloc_col_from_matrix');
  late final _gsl_vector_alloc_col_from_matrix =
      _gsl_vector_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(ffi.Pointer<gsl_matrix>, int)>();

  void gsl_matrix_free(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_free(
      m,
    );
  }

  late final _gsl_matrix_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_free');
  late final _gsl_matrix_free =
      _gsl_matrix_freePtr.asFunction<void Function(ffi.Pointer<gsl_matrix>)>();

  _gsl_matrix_view gsl_matrix_submatrix(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_view Function(ffi.Pointer<gsl_matrix>, size_t, size_t,
              size_t, size_t)>>('gsl_matrix_submatrix');
  late final _gsl_matrix_submatrix = _gsl_matrix_submatrixPtr.asFunction<
      _gsl_matrix_view Function(ffi.Pointer<gsl_matrix>, int, int, int, int)>();

  _gsl_vector_view gsl_matrix_row(
    ffi.Pointer<gsl_matrix> m,
    int i,
  ) {
    return _gsl_matrix_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(
              ffi.Pointer<gsl_matrix>, size_t)>>('gsl_matrix_row');
  late final _gsl_matrix_row = _gsl_matrix_rowPtr
      .asFunction<_gsl_vector_view Function(ffi.Pointer<gsl_matrix>, int)>();

  _gsl_vector_view gsl_matrix_column(
    ffi.Pointer<gsl_matrix> m,
    int j,
  ) {
    return _gsl_matrix_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(
              ffi.Pointer<gsl_matrix>, size_t)>>('gsl_matrix_column');
  late final _gsl_matrix_column = _gsl_matrix_columnPtr
      .asFunction<_gsl_vector_view Function(ffi.Pointer<gsl_matrix>, int)>();

  _gsl_vector_view gsl_matrix_diagonal(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_diagonal(
      m,
    );
  }

  late final _gsl_matrix_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_diagonal');
  late final _gsl_matrix_diagonal = _gsl_matrix_diagonalPtr
      .asFunction<_gsl_vector_view Function(ffi.Pointer<gsl_matrix>)>();

  _gsl_vector_view gsl_matrix_subdiagonal(
    ffi.Pointer<gsl_matrix> m,
    int k,
  ) {
    return _gsl_matrix_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(
              ffi.Pointer<gsl_matrix>, size_t)>>('gsl_matrix_subdiagonal');
  late final _gsl_matrix_subdiagonal = _gsl_matrix_subdiagonalPtr
      .asFunction<_gsl_vector_view Function(ffi.Pointer<gsl_matrix>, int)>();

  _gsl_vector_view gsl_matrix_superdiagonal(
    ffi.Pointer<gsl_matrix> m,
    int k,
  ) {
    return _gsl_matrix_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(
              ffi.Pointer<gsl_matrix>, size_t)>>('gsl_matrix_superdiagonal');
  late final _gsl_matrix_superdiagonal = _gsl_matrix_superdiagonalPtr
      .asFunction<_gsl_vector_view Function(ffi.Pointer<gsl_matrix>, int)>();

  _gsl_vector_view gsl_matrix_subrow(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(ffi.Pointer<gsl_matrix>, size_t, size_t,
              size_t)>>('gsl_matrix_subrow');
  late final _gsl_matrix_subrow = _gsl_matrix_subrowPtr.asFunction<
      _gsl_vector_view Function(ffi.Pointer<gsl_matrix>, int, int, int)>();

  _gsl_vector_view gsl_matrix_subcolumn(
    ffi.Pointer<gsl_matrix> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_view Function(ffi.Pointer<gsl_matrix>, size_t, size_t,
              size_t)>>('gsl_matrix_subcolumn');
  late final _gsl_matrix_subcolumn = _gsl_matrix_subcolumnPtr.asFunction<
      _gsl_vector_view Function(ffi.Pointer<gsl_matrix>, int, int, int)>();

  _gsl_matrix_view gsl_matrix_view_array(
    ffi.Pointer<ffi.Double> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_view Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_matrix_view_array');
  late final _gsl_matrix_view_array = _gsl_matrix_view_arrayPtr.asFunction<
      _gsl_matrix_view Function(ffi.Pointer<ffi.Double>, int, int)>();

  _gsl_matrix_view gsl_matrix_view_array_with_tda(
    ffi.Pointer<ffi.Double> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_view Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              size_t)>>('gsl_matrix_view_array_with_tda');
  late final _gsl_matrix_view_array_with_tda =
      _gsl_matrix_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_view Function(ffi.Pointer<ffi.Double>, int, int, int)>();

  _gsl_matrix_view gsl_matrix_view_vector(
    ffi.Pointer<gsl_vector> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_view Function(ffi.Pointer<gsl_vector>, size_t,
              size_t)>>('gsl_matrix_view_vector');
  late final _gsl_matrix_view_vector = _gsl_matrix_view_vectorPtr.asFunction<
      _gsl_matrix_view Function(ffi.Pointer<gsl_vector>, int, int)>();

  _gsl_matrix_view gsl_matrix_view_vector_with_tda(
    ffi.Pointer<gsl_vector> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_view Function(ffi.Pointer<gsl_vector>, size_t, size_t,
              size_t)>>('gsl_matrix_view_vector_with_tda');
  late final _gsl_matrix_view_vector_with_tda =
      _gsl_matrix_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_view Function(ffi.Pointer<gsl_vector>, int, int, int)>();

  _gsl_matrix_const_view gsl_matrix_const_submatrix(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_const_view Function(ffi.Pointer<gsl_matrix>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_const_submatrix');
  late final _gsl_matrix_const_submatrix =
      _gsl_matrix_const_submatrixPtr.asFunction<
          _gsl_matrix_const_view Function(
              ffi.Pointer<gsl_matrix>, int, int, int, int)>();

  _gsl_vector_const_view gsl_matrix_const_row(
    ffi.Pointer<gsl_matrix> m,
    int i,
  ) {
    return _gsl_matrix_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(
              ffi.Pointer<gsl_matrix>, size_t)>>('gsl_matrix_const_row');
  late final _gsl_matrix_const_row = _gsl_matrix_const_rowPtr.asFunction<
      _gsl_vector_const_view Function(ffi.Pointer<gsl_matrix>, int)>();

  _gsl_vector_const_view gsl_matrix_const_column(
    ffi.Pointer<gsl_matrix> m,
    int j,
  ) {
    return _gsl_matrix_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(
              ffi.Pointer<gsl_matrix>, size_t)>>('gsl_matrix_const_column');
  late final _gsl_matrix_const_column = _gsl_matrix_const_columnPtr.asFunction<
      _gsl_vector_const_view Function(ffi.Pointer<gsl_matrix>, int)>();

  _gsl_vector_const_view gsl_matrix_const_diagonal(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_const_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_const_diagonal');
  late final _gsl_matrix_const_diagonal = _gsl_matrix_const_diagonalPtr
      .asFunction<_gsl_vector_const_view Function(ffi.Pointer<gsl_matrix>)>();

  _gsl_vector_const_view gsl_matrix_const_subdiagonal(
    ffi.Pointer<gsl_matrix> m,
    int k,
  ) {
    return _gsl_matrix_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_matrix>,
              size_t)>>('gsl_matrix_const_subdiagonal');
  late final _gsl_matrix_const_subdiagonal =
      _gsl_matrix_const_subdiagonalPtr.asFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_matrix>, int)>();

  _gsl_vector_const_view gsl_matrix_const_superdiagonal(
    ffi.Pointer<gsl_matrix> m,
    int k,
  ) {
    return _gsl_matrix_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_matrix>,
              size_t)>>('gsl_matrix_const_superdiagonal');
  late final _gsl_matrix_const_superdiagonal =
      _gsl_matrix_const_superdiagonalPtr.asFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_matrix>, int)>();

  _gsl_vector_const_view gsl_matrix_const_subrow(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_matrix>, size_t,
              size_t, size_t)>>('gsl_matrix_const_subrow');
  late final _gsl_matrix_const_subrow = _gsl_matrix_const_subrowPtr.asFunction<
      _gsl_vector_const_view Function(
          ffi.Pointer<gsl_matrix>, int, int, int)>();

  _gsl_vector_const_view gsl_matrix_const_subcolumn(
    ffi.Pointer<gsl_matrix> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_const_view Function(ffi.Pointer<gsl_matrix>, size_t,
              size_t, size_t)>>('gsl_matrix_const_subcolumn');
  late final _gsl_matrix_const_subcolumn =
      _gsl_matrix_const_subcolumnPtr.asFunction<
          _gsl_vector_const_view Function(
              ffi.Pointer<gsl_matrix>, int, int, int)>();

  _gsl_matrix_const_view gsl_matrix_const_view_array(
    ffi.Pointer<ffi.Double> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_const_view Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_matrix_const_view_array');
  late final _gsl_matrix_const_view_array =
      _gsl_matrix_const_view_arrayPtr.asFunction<
          _gsl_matrix_const_view Function(ffi.Pointer<ffi.Double>, int, int)>();

  _gsl_matrix_const_view gsl_matrix_const_view_array_with_tda(
    ffi.Pointer<ffi.Double> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_const_view Function(ffi.Pointer<ffi.Double>, size_t,
              size_t, size_t)>>('gsl_matrix_const_view_array_with_tda');
  late final _gsl_matrix_const_view_array_with_tda =
      _gsl_matrix_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_const_view Function(
              ffi.Pointer<ffi.Double>, int, int, int)>();

  _gsl_matrix_const_view gsl_matrix_const_view_vector(
    ffi.Pointer<gsl_vector> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_const_view Function(ffi.Pointer<gsl_vector>, size_t,
              size_t)>>('gsl_matrix_const_view_vector');
  late final _gsl_matrix_const_view_vector =
      _gsl_matrix_const_view_vectorPtr.asFunction<
          _gsl_matrix_const_view Function(ffi.Pointer<gsl_vector>, int, int)>();

  _gsl_matrix_const_view gsl_matrix_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_const_view Function(ffi.Pointer<gsl_vector>, size_t,
              size_t, size_t)>>('gsl_matrix_const_view_vector_with_tda');
  late final _gsl_matrix_const_view_vector_with_tda =
      _gsl_matrix_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_const_view Function(
              ffi.Pointer<gsl_vector>, int, int, int)>();

  void gsl_matrix_set_zero(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_set_zero(
      m,
    );
  }

  late final _gsl_matrix_set_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_set_zero');
  late final _gsl_matrix_set_zero = _gsl_matrix_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix>)>();

  void gsl_matrix_set_identity(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_set_identity(
      m,
    );
  }

  late final _gsl_matrix_set_identityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_set_identity');
  late final _gsl_matrix_set_identity = _gsl_matrix_set_identityPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix>)>();

  void gsl_matrix_set_all(
    ffi.Pointer<gsl_matrix> m,
    double x,
  ) {
    return _gsl_matrix_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix>, ffi.Double)>>('gsl_matrix_set_all');
  late final _gsl_matrix_set_all = _gsl_matrix_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix>, double)>();

  int gsl_matrix_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix>)>>('gsl_matrix_fread');
  late final _gsl_matrix_fread = _gsl_matrix_freadPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_fwrite');
  late final _gsl_matrix_fwrite = _gsl_matrix_fwritePtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_fscanf');
  late final _gsl_matrix_fscanf = _gsl_matrix_fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_fprintf');
  late final _gsl_matrix_fprintf = _gsl_matrix_fprintfPtr.asFunction<
      int Function(
          ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_memcpy(
    ffi.Pointer<gsl_matrix> dest,
    ffi.Pointer<gsl_matrix> src,
  ) {
    return _gsl_matrix_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_memcpy');
  late final _gsl_matrix_memcpy = _gsl_matrix_memcpyPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_swap(
    ffi.Pointer<gsl_matrix> m1,
    ffi.Pointer<gsl_matrix> m2,
  ) {
    return _gsl_matrix_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_swap');
  late final _gsl_matrix_swap = _gsl_matrix_swapPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix> dest,
    ffi.Pointer<gsl_matrix> src,
  ) {
    return _gsl_matrix_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_tricpy');
  late final _gsl_matrix_tricpy = _gsl_matrix_tricpyPtr.asFunction<
      int Function(
          int, int, ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_swap_rows(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, size_t,
              size_t)>>('gsl_matrix_swap_rows');
  late final _gsl_matrix_swap_rows = _gsl_matrix_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>, int, int)>();

  int gsl_matrix_swap_columns(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, size_t,
              size_t)>>('gsl_matrix_swap_columns');
  late final _gsl_matrix_swap_columns = _gsl_matrix_swap_columnsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>, int, int)>();

  int gsl_matrix_swap_rowcol(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, size_t,
              size_t)>>('gsl_matrix_swap_rowcol');
  late final _gsl_matrix_swap_rowcol = _gsl_matrix_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>, int, int)>();

  int gsl_matrix_transpose(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_transpose(
      m,
    );
  }

  late final _gsl_matrix_transposePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_transpose');
  late final _gsl_matrix_transpose = _gsl_matrix_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_transpose_memcpy(
    ffi.Pointer<gsl_matrix> dest,
    ffi.Pointer<gsl_matrix> src,
  ) {
    return _gsl_matrix_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_transpose_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_transpose_memcpy');
  late final _gsl_matrix_transpose_memcpy =
      _gsl_matrix_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix> dest,
    ffi.Pointer<gsl_matrix> src,
  ) {
    return _gsl_matrix_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_transpose_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_transpose_tricpy');
  late final _gsl_matrix_transpose_tricpy =
      _gsl_matrix_transpose_tricpyPtr.asFunction<
          int Function(
              int, int, ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  double gsl_matrix_max(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_max(
      m,
    );
  }

  late final _gsl_matrix_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_max');
  late final _gsl_matrix_max =
      _gsl_matrix_maxPtr.asFunction<double Function(ffi.Pointer<gsl_matrix>)>();

  double gsl_matrix_min(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_min(
      m,
    );
  }

  late final _gsl_matrix_minPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_min');
  late final _gsl_matrix_min =
      _gsl_matrix_minPtr.asFunction<double Function(ffi.Pointer<gsl_matrix>)>();

  void gsl_matrix_minmax(
    ffi.Pointer<gsl_matrix> m,
    ffi.Pointer<ffi.Double> min_out,
    ffi.Pointer<ffi.Double> max_out,
  ) {
    return _gsl_matrix_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_matrix_minmax');
  late final _gsl_matrix_minmax = _gsl_matrix_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_matrix_max_index(
    ffi.Pointer<gsl_matrix> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_max_index');
  late final _gsl_matrix_max_index = _gsl_matrix_max_indexPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_matrix>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  void gsl_matrix_min_index(
    ffi.Pointer<gsl_matrix> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_min_index');
  late final _gsl_matrix_min_index = _gsl_matrix_min_indexPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_matrix>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  void gsl_matrix_minmax_index(
    ffi.Pointer<gsl_matrix> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_minmax_index');
  late final _gsl_matrix_minmax_index = _gsl_matrix_minmax_indexPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<size_t>,
          ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_equal(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_matrix> b,
  ) {
    return _gsl_matrix_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_equal');
  late final _gsl_matrix_equal = _gsl_matrix_equalPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_isnull(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_isnull(
      m,
    );
  }

  late final _gsl_matrix_isnullPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_isnull');
  late final _gsl_matrix_isnull =
      _gsl_matrix_isnullPtr.asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_ispos(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_ispos(
      m,
    );
  }

  late final _gsl_matrix_isposPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_ispos');
  late final _gsl_matrix_ispos =
      _gsl_matrix_isposPtr.asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_isneg(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_isneg(
      m,
    );
  }

  late final _gsl_matrix_isnegPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_isneg');
  late final _gsl_matrix_isneg =
      _gsl_matrix_isnegPtr.asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_isnonneg(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_isnonnegPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_isnonneg');
  late final _gsl_matrix_isnonneg = _gsl_matrix_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  double gsl_matrix_norm1(
    ffi.Pointer<gsl_matrix> m,
  ) {
    return _gsl_matrix_norm1(
      m,
    );
  }

  late final _gsl_matrix_norm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_matrix_norm1');
  late final _gsl_matrix_norm1 = _gsl_matrix_norm1Ptr
      .asFunction<double Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_add(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_matrix> b,
  ) {
    return _gsl_matrix_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_add');
  late final _gsl_matrix_add = _gsl_matrix_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_sub(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_matrix> b,
  ) {
    return _gsl_matrix_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_sub');
  late final _gsl_matrix_sub = _gsl_matrix_subPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_mul_elements(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_matrix> b,
  ) {
    return _gsl_matrix_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_mul_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_mul_elements');
  late final _gsl_matrix_mul_elements = _gsl_matrix_mul_elementsPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_div_elements(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_matrix> b,
  ) {
    return _gsl_matrix_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_div_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_matrix_div_elements');
  late final _gsl_matrix_div_elements = _gsl_matrix_div_elementsPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_matrix_scale(
    ffi.Pointer<gsl_matrix> a,
    double x,
  ) {
    return _gsl_matrix_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>, ffi.Double)>>('gsl_matrix_scale');
  late final _gsl_matrix_scale = _gsl_matrix_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>, double)>();

  int gsl_matrix_scale_rows(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_matrix_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_matrix_scale_rows');
  late final _gsl_matrix_scale_rows = _gsl_matrix_scale_rowsPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_matrix_scale_columns(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_matrix_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_scale_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_matrix_scale_columns');
  late final _gsl_matrix_scale_columns =
      _gsl_matrix_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_matrix_add_constant(
    ffi.Pointer<gsl_matrix> a,
    double x,
  ) {
    return _gsl_matrix_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>, ffi.Double)>>('gsl_matrix_add_constant');
  late final _gsl_matrix_add_constant = _gsl_matrix_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>, double)>();

  int gsl_matrix_add_diagonal(
    ffi.Pointer<gsl_matrix> a,
    double x,
  ) {
    return _gsl_matrix_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>, ffi.Double)>>('gsl_matrix_add_diagonal');
  late final _gsl_matrix_add_diagonal = _gsl_matrix_add_diagonalPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>, double)>();

  int gsl_matrix_get_row(
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_matrix> m,
    int i,
  ) {
    return _gsl_matrix_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>,
              size_t)>>('gsl_matrix_get_row');
  late final _gsl_matrix_get_row = _gsl_matrix_get_rowPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>, int)>();

  int gsl_matrix_get_col(
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_matrix> m,
    int j,
  ) {
    return _gsl_matrix_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>,
              size_t)>>('gsl_matrix_get_col');
  late final _gsl_matrix_get_col = _gsl_matrix_get_colPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>, int)>();

  int gsl_matrix_set_row(
    ffi.Pointer<gsl_matrix> m,
    int i,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_matrix_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, size_t,
              ffi.Pointer<gsl_vector>)>>('gsl_matrix_set_row');
  late final _gsl_matrix_set_row = _gsl_matrix_set_rowPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, int, ffi.Pointer<gsl_vector>)>();

  int gsl_matrix_set_col(
    ffi.Pointer<gsl_matrix> m,
    int j,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_matrix_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, size_t,
              ffi.Pointer<gsl_vector>)>>('gsl_matrix_set_col');
  late final _gsl_matrix_set_col = _gsl_matrix_set_colPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, int, ffi.Pointer<gsl_vector>)>();

  double gsl_matrix_get(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_matrix>, size_t, size_t)>>('gsl_matrix_get');
  late final _gsl_matrix_get = _gsl_matrix_getPtr
      .asFunction<double Function(ffi.Pointer<gsl_matrix>, int, int)>();

  void gsl_matrix_set(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int j,
    double x,
  ) {
    return _gsl_matrix_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix>, size_t, size_t,
              ffi.Double)>>('gsl_matrix_set');
  late final _gsl_matrix_set = _gsl_matrix_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix>, int, int, double)>();

  ffi.Pointer<ffi.Double> gsl_matrix_ptr(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<gsl_matrix>, size_t, size_t)>>('gsl_matrix_ptr');
  late final _gsl_matrix_ptr = _gsl_matrix_ptrPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<gsl_matrix>, int, int)>();

  ffi.Pointer<ffi.Double> gsl_matrix_const_ptr(
    ffi.Pointer<gsl_matrix> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Pointer<gsl_matrix>, size_t,
              size_t)>>('gsl_matrix_const_ptr');
  late final _gsl_matrix_const_ptr = _gsl_matrix_const_ptrPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<gsl_matrix>, int, int)>();

  ffi.Pointer<gsl_matrix_float> gsl_matrix_float_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_float_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_float> Function(
              size_t, size_t)>>('gsl_matrix_float_alloc');
  late final _gsl_matrix_float_alloc = _gsl_matrix_float_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_float> Function(int, int)>();

  ffi.Pointer<gsl_matrix_float> gsl_matrix_float_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_float_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_float_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_float> Function(
              size_t, size_t)>>('gsl_matrix_float_calloc');
  late final _gsl_matrix_float_calloc = _gsl_matrix_float_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_float> Function(int, int)>();

  ffi.Pointer<gsl_matrix_float> gsl_matrix_float_alloc_from_block(
    ffi.Pointer<gsl_block_float> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_float_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_float_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_float> Function(
              ffi.Pointer<gsl_block_float>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_float_alloc_from_block');
  late final _gsl_matrix_float_alloc_from_block =
      _gsl_matrix_float_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_float> Function(
              ffi.Pointer<gsl_block_float>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_float> gsl_matrix_float_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_float> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_float_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_float_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_float> Function(
              ffi.Pointer<gsl_matrix_float>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_float_alloc_from_matrix');
  late final _gsl_matrix_float_alloc_from_matrix =
      _gsl_matrix_float_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_float> Function(
              ffi.Pointer<gsl_matrix_float>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_float> gsl_vector_float_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
  ) {
    return _gsl_vector_float_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_float_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_float> Function(ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_vector_float_alloc_row_from_matrix');
  late final _gsl_vector_float_alloc_row_from_matrix =
      _gsl_vector_float_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_float> Function(
              ffi.Pointer<gsl_matrix_float>, int)>();

  ffi.Pointer<gsl_vector_float> gsl_vector_float_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_float> m,
    int j,
  ) {
    return _gsl_vector_float_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_float_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_float> Function(ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_vector_float_alloc_col_from_matrix');
  late final _gsl_vector_float_alloc_col_from_matrix =
      _gsl_vector_float_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_float> Function(
              ffi.Pointer<gsl_matrix_float>, int)>();

  void gsl_matrix_float_free(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_free(
      m,
    );
  }

  late final _gsl_matrix_float_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_float>)>>(
      'gsl_matrix_float_free');
  late final _gsl_matrix_float_free = _gsl_matrix_float_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_float>)>();

  _gsl_matrix_float_view gsl_matrix_float_submatrix(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_float_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_float_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_view Function(ffi.Pointer<gsl_matrix_float>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_float_submatrix');
  late final _gsl_matrix_float_submatrix =
      _gsl_matrix_float_submatrixPtr.asFunction<
          _gsl_matrix_float_view Function(
              ffi.Pointer<gsl_matrix_float>, int, int, int, int)>();

  _gsl_vector_float_view gsl_matrix_float_row(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
  ) {
    return _gsl_matrix_float_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_float_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<gsl_matrix_float>, size_t)>>('gsl_matrix_float_row');
  late final _gsl_matrix_float_row = _gsl_matrix_float_rowPtr.asFunction<
      _gsl_vector_float_view Function(ffi.Pointer<gsl_matrix_float>, int)>();

  _gsl_vector_float_view gsl_matrix_float_column(
    ffi.Pointer<gsl_matrix_float> m,
    int j,
  ) {
    return _gsl_matrix_float_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_float_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_matrix_float_column');
  late final _gsl_matrix_float_column = _gsl_matrix_float_columnPtr.asFunction<
      _gsl_vector_float_view Function(ffi.Pointer<gsl_matrix_float>, int)>();

  _gsl_vector_float_view gsl_matrix_float_diagonal(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_diagonal(
      m,
    );
  }

  late final _gsl_matrix_float_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_diagonal');
  late final _gsl_matrix_float_diagonal =
      _gsl_matrix_float_diagonalPtr.asFunction<
          _gsl_vector_float_view Function(ffi.Pointer<gsl_matrix_float>)>();

  _gsl_vector_float_view gsl_matrix_float_subdiagonal(
    ffi.Pointer<gsl_matrix_float> m,
    int k,
  ) {
    return _gsl_matrix_float_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_float_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_matrix_float_subdiagonal');
  late final _gsl_matrix_float_subdiagonal =
      _gsl_matrix_float_subdiagonalPtr.asFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<gsl_matrix_float>, int)>();

  _gsl_vector_float_view gsl_matrix_float_superdiagonal(
    ffi.Pointer<gsl_matrix_float> m,
    int k,
  ) {
    return _gsl_matrix_float_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_float_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_matrix_float_superdiagonal');
  late final _gsl_matrix_float_superdiagonal =
      _gsl_matrix_float_superdiagonalPtr.asFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<gsl_matrix_float>, int)>();

  _gsl_vector_float_view gsl_matrix_float_subrow(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_float_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_float_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(ffi.Pointer<gsl_matrix_float>, size_t,
              size_t, size_t)>>('gsl_matrix_float_subrow');
  late final _gsl_matrix_float_subrow = _gsl_matrix_float_subrowPtr.asFunction<
      _gsl_vector_float_view Function(
          ffi.Pointer<gsl_matrix_float>, int, int, int)>();

  _gsl_vector_float_view gsl_matrix_float_subcolumn(
    ffi.Pointer<gsl_matrix_float> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_float_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_float_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_view Function(ffi.Pointer<gsl_matrix_float>, size_t,
              size_t, size_t)>>('gsl_matrix_float_subcolumn');
  late final _gsl_matrix_float_subcolumn =
      _gsl_matrix_float_subcolumnPtr.asFunction<
          _gsl_vector_float_view Function(
              ffi.Pointer<gsl_matrix_float>, int, int, int)>();

  _gsl_matrix_float_view gsl_matrix_float_view_array(
    ffi.Pointer<ffi.Float> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_float_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_float_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_view Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_matrix_float_view_array');
  late final _gsl_matrix_float_view_array =
      _gsl_matrix_float_view_arrayPtr.asFunction<
          _gsl_matrix_float_view Function(ffi.Pointer<ffi.Float>, int, int)>();

  _gsl_matrix_float_view gsl_matrix_float_view_array_with_tda(
    ffi.Pointer<ffi.Float> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_float_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_float_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_view Function(ffi.Pointer<ffi.Float>, size_t,
              size_t, size_t)>>('gsl_matrix_float_view_array_with_tda');
  late final _gsl_matrix_float_view_array_with_tda =
      _gsl_matrix_float_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_float_view Function(
              ffi.Pointer<ffi.Float>, int, int, int)>();

  _gsl_matrix_float_view gsl_matrix_float_view_vector(
    ffi.Pointer<gsl_vector_float> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_float_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_float_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_view Function(ffi.Pointer<gsl_vector_float>, size_t,
              size_t)>>('gsl_matrix_float_view_vector');
  late final _gsl_matrix_float_view_vector =
      _gsl_matrix_float_view_vectorPtr.asFunction<
          _gsl_matrix_float_view Function(
              ffi.Pointer<gsl_vector_float>, int, int)>();

  _gsl_matrix_float_view gsl_matrix_float_view_vector_with_tda(
    ffi.Pointer<gsl_vector_float> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_float_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_float_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_view Function(ffi.Pointer<gsl_vector_float>, size_t,
              size_t, size_t)>>('gsl_matrix_float_view_vector_with_tda');
  late final _gsl_matrix_float_view_vector_with_tda =
      _gsl_matrix_float_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_float_view Function(
              ffi.Pointer<gsl_vector_float>, int, int, int)>();

  _gsl_matrix_float_const_view gsl_matrix_float_const_submatrix(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_float_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_float_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_const_view Function(
              ffi.Pointer<gsl_matrix_float>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_float_const_submatrix');
  late final _gsl_matrix_float_const_submatrix =
      _gsl_matrix_float_const_submatrixPtr.asFunction<
          _gsl_matrix_float_const_view Function(
              ffi.Pointer<gsl_matrix_float>, int, int, int, int)>();

  _gsl_vector_float_const_view gsl_matrix_float_const_row(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
  ) {
    return _gsl_matrix_float_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_float_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_matrix_float_const_row');
  late final _gsl_matrix_float_const_row =
      _gsl_matrix_float_const_rowPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_matrix_float>, int)>();

  _gsl_vector_float_const_view gsl_matrix_float_const_column(
    ffi.Pointer<gsl_matrix_float> m,
    int j,
  ) {
    return _gsl_matrix_float_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_float_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_matrix_float_const_column');
  late final _gsl_matrix_float_const_column =
      _gsl_matrix_float_const_columnPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_matrix_float>, int)>();

  _gsl_vector_float_const_view gsl_matrix_float_const_diagonal(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_float_const_diagonalPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_float_const_view Function(
                  ffi.Pointer<gsl_matrix_float>)>>(
      'gsl_matrix_float_const_diagonal');
  late final _gsl_matrix_float_const_diagonal =
      _gsl_matrix_float_const_diagonalPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_matrix_float>)>();

  _gsl_vector_float_const_view gsl_matrix_float_const_subdiagonal(
    ffi.Pointer<gsl_matrix_float> m,
    int k,
  ) {
    return _gsl_matrix_float_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_float_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_matrix_float_const_subdiagonal');
  late final _gsl_matrix_float_const_subdiagonal =
      _gsl_matrix_float_const_subdiagonalPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_matrix_float>, int)>();

  _gsl_vector_float_const_view gsl_matrix_float_const_superdiagonal(
    ffi.Pointer<gsl_matrix_float> m,
    int k,
  ) {
    return _gsl_matrix_float_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_float_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_matrix_float_const_superdiagonal');
  late final _gsl_matrix_float_const_superdiagonal =
      _gsl_matrix_float_const_superdiagonalPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_matrix_float>, int)>();

  _gsl_vector_float_const_view gsl_matrix_float_const_subrow(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_float_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_float_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<gsl_matrix_float>,
              size_t, size_t, size_t)>>('gsl_matrix_float_const_subrow');
  late final _gsl_matrix_float_const_subrow =
      _gsl_matrix_float_const_subrowPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_matrix_float>, int, int, int)>();

  _gsl_vector_float_const_view gsl_matrix_float_const_subcolumn(
    ffi.Pointer<gsl_matrix_float> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_float_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_float_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_float_const_view Function(ffi.Pointer<gsl_matrix_float>,
              size_t, size_t, size_t)>>('gsl_matrix_float_const_subcolumn');
  late final _gsl_matrix_float_const_subcolumn =
      _gsl_matrix_float_const_subcolumnPtr.asFunction<
          _gsl_vector_float_const_view Function(
              ffi.Pointer<gsl_matrix_float>, int, int, int)>();

  _gsl_matrix_float_const_view gsl_matrix_float_const_view_array(
    ffi.Pointer<ffi.Float> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_float_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_float_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_const_view Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_matrix_float_const_view_array');
  late final _gsl_matrix_float_const_view_array =
      _gsl_matrix_float_const_view_arrayPtr.asFunction<
          _gsl_matrix_float_const_view Function(
              ffi.Pointer<ffi.Float>, int, int)>();

  _gsl_matrix_float_const_view gsl_matrix_float_const_view_array_with_tda(
    ffi.Pointer<ffi.Float> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_float_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_float_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_const_view Function(ffi.Pointer<ffi.Float>, size_t,
              size_t, size_t)>>('gsl_matrix_float_const_view_array_with_tda');
  late final _gsl_matrix_float_const_view_array_with_tda =
      _gsl_matrix_float_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_float_const_view Function(
              ffi.Pointer<ffi.Float>, int, int, int)>();

  _gsl_matrix_float_const_view gsl_matrix_float_const_view_vector(
    ffi.Pointer<gsl_vector_float> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_float_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_float_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_const_view Function(ffi.Pointer<gsl_vector_float>,
              size_t, size_t)>>('gsl_matrix_float_const_view_vector');
  late final _gsl_matrix_float_const_view_vector =
      _gsl_matrix_float_const_view_vectorPtr.asFunction<
          _gsl_matrix_float_const_view Function(
              ffi.Pointer<gsl_vector_float>, int, int)>();

  _gsl_matrix_float_const_view gsl_matrix_float_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_float> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_float_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_float_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_float_const_view Function(
              ffi.Pointer<gsl_vector_float>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_float_const_view_vector_with_tda');
  late final _gsl_matrix_float_const_view_vector_with_tda =
      _gsl_matrix_float_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_float_const_view Function(
              ffi.Pointer<gsl_vector_float>, int, int, int)>();

  void gsl_matrix_float_set_zero(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_set_zero(
      m,
    );
  }

  late final _gsl_matrix_float_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_float>)>>(
      'gsl_matrix_float_set_zero');
  late final _gsl_matrix_float_set_zero = _gsl_matrix_float_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_float>)>();

  void gsl_matrix_float_set_identity(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_set_identity(
      m,
    );
  }

  late final _gsl_matrix_float_set_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_float>)>>(
      'gsl_matrix_float_set_identity');
  late final _gsl_matrix_float_set_identity = _gsl_matrix_float_set_identityPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_float>)>();

  void gsl_matrix_float_set_all(
    ffi.Pointer<gsl_matrix_float> m,
    double x,
  ) {
    return _gsl_matrix_float_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_float_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Float)>>('gsl_matrix_float_set_all');
  late final _gsl_matrix_float_set_all = _gsl_matrix_float_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_float>, double)>();

  int gsl_matrix_float_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_float_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_fread');
  late final _gsl_matrix_float_fread = _gsl_matrix_float_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_float_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_fwrite');
  late final _gsl_matrix_float_fwrite = _gsl_matrix_float_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_float_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_fscanf');
  late final _gsl_matrix_float_fscanf = _gsl_matrix_float_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_float> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_float_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_float_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_float_fprintf');
  late final _gsl_matrix_float_fprintf =
      _gsl_matrix_float_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_float_memcpy(
    ffi.Pointer<gsl_matrix_float> dest,
    ffi.Pointer<gsl_matrix_float> src,
  ) {
    return _gsl_matrix_float_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_float_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_memcpy');
  late final _gsl_matrix_float_memcpy = _gsl_matrix_float_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_swap(
    ffi.Pointer<gsl_matrix_float> m1,
    ffi.Pointer<gsl_matrix_float> m2,
  ) {
    return _gsl_matrix_float_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_float_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_swap');
  late final _gsl_matrix_float_swap = _gsl_matrix_float_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_float> dest,
    ffi.Pointer<gsl_matrix_float> src,
  ) {
    return _gsl_matrix_float_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_float_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_tricpy');
  late final _gsl_matrix_float_tricpy = _gsl_matrix_float_tricpyPtr.asFunction<
      int Function(int, int, ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_swap_rows(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_float_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_float_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>, size_t,
              size_t)>>('gsl_matrix_float_swap_rows');
  late final _gsl_matrix_float_swap_rows = _gsl_matrix_float_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>, int, int)>();

  int gsl_matrix_float_swap_columns(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_float_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_float_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>, size_t,
              size_t)>>('gsl_matrix_float_swap_columns');
  late final _gsl_matrix_float_swap_columns = _gsl_matrix_float_swap_columnsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>, int, int)>();

  int gsl_matrix_float_swap_rowcol(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_float_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_float_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>, size_t,
              size_t)>>('gsl_matrix_float_swap_rowcol');
  late final _gsl_matrix_float_swap_rowcol = _gsl_matrix_float_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>, int, int)>();

  int gsl_matrix_float_transpose(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_transpose(
      m,
    );
  }

  late final _gsl_matrix_float_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_transpose');
  late final _gsl_matrix_float_transpose = _gsl_matrix_float_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_transpose_memcpy(
    ffi.Pointer<gsl_matrix_float> dest,
    ffi.Pointer<gsl_matrix_float> src,
  ) {
    return _gsl_matrix_float_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_float_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
                  ffi.Pointer<gsl_matrix_float>)>>(
      'gsl_matrix_float_transpose_memcpy');
  late final _gsl_matrix_float_transpose_memcpy =
      _gsl_matrix_float_transpose_memcpyPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_float> dest,
    ffi.Pointer<gsl_matrix_float> src,
  ) {
    return _gsl_matrix_float_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_float_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_float>,
                  ffi.Pointer<gsl_matrix_float>)>>(
      'gsl_matrix_float_transpose_tricpy');
  late final _gsl_matrix_float_transpose_tricpy =
      _gsl_matrix_float_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>();

  double gsl_matrix_float_max(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_max(
      m,
    );
  }

  late final _gsl_matrix_float_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_max');
  late final _gsl_matrix_float_max = _gsl_matrix_float_maxPtr
      .asFunction<double Function(ffi.Pointer<gsl_matrix_float>)>();

  double gsl_matrix_float_min(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_min(
      m,
    );
  }

  late final _gsl_matrix_float_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_min');
  late final _gsl_matrix_float_min = _gsl_matrix_float_minPtr
      .asFunction<double Function(ffi.Pointer<gsl_matrix_float>)>();

  void gsl_matrix_float_minmax(
    ffi.Pointer<gsl_matrix_float> m,
    ffi.Pointer<ffi.Float> min_out,
    ffi.Pointer<ffi.Float> max_out,
  ) {
    return _gsl_matrix_float_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_float_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('gsl_matrix_float_minmax');
  late final _gsl_matrix_float_minmax = _gsl_matrix_float_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>)>();

  void gsl_matrix_float_max_index(
    ffi.Pointer<gsl_matrix_float> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_float_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_float_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_float>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_float_max_index');
  late final _gsl_matrix_float_max_index =
      _gsl_matrix_float_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_float>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_float_min_index(
    ffi.Pointer<gsl_matrix_float> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_float_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_float_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_float>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_float_min_index');
  late final _gsl_matrix_float_min_index =
      _gsl_matrix_float_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_float>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_float_minmax_index(
    ffi.Pointer<gsl_matrix_float> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_float_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_float_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_float_minmax_index');
  late final _gsl_matrix_float_minmax_index =
      _gsl_matrix_float_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_float>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_float_equal(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_matrix_float> b,
  ) {
    return _gsl_matrix_float_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_float_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_equal');
  late final _gsl_matrix_float_equal = _gsl_matrix_float_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_isnull(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_isnull(
      m,
    );
  }

  late final _gsl_matrix_float_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_isnull');
  late final _gsl_matrix_float_isnull = _gsl_matrix_float_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_ispos(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_ispos(
      m,
    );
  }

  late final _gsl_matrix_float_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_ispos');
  late final _gsl_matrix_float_ispos = _gsl_matrix_float_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_isneg(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_isneg(
      m,
    );
  }

  late final _gsl_matrix_float_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_isneg');
  late final _gsl_matrix_float_isneg = _gsl_matrix_float_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_isnonneg(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_float_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_isnonneg');
  late final _gsl_matrix_float_isnonneg = _gsl_matrix_float_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>)>();

  double gsl_matrix_float_norm1(
    ffi.Pointer<gsl_matrix_float> m,
  ) {
    return _gsl_matrix_float_norm1(
      m,
    );
  }

  late final _gsl_matrix_float_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_norm1');
  late final _gsl_matrix_float_norm1 = _gsl_matrix_float_norm1Ptr
      .asFunction<double Function(ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_add(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_matrix_float> b,
  ) {
    return _gsl_matrix_float_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_float_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_add');
  late final _gsl_matrix_float_add = _gsl_matrix_float_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_sub(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_matrix_float> b,
  ) {
    return _gsl_matrix_float_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_float_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_sub');
  late final _gsl_matrix_float_sub = _gsl_matrix_float_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_mul_elements(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_matrix_float> b,
  ) {
    return _gsl_matrix_float_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_float_mul_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_mul_elements');
  late final _gsl_matrix_float_mul_elements =
      _gsl_matrix_float_mul_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_div_elements(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_matrix_float> b,
  ) {
    return _gsl_matrix_float_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_float_div_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_matrix_float_div_elements');
  late final _gsl_matrix_float_div_elements =
      _gsl_matrix_float_div_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_matrix_float_scale(
    ffi.Pointer<gsl_matrix_float> a,
    double x,
  ) {
    return _gsl_matrix_float_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_float_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Float)>>('gsl_matrix_float_scale');
  late final _gsl_matrix_float_scale = _gsl_matrix_float_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>, double)>();

  int gsl_matrix_float_scale_rows(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_vector_float> x,
  ) {
    return _gsl_matrix_float_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_float_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_matrix_float_scale_rows');
  late final _gsl_matrix_float_scale_rows =
      _gsl_matrix_float_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_matrix_float_scale_columns(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_vector_float> x,
  ) {
    return _gsl_matrix_float_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_float_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
                  ffi.Pointer<gsl_vector_float>)>>(
      'gsl_matrix_float_scale_columns');
  late final _gsl_matrix_float_scale_columns =
      _gsl_matrix_float_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_matrix_float_add_constant(
    ffi.Pointer<gsl_matrix_float> a,
    double x,
  ) {
    return _gsl_matrix_float_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_float_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Float)>>('gsl_matrix_float_add_constant');
  late final _gsl_matrix_float_add_constant = _gsl_matrix_float_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>, double)>();

  int gsl_matrix_float_add_diagonal(
    ffi.Pointer<gsl_matrix_float> a,
    double x,
  ) {
    return _gsl_matrix_float_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_float_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Float)>>('gsl_matrix_float_add_diagonal');
  late final _gsl_matrix_float_add_diagonal = _gsl_matrix_float_add_diagonalPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_float>, double)>();

  int gsl_matrix_float_get_row(
    ffi.Pointer<gsl_vector_float> v,
    ffi.Pointer<gsl_matrix_float> m,
    int i,
  ) {
    return _gsl_matrix_float_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_float_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_matrix_float_get_row');
  late final _gsl_matrix_float_get_row =
      _gsl_matrix_float_get_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_matrix_float>, int)>();

  int gsl_matrix_float_get_col(
    ffi.Pointer<gsl_vector_float> v,
    ffi.Pointer<gsl_matrix_float> m,
    int j,
  ) {
    return _gsl_matrix_float_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_float_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_matrix_float>,
              size_t)>>('gsl_matrix_float_get_col');
  late final _gsl_matrix_float_get_col =
      _gsl_matrix_float_get_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_matrix_float>, int)>();

  int gsl_matrix_float_set_row(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_matrix_float_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_float_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>, size_t,
              ffi.Pointer<gsl_vector_float>)>>('gsl_matrix_float_set_row');
  late final _gsl_matrix_float_set_row =
      _gsl_matrix_float_set_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_float>, int,
              ffi.Pointer<gsl_vector_float>)>();

  int gsl_matrix_float_set_col(
    ffi.Pointer<gsl_matrix_float> m,
    int j,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_matrix_float_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_float_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>, size_t,
              ffi.Pointer<gsl_vector_float>)>>('gsl_matrix_float_set_col');
  late final _gsl_matrix_float_set_col =
      _gsl_matrix_float_set_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_float>, int,
              ffi.Pointer<gsl_vector_float>)>();

  double gsl_matrix_float_get(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_float_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_float_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<gsl_matrix_float>, size_t,
              size_t)>>('gsl_matrix_float_get');
  late final _gsl_matrix_float_get = _gsl_matrix_float_getPtr
      .asFunction<double Function(ffi.Pointer<gsl_matrix_float>, int, int)>();

  void gsl_matrix_float_set(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int j,
    double x,
  ) {
    return _gsl_matrix_float_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_float_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_float>, size_t, size_t,
              ffi.Float)>>('gsl_matrix_float_set');
  late final _gsl_matrix_float_set = _gsl_matrix_float_setPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_float>, int, int, double)>();

  ffi.Pointer<ffi.Float> gsl_matrix_float_ptr(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_float_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_float_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<gsl_matrix_float>, size_t,
              size_t)>>('gsl_matrix_float_ptr');
  late final _gsl_matrix_float_ptr = _gsl_matrix_float_ptrPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(
          ffi.Pointer<gsl_matrix_float>, int, int)>();

  ffi.Pointer<ffi.Float> gsl_matrix_float_const_ptr(
    ffi.Pointer<gsl_matrix_float> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_float_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_float_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<gsl_matrix_float>, size_t,
              size_t)>>('gsl_matrix_float_const_ptr');
  late final _gsl_matrix_float_const_ptr =
      _gsl_matrix_float_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<gsl_matrix_float>, int, int)>();

  ffi.Pointer<gsl_matrix_ulong> gsl_matrix_ulong_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ulong_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ulong_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_ulong> Function(
              size_t, size_t)>>('gsl_matrix_ulong_alloc');
  late final _gsl_matrix_ulong_alloc = _gsl_matrix_ulong_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_ulong> Function(int, int)>();

  ffi.Pointer<gsl_matrix_ulong> gsl_matrix_ulong_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ulong_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ulong_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_ulong> Function(
              size_t, size_t)>>('gsl_matrix_ulong_calloc');
  late final _gsl_matrix_ulong_calloc = _gsl_matrix_ulong_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_ulong> Function(int, int)>();

  ffi.Pointer<gsl_matrix_ulong> gsl_matrix_ulong_alloc_from_block(
    ffi.Pointer<gsl_block_ulong> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_ulong_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_ulong_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_ulong> Function(
              ffi.Pointer<gsl_block_ulong>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ulong_alloc_from_block');
  late final _gsl_matrix_ulong_alloc_from_block =
      _gsl_matrix_ulong_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_ulong> Function(
              ffi.Pointer<gsl_block_ulong>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_ulong> gsl_matrix_ulong_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_ulong> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ulong_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ulong_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_ulong> Function(
              ffi.Pointer<gsl_matrix_ulong>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ulong_alloc_from_matrix');
  late final _gsl_matrix_ulong_alloc_from_matrix =
      _gsl_matrix_ulong_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_ulong> Function(
              ffi.Pointer<gsl_matrix_ulong>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_ulong> gsl_vector_ulong_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
  ) {
    return _gsl_vector_ulong_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_ulong_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_ulong> Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_vector_ulong_alloc_row_from_matrix');
  late final _gsl_vector_ulong_alloc_row_from_matrix =
      _gsl_vector_ulong_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_ulong> Function(
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  ffi.Pointer<gsl_vector_ulong> gsl_vector_ulong_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_ulong> m,
    int j,
  ) {
    return _gsl_vector_ulong_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_ulong_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_ulong> Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_vector_ulong_alloc_col_from_matrix');
  late final _gsl_vector_ulong_alloc_col_from_matrix =
      _gsl_vector_ulong_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_ulong> Function(
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  void gsl_matrix_ulong_free(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_free(
      m,
    );
  }

  late final _gsl_matrix_ulong_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_ulong>)>>(
      'gsl_matrix_ulong_free');
  late final _gsl_matrix_ulong_free = _gsl_matrix_ulong_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_ulong>)>();

  _gsl_matrix_ulong_view gsl_matrix_ulong_submatrix(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ulong_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ulong_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_view Function(ffi.Pointer<gsl_matrix_ulong>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_ulong_submatrix');
  late final _gsl_matrix_ulong_submatrix =
      _gsl_matrix_ulong_submatrixPtr.asFunction<
          _gsl_matrix_ulong_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int, int, int, int)>();

  _gsl_vector_ulong_view gsl_matrix_ulong_row(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
  ) {
    return _gsl_matrix_ulong_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_ulong_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(
              ffi.Pointer<gsl_matrix_ulong>, size_t)>>('gsl_matrix_ulong_row');
  late final _gsl_matrix_ulong_row = _gsl_matrix_ulong_rowPtr.asFunction<
      _gsl_vector_ulong_view Function(ffi.Pointer<gsl_matrix_ulong>, int)>();

  _gsl_vector_ulong_view gsl_matrix_ulong_column(
    ffi.Pointer<gsl_matrix_ulong> m,
    int j,
  ) {
    return _gsl_matrix_ulong_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_ulong_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_matrix_ulong_column');
  late final _gsl_matrix_ulong_column = _gsl_matrix_ulong_columnPtr.asFunction<
      _gsl_vector_ulong_view Function(ffi.Pointer<gsl_matrix_ulong>, int)>();

  _gsl_vector_ulong_view gsl_matrix_ulong_diagonal(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_diagonal(
      m,
    );
  }

  late final _gsl_matrix_ulong_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_diagonal');
  late final _gsl_matrix_ulong_diagonal =
      _gsl_matrix_ulong_diagonalPtr.asFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<gsl_matrix_ulong>)>();

  _gsl_vector_ulong_view gsl_matrix_ulong_subdiagonal(
    ffi.Pointer<gsl_matrix_ulong> m,
    int k,
  ) {
    return _gsl_matrix_ulong_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_ulong_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_matrix_ulong_subdiagonal');
  late final _gsl_matrix_ulong_subdiagonal =
      _gsl_matrix_ulong_subdiagonalPtr.asFunction<
          _gsl_vector_ulong_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  _gsl_vector_ulong_view gsl_matrix_ulong_superdiagonal(
    ffi.Pointer<gsl_matrix_ulong> m,
    int k,
  ) {
    return _gsl_matrix_ulong_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_ulong_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_matrix_ulong_superdiagonal');
  late final _gsl_matrix_ulong_superdiagonal =
      _gsl_matrix_ulong_superdiagonalPtr.asFunction<
          _gsl_vector_ulong_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  _gsl_vector_ulong_view gsl_matrix_ulong_subrow(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_ulong_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_ulong_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<gsl_matrix_ulong>, size_t,
              size_t, size_t)>>('gsl_matrix_ulong_subrow');
  late final _gsl_matrix_ulong_subrow = _gsl_matrix_ulong_subrowPtr.asFunction<
      _gsl_vector_ulong_view Function(
          ffi.Pointer<gsl_matrix_ulong>, int, int, int)>();

  _gsl_vector_ulong_view gsl_matrix_ulong_subcolumn(
    ffi.Pointer<gsl_matrix_ulong> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_ulong_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_ulong_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_view Function(ffi.Pointer<gsl_matrix_ulong>, size_t,
              size_t, size_t)>>('gsl_matrix_ulong_subcolumn');
  late final _gsl_matrix_ulong_subcolumn =
      _gsl_matrix_ulong_subcolumnPtr.asFunction<
          _gsl_vector_ulong_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int, int, int)>();

  _gsl_matrix_ulong_view gsl_matrix_ulong_view_array(
    ffi.Pointer<ffi.Uint64> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ulong_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ulong_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_view Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_matrix_ulong_view_array');
  late final _gsl_matrix_ulong_view_array =
      _gsl_matrix_ulong_view_arrayPtr.asFunction<
          _gsl_matrix_ulong_view Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  _gsl_matrix_ulong_view gsl_matrix_ulong_view_array_with_tda(
    ffi.Pointer<ffi.Uint64> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_ulong_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_ulong_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_view Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t, size_t)>>('gsl_matrix_ulong_view_array_with_tda');
  late final _gsl_matrix_ulong_view_array_with_tda =
      _gsl_matrix_ulong_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_ulong_view Function(
              ffi.Pointer<ffi.Uint64>, int, int, int)>();

  _gsl_matrix_ulong_view gsl_matrix_ulong_view_vector(
    ffi.Pointer<gsl_vector_ulong> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ulong_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ulong_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_view Function(ffi.Pointer<gsl_vector_ulong>, size_t,
              size_t)>>('gsl_matrix_ulong_view_vector');
  late final _gsl_matrix_ulong_view_vector =
      _gsl_matrix_ulong_view_vectorPtr.asFunction<
          _gsl_matrix_ulong_view Function(
              ffi.Pointer<gsl_vector_ulong>, int, int)>();

  _gsl_matrix_ulong_view gsl_matrix_ulong_view_vector_with_tda(
    ffi.Pointer<gsl_vector_ulong> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_ulong_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_ulong_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_view Function(ffi.Pointer<gsl_vector_ulong>, size_t,
              size_t, size_t)>>('gsl_matrix_ulong_view_vector_with_tda');
  late final _gsl_matrix_ulong_view_vector_with_tda =
      _gsl_matrix_ulong_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_ulong_view Function(
              ffi.Pointer<gsl_vector_ulong>, int, int, int)>();

  _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_submatrix(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ulong_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ulong_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_const_view Function(
              ffi.Pointer<gsl_matrix_ulong>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ulong_const_submatrix');
  late final _gsl_matrix_ulong_const_submatrix =
      _gsl_matrix_ulong_const_submatrixPtr.asFunction<
          _gsl_matrix_ulong_const_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int, int, int, int)>();

  _gsl_vector_ulong_const_view gsl_matrix_ulong_const_row(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
  ) {
    return _gsl_matrix_ulong_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_ulong_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_matrix_ulong_const_row');
  late final _gsl_matrix_ulong_const_row =
      _gsl_matrix_ulong_const_rowPtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  _gsl_vector_ulong_const_view gsl_matrix_ulong_const_column(
    ffi.Pointer<gsl_matrix_ulong> m,
    int j,
  ) {
    return _gsl_matrix_ulong_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_ulong_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_matrix_ulong_const_column');
  late final _gsl_matrix_ulong_const_column =
      _gsl_matrix_ulong_const_columnPtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  _gsl_vector_ulong_const_view gsl_matrix_ulong_const_diagonal(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_ulong_const_diagonalPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_ulong_const_view Function(
                  ffi.Pointer<gsl_matrix_ulong>)>>(
      'gsl_matrix_ulong_const_diagonal');
  late final _gsl_matrix_ulong_const_diagonal =
      _gsl_matrix_ulong_const_diagonalPtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_matrix_ulong>)>();

  _gsl_vector_ulong_const_view gsl_matrix_ulong_const_subdiagonal(
    ffi.Pointer<gsl_matrix_ulong> m,
    int k,
  ) {
    return _gsl_matrix_ulong_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_ulong_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_matrix_ulong_const_subdiagonal');
  late final _gsl_matrix_ulong_const_subdiagonal =
      _gsl_matrix_ulong_const_subdiagonalPtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  _gsl_vector_ulong_const_view gsl_matrix_ulong_const_superdiagonal(
    ffi.Pointer<gsl_matrix_ulong> m,
    int k,
  ) {
    return _gsl_matrix_ulong_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_ulong_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_matrix_ulong_const_superdiagonal');
  late final _gsl_matrix_ulong_const_superdiagonal =
      _gsl_matrix_ulong_const_superdiagonalPtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  _gsl_vector_ulong_const_view gsl_matrix_ulong_const_subrow(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_ulong_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_ulong_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t, size_t, size_t)>>('gsl_matrix_ulong_const_subrow');
  late final _gsl_matrix_ulong_const_subrow =
      _gsl_matrix_ulong_const_subrowPtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int, int, int)>();

  _gsl_vector_ulong_const_view gsl_matrix_ulong_const_subcolumn(
    ffi.Pointer<gsl_matrix_ulong> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_ulong_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_ulong_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ulong_const_view Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t, size_t, size_t)>>('gsl_matrix_ulong_const_subcolumn');
  late final _gsl_matrix_ulong_const_subcolumn =
      _gsl_matrix_ulong_const_subcolumnPtr.asFunction<
          _gsl_vector_ulong_const_view Function(
              ffi.Pointer<gsl_matrix_ulong>, int, int, int)>();

  _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_view_array(
    ffi.Pointer<ffi.Uint64> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ulong_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ulong_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_const_view Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_matrix_ulong_const_view_array');
  late final _gsl_matrix_ulong_const_view_array =
      _gsl_matrix_ulong_const_view_arrayPtr.asFunction<
          _gsl_matrix_ulong_const_view Function(
              ffi.Pointer<ffi.Uint64>, int, int)>();

  _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_view_array_with_tda(
    ffi.Pointer<ffi.Uint64> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_ulong_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_ulong_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_const_view Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t, size_t)>>('gsl_matrix_ulong_const_view_array_with_tda');
  late final _gsl_matrix_ulong_const_view_array_with_tda =
      _gsl_matrix_ulong_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_ulong_const_view Function(
              ffi.Pointer<ffi.Uint64>, int, int, int)>();

  _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_view_vector(
    ffi.Pointer<gsl_vector_ulong> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ulong_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ulong_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_const_view Function(ffi.Pointer<gsl_vector_ulong>,
              size_t, size_t)>>('gsl_matrix_ulong_const_view_vector');
  late final _gsl_matrix_ulong_const_view_vector =
      _gsl_matrix_ulong_const_view_vectorPtr.asFunction<
          _gsl_matrix_ulong_const_view Function(
              ffi.Pointer<gsl_vector_ulong>, int, int)>();

  _gsl_matrix_ulong_const_view gsl_matrix_ulong_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_ulong> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_ulong_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_ulong_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ulong_const_view Function(
              ffi.Pointer<gsl_vector_ulong>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ulong_const_view_vector_with_tda');
  late final _gsl_matrix_ulong_const_view_vector_with_tda =
      _gsl_matrix_ulong_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_ulong_const_view Function(
              ffi.Pointer<gsl_vector_ulong>, int, int, int)>();

  void gsl_matrix_ulong_set_zero(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_set_zero(
      m,
    );
  }

  late final _gsl_matrix_ulong_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_ulong>)>>(
      'gsl_matrix_ulong_set_zero');
  late final _gsl_matrix_ulong_set_zero = _gsl_matrix_ulong_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_ulong>)>();

  void gsl_matrix_ulong_set_identity(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_set_identity(
      m,
    );
  }

  late final _gsl_matrix_ulong_set_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_ulong>)>>(
      'gsl_matrix_ulong_set_identity');
  late final _gsl_matrix_ulong_set_identity = _gsl_matrix_ulong_set_identityPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_ulong>)>();

  void gsl_matrix_ulong_set_all(
    ffi.Pointer<gsl_matrix_ulong> m,
    int x,
  ) {
    return _gsl_matrix_ulong_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_ulong_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Uint64)>>('gsl_matrix_ulong_set_all');
  late final _gsl_matrix_ulong_set_all = _gsl_matrix_ulong_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_ulong>, int)>();

  int gsl_matrix_ulong_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_ulong_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_fread');
  late final _gsl_matrix_ulong_fread = _gsl_matrix_ulong_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_ulong_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_fwrite');
  late final _gsl_matrix_ulong_fwrite = _gsl_matrix_ulong_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_ulong_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_fscanf');
  late final _gsl_matrix_ulong_fscanf = _gsl_matrix_ulong_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_ulong> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_ulong_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_ulong_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_ulong_fprintf');
  late final _gsl_matrix_ulong_fprintf =
      _gsl_matrix_ulong_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_ulong_memcpy(
    ffi.Pointer<gsl_matrix_ulong> dest,
    ffi.Pointer<gsl_matrix_ulong> src,
  ) {
    return _gsl_matrix_ulong_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_ulong_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_memcpy');
  late final _gsl_matrix_ulong_memcpy = _gsl_matrix_ulong_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_swap(
    ffi.Pointer<gsl_matrix_ulong> m1,
    ffi.Pointer<gsl_matrix_ulong> m2,
  ) {
    return _gsl_matrix_ulong_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_ulong_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_swap');
  late final _gsl_matrix_ulong_swap = _gsl_matrix_ulong_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_ulong> dest,
    ffi.Pointer<gsl_matrix_ulong> src,
  ) {
    return _gsl_matrix_ulong_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_ulong_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_tricpy');
  late final _gsl_matrix_ulong_tricpy = _gsl_matrix_ulong_tricpyPtr.asFunction<
      int Function(int, int, ffi.Pointer<gsl_matrix_ulong>,
          ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_swap_rows(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ulong_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ulong_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>, size_t,
              size_t)>>('gsl_matrix_ulong_swap_rows');
  late final _gsl_matrix_ulong_swap_rows = _gsl_matrix_ulong_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>, int, int)>();

  int gsl_matrix_ulong_swap_columns(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ulong_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ulong_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>, size_t,
              size_t)>>('gsl_matrix_ulong_swap_columns');
  late final _gsl_matrix_ulong_swap_columns = _gsl_matrix_ulong_swap_columnsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>, int, int)>();

  int gsl_matrix_ulong_swap_rowcol(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ulong_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ulong_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>, size_t,
              size_t)>>('gsl_matrix_ulong_swap_rowcol');
  late final _gsl_matrix_ulong_swap_rowcol = _gsl_matrix_ulong_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>, int, int)>();

  int gsl_matrix_ulong_transpose(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_transpose(
      m,
    );
  }

  late final _gsl_matrix_ulong_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_transpose');
  late final _gsl_matrix_ulong_transpose = _gsl_matrix_ulong_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_transpose_memcpy(
    ffi.Pointer<gsl_matrix_ulong> dest,
    ffi.Pointer<gsl_matrix_ulong> src,
  ) {
    return _gsl_matrix_ulong_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_ulong_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
                  ffi.Pointer<gsl_matrix_ulong>)>>(
      'gsl_matrix_ulong_transpose_memcpy');
  late final _gsl_matrix_ulong_transpose_memcpy =
      _gsl_matrix_ulong_transpose_memcpyPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_ulong> dest,
    ffi.Pointer<gsl_matrix_ulong> src,
  ) {
    return _gsl_matrix_ulong_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_ulong_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_ulong>,
                  ffi.Pointer<gsl_matrix_ulong>)>>(
      'gsl_matrix_ulong_transpose_tricpy');
  late final _gsl_matrix_ulong_transpose_tricpy =
      _gsl_matrix_ulong_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_max(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_max(
      m,
    );
  }

  late final _gsl_matrix_ulong_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_max');
  late final _gsl_matrix_ulong_max = _gsl_matrix_ulong_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_min(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_min(
      m,
    );
  }

  late final _gsl_matrix_ulong_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_min');
  late final _gsl_matrix_ulong_min = _gsl_matrix_ulong_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>)>();

  void gsl_matrix_ulong_minmax(
    ffi.Pointer<gsl_matrix_ulong> m,
    ffi.Pointer<ffi.Uint64> min_out,
    ffi.Pointer<ffi.Uint64> max_out,
  ) {
    return _gsl_matrix_ulong_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_ulong_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>)>>('gsl_matrix_ulong_minmax');
  late final _gsl_matrix_ulong_minmax = _gsl_matrix_ulong_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<ffi.Uint64>)>();

  void gsl_matrix_ulong_max_index(
    ffi.Pointer<gsl_matrix_ulong> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_ulong_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_ulong_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_ulong_max_index');
  late final _gsl_matrix_ulong_max_index =
      _gsl_matrix_ulong_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_ulong_min_index(
    ffi.Pointer<gsl_matrix_ulong> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_ulong_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_ulong_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_ulong_min_index');
  late final _gsl_matrix_ulong_min_index =
      _gsl_matrix_ulong_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_ulong_minmax_index(
    ffi.Pointer<gsl_matrix_ulong> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_ulong_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_ulong_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_ulong_minmax_index');
  late final _gsl_matrix_ulong_minmax_index =
      _gsl_matrix_ulong_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_ulong_equal(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_matrix_ulong> b,
  ) {
    return _gsl_matrix_ulong_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_ulong_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_equal');
  late final _gsl_matrix_ulong_equal = _gsl_matrix_ulong_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_isnull(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_isnull(
      m,
    );
  }

  late final _gsl_matrix_ulong_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_isnull');
  late final _gsl_matrix_ulong_isnull = _gsl_matrix_ulong_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_ispos(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_ispos(
      m,
    );
  }

  late final _gsl_matrix_ulong_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_ispos');
  late final _gsl_matrix_ulong_ispos = _gsl_matrix_ulong_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_isneg(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_isneg(
      m,
    );
  }

  late final _gsl_matrix_ulong_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_isneg');
  late final _gsl_matrix_ulong_isneg = _gsl_matrix_ulong_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_isnonneg(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_ulong_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_isnonneg');
  late final _gsl_matrix_ulong_isnonneg = _gsl_matrix_ulong_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_norm1(
    ffi.Pointer<gsl_matrix_ulong> m,
  ) {
    return _gsl_matrix_ulong_norm1(
      m,
    );
  }

  late final _gsl_matrix_ulong_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_norm1');
  late final _gsl_matrix_ulong_norm1 = _gsl_matrix_ulong_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_add(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_matrix_ulong> b,
  ) {
    return _gsl_matrix_ulong_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_ulong_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_add');
  late final _gsl_matrix_ulong_add = _gsl_matrix_ulong_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_sub(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_matrix_ulong> b,
  ) {
    return _gsl_matrix_ulong_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_ulong_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_sub');
  late final _gsl_matrix_ulong_sub = _gsl_matrix_ulong_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_mul_elements(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_matrix_ulong> b,
  ) {
    return _gsl_matrix_ulong_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_ulong_mul_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_mul_elements');
  late final _gsl_matrix_ulong_mul_elements =
      _gsl_matrix_ulong_mul_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_div_elements(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_matrix_ulong> b,
  ) {
    return _gsl_matrix_ulong_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_ulong_div_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_matrix_ulong_div_elements');
  late final _gsl_matrix_ulong_div_elements =
      _gsl_matrix_ulong_div_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_matrix_ulong_scale(
    ffi.Pointer<gsl_matrix_ulong> a,
    int x,
  ) {
    return _gsl_matrix_ulong_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_ulong_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Uint64)>>('gsl_matrix_ulong_scale');
  late final _gsl_matrix_ulong_scale = _gsl_matrix_ulong_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>, int)>();

  int gsl_matrix_ulong_scale_rows(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_vector_ulong> x,
  ) {
    return _gsl_matrix_ulong_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_ulong_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_matrix_ulong_scale_rows');
  late final _gsl_matrix_ulong_scale_rows =
      _gsl_matrix_ulong_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_matrix_ulong_scale_columns(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_vector_ulong> x,
  ) {
    return _gsl_matrix_ulong_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_ulong_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
                  ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_matrix_ulong_scale_columns');
  late final _gsl_matrix_ulong_scale_columns =
      _gsl_matrix_ulong_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_matrix_ulong_add_constant(
    ffi.Pointer<gsl_matrix_ulong> a,
    int x,
  ) {
    return _gsl_matrix_ulong_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_ulong_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Uint64)>>('gsl_matrix_ulong_add_constant');
  late final _gsl_matrix_ulong_add_constant = _gsl_matrix_ulong_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>, int)>();

  int gsl_matrix_ulong_add_diagonal(
    ffi.Pointer<gsl_matrix_ulong> a,
    int x,
  ) {
    return _gsl_matrix_ulong_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_ulong_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Uint64)>>('gsl_matrix_ulong_add_diagonal');
  late final _gsl_matrix_ulong_add_diagonal = _gsl_matrix_ulong_add_diagonalPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>, int)>();

  int gsl_matrix_ulong_get_row(
    ffi.Pointer<gsl_vector_ulong> v,
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
  ) {
    return _gsl_matrix_ulong_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_ulong_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_matrix_ulong_get_row');
  late final _gsl_matrix_ulong_get_row =
      _gsl_matrix_ulong_get_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  int gsl_matrix_ulong_get_col(
    ffi.Pointer<gsl_vector_ulong> v,
    ffi.Pointer<gsl_matrix_ulong> m,
    int j,
  ) {
    return _gsl_matrix_ulong_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_ulong_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_matrix_ulong>,
              size_t)>>('gsl_matrix_ulong_get_col');
  late final _gsl_matrix_ulong_get_col =
      _gsl_matrix_ulong_get_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_matrix_ulong>, int)>();

  int gsl_matrix_ulong_set_row(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_matrix_ulong_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_ulong_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>, size_t,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_matrix_ulong_set_row');
  late final _gsl_matrix_ulong_set_row =
      _gsl_matrix_ulong_set_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ulong>, int,
              ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_matrix_ulong_set_col(
    ffi.Pointer<gsl_matrix_ulong> m,
    int j,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_matrix_ulong_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_ulong_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>, size_t,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_matrix_ulong_set_col');
  late final _gsl_matrix_ulong_set_col =
      _gsl_matrix_ulong_set_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ulong>, int,
              ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_matrix_ulong_get(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ulong_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ulong_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<gsl_matrix_ulong>, size_t,
              size_t)>>('gsl_matrix_ulong_get');
  late final _gsl_matrix_ulong_get = _gsl_matrix_ulong_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ulong>, int, int)>();

  void gsl_matrix_ulong_set(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_matrix_ulong_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_ulong_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_ulong>, size_t, size_t,
              ffi.Uint64)>>('gsl_matrix_ulong_set');
  late final _gsl_matrix_ulong_set = _gsl_matrix_ulong_setPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_ulong>, int, int, int)>();

  ffi.Pointer<ffi.Uint64> gsl_matrix_ulong_ptr(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ulong_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ulong_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint64> Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t, size_t)>>('gsl_matrix_ulong_ptr');
  late final _gsl_matrix_ulong_ptr = _gsl_matrix_ulong_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint64> Function(
          ffi.Pointer<gsl_matrix_ulong>, int, int)>();

  ffi.Pointer<ffi.Uint64> gsl_matrix_ulong_const_ptr(
    ffi.Pointer<gsl_matrix_ulong> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ulong_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ulong_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint64> Function(ffi.Pointer<gsl_matrix_ulong>,
              size_t, size_t)>>('gsl_matrix_ulong_const_ptr');
  late final _gsl_matrix_ulong_const_ptr =
      _gsl_matrix_ulong_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Uint64> Function(
              ffi.Pointer<gsl_matrix_ulong>, int, int)>();

  ffi.Pointer<gsl_matrix_long> gsl_matrix_long_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_long> Function(
              size_t, size_t)>>('gsl_matrix_long_alloc');
  late final _gsl_matrix_long_alloc = _gsl_matrix_long_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_long> Function(int, int)>();

  ffi.Pointer<gsl_matrix_long> gsl_matrix_long_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_long> Function(
              size_t, size_t)>>('gsl_matrix_long_calloc');
  late final _gsl_matrix_long_calloc = _gsl_matrix_long_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_long> Function(int, int)>();

  ffi.Pointer<gsl_matrix_long> gsl_matrix_long_alloc_from_block(
    ffi.Pointer<gsl_block_long> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_long_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_long_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_long> Function(
              ffi.Pointer<gsl_block_long>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_long_alloc_from_block');
  late final _gsl_matrix_long_alloc_from_block =
      _gsl_matrix_long_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_long> Function(
              ffi.Pointer<gsl_block_long>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_long> gsl_matrix_long_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_long> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_long> Function(
              ffi.Pointer<gsl_matrix_long>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_long_alloc_from_matrix');
  late final _gsl_matrix_long_alloc_from_matrix =
      _gsl_matrix_long_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_long> Function(
              ffi.Pointer<gsl_matrix_long>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_long> gsl_vector_long_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
  ) {
    return _gsl_vector_long_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_long_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long> Function(ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_vector_long_alloc_row_from_matrix');
  late final _gsl_vector_long_alloc_row_from_matrix =
      _gsl_vector_long_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_long> Function(
              ffi.Pointer<gsl_matrix_long>, int)>();

  ffi.Pointer<gsl_vector_long> gsl_vector_long_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_long> m,
    int j,
  ) {
    return _gsl_vector_long_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_long_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_long> Function(ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_vector_long_alloc_col_from_matrix');
  late final _gsl_vector_long_alloc_col_from_matrix =
      _gsl_vector_long_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_long> Function(
              ffi.Pointer<gsl_matrix_long>, int)>();

  void gsl_matrix_long_free(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_free(
      m,
    );
  }

  late final _gsl_matrix_long_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_free');
  late final _gsl_matrix_long_free = _gsl_matrix_long_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_long>)>();

  _gsl_matrix_long_view gsl_matrix_long_submatrix(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_view Function(ffi.Pointer<gsl_matrix_long>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_long_submatrix');
  late final _gsl_matrix_long_submatrix =
      _gsl_matrix_long_submatrixPtr.asFunction<
          _gsl_matrix_long_view Function(
              ffi.Pointer<gsl_matrix_long>, int, int, int, int)>();

  _gsl_vector_long_view gsl_matrix_long_row(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
  ) {
    return _gsl_matrix_long_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_long_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(
              ffi.Pointer<gsl_matrix_long>, size_t)>>('gsl_matrix_long_row');
  late final _gsl_matrix_long_row = _gsl_matrix_long_rowPtr.asFunction<
      _gsl_vector_long_view Function(ffi.Pointer<gsl_matrix_long>, int)>();

  _gsl_vector_long_view gsl_matrix_long_column(
    ffi.Pointer<gsl_matrix_long> m,
    int j,
  ) {
    return _gsl_matrix_long_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_long_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(
              ffi.Pointer<gsl_matrix_long>, size_t)>>('gsl_matrix_long_column');
  late final _gsl_matrix_long_column = _gsl_matrix_long_columnPtr.asFunction<
      _gsl_vector_long_view Function(ffi.Pointer<gsl_matrix_long>, int)>();

  _gsl_vector_long_view gsl_matrix_long_diagonal(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_diagonal(
      m,
    );
  }

  late final _gsl_matrix_long_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_diagonal');
  late final _gsl_matrix_long_diagonal =
      _gsl_matrix_long_diagonalPtr.asFunction<
          _gsl_vector_long_view Function(ffi.Pointer<gsl_matrix_long>)>();

  _gsl_vector_long_view gsl_matrix_long_subdiagonal(
    ffi.Pointer<gsl_matrix_long> m,
    int k,
  ) {
    return _gsl_matrix_long_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_long_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_matrix_long_subdiagonal');
  late final _gsl_matrix_long_subdiagonal =
      _gsl_matrix_long_subdiagonalPtr.asFunction<
          _gsl_vector_long_view Function(ffi.Pointer<gsl_matrix_long>, int)>();

  _gsl_vector_long_view gsl_matrix_long_superdiagonal(
    ffi.Pointer<gsl_matrix_long> m,
    int k,
  ) {
    return _gsl_matrix_long_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_long_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_matrix_long_superdiagonal');
  late final _gsl_matrix_long_superdiagonal =
      _gsl_matrix_long_superdiagonalPtr.asFunction<
          _gsl_vector_long_view Function(ffi.Pointer<gsl_matrix_long>, int)>();

  _gsl_vector_long_view gsl_matrix_long_subrow(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_long_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_long_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(ffi.Pointer<gsl_matrix_long>, size_t,
              size_t, size_t)>>('gsl_matrix_long_subrow');
  late final _gsl_matrix_long_subrow = _gsl_matrix_long_subrowPtr.asFunction<
      _gsl_vector_long_view Function(
          ffi.Pointer<gsl_matrix_long>, int, int, int)>();

  _gsl_vector_long_view gsl_matrix_long_subcolumn(
    ffi.Pointer<gsl_matrix_long> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_long_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_long_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_view Function(ffi.Pointer<gsl_matrix_long>, size_t,
              size_t, size_t)>>('gsl_matrix_long_subcolumn');
  late final _gsl_matrix_long_subcolumn =
      _gsl_matrix_long_subcolumnPtr.asFunction<
          _gsl_vector_long_view Function(
              ffi.Pointer<gsl_matrix_long>, int, int, int)>();

  _gsl_matrix_long_view gsl_matrix_long_view_array(
    ffi.Pointer<ffi.Int64> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_view Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_matrix_long_view_array');
  late final _gsl_matrix_long_view_array =
      _gsl_matrix_long_view_arrayPtr.asFunction<
          _gsl_matrix_long_view Function(ffi.Pointer<ffi.Int64>, int, int)>();

  _gsl_matrix_long_view gsl_matrix_long_view_array_with_tda(
    ffi.Pointer<ffi.Int64> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_long_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_long_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_view Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              size_t)>>('gsl_matrix_long_view_array_with_tda');
  late final _gsl_matrix_long_view_array_with_tda =
      _gsl_matrix_long_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_long_view Function(
              ffi.Pointer<ffi.Int64>, int, int, int)>();

  _gsl_matrix_long_view gsl_matrix_long_view_vector(
    ffi.Pointer<gsl_vector_long> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_view Function(ffi.Pointer<gsl_vector_long>, size_t,
              size_t)>>('gsl_matrix_long_view_vector');
  late final _gsl_matrix_long_view_vector =
      _gsl_matrix_long_view_vectorPtr.asFunction<
          _gsl_matrix_long_view Function(
              ffi.Pointer<gsl_vector_long>, int, int)>();

  _gsl_matrix_long_view gsl_matrix_long_view_vector_with_tda(
    ffi.Pointer<gsl_vector_long> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_long_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_long_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_view Function(ffi.Pointer<gsl_vector_long>, size_t,
              size_t, size_t)>>('gsl_matrix_long_view_vector_with_tda');
  late final _gsl_matrix_long_view_vector_with_tda =
      _gsl_matrix_long_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_long_view Function(
              ffi.Pointer<gsl_vector_long>, int, int, int)>();

  _gsl_matrix_long_const_view gsl_matrix_long_const_submatrix(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_const_view Function(
              ffi.Pointer<gsl_matrix_long>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_long_const_submatrix');
  late final _gsl_matrix_long_const_submatrix =
      _gsl_matrix_long_const_submatrixPtr.asFunction<
          _gsl_matrix_long_const_view Function(
              ffi.Pointer<gsl_matrix_long>, int, int, int, int)>();

  _gsl_vector_long_const_view gsl_matrix_long_const_row(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
  ) {
    return _gsl_matrix_long_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_long_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_matrix_long_const_row');
  late final _gsl_matrix_long_const_row =
      _gsl_matrix_long_const_rowPtr.asFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_matrix_long>, int)>();

  _gsl_vector_long_const_view gsl_matrix_long_const_column(
    ffi.Pointer<gsl_matrix_long> m,
    int j,
  ) {
    return _gsl_matrix_long_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_long_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_matrix_long_const_column');
  late final _gsl_matrix_long_const_column =
      _gsl_matrix_long_const_columnPtr.asFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_matrix_long>, int)>();

  _gsl_vector_long_const_view gsl_matrix_long_const_diagonal(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_long_const_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_const_diagonal');
  late final _gsl_matrix_long_const_diagonal =
      _gsl_matrix_long_const_diagonalPtr.asFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<gsl_matrix_long>)>();

  _gsl_vector_long_const_view gsl_matrix_long_const_subdiagonal(
    ffi.Pointer<gsl_matrix_long> m,
    int k,
  ) {
    return _gsl_matrix_long_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_long_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_matrix_long_const_subdiagonal');
  late final _gsl_matrix_long_const_subdiagonal =
      _gsl_matrix_long_const_subdiagonalPtr.asFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_matrix_long>, int)>();

  _gsl_vector_long_const_view gsl_matrix_long_const_superdiagonal(
    ffi.Pointer<gsl_matrix_long> m,
    int k,
  ) {
    return _gsl_matrix_long_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_long_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_matrix_long_const_superdiagonal');
  late final _gsl_matrix_long_const_superdiagonal =
      _gsl_matrix_long_const_superdiagonalPtr.asFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_matrix_long>, int)>();

  _gsl_vector_long_const_view gsl_matrix_long_const_subrow(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_long_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_long_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<gsl_matrix_long>,
              size_t, size_t, size_t)>>('gsl_matrix_long_const_subrow');
  late final _gsl_matrix_long_const_subrow =
      _gsl_matrix_long_const_subrowPtr.asFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_matrix_long>, int, int, int)>();

  _gsl_vector_long_const_view gsl_matrix_long_const_subcolumn(
    ffi.Pointer<gsl_matrix_long> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_long_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_long_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_long_const_view Function(ffi.Pointer<gsl_matrix_long>,
              size_t, size_t, size_t)>>('gsl_matrix_long_const_subcolumn');
  late final _gsl_matrix_long_const_subcolumn =
      _gsl_matrix_long_const_subcolumnPtr.asFunction<
          _gsl_vector_long_const_view Function(
              ffi.Pointer<gsl_matrix_long>, int, int, int)>();

  _gsl_matrix_long_const_view gsl_matrix_long_const_view_array(
    ffi.Pointer<ffi.Int64> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_const_view Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_matrix_long_const_view_array');
  late final _gsl_matrix_long_const_view_array =
      _gsl_matrix_long_const_view_arrayPtr.asFunction<
          _gsl_matrix_long_const_view Function(
              ffi.Pointer<ffi.Int64>, int, int)>();

  _gsl_matrix_long_const_view gsl_matrix_long_const_view_array_with_tda(
    ffi.Pointer<ffi.Int64> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_long_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_long_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_const_view Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t, size_t)>>('gsl_matrix_long_const_view_array_with_tda');
  late final _gsl_matrix_long_const_view_array_with_tda =
      _gsl_matrix_long_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_long_const_view Function(
              ffi.Pointer<ffi.Int64>, int, int, int)>();

  _gsl_matrix_long_const_view gsl_matrix_long_const_view_vector(
    ffi.Pointer<gsl_vector_long> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_long_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_long_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_const_view Function(ffi.Pointer<gsl_vector_long>,
              size_t, size_t)>>('gsl_matrix_long_const_view_vector');
  late final _gsl_matrix_long_const_view_vector =
      _gsl_matrix_long_const_view_vectorPtr.asFunction<
          _gsl_matrix_long_const_view Function(
              ffi.Pointer<gsl_vector_long>, int, int)>();

  _gsl_matrix_long_const_view gsl_matrix_long_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_long> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_long_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_long_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_long_const_view Function(
              ffi.Pointer<gsl_vector_long>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_long_const_view_vector_with_tda');
  late final _gsl_matrix_long_const_view_vector_with_tda =
      _gsl_matrix_long_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_long_const_view Function(
              ffi.Pointer<gsl_vector_long>, int, int, int)>();

  void gsl_matrix_long_set_zero(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_set_zero(
      m,
    );
  }

  late final _gsl_matrix_long_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_set_zero');
  late final _gsl_matrix_long_set_zero = _gsl_matrix_long_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_long>)>();

  void gsl_matrix_long_set_identity(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_set_identity(
      m,
    );
  }

  late final _gsl_matrix_long_set_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_set_identity');
  late final _gsl_matrix_long_set_identity = _gsl_matrix_long_set_identityPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_long>)>();

  void gsl_matrix_long_set_all(
    ffi.Pointer<gsl_matrix_long> m,
    int x,
  ) {
    return _gsl_matrix_long_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_long_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Int64)>>('gsl_matrix_long_set_all');
  late final _gsl_matrix_long_set_all = _gsl_matrix_long_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_long>, int)>();

  int gsl_matrix_long_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_long_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_fread');
  late final _gsl_matrix_long_fread = _gsl_matrix_long_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_long_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_fwrite');
  late final _gsl_matrix_long_fwrite = _gsl_matrix_long_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_long_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_fscanf');
  late final _gsl_matrix_long_fscanf = _gsl_matrix_long_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_long> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_long_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_long_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_long_fprintf');
  late final _gsl_matrix_long_fprintf = _gsl_matrix_long_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_long>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_long_memcpy(
    ffi.Pointer<gsl_matrix_long> dest,
    ffi.Pointer<gsl_matrix_long> src,
  ) {
    return _gsl_matrix_long_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_long_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_memcpy');
  late final _gsl_matrix_long_memcpy = _gsl_matrix_long_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_swap(
    ffi.Pointer<gsl_matrix_long> m1,
    ffi.Pointer<gsl_matrix_long> m2,
  ) {
    return _gsl_matrix_long_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_long_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_swap');
  late final _gsl_matrix_long_swap = _gsl_matrix_long_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_long> dest,
    ffi.Pointer<gsl_matrix_long> src,
  ) {
    return _gsl_matrix_long_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_long_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_tricpy');
  late final _gsl_matrix_long_tricpy = _gsl_matrix_long_tricpyPtr.asFunction<
      int Function(int, int, ffi.Pointer<gsl_matrix_long>,
          ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_swap_rows(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_long_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_long_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>, size_t,
              size_t)>>('gsl_matrix_long_swap_rows');
  late final _gsl_matrix_long_swap_rows = _gsl_matrix_long_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>, int, int)>();

  int gsl_matrix_long_swap_columns(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_long_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_long_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>, size_t,
              size_t)>>('gsl_matrix_long_swap_columns');
  late final _gsl_matrix_long_swap_columns = _gsl_matrix_long_swap_columnsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>, int, int)>();

  int gsl_matrix_long_swap_rowcol(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_long_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_long_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>, size_t,
              size_t)>>('gsl_matrix_long_swap_rowcol');
  late final _gsl_matrix_long_swap_rowcol = _gsl_matrix_long_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>, int, int)>();

  int gsl_matrix_long_transpose(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_transpose(
      m,
    );
  }

  late final _gsl_matrix_long_transposePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_transpose');
  late final _gsl_matrix_long_transpose = _gsl_matrix_long_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_transpose_memcpy(
    ffi.Pointer<gsl_matrix_long> dest,
    ffi.Pointer<gsl_matrix_long> src,
  ) {
    return _gsl_matrix_long_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_long_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_transpose_memcpy');
  late final _gsl_matrix_long_transpose_memcpy =
      _gsl_matrix_long_transpose_memcpyPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_long> dest,
    ffi.Pointer<gsl_matrix_long> src,
  ) {
    return _gsl_matrix_long_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_long_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Int32, ffi.Int32,
                  ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_transpose_tricpy');
  late final _gsl_matrix_long_transpose_tricpy =
      _gsl_matrix_long_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_max(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_max(
      m,
    );
  }

  late final _gsl_matrix_long_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_max');
  late final _gsl_matrix_long_max = _gsl_matrix_long_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_min(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_min(
      m,
    );
  }

  late final _gsl_matrix_long_minPtr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_min');
  late final _gsl_matrix_long_min = _gsl_matrix_long_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>)>();

  void gsl_matrix_long_minmax(
    ffi.Pointer<gsl_matrix_long> m,
    ffi.Pointer<ffi.Int64> min_out,
    ffi.Pointer<ffi.Int64> max_out,
  ) {
    return _gsl_matrix_long_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_long_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('gsl_matrix_long_minmax');
  late final _gsl_matrix_long_minmax = _gsl_matrix_long_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_long>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>)>();

  void gsl_matrix_long_max_index(
    ffi.Pointer<gsl_matrix_long> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_long_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_long_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_long>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_long_max_index');
  late final _gsl_matrix_long_max_index =
      _gsl_matrix_long_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_long>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_long_min_index(
    ffi.Pointer<gsl_matrix_long> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_long_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_long_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_long>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_long_min_index');
  late final _gsl_matrix_long_min_index =
      _gsl_matrix_long_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_long>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_long_minmax_index(
    ffi.Pointer<gsl_matrix_long> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_long_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_long_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_long_minmax_index');
  late final _gsl_matrix_long_minmax_index =
      _gsl_matrix_long_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_long>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_long_equal(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_matrix_long> b,
  ) {
    return _gsl_matrix_long_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_equal');
  late final _gsl_matrix_long_equal = _gsl_matrix_long_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_isnull(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_isnull(
      m,
    );
  }

  late final _gsl_matrix_long_isnullPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_isnull');
  late final _gsl_matrix_long_isnull = _gsl_matrix_long_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_ispos(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_ispos(
      m,
    );
  }

  late final _gsl_matrix_long_isposPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_ispos');
  late final _gsl_matrix_long_ispos = _gsl_matrix_long_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_isneg(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_isneg(
      m,
    );
  }

  late final _gsl_matrix_long_isnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_isneg');
  late final _gsl_matrix_long_isneg = _gsl_matrix_long_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_isnonneg(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_long_isnonnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_isnonneg');
  late final _gsl_matrix_long_isnonneg = _gsl_matrix_long_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_norm1(
    ffi.Pointer<gsl_matrix_long> m,
  ) {
    return _gsl_matrix_long_norm1(
      m,
    );
  }

  late final _gsl_matrix_long_norm1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<gsl_matrix_long>)>>(
      'gsl_matrix_long_norm1');
  late final _gsl_matrix_long_norm1 = _gsl_matrix_long_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_add(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_matrix_long> b,
  ) {
    return _gsl_matrix_long_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_add');
  late final _gsl_matrix_long_add = _gsl_matrix_long_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_sub(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_matrix_long> b,
  ) {
    return _gsl_matrix_long_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_sub');
  late final _gsl_matrix_long_sub = _gsl_matrix_long_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_mul_elements(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_matrix_long> b,
  ) {
    return _gsl_matrix_long_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_mul_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_mul_elements');
  late final _gsl_matrix_long_mul_elements =
      _gsl_matrix_long_mul_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_div_elements(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_matrix_long> b,
  ) {
    return _gsl_matrix_long_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_long_div_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_matrix_long_div_elements');
  late final _gsl_matrix_long_div_elements =
      _gsl_matrix_long_div_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_matrix_long_scale(
    ffi.Pointer<gsl_matrix_long> a,
    int x,
  ) {
    return _gsl_matrix_long_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_long_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Int64)>>('gsl_matrix_long_scale');
  late final _gsl_matrix_long_scale = _gsl_matrix_long_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>, int)>();

  int gsl_matrix_long_scale_rows(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_vector_long> x,
  ) {
    return _gsl_matrix_long_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_long_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_matrix_long_scale_rows');
  late final _gsl_matrix_long_scale_rows =
      _gsl_matrix_long_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_matrix_long_scale_columns(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_vector_long> x,
  ) {
    return _gsl_matrix_long_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_long_scale_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_matrix_long_scale_columns');
  late final _gsl_matrix_long_scale_columns =
      _gsl_matrix_long_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_matrix_long_add_constant(
    ffi.Pointer<gsl_matrix_long> a,
    int x,
  ) {
    return _gsl_matrix_long_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_long_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Int64)>>('gsl_matrix_long_add_constant');
  late final _gsl_matrix_long_add_constant = _gsl_matrix_long_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>, int)>();

  int gsl_matrix_long_add_diagonal(
    ffi.Pointer<gsl_matrix_long> a,
    int x,
  ) {
    return _gsl_matrix_long_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_long_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Int64)>>('gsl_matrix_long_add_diagonal');
  late final _gsl_matrix_long_add_diagonal = _gsl_matrix_long_add_diagonalPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>, int)>();

  int gsl_matrix_long_get_row(
    ffi.Pointer<gsl_vector_long> v,
    ffi.Pointer<gsl_matrix_long> m,
    int i,
  ) {
    return _gsl_matrix_long_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_long_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_matrix_long_get_row');
  late final _gsl_matrix_long_get_row = _gsl_matrix_long_get_rowPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_matrix_long>, int)>();

  int gsl_matrix_long_get_col(
    ffi.Pointer<gsl_vector_long> v,
    ffi.Pointer<gsl_matrix_long> m,
    int j,
  ) {
    return _gsl_matrix_long_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_long_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_matrix_long>,
              size_t)>>('gsl_matrix_long_get_col');
  late final _gsl_matrix_long_get_col = _gsl_matrix_long_get_colPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_matrix_long>, int)>();

  int gsl_matrix_long_set_row(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_matrix_long_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_long_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>, size_t,
              ffi.Pointer<gsl_vector_long>)>>('gsl_matrix_long_set_row');
  late final _gsl_matrix_long_set_row = _gsl_matrix_long_set_rowPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_long>, int, ffi.Pointer<gsl_vector_long>)>();

  int gsl_matrix_long_set_col(
    ffi.Pointer<gsl_matrix_long> m,
    int j,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_matrix_long_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_long_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>, size_t,
              ffi.Pointer<gsl_vector_long>)>>('gsl_matrix_long_set_col');
  late final _gsl_matrix_long_set_col = _gsl_matrix_long_set_colPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_long>, int, ffi.Pointer<gsl_vector_long>)>();

  int gsl_matrix_long_get(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_long_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_long_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<gsl_matrix_long>, size_t,
              size_t)>>('gsl_matrix_long_get');
  late final _gsl_matrix_long_get = _gsl_matrix_long_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_long>, int, int)>();

  void gsl_matrix_long_set(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_matrix_long_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_long_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_long>, size_t, size_t,
              ffi.Int64)>>('gsl_matrix_long_set');
  late final _gsl_matrix_long_set = _gsl_matrix_long_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_long>, int, int, int)>();

  ffi.Pointer<ffi.Int64> gsl_matrix_long_ptr(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_long_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_long_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int64> Function(ffi.Pointer<gsl_matrix_long>, size_t,
              size_t)>>('gsl_matrix_long_ptr');
  late final _gsl_matrix_long_ptr = _gsl_matrix_long_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int64> Function(
          ffi.Pointer<gsl_matrix_long>, int, int)>();

  ffi.Pointer<ffi.Int64> gsl_matrix_long_const_ptr(
    ffi.Pointer<gsl_matrix_long> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_long_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_long_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int64> Function(ffi.Pointer<gsl_matrix_long>, size_t,
              size_t)>>('gsl_matrix_long_const_ptr');
  late final _gsl_matrix_long_const_ptr =
      _gsl_matrix_long_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Int64> Function(
              ffi.Pointer<gsl_matrix_long>, int, int)>();

  ffi.Pointer<gsl_matrix_uint> gsl_matrix_uint_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uint_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uint_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_uint> Function(
              size_t, size_t)>>('gsl_matrix_uint_alloc');
  late final _gsl_matrix_uint_alloc = _gsl_matrix_uint_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_uint> Function(int, int)>();

  ffi.Pointer<gsl_matrix_uint> gsl_matrix_uint_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uint_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uint_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_uint> Function(
              size_t, size_t)>>('gsl_matrix_uint_calloc');
  late final _gsl_matrix_uint_calloc = _gsl_matrix_uint_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_uint> Function(int, int)>();

  ffi.Pointer<gsl_matrix_uint> gsl_matrix_uint_alloc_from_block(
    ffi.Pointer<gsl_block_uint> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_uint_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_uint_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_uint> Function(
              ffi.Pointer<gsl_block_uint>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_uint_alloc_from_block');
  late final _gsl_matrix_uint_alloc_from_block =
      _gsl_matrix_uint_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_uint> Function(
              ffi.Pointer<gsl_block_uint>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_uint> gsl_matrix_uint_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_uint> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uint_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uint_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_uint> Function(
              ffi.Pointer<gsl_matrix_uint>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_uint_alloc_from_matrix');
  late final _gsl_matrix_uint_alloc_from_matrix =
      _gsl_matrix_uint_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_uint> Function(
              ffi.Pointer<gsl_matrix_uint>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_uint> gsl_vector_uint_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
  ) {
    return _gsl_vector_uint_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_uint_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_uint> Function(ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_vector_uint_alloc_row_from_matrix');
  late final _gsl_vector_uint_alloc_row_from_matrix =
      _gsl_vector_uint_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_uint> Function(
              ffi.Pointer<gsl_matrix_uint>, int)>();

  ffi.Pointer<gsl_vector_uint> gsl_vector_uint_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_uint> m,
    int j,
  ) {
    return _gsl_vector_uint_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_uint_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_uint> Function(ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_vector_uint_alloc_col_from_matrix');
  late final _gsl_vector_uint_alloc_col_from_matrix =
      _gsl_vector_uint_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_uint> Function(
              ffi.Pointer<gsl_matrix_uint>, int)>();

  void gsl_matrix_uint_free(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_free(
      m,
    );
  }

  late final _gsl_matrix_uint_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_free');
  late final _gsl_matrix_uint_free = _gsl_matrix_uint_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_uint>)>();

  _gsl_matrix_uint_view gsl_matrix_uint_submatrix(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uint_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uint_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_view Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_uint_submatrix');
  late final _gsl_matrix_uint_submatrix =
      _gsl_matrix_uint_submatrixPtr.asFunction<
          _gsl_matrix_uint_view Function(
              ffi.Pointer<gsl_matrix_uint>, int, int, int, int)>();

  _gsl_vector_uint_view gsl_matrix_uint_row(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
  ) {
    return _gsl_matrix_uint_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_uint_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(
              ffi.Pointer<gsl_matrix_uint>, size_t)>>('gsl_matrix_uint_row');
  late final _gsl_matrix_uint_row = _gsl_matrix_uint_rowPtr.asFunction<
      _gsl_vector_uint_view Function(ffi.Pointer<gsl_matrix_uint>, int)>();

  _gsl_vector_uint_view gsl_matrix_uint_column(
    ffi.Pointer<gsl_matrix_uint> m,
    int j,
  ) {
    return _gsl_matrix_uint_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_uint_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(
              ffi.Pointer<gsl_matrix_uint>, size_t)>>('gsl_matrix_uint_column');
  late final _gsl_matrix_uint_column = _gsl_matrix_uint_columnPtr.asFunction<
      _gsl_vector_uint_view Function(ffi.Pointer<gsl_matrix_uint>, int)>();

  _gsl_vector_uint_view gsl_matrix_uint_diagonal(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_diagonal(
      m,
    );
  }

  late final _gsl_matrix_uint_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_diagonal');
  late final _gsl_matrix_uint_diagonal =
      _gsl_matrix_uint_diagonalPtr.asFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<gsl_matrix_uint>)>();

  _gsl_vector_uint_view gsl_matrix_uint_subdiagonal(
    ffi.Pointer<gsl_matrix_uint> m,
    int k,
  ) {
    return _gsl_matrix_uint_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_uint_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_matrix_uint_subdiagonal');
  late final _gsl_matrix_uint_subdiagonal =
      _gsl_matrix_uint_subdiagonalPtr.asFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<gsl_matrix_uint>, int)>();

  _gsl_vector_uint_view gsl_matrix_uint_superdiagonal(
    ffi.Pointer<gsl_matrix_uint> m,
    int k,
  ) {
    return _gsl_matrix_uint_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_uint_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_matrix_uint_superdiagonal');
  late final _gsl_matrix_uint_superdiagonal =
      _gsl_matrix_uint_superdiagonalPtr.asFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<gsl_matrix_uint>, int)>();

  _gsl_vector_uint_view gsl_matrix_uint_subrow(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_uint_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_uint_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              size_t, size_t)>>('gsl_matrix_uint_subrow');
  late final _gsl_matrix_uint_subrow = _gsl_matrix_uint_subrowPtr.asFunction<
      _gsl_vector_uint_view Function(
          ffi.Pointer<gsl_matrix_uint>, int, int, int)>();

  _gsl_vector_uint_view gsl_matrix_uint_subcolumn(
    ffi.Pointer<gsl_matrix_uint> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_uint_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_uint_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_view Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              size_t, size_t)>>('gsl_matrix_uint_subcolumn');
  late final _gsl_matrix_uint_subcolumn =
      _gsl_matrix_uint_subcolumnPtr.asFunction<
          _gsl_vector_uint_view Function(
              ffi.Pointer<gsl_matrix_uint>, int, int, int)>();

  _gsl_matrix_uint_view gsl_matrix_uint_view_array(
    ffi.Pointer<ffi.Uint32> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uint_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uint_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_view Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_matrix_uint_view_array');
  late final _gsl_matrix_uint_view_array =
      _gsl_matrix_uint_view_arrayPtr.asFunction<
          _gsl_matrix_uint_view Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  _gsl_matrix_uint_view gsl_matrix_uint_view_array_with_tda(
    ffi.Pointer<ffi.Uint32> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_uint_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_uint_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_view Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t, size_t)>>('gsl_matrix_uint_view_array_with_tda');
  late final _gsl_matrix_uint_view_array_with_tda =
      _gsl_matrix_uint_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_uint_view Function(
              ffi.Pointer<ffi.Uint32>, int, int, int)>();

  _gsl_matrix_uint_view gsl_matrix_uint_view_vector(
    ffi.Pointer<gsl_vector_uint> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uint_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uint_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_view Function(ffi.Pointer<gsl_vector_uint>, size_t,
              size_t)>>('gsl_matrix_uint_view_vector');
  late final _gsl_matrix_uint_view_vector =
      _gsl_matrix_uint_view_vectorPtr.asFunction<
          _gsl_matrix_uint_view Function(
              ffi.Pointer<gsl_vector_uint>, int, int)>();

  _gsl_matrix_uint_view gsl_matrix_uint_view_vector_with_tda(
    ffi.Pointer<gsl_vector_uint> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_uint_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_uint_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_view Function(ffi.Pointer<gsl_vector_uint>, size_t,
              size_t, size_t)>>('gsl_matrix_uint_view_vector_with_tda');
  late final _gsl_matrix_uint_view_vector_with_tda =
      _gsl_matrix_uint_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_uint_view Function(
              ffi.Pointer<gsl_vector_uint>, int, int, int)>();

  _gsl_matrix_uint_const_view gsl_matrix_uint_const_submatrix(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uint_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uint_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_const_view Function(
              ffi.Pointer<gsl_matrix_uint>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_uint_const_submatrix');
  late final _gsl_matrix_uint_const_submatrix =
      _gsl_matrix_uint_const_submatrixPtr.asFunction<
          _gsl_matrix_uint_const_view Function(
              ffi.Pointer<gsl_matrix_uint>, int, int, int, int)>();

  _gsl_vector_uint_const_view gsl_matrix_uint_const_row(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
  ) {
    return _gsl_matrix_uint_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_uint_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_matrix_uint_const_row');
  late final _gsl_matrix_uint_const_row =
      _gsl_matrix_uint_const_rowPtr.asFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_matrix_uint>, int)>();

  _gsl_vector_uint_const_view gsl_matrix_uint_const_column(
    ffi.Pointer<gsl_matrix_uint> m,
    int j,
  ) {
    return _gsl_matrix_uint_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_uint_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_matrix_uint_const_column');
  late final _gsl_matrix_uint_const_column =
      _gsl_matrix_uint_const_columnPtr.asFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_matrix_uint>, int)>();

  _gsl_vector_uint_const_view gsl_matrix_uint_const_diagonal(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_uint_const_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_const_diagonal');
  late final _gsl_matrix_uint_const_diagonal =
      _gsl_matrix_uint_const_diagonalPtr.asFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<gsl_matrix_uint>)>();

  _gsl_vector_uint_const_view gsl_matrix_uint_const_subdiagonal(
    ffi.Pointer<gsl_matrix_uint> m,
    int k,
  ) {
    return _gsl_matrix_uint_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_uint_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_matrix_uint_const_subdiagonal');
  late final _gsl_matrix_uint_const_subdiagonal =
      _gsl_matrix_uint_const_subdiagonalPtr.asFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_matrix_uint>, int)>();

  _gsl_vector_uint_const_view gsl_matrix_uint_const_superdiagonal(
    ffi.Pointer<gsl_matrix_uint> m,
    int k,
  ) {
    return _gsl_matrix_uint_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_uint_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_matrix_uint_const_superdiagonal');
  late final _gsl_matrix_uint_const_superdiagonal =
      _gsl_matrix_uint_const_superdiagonalPtr.asFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_matrix_uint>, int)>();

  _gsl_vector_uint_const_view gsl_matrix_uint_const_subrow(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_uint_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_uint_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<gsl_matrix_uint>,
              size_t, size_t, size_t)>>('gsl_matrix_uint_const_subrow');
  late final _gsl_matrix_uint_const_subrow =
      _gsl_matrix_uint_const_subrowPtr.asFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_matrix_uint>, int, int, int)>();

  _gsl_vector_uint_const_view gsl_matrix_uint_const_subcolumn(
    ffi.Pointer<gsl_matrix_uint> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_uint_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_uint_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uint_const_view Function(ffi.Pointer<gsl_matrix_uint>,
              size_t, size_t, size_t)>>('gsl_matrix_uint_const_subcolumn');
  late final _gsl_matrix_uint_const_subcolumn =
      _gsl_matrix_uint_const_subcolumnPtr.asFunction<
          _gsl_vector_uint_const_view Function(
              ffi.Pointer<gsl_matrix_uint>, int, int, int)>();

  _gsl_matrix_uint_const_view gsl_matrix_uint_const_view_array(
    ffi.Pointer<ffi.Uint32> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uint_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uint_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_const_view Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_matrix_uint_const_view_array');
  late final _gsl_matrix_uint_const_view_array =
      _gsl_matrix_uint_const_view_arrayPtr.asFunction<
          _gsl_matrix_uint_const_view Function(
              ffi.Pointer<ffi.Uint32>, int, int)>();

  _gsl_matrix_uint_const_view gsl_matrix_uint_const_view_array_with_tda(
    ffi.Pointer<ffi.Uint32> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_uint_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_uint_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_const_view Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t, size_t)>>('gsl_matrix_uint_const_view_array_with_tda');
  late final _gsl_matrix_uint_const_view_array_with_tda =
      _gsl_matrix_uint_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_uint_const_view Function(
              ffi.Pointer<ffi.Uint32>, int, int, int)>();

  _gsl_matrix_uint_const_view gsl_matrix_uint_const_view_vector(
    ffi.Pointer<gsl_vector_uint> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uint_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uint_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_const_view Function(ffi.Pointer<gsl_vector_uint>,
              size_t, size_t)>>('gsl_matrix_uint_const_view_vector');
  late final _gsl_matrix_uint_const_view_vector =
      _gsl_matrix_uint_const_view_vectorPtr.asFunction<
          _gsl_matrix_uint_const_view Function(
              ffi.Pointer<gsl_vector_uint>, int, int)>();

  _gsl_matrix_uint_const_view gsl_matrix_uint_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_uint> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_uint_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_uint_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uint_const_view Function(
              ffi.Pointer<gsl_vector_uint>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_uint_const_view_vector_with_tda');
  late final _gsl_matrix_uint_const_view_vector_with_tda =
      _gsl_matrix_uint_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_uint_const_view Function(
              ffi.Pointer<gsl_vector_uint>, int, int, int)>();

  void gsl_matrix_uint_set_zero(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_set_zero(
      m,
    );
  }

  late final _gsl_matrix_uint_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_set_zero');
  late final _gsl_matrix_uint_set_zero = _gsl_matrix_uint_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_uint>)>();

  void gsl_matrix_uint_set_identity(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_set_identity(
      m,
    );
  }

  late final _gsl_matrix_uint_set_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_set_identity');
  late final _gsl_matrix_uint_set_identity = _gsl_matrix_uint_set_identityPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_uint>)>();

  void gsl_matrix_uint_set_all(
    ffi.Pointer<gsl_matrix_uint> m,
    int x,
  ) {
    return _gsl_matrix_uint_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_uint_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Uint32)>>('gsl_matrix_uint_set_all');
  late final _gsl_matrix_uint_set_all = _gsl_matrix_uint_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_uint>, int)>();

  int gsl_matrix_uint_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_uint_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_fread');
  late final _gsl_matrix_uint_fread = _gsl_matrix_uint_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_uint_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_fwrite');
  late final _gsl_matrix_uint_fwrite = _gsl_matrix_uint_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_uint_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_fscanf');
  late final _gsl_matrix_uint_fscanf = _gsl_matrix_uint_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_uint> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_uint_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_uint_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_uint_fprintf');
  late final _gsl_matrix_uint_fprintf = _gsl_matrix_uint_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uint>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_uint_memcpy(
    ffi.Pointer<gsl_matrix_uint> dest,
    ffi.Pointer<gsl_matrix_uint> src,
  ) {
    return _gsl_matrix_uint_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_uint_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_memcpy');
  late final _gsl_matrix_uint_memcpy = _gsl_matrix_uint_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_swap(
    ffi.Pointer<gsl_matrix_uint> m1,
    ffi.Pointer<gsl_matrix_uint> m2,
  ) {
    return _gsl_matrix_uint_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_uint_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_swap');
  late final _gsl_matrix_uint_swap = _gsl_matrix_uint_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_uint> dest,
    ffi.Pointer<gsl_matrix_uint> src,
  ) {
    return _gsl_matrix_uint_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_uint_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_tricpy');
  late final _gsl_matrix_uint_tricpy = _gsl_matrix_uint_tricpyPtr.asFunction<
      int Function(int, int, ffi.Pointer<gsl_matrix_uint>,
          ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_swap_rows(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uint_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uint_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              size_t)>>('gsl_matrix_uint_swap_rows');
  late final _gsl_matrix_uint_swap_rows = _gsl_matrix_uint_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>, int, int)>();

  int gsl_matrix_uint_swap_columns(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uint_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uint_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              size_t)>>('gsl_matrix_uint_swap_columns');
  late final _gsl_matrix_uint_swap_columns = _gsl_matrix_uint_swap_columnsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>, int, int)>();

  int gsl_matrix_uint_swap_rowcol(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uint_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uint_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              size_t)>>('gsl_matrix_uint_swap_rowcol');
  late final _gsl_matrix_uint_swap_rowcol = _gsl_matrix_uint_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>, int, int)>();

  int gsl_matrix_uint_transpose(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_transpose(
      m,
    );
  }

  late final _gsl_matrix_uint_transposePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_transpose');
  late final _gsl_matrix_uint_transpose = _gsl_matrix_uint_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_transpose_memcpy(
    ffi.Pointer<gsl_matrix_uint> dest,
    ffi.Pointer<gsl_matrix_uint> src,
  ) {
    return _gsl_matrix_uint_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_uint_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_transpose_memcpy');
  late final _gsl_matrix_uint_transpose_memcpy =
      _gsl_matrix_uint_transpose_memcpyPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_uint> dest,
    ffi.Pointer<gsl_matrix_uint> src,
  ) {
    return _gsl_matrix_uint_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_uint_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Int32, ffi.Int32,
                  ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_transpose_tricpy');
  late final _gsl_matrix_uint_transpose_tricpy =
      _gsl_matrix_uint_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_max(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_max(
      m,
    );
  }

  late final _gsl_matrix_uint_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_max');
  late final _gsl_matrix_uint_max = _gsl_matrix_uint_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_min(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_min(
      m,
    );
  }

  late final _gsl_matrix_uint_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_min');
  late final _gsl_matrix_uint_min = _gsl_matrix_uint_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>)>();

  void gsl_matrix_uint_minmax(
    ffi.Pointer<gsl_matrix_uint> m,
    ffi.Pointer<ffi.Uint32> min_out,
    ffi.Pointer<ffi.Uint32> max_out,
  ) {
    return _gsl_matrix_uint_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_uint_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('gsl_matrix_uint_minmax');
  late final _gsl_matrix_uint_minmax = _gsl_matrix_uint_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>)>();

  void gsl_matrix_uint_max_index(
    ffi.Pointer<gsl_matrix_uint> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_uint_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_uint_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_uint_max_index');
  late final _gsl_matrix_uint_max_index =
      _gsl_matrix_uint_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_uint_min_index(
    ffi.Pointer<gsl_matrix_uint> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_uint_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_uint_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_uint_min_index');
  late final _gsl_matrix_uint_min_index =
      _gsl_matrix_uint_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_uint_minmax_index(
    ffi.Pointer<gsl_matrix_uint> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_uint_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_uint_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_uint_minmax_index');
  late final _gsl_matrix_uint_minmax_index =
      _gsl_matrix_uint_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_uint_equal(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_matrix_uint> b,
  ) {
    return _gsl_matrix_uint_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_uint_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_equal');
  late final _gsl_matrix_uint_equal = _gsl_matrix_uint_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_isnull(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_isnull(
      m,
    );
  }

  late final _gsl_matrix_uint_isnullPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_isnull');
  late final _gsl_matrix_uint_isnull = _gsl_matrix_uint_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_ispos(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_ispos(
      m,
    );
  }

  late final _gsl_matrix_uint_isposPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_ispos');
  late final _gsl_matrix_uint_ispos = _gsl_matrix_uint_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_isneg(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_isneg(
      m,
    );
  }

  late final _gsl_matrix_uint_isnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_isneg');
  late final _gsl_matrix_uint_isneg = _gsl_matrix_uint_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_isnonneg(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_uint_isnonnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>)>>(
      'gsl_matrix_uint_isnonneg');
  late final _gsl_matrix_uint_isnonneg = _gsl_matrix_uint_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_norm1(
    ffi.Pointer<gsl_matrix_uint> m,
  ) {
    return _gsl_matrix_uint_norm1(
      m,
    );
  }

  late final _gsl_matrix_uint_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_norm1');
  late final _gsl_matrix_uint_norm1 = _gsl_matrix_uint_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_add(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_matrix_uint> b,
  ) {
    return _gsl_matrix_uint_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_uint_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_add');
  late final _gsl_matrix_uint_add = _gsl_matrix_uint_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_sub(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_matrix_uint> b,
  ) {
    return _gsl_matrix_uint_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_uint_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_sub');
  late final _gsl_matrix_uint_sub = _gsl_matrix_uint_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_mul_elements(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_matrix_uint> b,
  ) {
    return _gsl_matrix_uint_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_uint_mul_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_mul_elements');
  late final _gsl_matrix_uint_mul_elements =
      _gsl_matrix_uint_mul_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_div_elements(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_matrix_uint> b,
  ) {
    return _gsl_matrix_uint_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_uint_div_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_matrix_uint_div_elements');
  late final _gsl_matrix_uint_div_elements =
      _gsl_matrix_uint_div_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_matrix_uint_scale(
    ffi.Pointer<gsl_matrix_uint> a,
    int x,
  ) {
    return _gsl_matrix_uint_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_uint_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Uint32)>>('gsl_matrix_uint_scale');
  late final _gsl_matrix_uint_scale = _gsl_matrix_uint_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>, int)>();

  int gsl_matrix_uint_scale_rows(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_vector_uint> x,
  ) {
    return _gsl_matrix_uint_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_uint_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_matrix_uint_scale_rows');
  late final _gsl_matrix_uint_scale_rows =
      _gsl_matrix_uint_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_matrix_uint_scale_columns(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_vector_uint> x,
  ) {
    return _gsl_matrix_uint_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_uint_scale_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_matrix_uint_scale_columns');
  late final _gsl_matrix_uint_scale_columns =
      _gsl_matrix_uint_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_matrix_uint_add_constant(
    ffi.Pointer<gsl_matrix_uint> a,
    int x,
  ) {
    return _gsl_matrix_uint_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_uint_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Uint32)>>('gsl_matrix_uint_add_constant');
  late final _gsl_matrix_uint_add_constant = _gsl_matrix_uint_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>, int)>();

  int gsl_matrix_uint_add_diagonal(
    ffi.Pointer<gsl_matrix_uint> a,
    int x,
  ) {
    return _gsl_matrix_uint_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_uint_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Uint32)>>('gsl_matrix_uint_add_diagonal');
  late final _gsl_matrix_uint_add_diagonal = _gsl_matrix_uint_add_diagonalPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>, int)>();

  int gsl_matrix_uint_get_row(
    ffi.Pointer<gsl_vector_uint> v,
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
  ) {
    return _gsl_matrix_uint_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_uint_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_matrix_uint_get_row');
  late final _gsl_matrix_uint_get_row = _gsl_matrix_uint_get_rowPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_matrix_uint>, int)>();

  int gsl_matrix_uint_get_col(
    ffi.Pointer<gsl_vector_uint> v,
    ffi.Pointer<gsl_matrix_uint> m,
    int j,
  ) {
    return _gsl_matrix_uint_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_uint_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_matrix_uint>,
              size_t)>>('gsl_matrix_uint_get_col');
  late final _gsl_matrix_uint_get_col = _gsl_matrix_uint_get_colPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_matrix_uint>, int)>();

  int gsl_matrix_uint_set_row(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_matrix_uint_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_uint_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_matrix_uint_set_row');
  late final _gsl_matrix_uint_set_row = _gsl_matrix_uint_set_rowPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uint>, int, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_matrix_uint_set_col(
    ffi.Pointer<gsl_matrix_uint> m,
    int j,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_matrix_uint_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_uint_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_matrix_uint_set_col');
  late final _gsl_matrix_uint_set_col = _gsl_matrix_uint_set_colPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uint>, int, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_matrix_uint_get(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uint_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uint_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              size_t)>>('gsl_matrix_uint_get');
  late final _gsl_matrix_uint_get = _gsl_matrix_uint_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uint>, int, int)>();

  void gsl_matrix_uint_set(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_matrix_uint_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_uint_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_uint>, size_t, size_t,
              ffi.Uint32)>>('gsl_matrix_uint_set');
  late final _gsl_matrix_uint_set = _gsl_matrix_uint_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_uint>, int, int, int)>();

  ffi.Pointer<ffi.Uint32> gsl_matrix_uint_ptr(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uint_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uint_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              size_t)>>('gsl_matrix_uint_ptr');
  late final _gsl_matrix_uint_ptr = _gsl_matrix_uint_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint32> Function(
          ffi.Pointer<gsl_matrix_uint>, int, int)>();

  ffi.Pointer<ffi.Uint32> gsl_matrix_uint_const_ptr(
    ffi.Pointer<gsl_matrix_uint> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uint_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uint_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<gsl_matrix_uint>, size_t,
              size_t)>>('gsl_matrix_uint_const_ptr');
  late final _gsl_matrix_uint_const_ptr =
      _gsl_matrix_uint_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<gsl_matrix_uint>, int, int)>();

  ffi.Pointer<gsl_matrix_int> gsl_matrix_int_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_int_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_int_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_int> Function(
              size_t, size_t)>>('gsl_matrix_int_alloc');
  late final _gsl_matrix_int_alloc = _gsl_matrix_int_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_int> Function(int, int)>();

  ffi.Pointer<gsl_matrix_int> gsl_matrix_int_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_int_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_int_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_int> Function(
              size_t, size_t)>>('gsl_matrix_int_calloc');
  late final _gsl_matrix_int_calloc = _gsl_matrix_int_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_int> Function(int, int)>();

  ffi.Pointer<gsl_matrix_int> gsl_matrix_int_alloc_from_block(
    ffi.Pointer<gsl_block_int> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_int_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_int_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_int> Function(
              ffi.Pointer<gsl_block_int>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_int_alloc_from_block');
  late final _gsl_matrix_int_alloc_from_block =
      _gsl_matrix_int_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_int> Function(
              ffi.Pointer<gsl_block_int>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_int> gsl_matrix_int_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_int> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_int_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_int_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_int> Function(
              ffi.Pointer<gsl_matrix_int>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_int_alloc_from_matrix');
  late final _gsl_matrix_int_alloc_from_matrix =
      _gsl_matrix_int_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_int> Function(
              ffi.Pointer<gsl_matrix_int>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_int> gsl_vector_int_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
  ) {
    return _gsl_vector_int_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_int_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_int> Function(ffi.Pointer<gsl_matrix_int>,
              size_t)>>('gsl_vector_int_alloc_row_from_matrix');
  late final _gsl_vector_int_alloc_row_from_matrix =
      _gsl_vector_int_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_int> Function(
              ffi.Pointer<gsl_matrix_int>, int)>();

  ffi.Pointer<gsl_vector_int> gsl_vector_int_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_int> m,
    int j,
  ) {
    return _gsl_vector_int_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_int_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_int> Function(ffi.Pointer<gsl_matrix_int>,
              size_t)>>('gsl_vector_int_alloc_col_from_matrix');
  late final _gsl_vector_int_alloc_col_from_matrix =
      _gsl_vector_int_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_int> Function(
              ffi.Pointer<gsl_matrix_int>, int)>();

  void gsl_matrix_int_free(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_free(
      m,
    );
  }

  late final _gsl_matrix_int_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_free');
  late final _gsl_matrix_int_free = _gsl_matrix_int_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_int>)>();

  _gsl_matrix_int_view gsl_matrix_int_submatrix(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_int_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_int_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_view Function(ffi.Pointer<gsl_matrix_int>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_int_submatrix');
  late final _gsl_matrix_int_submatrix =
      _gsl_matrix_int_submatrixPtr.asFunction<
          _gsl_matrix_int_view Function(
              ffi.Pointer<gsl_matrix_int>, int, int, int, int)>();

  _gsl_vector_int_view gsl_matrix_int_row(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
  ) {
    return _gsl_matrix_int_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_int_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(
              ffi.Pointer<gsl_matrix_int>, size_t)>>('gsl_matrix_int_row');
  late final _gsl_matrix_int_row = _gsl_matrix_int_rowPtr.asFunction<
      _gsl_vector_int_view Function(ffi.Pointer<gsl_matrix_int>, int)>();

  _gsl_vector_int_view gsl_matrix_int_column(
    ffi.Pointer<gsl_matrix_int> m,
    int j,
  ) {
    return _gsl_matrix_int_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_int_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(
              ffi.Pointer<gsl_matrix_int>, size_t)>>('gsl_matrix_int_column');
  late final _gsl_matrix_int_column = _gsl_matrix_int_columnPtr.asFunction<
      _gsl_vector_int_view Function(ffi.Pointer<gsl_matrix_int>, int)>();

  _gsl_vector_int_view gsl_matrix_int_diagonal(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_diagonal(
      m,
    );
  }

  late final _gsl_matrix_int_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_diagonal');
  late final _gsl_matrix_int_diagonal = _gsl_matrix_int_diagonalPtr
      .asFunction<_gsl_vector_int_view Function(ffi.Pointer<gsl_matrix_int>)>();

  _gsl_vector_int_view gsl_matrix_int_subdiagonal(
    ffi.Pointer<gsl_matrix_int> m,
    int k,
  ) {
    return _gsl_matrix_int_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_int_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(ffi.Pointer<gsl_matrix_int>,
              size_t)>>('gsl_matrix_int_subdiagonal');
  late final _gsl_matrix_int_subdiagonal =
      _gsl_matrix_int_subdiagonalPtr.asFunction<
          _gsl_vector_int_view Function(ffi.Pointer<gsl_matrix_int>, int)>();

  _gsl_vector_int_view gsl_matrix_int_superdiagonal(
    ffi.Pointer<gsl_matrix_int> m,
    int k,
  ) {
    return _gsl_matrix_int_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_int_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(ffi.Pointer<gsl_matrix_int>,
              size_t)>>('gsl_matrix_int_superdiagonal');
  late final _gsl_matrix_int_superdiagonal =
      _gsl_matrix_int_superdiagonalPtr.asFunction<
          _gsl_vector_int_view Function(ffi.Pointer<gsl_matrix_int>, int)>();

  _gsl_vector_int_view gsl_matrix_int_subrow(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_int_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_int_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(ffi.Pointer<gsl_matrix_int>, size_t,
              size_t, size_t)>>('gsl_matrix_int_subrow');
  late final _gsl_matrix_int_subrow = _gsl_matrix_int_subrowPtr.asFunction<
      _gsl_vector_int_view Function(
          ffi.Pointer<gsl_matrix_int>, int, int, int)>();

  _gsl_vector_int_view gsl_matrix_int_subcolumn(
    ffi.Pointer<gsl_matrix_int> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_int_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_int_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_view Function(ffi.Pointer<gsl_matrix_int>, size_t,
              size_t, size_t)>>('gsl_matrix_int_subcolumn');
  late final _gsl_matrix_int_subcolumn =
      _gsl_matrix_int_subcolumnPtr.asFunction<
          _gsl_vector_int_view Function(
              ffi.Pointer<gsl_matrix_int>, int, int, int)>();

  _gsl_matrix_int_view gsl_matrix_int_view_array(
    ffi.Pointer<ffi.Int32> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_int_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_int_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_view Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_matrix_int_view_array');
  late final _gsl_matrix_int_view_array =
      _gsl_matrix_int_view_arrayPtr.asFunction<
          _gsl_matrix_int_view Function(ffi.Pointer<ffi.Int32>, int, int)>();

  _gsl_matrix_int_view gsl_matrix_int_view_array_with_tda(
    ffi.Pointer<ffi.Int32> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_int_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_int_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_view Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              size_t)>>('gsl_matrix_int_view_array_with_tda');
  late final _gsl_matrix_int_view_array_with_tda =
      _gsl_matrix_int_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_int_view Function(
              ffi.Pointer<ffi.Int32>, int, int, int)>();

  _gsl_matrix_int_view gsl_matrix_int_view_vector(
    ffi.Pointer<gsl_vector_int> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_int_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_int_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_view Function(ffi.Pointer<gsl_vector_int>, size_t,
              size_t)>>('gsl_matrix_int_view_vector');
  late final _gsl_matrix_int_view_vector =
      _gsl_matrix_int_view_vectorPtr.asFunction<
          _gsl_matrix_int_view Function(
              ffi.Pointer<gsl_vector_int>, int, int)>();

  _gsl_matrix_int_view gsl_matrix_int_view_vector_with_tda(
    ffi.Pointer<gsl_vector_int> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_int_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_int_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_view Function(ffi.Pointer<gsl_vector_int>, size_t,
              size_t, size_t)>>('gsl_matrix_int_view_vector_with_tda');
  late final _gsl_matrix_int_view_vector_with_tda =
      _gsl_matrix_int_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_int_view Function(
              ffi.Pointer<gsl_vector_int>, int, int, int)>();

  _gsl_matrix_int_const_view gsl_matrix_int_const_submatrix(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_int_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_int_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_const_view Function(
              ffi.Pointer<gsl_matrix_int>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_int_const_submatrix');
  late final _gsl_matrix_int_const_submatrix =
      _gsl_matrix_int_const_submatrixPtr.asFunction<
          _gsl_matrix_int_const_view Function(
              ffi.Pointer<gsl_matrix_int>, int, int, int, int)>();

  _gsl_vector_int_const_view gsl_matrix_int_const_row(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
  ) {
    return _gsl_matrix_int_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_int_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<gsl_matrix_int>,
              size_t)>>('gsl_matrix_int_const_row');
  late final _gsl_matrix_int_const_row =
      _gsl_matrix_int_const_rowPtr.asFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_matrix_int>, int)>();

  _gsl_vector_int_const_view gsl_matrix_int_const_column(
    ffi.Pointer<gsl_matrix_int> m,
    int j,
  ) {
    return _gsl_matrix_int_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_int_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<gsl_matrix_int>,
              size_t)>>('gsl_matrix_int_const_column');
  late final _gsl_matrix_int_const_column =
      _gsl_matrix_int_const_columnPtr.asFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_matrix_int>, int)>();

  _gsl_vector_int_const_view gsl_matrix_int_const_diagonal(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_int_const_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_const_diagonal');
  late final _gsl_matrix_int_const_diagonal =
      _gsl_matrix_int_const_diagonalPtr.asFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<gsl_matrix_int>)>();

  _gsl_vector_int_const_view gsl_matrix_int_const_subdiagonal(
    ffi.Pointer<gsl_matrix_int> m,
    int k,
  ) {
    return _gsl_matrix_int_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_int_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<gsl_matrix_int>,
              size_t)>>('gsl_matrix_int_const_subdiagonal');
  late final _gsl_matrix_int_const_subdiagonal =
      _gsl_matrix_int_const_subdiagonalPtr.asFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_matrix_int>, int)>();

  _gsl_vector_int_const_view gsl_matrix_int_const_superdiagonal(
    ffi.Pointer<gsl_matrix_int> m,
    int k,
  ) {
    return _gsl_matrix_int_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_int_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<gsl_matrix_int>,
              size_t)>>('gsl_matrix_int_const_superdiagonal');
  late final _gsl_matrix_int_const_superdiagonal =
      _gsl_matrix_int_const_superdiagonalPtr.asFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_matrix_int>, int)>();

  _gsl_vector_int_const_view gsl_matrix_int_const_subrow(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_int_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_int_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<gsl_matrix_int>,
              size_t, size_t, size_t)>>('gsl_matrix_int_const_subrow');
  late final _gsl_matrix_int_const_subrow =
      _gsl_matrix_int_const_subrowPtr.asFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_matrix_int>, int, int, int)>();

  _gsl_vector_int_const_view gsl_matrix_int_const_subcolumn(
    ffi.Pointer<gsl_matrix_int> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_int_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_int_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_int_const_view Function(ffi.Pointer<gsl_matrix_int>,
              size_t, size_t, size_t)>>('gsl_matrix_int_const_subcolumn');
  late final _gsl_matrix_int_const_subcolumn =
      _gsl_matrix_int_const_subcolumnPtr.asFunction<
          _gsl_vector_int_const_view Function(
              ffi.Pointer<gsl_matrix_int>, int, int, int)>();

  _gsl_matrix_int_const_view gsl_matrix_int_const_view_array(
    ffi.Pointer<ffi.Int32> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_int_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_int_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_const_view Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_matrix_int_const_view_array');
  late final _gsl_matrix_int_const_view_array =
      _gsl_matrix_int_const_view_arrayPtr.asFunction<
          _gsl_matrix_int_const_view Function(
              ffi.Pointer<ffi.Int32>, int, int)>();

  _gsl_matrix_int_const_view gsl_matrix_int_const_view_array_with_tda(
    ffi.Pointer<ffi.Int32> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_int_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_int_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_const_view Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t, size_t)>>('gsl_matrix_int_const_view_array_with_tda');
  late final _gsl_matrix_int_const_view_array_with_tda =
      _gsl_matrix_int_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_int_const_view Function(
              ffi.Pointer<ffi.Int32>, int, int, int)>();

  _gsl_matrix_int_const_view gsl_matrix_int_const_view_vector(
    ffi.Pointer<gsl_vector_int> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_int_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_int_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_const_view Function(ffi.Pointer<gsl_vector_int>,
              size_t, size_t)>>('gsl_matrix_int_const_view_vector');
  late final _gsl_matrix_int_const_view_vector =
      _gsl_matrix_int_const_view_vectorPtr.asFunction<
          _gsl_matrix_int_const_view Function(
              ffi.Pointer<gsl_vector_int>, int, int)>();

  _gsl_matrix_int_const_view gsl_matrix_int_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_int> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_int_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_int_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_int_const_view Function(
              ffi.Pointer<gsl_vector_int>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_int_const_view_vector_with_tda');
  late final _gsl_matrix_int_const_view_vector_with_tda =
      _gsl_matrix_int_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_int_const_view Function(
              ffi.Pointer<gsl_vector_int>, int, int, int)>();

  void gsl_matrix_int_set_zero(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_set_zero(
      m,
    );
  }

  late final _gsl_matrix_int_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_set_zero');
  late final _gsl_matrix_int_set_zero = _gsl_matrix_int_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_int>)>();

  void gsl_matrix_int_set_identity(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_set_identity(
      m,
    );
  }

  late final _gsl_matrix_int_set_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_set_identity');
  late final _gsl_matrix_int_set_identity = _gsl_matrix_int_set_identityPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_int>)>();

  void gsl_matrix_int_set_all(
    ffi.Pointer<gsl_matrix_int> m,
    int x,
  ) {
    return _gsl_matrix_int_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_int_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Int32)>>('gsl_matrix_int_set_all');
  late final _gsl_matrix_int_set_all = _gsl_matrix_int_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_int>, int)>();

  int gsl_matrix_int_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_int_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_fread');
  late final _gsl_matrix_int_fread = _gsl_matrix_int_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_int_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_fwrite');
  late final _gsl_matrix_int_fwrite = _gsl_matrix_int_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_int_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_fscanf');
  late final _gsl_matrix_int_fscanf = _gsl_matrix_int_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_int> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_int_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_int_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_int_fprintf');
  late final _gsl_matrix_int_fprintf = _gsl_matrix_int_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_int>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_int_memcpy(
    ffi.Pointer<gsl_matrix_int> dest,
    ffi.Pointer<gsl_matrix_int> src,
  ) {
    return _gsl_matrix_int_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_int_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_memcpy');
  late final _gsl_matrix_int_memcpy = _gsl_matrix_int_memcpyPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_swap(
    ffi.Pointer<gsl_matrix_int> m1,
    ffi.Pointer<gsl_matrix_int> m2,
  ) {
    return _gsl_matrix_int_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_int_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_swap');
  late final _gsl_matrix_int_swap = _gsl_matrix_int_swapPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_int> dest,
    ffi.Pointer<gsl_matrix_int> src,
  ) {
    return _gsl_matrix_int_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_int_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_tricpy');
  late final _gsl_matrix_int_tricpy = _gsl_matrix_int_tricpyPtr.asFunction<
      int Function(int, int, ffi.Pointer<gsl_matrix_int>,
          ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_swap_rows(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_int_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_int_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>, size_t,
              size_t)>>('gsl_matrix_int_swap_rows');
  late final _gsl_matrix_int_swap_rows = _gsl_matrix_int_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>, int, int)>();

  int gsl_matrix_int_swap_columns(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_int_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_int_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>, size_t,
              size_t)>>('gsl_matrix_int_swap_columns');
  late final _gsl_matrix_int_swap_columns = _gsl_matrix_int_swap_columnsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>, int, int)>();

  int gsl_matrix_int_swap_rowcol(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_int_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_int_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>, size_t,
              size_t)>>('gsl_matrix_int_swap_rowcol');
  late final _gsl_matrix_int_swap_rowcol = _gsl_matrix_int_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>, int, int)>();

  int gsl_matrix_int_transpose(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_transpose(
      m,
    );
  }

  late final _gsl_matrix_int_transposePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_transpose');
  late final _gsl_matrix_int_transpose = _gsl_matrix_int_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_transpose_memcpy(
    ffi.Pointer<gsl_matrix_int> dest,
    ffi.Pointer<gsl_matrix_int> src,
  ) {
    return _gsl_matrix_int_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_int_transpose_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_transpose_memcpy');
  late final _gsl_matrix_int_transpose_memcpy =
      _gsl_matrix_int_transpose_memcpyPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_int> dest,
    ffi.Pointer<gsl_matrix_int> src,
  ) {
    return _gsl_matrix_int_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_int_transpose_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_transpose_tricpy');
  late final _gsl_matrix_int_transpose_tricpy =
      _gsl_matrix_int_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_max(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_max(
      m,
    );
  }

  late final _gsl_matrix_int_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_max');
  late final _gsl_matrix_int_max = _gsl_matrix_int_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_min(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_min(
      m,
    );
  }

  late final _gsl_matrix_int_minPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_min');
  late final _gsl_matrix_int_min = _gsl_matrix_int_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>)>();

  void gsl_matrix_int_minmax(
    ffi.Pointer<gsl_matrix_int> m,
    ffi.Pointer<ffi.Int32> min_out,
    ffi.Pointer<ffi.Int32> max_out,
  ) {
    return _gsl_matrix_int_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_int_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('gsl_matrix_int_minmax');
  late final _gsl_matrix_int_minmax = _gsl_matrix_int_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  void gsl_matrix_int_max_index(
    ffi.Pointer<gsl_matrix_int> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_int_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_int_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_int_max_index');
  late final _gsl_matrix_int_max_index =
      _gsl_matrix_int_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_int_min_index(
    ffi.Pointer<gsl_matrix_int> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_int_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_int_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_int_min_index');
  late final _gsl_matrix_int_min_index =
      _gsl_matrix_int_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_int_minmax_index(
    ffi.Pointer<gsl_matrix_int> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_int_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_int_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_int_minmax_index');
  late final _gsl_matrix_int_minmax_index =
      _gsl_matrix_int_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_int_equal(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_matrix_int> b,
  ) {
    return _gsl_matrix_int_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_int_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_equal');
  late final _gsl_matrix_int_equal = _gsl_matrix_int_equalPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_isnull(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_isnull(
      m,
    );
  }

  late final _gsl_matrix_int_isnullPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_isnull');
  late final _gsl_matrix_int_isnull = _gsl_matrix_int_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_ispos(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_ispos(
      m,
    );
  }

  late final _gsl_matrix_int_isposPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_ispos');
  late final _gsl_matrix_int_ispos = _gsl_matrix_int_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_isneg(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_isneg(
      m,
    );
  }

  late final _gsl_matrix_int_isnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_isneg');
  late final _gsl_matrix_int_isneg = _gsl_matrix_int_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_isnonneg(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_int_isnonnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_isnonneg');
  late final _gsl_matrix_int_isnonneg = _gsl_matrix_int_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_norm1(
    ffi.Pointer<gsl_matrix_int> m,
  ) {
    return _gsl_matrix_int_norm1(
      m,
    );
  }

  late final _gsl_matrix_int_norm1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>)>>(
      'gsl_matrix_int_norm1');
  late final _gsl_matrix_int_norm1 = _gsl_matrix_int_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_add(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_matrix_int> b,
  ) {
    return _gsl_matrix_int_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_int_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_add');
  late final _gsl_matrix_int_add = _gsl_matrix_int_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_sub(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_matrix_int> b,
  ) {
    return _gsl_matrix_int_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_int_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_sub');
  late final _gsl_matrix_int_sub = _gsl_matrix_int_subPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_mul_elements(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_matrix_int> b,
  ) {
    return _gsl_matrix_int_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_int_mul_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_mul_elements');
  late final _gsl_matrix_int_mul_elements =
      _gsl_matrix_int_mul_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_div_elements(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_matrix_int> b,
  ) {
    return _gsl_matrix_int_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_int_div_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_matrix_int_div_elements');
  late final _gsl_matrix_int_div_elements =
      _gsl_matrix_int_div_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_matrix_int_scale(
    ffi.Pointer<gsl_matrix_int> a,
    int x,
  ) {
    return _gsl_matrix_int_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_int_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_int>, ffi.Int32)>>('gsl_matrix_int_scale');
  late final _gsl_matrix_int_scale = _gsl_matrix_int_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>, int)>();

  int gsl_matrix_int_scale_rows(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_vector_int> x,
  ) {
    return _gsl_matrix_int_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_int_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_matrix_int_scale_rows');
  late final _gsl_matrix_int_scale_rows =
      _gsl_matrix_int_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_matrix_int_scale_columns(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_vector_int> x,
  ) {
    return _gsl_matrix_int_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_int_scale_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_matrix_int_scale_columns');
  late final _gsl_matrix_int_scale_columns =
      _gsl_matrix_int_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_matrix_int_add_constant(
    ffi.Pointer<gsl_matrix_int> a,
    int x,
  ) {
    return _gsl_matrix_int_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_int_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Int32)>>('gsl_matrix_int_add_constant');
  late final _gsl_matrix_int_add_constant = _gsl_matrix_int_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>, int)>();

  int gsl_matrix_int_add_diagonal(
    ffi.Pointer<gsl_matrix_int> a,
    int x,
  ) {
    return _gsl_matrix_int_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_int_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Int32)>>('gsl_matrix_int_add_diagonal');
  late final _gsl_matrix_int_add_diagonal = _gsl_matrix_int_add_diagonalPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>, int)>();

  int gsl_matrix_int_get_row(
    ffi.Pointer<gsl_vector_int> v,
    ffi.Pointer<gsl_matrix_int> m,
    int i,
  ) {
    return _gsl_matrix_int_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_int_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_matrix_int>, size_t)>>('gsl_matrix_int_get_row');
  late final _gsl_matrix_int_get_row = _gsl_matrix_int_get_rowPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_matrix_int>, int)>();

  int gsl_matrix_int_get_col(
    ffi.Pointer<gsl_vector_int> v,
    ffi.Pointer<gsl_matrix_int> m,
    int j,
  ) {
    return _gsl_matrix_int_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_int_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_matrix_int>, size_t)>>('gsl_matrix_int_get_col');
  late final _gsl_matrix_int_get_col = _gsl_matrix_int_get_colPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_matrix_int>, int)>();

  int gsl_matrix_int_set_row(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_matrix_int_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_int_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>, size_t,
              ffi.Pointer<gsl_vector_int>)>>('gsl_matrix_int_set_row');
  late final _gsl_matrix_int_set_row = _gsl_matrix_int_set_rowPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_int>, int, ffi.Pointer<gsl_vector_int>)>();

  int gsl_matrix_int_set_col(
    ffi.Pointer<gsl_matrix_int> m,
    int j,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_matrix_int_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_int_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>, size_t,
              ffi.Pointer<gsl_vector_int>)>>('gsl_matrix_int_set_col');
  late final _gsl_matrix_int_set_col = _gsl_matrix_int_set_colPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_int>, int, ffi.Pointer<gsl_vector_int>)>();

  int gsl_matrix_int_get(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_int_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_int_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>, size_t,
              size_t)>>('gsl_matrix_int_get');
  late final _gsl_matrix_int_get = _gsl_matrix_int_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_int>, int, int)>();

  void gsl_matrix_int_set(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_matrix_int_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_int_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_int>, size_t, size_t,
              ffi.Int32)>>('gsl_matrix_int_set');
  late final _gsl_matrix_int_set = _gsl_matrix_int_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_int>, int, int, int)>();

  ffi.Pointer<ffi.Int32> gsl_matrix_int_ptr(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_int_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_int_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Pointer<gsl_matrix_int>, size_t,
              size_t)>>('gsl_matrix_int_ptr');
  late final _gsl_matrix_int_ptr = _gsl_matrix_int_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function(ffi.Pointer<gsl_matrix_int>, int, int)>();

  ffi.Pointer<ffi.Int32> gsl_matrix_int_const_ptr(
    ffi.Pointer<gsl_matrix_int> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_int_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_int_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Pointer<gsl_matrix_int>, size_t,
              size_t)>>('gsl_matrix_int_const_ptr');
  late final _gsl_matrix_int_const_ptr =
      _gsl_matrix_int_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Int32> Function(
              ffi.Pointer<gsl_matrix_int>, int, int)>();

  ffi.Pointer<gsl_matrix_ushort> gsl_matrix_ushort_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ushort_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ushort_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_ushort> Function(
              size_t, size_t)>>('gsl_matrix_ushort_alloc');
  late final _gsl_matrix_ushort_alloc = _gsl_matrix_ushort_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_ushort> Function(int, int)>();

  ffi.Pointer<gsl_matrix_ushort> gsl_matrix_ushort_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ushort_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ushort_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_ushort> Function(
              size_t, size_t)>>('gsl_matrix_ushort_calloc');
  late final _gsl_matrix_ushort_calloc = _gsl_matrix_ushort_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_ushort> Function(int, int)>();

  ffi.Pointer<gsl_matrix_ushort> gsl_matrix_ushort_alloc_from_block(
    ffi.Pointer<gsl_block_ushort> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_ushort_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_ushort_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_ushort> Function(
              ffi.Pointer<gsl_block_ushort>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ushort_alloc_from_block');
  late final _gsl_matrix_ushort_alloc_from_block =
      _gsl_matrix_ushort_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_ushort> Function(
              ffi.Pointer<gsl_block_ushort>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_ushort> gsl_matrix_ushort_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_ushort> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ushort_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ushort_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_ushort> Function(
              ffi.Pointer<gsl_matrix_ushort>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ushort_alloc_from_matrix');
  late final _gsl_matrix_ushort_alloc_from_matrix =
      _gsl_matrix_ushort_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_ushort> Function(
              ffi.Pointer<gsl_matrix_ushort>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_ushort> gsl_vector_ushort_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
  ) {
    return _gsl_vector_ushort_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_ushort_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_ushort> Function(
              ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_vector_ushort_alloc_row_from_matrix');
  late final _gsl_vector_ushort_alloc_row_from_matrix =
      _gsl_vector_ushort_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_ushort> Function(
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  ffi.Pointer<gsl_vector_ushort> gsl_vector_ushort_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_ushort> m,
    int j,
  ) {
    return _gsl_vector_ushort_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_ushort_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_ushort> Function(
              ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_vector_ushort_alloc_col_from_matrix');
  late final _gsl_vector_ushort_alloc_col_from_matrix =
      _gsl_vector_ushort_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_ushort> Function(
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  void gsl_matrix_ushort_free(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_free(
      m,
    );
  }

  late final _gsl_matrix_ushort_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_free');
  late final _gsl_matrix_ushort_free = _gsl_matrix_ushort_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_ushort>)>();

  _gsl_matrix_ushort_view gsl_matrix_ushort_submatrix(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ushort_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ushort_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t, size_t, size_t, size_t)>>('gsl_matrix_ushort_submatrix');
  late final _gsl_matrix_ushort_submatrix =
      _gsl_matrix_ushort_submatrixPtr.asFunction<
          _gsl_matrix_ushort_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int, int, int, int)>();

  _gsl_vector_ushort_view gsl_matrix_ushort_row(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
  ) {
    return _gsl_matrix_ushort_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_ushort_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_row');
  late final _gsl_matrix_ushort_row = _gsl_matrix_ushort_rowPtr.asFunction<
      _gsl_vector_ushort_view Function(ffi.Pointer<gsl_matrix_ushort>, int)>();

  _gsl_vector_ushort_view gsl_matrix_ushort_column(
    ffi.Pointer<gsl_matrix_ushort> m,
    int j,
  ) {
    return _gsl_matrix_ushort_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_ushort_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_column');
  late final _gsl_matrix_ushort_column =
      _gsl_matrix_ushort_columnPtr.asFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  _gsl_vector_ushort_view gsl_matrix_ushort_diagonal(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_diagonal(
      m,
    );
  }

  late final _gsl_matrix_ushort_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_diagonal');
  late final _gsl_matrix_ushort_diagonal =
      _gsl_matrix_ushort_diagonalPtr.asFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<gsl_matrix_ushort>)>();

  _gsl_vector_ushort_view gsl_matrix_ushort_subdiagonal(
    ffi.Pointer<gsl_matrix_ushort> m,
    int k,
  ) {
    return _gsl_matrix_ushort_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_ushort_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_subdiagonal');
  late final _gsl_matrix_ushort_subdiagonal =
      _gsl_matrix_ushort_subdiagonalPtr.asFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  _gsl_vector_ushort_view gsl_matrix_ushort_superdiagonal(
    ffi.Pointer<gsl_matrix_ushort> m,
    int k,
  ) {
    return _gsl_matrix_ushort_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_ushort_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_superdiagonal');
  late final _gsl_matrix_ushort_superdiagonal =
      _gsl_matrix_ushort_superdiagonalPtr.asFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  _gsl_vector_ushort_view gsl_matrix_ushort_subrow(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_ushort_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_ushort_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t, size_t, size_t)>>('gsl_matrix_ushort_subrow');
  late final _gsl_matrix_ushort_subrow =
      _gsl_matrix_ushort_subrowPtr.asFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int, int, int)>();

  _gsl_vector_ushort_view gsl_matrix_ushort_subcolumn(
    ffi.Pointer<gsl_matrix_ushort> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_ushort_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_ushort_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t, size_t, size_t)>>('gsl_matrix_ushort_subcolumn');
  late final _gsl_matrix_ushort_subcolumn =
      _gsl_matrix_ushort_subcolumnPtr.asFunction<
          _gsl_vector_ushort_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int, int, int)>();

  _gsl_matrix_ushort_view gsl_matrix_ushort_view_array(
    ffi.Pointer<ffi.Uint16> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ushort_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ushort_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_view Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_matrix_ushort_view_array');
  late final _gsl_matrix_ushort_view_array =
      _gsl_matrix_ushort_view_arrayPtr.asFunction<
          _gsl_matrix_ushort_view Function(
              ffi.Pointer<ffi.Uint16>, int, int)>();

  _gsl_matrix_ushort_view gsl_matrix_ushort_view_array_with_tda(
    ffi.Pointer<ffi.Uint16> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_ushort_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_ushort_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_view Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t, size_t)>>('gsl_matrix_ushort_view_array_with_tda');
  late final _gsl_matrix_ushort_view_array_with_tda =
      _gsl_matrix_ushort_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_ushort_view Function(
              ffi.Pointer<ffi.Uint16>, int, int, int)>();

  _gsl_matrix_ushort_view gsl_matrix_ushort_view_vector(
    ffi.Pointer<gsl_vector_ushort> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ushort_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ushort_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_view Function(ffi.Pointer<gsl_vector_ushort>,
              size_t, size_t)>>('gsl_matrix_ushort_view_vector');
  late final _gsl_matrix_ushort_view_vector =
      _gsl_matrix_ushort_view_vectorPtr.asFunction<
          _gsl_matrix_ushort_view Function(
              ffi.Pointer<gsl_vector_ushort>, int, int)>();

  _gsl_matrix_ushort_view gsl_matrix_ushort_view_vector_with_tda(
    ffi.Pointer<gsl_vector_ushort> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_ushort_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_ushort_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_view Function(
              ffi.Pointer<gsl_vector_ushort>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ushort_view_vector_with_tda');
  late final _gsl_matrix_ushort_view_vector_with_tda =
      _gsl_matrix_ushort_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_ushort_view Function(
              ffi.Pointer<gsl_vector_ushort>, int, int, int)>();

  _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_submatrix(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ushort_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ushort_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_const_view Function(
              ffi.Pointer<gsl_matrix_ushort>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ushort_const_submatrix');
  late final _gsl_matrix_ushort_const_submatrix =
      _gsl_matrix_ushort_const_submatrixPtr.asFunction<
          _gsl_matrix_ushort_const_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int, int, int, int)>();

  _gsl_vector_ushort_const_view gsl_matrix_ushort_const_row(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
  ) {
    return _gsl_matrix_ushort_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_ushort_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_const_row');
  late final _gsl_matrix_ushort_const_row =
      _gsl_matrix_ushort_const_rowPtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  _gsl_vector_ushort_const_view gsl_matrix_ushort_const_column(
    ffi.Pointer<gsl_matrix_ushort> m,
    int j,
  ) {
    return _gsl_matrix_ushort_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_ushort_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_const_column');
  late final _gsl_matrix_ushort_const_column =
      _gsl_matrix_ushort_const_columnPtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  _gsl_vector_ushort_const_view gsl_matrix_ushort_const_diagonal(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_ushort_const_diagonalPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_ushort_const_view Function(
                  ffi.Pointer<gsl_matrix_ushort>)>>(
      'gsl_matrix_ushort_const_diagonal');
  late final _gsl_matrix_ushort_const_diagonal =
      _gsl_matrix_ushort_const_diagonalPtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_matrix_ushort>)>();

  _gsl_vector_ushort_const_view gsl_matrix_ushort_const_subdiagonal(
    ffi.Pointer<gsl_matrix_ushort> m,
    int k,
  ) {
    return _gsl_matrix_ushort_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_ushort_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_const_subdiagonal');
  late final _gsl_matrix_ushort_const_subdiagonal =
      _gsl_matrix_ushort_const_subdiagonalPtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  _gsl_vector_ushort_const_view gsl_matrix_ushort_const_superdiagonal(
    ffi.Pointer<gsl_matrix_ushort> m,
    int k,
  ) {
    return _gsl_matrix_ushort_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_ushort_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_const_superdiagonal');
  late final _gsl_matrix_ushort_const_superdiagonal =
      _gsl_matrix_ushort_const_superdiagonalPtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  _gsl_vector_ushort_const_view gsl_matrix_ushort_const_subrow(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_ushort_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_ushort_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t, size_t, size_t)>>('gsl_matrix_ushort_const_subrow');
  late final _gsl_matrix_ushort_const_subrow =
      _gsl_matrix_ushort_const_subrowPtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int, int, int)>();

  _gsl_vector_ushort_const_view gsl_matrix_ushort_const_subcolumn(
    ffi.Pointer<gsl_matrix_ushort> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_ushort_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_ushort_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_ushort_const_view Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t, size_t, size_t)>>('gsl_matrix_ushort_const_subcolumn');
  late final _gsl_matrix_ushort_const_subcolumn =
      _gsl_matrix_ushort_const_subcolumnPtr.asFunction<
          _gsl_vector_ushort_const_view Function(
              ffi.Pointer<gsl_matrix_ushort>, int, int, int)>();

  _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_view_array(
    ffi.Pointer<ffi.Uint16> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ushort_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ushort_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_const_view Function(ffi.Pointer<ffi.Uint16>,
              size_t, size_t)>>('gsl_matrix_ushort_const_view_array');
  late final _gsl_matrix_ushort_const_view_array =
      _gsl_matrix_ushort_const_view_arrayPtr.asFunction<
          _gsl_matrix_ushort_const_view Function(
              ffi.Pointer<ffi.Uint16>, int, int)>();

  _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_view_array_with_tda(
    ffi.Pointer<ffi.Uint16> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_ushort_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_ushort_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_const_view Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ushort_const_view_array_with_tda');
  late final _gsl_matrix_ushort_const_view_array_with_tda =
      _gsl_matrix_ushort_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_ushort_const_view Function(
              ffi.Pointer<ffi.Uint16>, int, int, int)>();

  _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_view_vector(
    ffi.Pointer<gsl_vector_ushort> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_ushort_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_ushort_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_const_view Function(ffi.Pointer<gsl_vector_ushort>,
              size_t, size_t)>>('gsl_matrix_ushort_const_view_vector');
  late final _gsl_matrix_ushort_const_view_vector =
      _gsl_matrix_ushort_const_view_vectorPtr.asFunction<
          _gsl_matrix_ushort_const_view Function(
              ffi.Pointer<gsl_vector_ushort>, int, int)>();

  _gsl_matrix_ushort_const_view gsl_matrix_ushort_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_ushort> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_ushort_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_ushort_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_ushort_const_view Function(
              ffi.Pointer<gsl_vector_ushort>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_ushort_const_view_vector_with_tda');
  late final _gsl_matrix_ushort_const_view_vector_with_tda =
      _gsl_matrix_ushort_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_ushort_const_view Function(
              ffi.Pointer<gsl_vector_ushort>, int, int, int)>();

  void gsl_matrix_ushort_set_zero(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_set_zero(
      m,
    );
  }

  late final _gsl_matrix_ushort_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_set_zero');
  late final _gsl_matrix_ushort_set_zero = _gsl_matrix_ushort_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_ushort>)>();

  void gsl_matrix_ushort_set_identity(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_set_identity(
      m,
    );
  }

  late final _gsl_matrix_ushort_set_identityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_matrix_ushort>)>>(
      'gsl_matrix_ushort_set_identity');
  late final _gsl_matrix_ushort_set_identity =
      _gsl_matrix_ushort_set_identityPtr
          .asFunction<void Function(ffi.Pointer<gsl_matrix_ushort>)>();

  void gsl_matrix_ushort_set_all(
    ffi.Pointer<gsl_matrix_ushort> m,
    int x,
  ) {
    return _gsl_matrix_ushort_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_ushort_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Uint16)>>('gsl_matrix_ushort_set_all');
  late final _gsl_matrix_ushort_set_all = _gsl_matrix_ushort_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_ushort>, int)>();

  int gsl_matrix_ushort_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_ushort_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_fread');
  late final _gsl_matrix_ushort_fread = _gsl_matrix_ushort_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_ushort_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_fwrite');
  late final _gsl_matrix_ushort_fwrite =
      _gsl_matrix_ushort_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_ushort_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_fscanf');
  late final _gsl_matrix_ushort_fscanf =
      _gsl_matrix_ushort_fscanfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_ushort> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_ushort_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_ushort_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_ushort_fprintf');
  late final _gsl_matrix_ushort_fprintf =
      _gsl_matrix_ushort_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_ushort_memcpy(
    ffi.Pointer<gsl_matrix_ushort> dest,
    ffi.Pointer<gsl_matrix_ushort> src,
  ) {
    return _gsl_matrix_ushort_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_ushort_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_memcpy');
  late final _gsl_matrix_ushort_memcpy =
      _gsl_matrix_ushort_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_swap(
    ffi.Pointer<gsl_matrix_ushort> m1,
    ffi.Pointer<gsl_matrix_ushort> m2,
  ) {
    return _gsl_matrix_ushort_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_ushort_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_swap');
  late final _gsl_matrix_ushort_swap = _gsl_matrix_ushort_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_ushort> dest,
    ffi.Pointer<gsl_matrix_ushort> src,
  ) {
    return _gsl_matrix_ushort_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_ushort_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_tricpy');
  late final _gsl_matrix_ushort_tricpy =
      _gsl_matrix_ushort_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_swap_rows(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ushort_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ushort_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>, size_t,
              size_t)>>('gsl_matrix_ushort_swap_rows');
  late final _gsl_matrix_ushort_swap_rows = _gsl_matrix_ushort_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>, int, int)>();

  int gsl_matrix_ushort_swap_columns(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ushort_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ushort_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>, size_t,
              size_t)>>('gsl_matrix_ushort_swap_columns');
  late final _gsl_matrix_ushort_swap_columns =
      _gsl_matrix_ushort_swap_columnsPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>, int, int)>();

  int gsl_matrix_ushort_swap_rowcol(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ushort_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ushort_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>, size_t,
              size_t)>>('gsl_matrix_ushort_swap_rowcol');
  late final _gsl_matrix_ushort_swap_rowcol = _gsl_matrix_ushort_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>, int, int)>();

  int gsl_matrix_ushort_transpose(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_transpose(
      m,
    );
  }

  late final _gsl_matrix_ushort_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_transpose');
  late final _gsl_matrix_ushort_transpose = _gsl_matrix_ushort_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_transpose_memcpy(
    ffi.Pointer<gsl_matrix_ushort> dest,
    ffi.Pointer<gsl_matrix_ushort> src,
  ) {
    return _gsl_matrix_ushort_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_ushort_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
                  ffi.Pointer<gsl_matrix_ushort>)>>(
      'gsl_matrix_ushort_transpose_memcpy');
  late final _gsl_matrix_ushort_transpose_memcpy =
      _gsl_matrix_ushort_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_ushort> dest,
    ffi.Pointer<gsl_matrix_ushort> src,
  ) {
    return _gsl_matrix_ushort_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_ushort_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_ushort>,
                  ffi.Pointer<gsl_matrix_ushort>)>>(
      'gsl_matrix_ushort_transpose_tricpy');
  late final _gsl_matrix_ushort_transpose_tricpy =
      _gsl_matrix_ushort_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_max(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_max(
      m,
    );
  }

  late final _gsl_matrix_ushort_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_max');
  late final _gsl_matrix_ushort_max = _gsl_matrix_ushort_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_min(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_min(
      m,
    );
  }

  late final _gsl_matrix_ushort_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_min');
  late final _gsl_matrix_ushort_min = _gsl_matrix_ushort_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>)>();

  void gsl_matrix_ushort_minmax(
    ffi.Pointer<gsl_matrix_ushort> m,
    ffi.Pointer<ffi.Uint16> min_out,
    ffi.Pointer<ffi.Uint16> max_out,
  ) {
    return _gsl_matrix_ushort_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_ushort_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>)>>('gsl_matrix_ushort_minmax');
  late final _gsl_matrix_ushort_minmax =
      _gsl_matrix_ushort_minmaxPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>)>();

  void gsl_matrix_ushort_max_index(
    ffi.Pointer<gsl_matrix_ushort> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_ushort_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_ushort_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_ushort_max_index');
  late final _gsl_matrix_ushort_max_index =
      _gsl_matrix_ushort_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_ushort_min_index(
    ffi.Pointer<gsl_matrix_ushort> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_ushort_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_ushort_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_ushort_min_index');
  late final _gsl_matrix_ushort_min_index =
      _gsl_matrix_ushort_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_ushort_minmax_index(
    ffi.Pointer<gsl_matrix_ushort> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_ushort_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_ushort_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_ushort_minmax_index');
  late final _gsl_matrix_ushort_minmax_index =
      _gsl_matrix_ushort_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_ushort_equal(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_matrix_ushort> b,
  ) {
    return _gsl_matrix_ushort_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_ushort_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_equal');
  late final _gsl_matrix_ushort_equal = _gsl_matrix_ushort_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_isnull(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_isnull(
      m,
    );
  }

  late final _gsl_matrix_ushort_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_isnull');
  late final _gsl_matrix_ushort_isnull = _gsl_matrix_ushort_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_ispos(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_ispos(
      m,
    );
  }

  late final _gsl_matrix_ushort_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_ispos');
  late final _gsl_matrix_ushort_ispos = _gsl_matrix_ushort_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_isneg(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_isneg(
      m,
    );
  }

  late final _gsl_matrix_ushort_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_isneg');
  late final _gsl_matrix_ushort_isneg = _gsl_matrix_ushort_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_isnonneg(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_ushort_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_isnonneg');
  late final _gsl_matrix_ushort_isnonneg = _gsl_matrix_ushort_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_norm1(
    ffi.Pointer<gsl_matrix_ushort> m,
  ) {
    return _gsl_matrix_ushort_norm1(
      m,
    );
  }

  late final _gsl_matrix_ushort_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_norm1');
  late final _gsl_matrix_ushort_norm1 = _gsl_matrix_ushort_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_add(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_matrix_ushort> b,
  ) {
    return _gsl_matrix_ushort_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_ushort_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_add');
  late final _gsl_matrix_ushort_add = _gsl_matrix_ushort_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_sub(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_matrix_ushort> b,
  ) {
    return _gsl_matrix_ushort_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_ushort_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_matrix_ushort_sub');
  late final _gsl_matrix_ushort_sub = _gsl_matrix_ushort_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ushort>, ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_mul_elements(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_matrix_ushort> b,
  ) {
    return _gsl_matrix_ushort_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_ushort_mul_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
                  ffi.Pointer<gsl_matrix_ushort>)>>(
      'gsl_matrix_ushort_mul_elements');
  late final _gsl_matrix_ushort_mul_elements =
      _gsl_matrix_ushort_mul_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_div_elements(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_matrix_ushort> b,
  ) {
    return _gsl_matrix_ushort_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_ushort_div_elementsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
                  ffi.Pointer<gsl_matrix_ushort>)>>(
      'gsl_matrix_ushort_div_elements');
  late final _gsl_matrix_ushort_div_elements =
      _gsl_matrix_ushort_div_elementsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_matrix_ushort_scale(
    ffi.Pointer<gsl_matrix_ushort> a,
    int x,
  ) {
    return _gsl_matrix_ushort_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_ushort_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Uint16)>>('gsl_matrix_ushort_scale');
  late final _gsl_matrix_ushort_scale = _gsl_matrix_ushort_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>, int)>();

  int gsl_matrix_ushort_scale_rows(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_vector_ushort> x,
  ) {
    return _gsl_matrix_ushort_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_ushort_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_matrix_ushort_scale_rows');
  late final _gsl_matrix_ushort_scale_rows =
      _gsl_matrix_ushort_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_matrix_ushort_scale_columns(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_vector_ushort> x,
  ) {
    return _gsl_matrix_ushort_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_ushort_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
                  ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_matrix_ushort_scale_columns');
  late final _gsl_matrix_ushort_scale_columns =
      _gsl_matrix_ushort_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_matrix_ushort_add_constant(
    ffi.Pointer<gsl_matrix_ushort> a,
    int x,
  ) {
    return _gsl_matrix_ushort_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_ushort_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Uint16)>>('gsl_matrix_ushort_add_constant');
  late final _gsl_matrix_ushort_add_constant =
      _gsl_matrix_ushort_add_constantPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>, int)>();

  int gsl_matrix_ushort_add_diagonal(
    ffi.Pointer<gsl_matrix_ushort> a,
    int x,
  ) {
    return _gsl_matrix_ushort_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_ushort_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Uint16)>>('gsl_matrix_ushort_add_diagonal');
  late final _gsl_matrix_ushort_add_diagonal =
      _gsl_matrix_ushort_add_diagonalPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>, int)>();

  int gsl_matrix_ushort_get_row(
    ffi.Pointer<gsl_vector_ushort> v,
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
  ) {
    return _gsl_matrix_ushort_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_ushort_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_get_row');
  late final _gsl_matrix_ushort_get_row =
      _gsl_matrix_ushort_get_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  int gsl_matrix_ushort_get_col(
    ffi.Pointer<gsl_vector_ushort> v,
    ffi.Pointer<gsl_matrix_ushort> m,
    int j,
  ) {
    return _gsl_matrix_ushort_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_ushort_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_matrix_ushort>,
              size_t)>>('gsl_matrix_ushort_get_col');
  late final _gsl_matrix_ushort_get_col =
      _gsl_matrix_ushort_get_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_matrix_ushort>, int)>();

  int gsl_matrix_ushort_set_row(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_matrix_ushort_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_ushort_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>, size_t,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_matrix_ushort_set_row');
  late final _gsl_matrix_ushort_set_row =
      _gsl_matrix_ushort_set_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>, int,
              ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_matrix_ushort_set_col(
    ffi.Pointer<gsl_matrix_ushort> m,
    int j,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_matrix_ushort_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_ushort_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>, size_t,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_matrix_ushort_set_col');
  late final _gsl_matrix_ushort_set_col =
      _gsl_matrix_ushort_set_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>, int,
              ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_matrix_ushort_get(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ushort_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ushort_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<gsl_matrix_ushort>, size_t,
              size_t)>>('gsl_matrix_ushort_get');
  late final _gsl_matrix_ushort_get = _gsl_matrix_ushort_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_ushort>, int, int)>();

  void gsl_matrix_ushort_set(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_matrix_ushort_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_ushort_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_ushort>, size_t, size_t,
              ffi.Uint16)>>('gsl_matrix_ushort_set');
  late final _gsl_matrix_ushort_set = _gsl_matrix_ushort_setPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_ushort>, int, int, int)>();

  ffi.Pointer<ffi.Uint16> gsl_matrix_ushort_ptr(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ushort_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ushort_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t, size_t)>>('gsl_matrix_ushort_ptr');
  late final _gsl_matrix_ushort_ptr = _gsl_matrix_ushort_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint16> Function(
          ffi.Pointer<gsl_matrix_ushort>, int, int)>();

  ffi.Pointer<ffi.Uint16> gsl_matrix_ushort_const_ptr(
    ffi.Pointer<gsl_matrix_ushort> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_ushort_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_ushort_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<gsl_matrix_ushort>,
              size_t, size_t)>>('gsl_matrix_ushort_const_ptr');
  late final _gsl_matrix_ushort_const_ptr =
      _gsl_matrix_ushort_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Uint16> Function(
              ffi.Pointer<gsl_matrix_ushort>, int, int)>();

  ffi.Pointer<gsl_matrix_short> gsl_matrix_short_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_short_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_short_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_short> Function(
              size_t, size_t)>>('gsl_matrix_short_alloc');
  late final _gsl_matrix_short_alloc = _gsl_matrix_short_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_short> Function(int, int)>();

  ffi.Pointer<gsl_matrix_short> gsl_matrix_short_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_short_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_short_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_short> Function(
              size_t, size_t)>>('gsl_matrix_short_calloc');
  late final _gsl_matrix_short_calloc = _gsl_matrix_short_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_short> Function(int, int)>();

  ffi.Pointer<gsl_matrix_short> gsl_matrix_short_alloc_from_block(
    ffi.Pointer<gsl_block_short> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_short_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_short_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_short> Function(
              ffi.Pointer<gsl_block_short>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_short_alloc_from_block');
  late final _gsl_matrix_short_alloc_from_block =
      _gsl_matrix_short_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_short> Function(
              ffi.Pointer<gsl_block_short>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_short> gsl_matrix_short_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_short> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_short_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_short_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_short> Function(
              ffi.Pointer<gsl_matrix_short>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_short_alloc_from_matrix');
  late final _gsl_matrix_short_alloc_from_matrix =
      _gsl_matrix_short_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_short> Function(
              ffi.Pointer<gsl_matrix_short>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_short> gsl_vector_short_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
  ) {
    return _gsl_vector_short_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_short_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_short> Function(ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_vector_short_alloc_row_from_matrix');
  late final _gsl_vector_short_alloc_row_from_matrix =
      _gsl_vector_short_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_short> Function(
              ffi.Pointer<gsl_matrix_short>, int)>();

  ffi.Pointer<gsl_vector_short> gsl_vector_short_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_short> m,
    int j,
  ) {
    return _gsl_vector_short_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_short_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_short> Function(ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_vector_short_alloc_col_from_matrix');
  late final _gsl_vector_short_alloc_col_from_matrix =
      _gsl_vector_short_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_short> Function(
              ffi.Pointer<gsl_matrix_short>, int)>();

  void gsl_matrix_short_free(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_free(
      m,
    );
  }

  late final _gsl_matrix_short_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_short>)>>(
      'gsl_matrix_short_free');
  late final _gsl_matrix_short_free = _gsl_matrix_short_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_short>)>();

  _gsl_matrix_short_view gsl_matrix_short_submatrix(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_short_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_short_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_view Function(ffi.Pointer<gsl_matrix_short>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_short_submatrix');
  late final _gsl_matrix_short_submatrix =
      _gsl_matrix_short_submatrixPtr.asFunction<
          _gsl_matrix_short_view Function(
              ffi.Pointer<gsl_matrix_short>, int, int, int, int)>();

  _gsl_vector_short_view gsl_matrix_short_row(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
  ) {
    return _gsl_matrix_short_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_short_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(
              ffi.Pointer<gsl_matrix_short>, size_t)>>('gsl_matrix_short_row');
  late final _gsl_matrix_short_row = _gsl_matrix_short_rowPtr.asFunction<
      _gsl_vector_short_view Function(ffi.Pointer<gsl_matrix_short>, int)>();

  _gsl_vector_short_view gsl_matrix_short_column(
    ffi.Pointer<gsl_matrix_short> m,
    int j,
  ) {
    return _gsl_matrix_short_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_short_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_matrix_short_column');
  late final _gsl_matrix_short_column = _gsl_matrix_short_columnPtr.asFunction<
      _gsl_vector_short_view Function(ffi.Pointer<gsl_matrix_short>, int)>();

  _gsl_vector_short_view gsl_matrix_short_diagonal(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_diagonal(
      m,
    );
  }

  late final _gsl_matrix_short_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_diagonal');
  late final _gsl_matrix_short_diagonal =
      _gsl_matrix_short_diagonalPtr.asFunction<
          _gsl_vector_short_view Function(ffi.Pointer<gsl_matrix_short>)>();

  _gsl_vector_short_view gsl_matrix_short_subdiagonal(
    ffi.Pointer<gsl_matrix_short> m,
    int k,
  ) {
    return _gsl_matrix_short_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_short_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_matrix_short_subdiagonal');
  late final _gsl_matrix_short_subdiagonal =
      _gsl_matrix_short_subdiagonalPtr.asFunction<
          _gsl_vector_short_view Function(
              ffi.Pointer<gsl_matrix_short>, int)>();

  _gsl_vector_short_view gsl_matrix_short_superdiagonal(
    ffi.Pointer<gsl_matrix_short> m,
    int k,
  ) {
    return _gsl_matrix_short_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_short_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_matrix_short_superdiagonal');
  late final _gsl_matrix_short_superdiagonal =
      _gsl_matrix_short_superdiagonalPtr.asFunction<
          _gsl_vector_short_view Function(
              ffi.Pointer<gsl_matrix_short>, int)>();

  _gsl_vector_short_view gsl_matrix_short_subrow(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_short_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_short_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(ffi.Pointer<gsl_matrix_short>, size_t,
              size_t, size_t)>>('gsl_matrix_short_subrow');
  late final _gsl_matrix_short_subrow = _gsl_matrix_short_subrowPtr.asFunction<
      _gsl_vector_short_view Function(
          ffi.Pointer<gsl_matrix_short>, int, int, int)>();

  _gsl_vector_short_view gsl_matrix_short_subcolumn(
    ffi.Pointer<gsl_matrix_short> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_short_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_short_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_view Function(ffi.Pointer<gsl_matrix_short>, size_t,
              size_t, size_t)>>('gsl_matrix_short_subcolumn');
  late final _gsl_matrix_short_subcolumn =
      _gsl_matrix_short_subcolumnPtr.asFunction<
          _gsl_vector_short_view Function(
              ffi.Pointer<gsl_matrix_short>, int, int, int)>();

  _gsl_matrix_short_view gsl_matrix_short_view_array(
    ffi.Pointer<ffi.Int16> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_short_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_short_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_view Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_matrix_short_view_array');
  late final _gsl_matrix_short_view_array =
      _gsl_matrix_short_view_arrayPtr.asFunction<
          _gsl_matrix_short_view Function(ffi.Pointer<ffi.Int16>, int, int)>();

  _gsl_matrix_short_view gsl_matrix_short_view_array_with_tda(
    ffi.Pointer<ffi.Int16> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_short_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_short_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_view Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t, size_t)>>('gsl_matrix_short_view_array_with_tda');
  late final _gsl_matrix_short_view_array_with_tda =
      _gsl_matrix_short_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_short_view Function(
              ffi.Pointer<ffi.Int16>, int, int, int)>();

  _gsl_matrix_short_view gsl_matrix_short_view_vector(
    ffi.Pointer<gsl_vector_short> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_short_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_short_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_view Function(ffi.Pointer<gsl_vector_short>, size_t,
              size_t)>>('gsl_matrix_short_view_vector');
  late final _gsl_matrix_short_view_vector =
      _gsl_matrix_short_view_vectorPtr.asFunction<
          _gsl_matrix_short_view Function(
              ffi.Pointer<gsl_vector_short>, int, int)>();

  _gsl_matrix_short_view gsl_matrix_short_view_vector_with_tda(
    ffi.Pointer<gsl_vector_short> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_short_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_short_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_view Function(ffi.Pointer<gsl_vector_short>, size_t,
              size_t, size_t)>>('gsl_matrix_short_view_vector_with_tda');
  late final _gsl_matrix_short_view_vector_with_tda =
      _gsl_matrix_short_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_short_view Function(
              ffi.Pointer<gsl_vector_short>, int, int, int)>();

  _gsl_matrix_short_const_view gsl_matrix_short_const_submatrix(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_short_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_short_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_const_view Function(
              ffi.Pointer<gsl_matrix_short>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_short_const_submatrix');
  late final _gsl_matrix_short_const_submatrix =
      _gsl_matrix_short_const_submatrixPtr.asFunction<
          _gsl_matrix_short_const_view Function(
              ffi.Pointer<gsl_matrix_short>, int, int, int, int)>();

  _gsl_vector_short_const_view gsl_matrix_short_const_row(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
  ) {
    return _gsl_matrix_short_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_short_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_matrix_short_const_row');
  late final _gsl_matrix_short_const_row =
      _gsl_matrix_short_const_rowPtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_matrix_short>, int)>();

  _gsl_vector_short_const_view gsl_matrix_short_const_column(
    ffi.Pointer<gsl_matrix_short> m,
    int j,
  ) {
    return _gsl_matrix_short_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_short_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_matrix_short_const_column');
  late final _gsl_matrix_short_const_column =
      _gsl_matrix_short_const_columnPtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_matrix_short>, int)>();

  _gsl_vector_short_const_view gsl_matrix_short_const_diagonal(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_short_const_diagonalPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_short_const_view Function(
                  ffi.Pointer<gsl_matrix_short>)>>(
      'gsl_matrix_short_const_diagonal');
  late final _gsl_matrix_short_const_diagonal =
      _gsl_matrix_short_const_diagonalPtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_matrix_short>)>();

  _gsl_vector_short_const_view gsl_matrix_short_const_subdiagonal(
    ffi.Pointer<gsl_matrix_short> m,
    int k,
  ) {
    return _gsl_matrix_short_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_short_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_matrix_short_const_subdiagonal');
  late final _gsl_matrix_short_const_subdiagonal =
      _gsl_matrix_short_const_subdiagonalPtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_matrix_short>, int)>();

  _gsl_vector_short_const_view gsl_matrix_short_const_superdiagonal(
    ffi.Pointer<gsl_matrix_short> m,
    int k,
  ) {
    return _gsl_matrix_short_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_short_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_matrix_short_const_superdiagonal');
  late final _gsl_matrix_short_const_superdiagonal =
      _gsl_matrix_short_const_superdiagonalPtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_matrix_short>, int)>();

  _gsl_vector_short_const_view gsl_matrix_short_const_subrow(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_short_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_short_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<gsl_matrix_short>,
              size_t, size_t, size_t)>>('gsl_matrix_short_const_subrow');
  late final _gsl_matrix_short_const_subrow =
      _gsl_matrix_short_const_subrowPtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_matrix_short>, int, int, int)>();

  _gsl_vector_short_const_view gsl_matrix_short_const_subcolumn(
    ffi.Pointer<gsl_matrix_short> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_short_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_short_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_short_const_view Function(ffi.Pointer<gsl_matrix_short>,
              size_t, size_t, size_t)>>('gsl_matrix_short_const_subcolumn');
  late final _gsl_matrix_short_const_subcolumn =
      _gsl_matrix_short_const_subcolumnPtr.asFunction<
          _gsl_vector_short_const_view Function(
              ffi.Pointer<gsl_matrix_short>, int, int, int)>();

  _gsl_matrix_short_const_view gsl_matrix_short_const_view_array(
    ffi.Pointer<ffi.Int16> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_short_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_short_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_const_view Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_matrix_short_const_view_array');
  late final _gsl_matrix_short_const_view_array =
      _gsl_matrix_short_const_view_arrayPtr.asFunction<
          _gsl_matrix_short_const_view Function(
              ffi.Pointer<ffi.Int16>, int, int)>();

  _gsl_matrix_short_const_view gsl_matrix_short_const_view_array_with_tda(
    ffi.Pointer<ffi.Int16> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_short_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_short_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_const_view Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t, size_t)>>('gsl_matrix_short_const_view_array_with_tda');
  late final _gsl_matrix_short_const_view_array_with_tda =
      _gsl_matrix_short_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_short_const_view Function(
              ffi.Pointer<ffi.Int16>, int, int, int)>();

  _gsl_matrix_short_const_view gsl_matrix_short_const_view_vector(
    ffi.Pointer<gsl_vector_short> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_short_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_short_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_const_view Function(ffi.Pointer<gsl_vector_short>,
              size_t, size_t)>>('gsl_matrix_short_const_view_vector');
  late final _gsl_matrix_short_const_view_vector =
      _gsl_matrix_short_const_view_vectorPtr.asFunction<
          _gsl_matrix_short_const_view Function(
              ffi.Pointer<gsl_vector_short>, int, int)>();

  _gsl_matrix_short_const_view gsl_matrix_short_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_short> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_short_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_short_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_short_const_view Function(
              ffi.Pointer<gsl_vector_short>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_short_const_view_vector_with_tda');
  late final _gsl_matrix_short_const_view_vector_with_tda =
      _gsl_matrix_short_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_short_const_view Function(
              ffi.Pointer<gsl_vector_short>, int, int, int)>();

  void gsl_matrix_short_set_zero(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_set_zero(
      m,
    );
  }

  late final _gsl_matrix_short_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_short>)>>(
      'gsl_matrix_short_set_zero');
  late final _gsl_matrix_short_set_zero = _gsl_matrix_short_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_short>)>();

  void gsl_matrix_short_set_identity(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_set_identity(
      m,
    );
  }

  late final _gsl_matrix_short_set_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_short>)>>(
      'gsl_matrix_short_set_identity');
  late final _gsl_matrix_short_set_identity = _gsl_matrix_short_set_identityPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_short>)>();

  void gsl_matrix_short_set_all(
    ffi.Pointer<gsl_matrix_short> m,
    int x,
  ) {
    return _gsl_matrix_short_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_short_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Int16)>>('gsl_matrix_short_set_all');
  late final _gsl_matrix_short_set_all = _gsl_matrix_short_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_short>, int)>();

  int gsl_matrix_short_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_short_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_fread');
  late final _gsl_matrix_short_fread = _gsl_matrix_short_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_short_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_fwrite');
  late final _gsl_matrix_short_fwrite = _gsl_matrix_short_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_short_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_fscanf');
  late final _gsl_matrix_short_fscanf = _gsl_matrix_short_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_short> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_short_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_short_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_short_fprintf');
  late final _gsl_matrix_short_fprintf =
      _gsl_matrix_short_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_short_memcpy(
    ffi.Pointer<gsl_matrix_short> dest,
    ffi.Pointer<gsl_matrix_short> src,
  ) {
    return _gsl_matrix_short_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_short_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_memcpy');
  late final _gsl_matrix_short_memcpy = _gsl_matrix_short_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_swap(
    ffi.Pointer<gsl_matrix_short> m1,
    ffi.Pointer<gsl_matrix_short> m2,
  ) {
    return _gsl_matrix_short_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_short_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_swap');
  late final _gsl_matrix_short_swap = _gsl_matrix_short_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_short> dest,
    ffi.Pointer<gsl_matrix_short> src,
  ) {
    return _gsl_matrix_short_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_short_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_tricpy');
  late final _gsl_matrix_short_tricpy = _gsl_matrix_short_tricpyPtr.asFunction<
      int Function(int, int, ffi.Pointer<gsl_matrix_short>,
          ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_swap_rows(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_short_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_short_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>, size_t,
              size_t)>>('gsl_matrix_short_swap_rows');
  late final _gsl_matrix_short_swap_rows = _gsl_matrix_short_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>, int, int)>();

  int gsl_matrix_short_swap_columns(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_short_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_short_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>, size_t,
              size_t)>>('gsl_matrix_short_swap_columns');
  late final _gsl_matrix_short_swap_columns = _gsl_matrix_short_swap_columnsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>, int, int)>();

  int gsl_matrix_short_swap_rowcol(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_short_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_short_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>, size_t,
              size_t)>>('gsl_matrix_short_swap_rowcol');
  late final _gsl_matrix_short_swap_rowcol = _gsl_matrix_short_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>, int, int)>();

  int gsl_matrix_short_transpose(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_transpose(
      m,
    );
  }

  late final _gsl_matrix_short_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_transpose');
  late final _gsl_matrix_short_transpose = _gsl_matrix_short_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_transpose_memcpy(
    ffi.Pointer<gsl_matrix_short> dest,
    ffi.Pointer<gsl_matrix_short> src,
  ) {
    return _gsl_matrix_short_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_short_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
                  ffi.Pointer<gsl_matrix_short>)>>(
      'gsl_matrix_short_transpose_memcpy');
  late final _gsl_matrix_short_transpose_memcpy =
      _gsl_matrix_short_transpose_memcpyPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_short> dest,
    ffi.Pointer<gsl_matrix_short> src,
  ) {
    return _gsl_matrix_short_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_short_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_short>,
                  ffi.Pointer<gsl_matrix_short>)>>(
      'gsl_matrix_short_transpose_tricpy');
  late final _gsl_matrix_short_transpose_tricpy =
      _gsl_matrix_short_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_max(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_max(
      m,
    );
  }

  late final _gsl_matrix_short_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_max');
  late final _gsl_matrix_short_max = _gsl_matrix_short_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_min(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_min(
      m,
    );
  }

  late final _gsl_matrix_short_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_min');
  late final _gsl_matrix_short_min = _gsl_matrix_short_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>)>();

  void gsl_matrix_short_minmax(
    ffi.Pointer<gsl_matrix_short> m,
    ffi.Pointer<ffi.Int16> min_out,
    ffi.Pointer<ffi.Int16> max_out,
  ) {
    return _gsl_matrix_short_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_short_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int16>)>>('gsl_matrix_short_minmax');
  late final _gsl_matrix_short_minmax = _gsl_matrix_short_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_short>, ffi.Pointer<ffi.Int16>,
          ffi.Pointer<ffi.Int16>)>();

  void gsl_matrix_short_max_index(
    ffi.Pointer<gsl_matrix_short> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_short_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_short_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_short>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_short_max_index');
  late final _gsl_matrix_short_max_index =
      _gsl_matrix_short_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_short>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_short_min_index(
    ffi.Pointer<gsl_matrix_short> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_short_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_short_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_short>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_short_min_index');
  late final _gsl_matrix_short_min_index =
      _gsl_matrix_short_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_short>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_short_minmax_index(
    ffi.Pointer<gsl_matrix_short> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_short_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_short_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_short_minmax_index');
  late final _gsl_matrix_short_minmax_index =
      _gsl_matrix_short_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_short>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_short_equal(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_matrix_short> b,
  ) {
    return _gsl_matrix_short_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_short_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_equal');
  late final _gsl_matrix_short_equal = _gsl_matrix_short_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_isnull(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_isnull(
      m,
    );
  }

  late final _gsl_matrix_short_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_isnull');
  late final _gsl_matrix_short_isnull = _gsl_matrix_short_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_ispos(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_ispos(
      m,
    );
  }

  late final _gsl_matrix_short_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_ispos');
  late final _gsl_matrix_short_ispos = _gsl_matrix_short_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_isneg(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_isneg(
      m,
    );
  }

  late final _gsl_matrix_short_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_isneg');
  late final _gsl_matrix_short_isneg = _gsl_matrix_short_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_isnonneg(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_short_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_isnonneg');
  late final _gsl_matrix_short_isnonneg = _gsl_matrix_short_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_norm1(
    ffi.Pointer<gsl_matrix_short> m,
  ) {
    return _gsl_matrix_short_norm1(
      m,
    );
  }

  late final _gsl_matrix_short_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_norm1');
  late final _gsl_matrix_short_norm1 = _gsl_matrix_short_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_add(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_matrix_short> b,
  ) {
    return _gsl_matrix_short_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_short_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_add');
  late final _gsl_matrix_short_add = _gsl_matrix_short_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_sub(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_matrix_short> b,
  ) {
    return _gsl_matrix_short_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_short_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_sub');
  late final _gsl_matrix_short_sub = _gsl_matrix_short_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_mul_elements(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_matrix_short> b,
  ) {
    return _gsl_matrix_short_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_short_mul_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_mul_elements');
  late final _gsl_matrix_short_mul_elements =
      _gsl_matrix_short_mul_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_div_elements(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_matrix_short> b,
  ) {
    return _gsl_matrix_short_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_short_div_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_matrix_short_div_elements');
  late final _gsl_matrix_short_div_elements =
      _gsl_matrix_short_div_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_matrix_short_scale(
    ffi.Pointer<gsl_matrix_short> a,
    int x,
  ) {
    return _gsl_matrix_short_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_short_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Int16)>>('gsl_matrix_short_scale');
  late final _gsl_matrix_short_scale = _gsl_matrix_short_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>, int)>();

  int gsl_matrix_short_scale_rows(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_vector_short> x,
  ) {
    return _gsl_matrix_short_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_short_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_matrix_short_scale_rows');
  late final _gsl_matrix_short_scale_rows =
      _gsl_matrix_short_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_matrix_short_scale_columns(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_vector_short> x,
  ) {
    return _gsl_matrix_short_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_short_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
                  ffi.Pointer<gsl_vector_short>)>>(
      'gsl_matrix_short_scale_columns');
  late final _gsl_matrix_short_scale_columns =
      _gsl_matrix_short_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_matrix_short_add_constant(
    ffi.Pointer<gsl_matrix_short> a,
    int x,
  ) {
    return _gsl_matrix_short_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_short_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Int16)>>('gsl_matrix_short_add_constant');
  late final _gsl_matrix_short_add_constant = _gsl_matrix_short_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>, int)>();

  int gsl_matrix_short_add_diagonal(
    ffi.Pointer<gsl_matrix_short> a,
    int x,
  ) {
    return _gsl_matrix_short_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_short_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Int16)>>('gsl_matrix_short_add_diagonal');
  late final _gsl_matrix_short_add_diagonal = _gsl_matrix_short_add_diagonalPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>, int)>();

  int gsl_matrix_short_get_row(
    ffi.Pointer<gsl_vector_short> v,
    ffi.Pointer<gsl_matrix_short> m,
    int i,
  ) {
    return _gsl_matrix_short_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_short_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_matrix_short_get_row');
  late final _gsl_matrix_short_get_row =
      _gsl_matrix_short_get_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_matrix_short>, int)>();

  int gsl_matrix_short_get_col(
    ffi.Pointer<gsl_vector_short> v,
    ffi.Pointer<gsl_matrix_short> m,
    int j,
  ) {
    return _gsl_matrix_short_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_short_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_matrix_short>,
              size_t)>>('gsl_matrix_short_get_col');
  late final _gsl_matrix_short_get_col =
      _gsl_matrix_short_get_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_matrix_short>, int)>();

  int gsl_matrix_short_set_row(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_matrix_short_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_short_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>, size_t,
              ffi.Pointer<gsl_vector_short>)>>('gsl_matrix_short_set_row');
  late final _gsl_matrix_short_set_row =
      _gsl_matrix_short_set_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_short>, int,
              ffi.Pointer<gsl_vector_short>)>();

  int gsl_matrix_short_set_col(
    ffi.Pointer<gsl_matrix_short> m,
    int j,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_matrix_short_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_short_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>, size_t,
              ffi.Pointer<gsl_vector_short>)>>('gsl_matrix_short_set_col');
  late final _gsl_matrix_short_set_col =
      _gsl_matrix_short_set_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_short>, int,
              ffi.Pointer<gsl_vector_short>)>();

  int gsl_matrix_short_get(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_short_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_short_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(ffi.Pointer<gsl_matrix_short>, size_t,
              size_t)>>('gsl_matrix_short_get');
  late final _gsl_matrix_short_get = _gsl_matrix_short_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_short>, int, int)>();

  void gsl_matrix_short_set(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_matrix_short_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_short_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_short>, size_t, size_t,
              ffi.Int16)>>('gsl_matrix_short_set');
  late final _gsl_matrix_short_set = _gsl_matrix_short_setPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_short>, int, int, int)>();

  ffi.Pointer<ffi.Int16> gsl_matrix_short_ptr(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_short_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_short_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int16> Function(ffi.Pointer<gsl_matrix_short>, size_t,
              size_t)>>('gsl_matrix_short_ptr');
  late final _gsl_matrix_short_ptr = _gsl_matrix_short_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int16> Function(
          ffi.Pointer<gsl_matrix_short>, int, int)>();

  ffi.Pointer<ffi.Int16> gsl_matrix_short_const_ptr(
    ffi.Pointer<gsl_matrix_short> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_short_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_short_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int16> Function(ffi.Pointer<gsl_matrix_short>, size_t,
              size_t)>>('gsl_matrix_short_const_ptr');
  late final _gsl_matrix_short_const_ptr =
      _gsl_matrix_short_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Int16> Function(
              ffi.Pointer<gsl_matrix_short>, int, int)>();

  ffi.Pointer<gsl_matrix_uchar> gsl_matrix_uchar_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uchar_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uchar_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_uchar> Function(
              size_t, size_t)>>('gsl_matrix_uchar_alloc');
  late final _gsl_matrix_uchar_alloc = _gsl_matrix_uchar_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_uchar> Function(int, int)>();

  ffi.Pointer<gsl_matrix_uchar> gsl_matrix_uchar_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uchar_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uchar_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_uchar> Function(
              size_t, size_t)>>('gsl_matrix_uchar_calloc');
  late final _gsl_matrix_uchar_calloc = _gsl_matrix_uchar_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_uchar> Function(int, int)>();

  ffi.Pointer<gsl_matrix_uchar> gsl_matrix_uchar_alloc_from_block(
    ffi.Pointer<gsl_block_uchar> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_uchar_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_uchar_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_uchar> Function(
              ffi.Pointer<gsl_block_uchar>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_uchar_alloc_from_block');
  late final _gsl_matrix_uchar_alloc_from_block =
      _gsl_matrix_uchar_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_uchar> Function(
              ffi.Pointer<gsl_block_uchar>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_uchar> gsl_matrix_uchar_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_uchar> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uchar_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uchar_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_uchar> Function(
              ffi.Pointer<gsl_matrix_uchar>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_uchar_alloc_from_matrix');
  late final _gsl_matrix_uchar_alloc_from_matrix =
      _gsl_matrix_uchar_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_uchar> Function(
              ffi.Pointer<gsl_matrix_uchar>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_uchar> gsl_vector_uchar_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
  ) {
    return _gsl_vector_uchar_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_uchar_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_uchar> Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_vector_uchar_alloc_row_from_matrix');
  late final _gsl_vector_uchar_alloc_row_from_matrix =
      _gsl_vector_uchar_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_uchar> Function(
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  ffi.Pointer<gsl_vector_uchar> gsl_vector_uchar_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_uchar> m,
    int j,
  ) {
    return _gsl_vector_uchar_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_uchar_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_uchar> Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_vector_uchar_alloc_col_from_matrix');
  late final _gsl_vector_uchar_alloc_col_from_matrix =
      _gsl_vector_uchar_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_uchar> Function(
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  void gsl_matrix_uchar_free(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_free(
      m,
    );
  }

  late final _gsl_matrix_uchar_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_uchar>)>>(
      'gsl_matrix_uchar_free');
  late final _gsl_matrix_uchar_free = _gsl_matrix_uchar_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_uchar>)>();

  _gsl_matrix_uchar_view gsl_matrix_uchar_submatrix(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uchar_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uchar_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_view Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_uchar_submatrix');
  late final _gsl_matrix_uchar_submatrix =
      _gsl_matrix_uchar_submatrixPtr.asFunction<
          _gsl_matrix_uchar_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int, int, int, int)>();

  _gsl_vector_uchar_view gsl_matrix_uchar_row(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
  ) {
    return _gsl_matrix_uchar_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_uchar_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(
              ffi.Pointer<gsl_matrix_uchar>, size_t)>>('gsl_matrix_uchar_row');
  late final _gsl_matrix_uchar_row = _gsl_matrix_uchar_rowPtr.asFunction<
      _gsl_vector_uchar_view Function(ffi.Pointer<gsl_matrix_uchar>, int)>();

  _gsl_vector_uchar_view gsl_matrix_uchar_column(
    ffi.Pointer<gsl_matrix_uchar> m,
    int j,
  ) {
    return _gsl_matrix_uchar_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_uchar_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_matrix_uchar_column');
  late final _gsl_matrix_uchar_column = _gsl_matrix_uchar_columnPtr.asFunction<
      _gsl_vector_uchar_view Function(ffi.Pointer<gsl_matrix_uchar>, int)>();

  _gsl_vector_uchar_view gsl_matrix_uchar_diagonal(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_diagonal(
      m,
    );
  }

  late final _gsl_matrix_uchar_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_diagonal');
  late final _gsl_matrix_uchar_diagonal =
      _gsl_matrix_uchar_diagonalPtr.asFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<gsl_matrix_uchar>)>();

  _gsl_vector_uchar_view gsl_matrix_uchar_subdiagonal(
    ffi.Pointer<gsl_matrix_uchar> m,
    int k,
  ) {
    return _gsl_matrix_uchar_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_uchar_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_matrix_uchar_subdiagonal');
  late final _gsl_matrix_uchar_subdiagonal =
      _gsl_matrix_uchar_subdiagonalPtr.asFunction<
          _gsl_vector_uchar_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  _gsl_vector_uchar_view gsl_matrix_uchar_superdiagonal(
    ffi.Pointer<gsl_matrix_uchar> m,
    int k,
  ) {
    return _gsl_matrix_uchar_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_uchar_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_matrix_uchar_superdiagonal');
  late final _gsl_matrix_uchar_superdiagonal =
      _gsl_matrix_uchar_superdiagonalPtr.asFunction<
          _gsl_vector_uchar_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  _gsl_vector_uchar_view gsl_matrix_uchar_subrow(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_uchar_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_uchar_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              size_t, size_t)>>('gsl_matrix_uchar_subrow');
  late final _gsl_matrix_uchar_subrow = _gsl_matrix_uchar_subrowPtr.asFunction<
      _gsl_vector_uchar_view Function(
          ffi.Pointer<gsl_matrix_uchar>, int, int, int)>();

  _gsl_vector_uchar_view gsl_matrix_uchar_subcolumn(
    ffi.Pointer<gsl_matrix_uchar> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_uchar_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_uchar_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_view Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              size_t, size_t)>>('gsl_matrix_uchar_subcolumn');
  late final _gsl_matrix_uchar_subcolumn =
      _gsl_matrix_uchar_subcolumnPtr.asFunction<
          _gsl_vector_uchar_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int, int, int)>();

  _gsl_matrix_uchar_view gsl_matrix_uchar_view_array(
    ffi.Pointer<ffi.Uint8> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uchar_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uchar_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_view Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_matrix_uchar_view_array');
  late final _gsl_matrix_uchar_view_array =
      _gsl_matrix_uchar_view_arrayPtr.asFunction<
          _gsl_matrix_uchar_view Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  _gsl_matrix_uchar_view gsl_matrix_uchar_view_array_with_tda(
    ffi.Pointer<ffi.Uint8> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_uchar_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_uchar_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_view Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t, size_t)>>('gsl_matrix_uchar_view_array_with_tda');
  late final _gsl_matrix_uchar_view_array_with_tda =
      _gsl_matrix_uchar_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_uchar_view Function(
              ffi.Pointer<ffi.Uint8>, int, int, int)>();

  _gsl_matrix_uchar_view gsl_matrix_uchar_view_vector(
    ffi.Pointer<gsl_vector_uchar> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uchar_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uchar_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_view Function(ffi.Pointer<gsl_vector_uchar>, size_t,
              size_t)>>('gsl_matrix_uchar_view_vector');
  late final _gsl_matrix_uchar_view_vector =
      _gsl_matrix_uchar_view_vectorPtr.asFunction<
          _gsl_matrix_uchar_view Function(
              ffi.Pointer<gsl_vector_uchar>, int, int)>();

  _gsl_matrix_uchar_view gsl_matrix_uchar_view_vector_with_tda(
    ffi.Pointer<gsl_vector_uchar> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_uchar_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_uchar_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_view Function(ffi.Pointer<gsl_vector_uchar>, size_t,
              size_t, size_t)>>('gsl_matrix_uchar_view_vector_with_tda');
  late final _gsl_matrix_uchar_view_vector_with_tda =
      _gsl_matrix_uchar_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_uchar_view Function(
              ffi.Pointer<gsl_vector_uchar>, int, int, int)>();

  _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_submatrix(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uchar_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uchar_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_const_view Function(
              ffi.Pointer<gsl_matrix_uchar>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_uchar_const_submatrix');
  late final _gsl_matrix_uchar_const_submatrix =
      _gsl_matrix_uchar_const_submatrixPtr.asFunction<
          _gsl_matrix_uchar_const_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int, int, int, int)>();

  _gsl_vector_uchar_const_view gsl_matrix_uchar_const_row(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
  ) {
    return _gsl_matrix_uchar_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_uchar_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_matrix_uchar_const_row');
  late final _gsl_matrix_uchar_const_row =
      _gsl_matrix_uchar_const_rowPtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  _gsl_vector_uchar_const_view gsl_matrix_uchar_const_column(
    ffi.Pointer<gsl_matrix_uchar> m,
    int j,
  ) {
    return _gsl_matrix_uchar_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_uchar_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_matrix_uchar_const_column');
  late final _gsl_matrix_uchar_const_column =
      _gsl_matrix_uchar_const_columnPtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  _gsl_vector_uchar_const_view gsl_matrix_uchar_const_diagonal(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_uchar_const_diagonalPtr = _lookup<
          ffi.NativeFunction<
              _gsl_vector_uchar_const_view Function(
                  ffi.Pointer<gsl_matrix_uchar>)>>(
      'gsl_matrix_uchar_const_diagonal');
  late final _gsl_matrix_uchar_const_diagonal =
      _gsl_matrix_uchar_const_diagonalPtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_matrix_uchar>)>();

  _gsl_vector_uchar_const_view gsl_matrix_uchar_const_subdiagonal(
    ffi.Pointer<gsl_matrix_uchar> m,
    int k,
  ) {
    return _gsl_matrix_uchar_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_uchar_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_matrix_uchar_const_subdiagonal');
  late final _gsl_matrix_uchar_const_subdiagonal =
      _gsl_matrix_uchar_const_subdiagonalPtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  _gsl_vector_uchar_const_view gsl_matrix_uchar_const_superdiagonal(
    ffi.Pointer<gsl_matrix_uchar> m,
    int k,
  ) {
    return _gsl_matrix_uchar_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_uchar_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_matrix_uchar_const_superdiagonal');
  late final _gsl_matrix_uchar_const_superdiagonal =
      _gsl_matrix_uchar_const_superdiagonalPtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  _gsl_vector_uchar_const_view gsl_matrix_uchar_const_subrow(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_uchar_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_uchar_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t, size_t, size_t)>>('gsl_matrix_uchar_const_subrow');
  late final _gsl_matrix_uchar_const_subrow =
      _gsl_matrix_uchar_const_subrowPtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int, int, int)>();

  _gsl_vector_uchar_const_view gsl_matrix_uchar_const_subcolumn(
    ffi.Pointer<gsl_matrix_uchar> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_uchar_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_uchar_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_uchar_const_view Function(ffi.Pointer<gsl_matrix_uchar>,
              size_t, size_t, size_t)>>('gsl_matrix_uchar_const_subcolumn');
  late final _gsl_matrix_uchar_const_subcolumn =
      _gsl_matrix_uchar_const_subcolumnPtr.asFunction<
          _gsl_vector_uchar_const_view Function(
              ffi.Pointer<gsl_matrix_uchar>, int, int, int)>();

  _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_view_array(
    ffi.Pointer<ffi.Uint8> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uchar_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uchar_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_const_view Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_matrix_uchar_const_view_array');
  late final _gsl_matrix_uchar_const_view_array =
      _gsl_matrix_uchar_const_view_arrayPtr.asFunction<
          _gsl_matrix_uchar_const_view Function(
              ffi.Pointer<ffi.Uint8>, int, int)>();

  _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_view_array_with_tda(
    ffi.Pointer<ffi.Uint8> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_uchar_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_uchar_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_const_view Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t, size_t)>>('gsl_matrix_uchar_const_view_array_with_tda');
  late final _gsl_matrix_uchar_const_view_array_with_tda =
      _gsl_matrix_uchar_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_uchar_const_view Function(
              ffi.Pointer<ffi.Uint8>, int, int, int)>();

  _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_view_vector(
    ffi.Pointer<gsl_vector_uchar> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_uchar_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_uchar_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_const_view Function(ffi.Pointer<gsl_vector_uchar>,
              size_t, size_t)>>('gsl_matrix_uchar_const_view_vector');
  late final _gsl_matrix_uchar_const_view_vector =
      _gsl_matrix_uchar_const_view_vectorPtr.asFunction<
          _gsl_matrix_uchar_const_view Function(
              ffi.Pointer<gsl_vector_uchar>, int, int)>();

  _gsl_matrix_uchar_const_view gsl_matrix_uchar_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_uchar> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_uchar_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_uchar_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_uchar_const_view Function(
              ffi.Pointer<gsl_vector_uchar>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_uchar_const_view_vector_with_tda');
  late final _gsl_matrix_uchar_const_view_vector_with_tda =
      _gsl_matrix_uchar_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_uchar_const_view Function(
              ffi.Pointer<gsl_vector_uchar>, int, int, int)>();

  void gsl_matrix_uchar_set_zero(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_set_zero(
      m,
    );
  }

  late final _gsl_matrix_uchar_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_uchar>)>>(
      'gsl_matrix_uchar_set_zero');
  late final _gsl_matrix_uchar_set_zero = _gsl_matrix_uchar_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_uchar>)>();

  void gsl_matrix_uchar_set_identity(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_set_identity(
      m,
    );
  }

  late final _gsl_matrix_uchar_set_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_uchar>)>>(
      'gsl_matrix_uchar_set_identity');
  late final _gsl_matrix_uchar_set_identity = _gsl_matrix_uchar_set_identityPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_uchar>)>();

  void gsl_matrix_uchar_set_all(
    ffi.Pointer<gsl_matrix_uchar> m,
    int x,
  ) {
    return _gsl_matrix_uchar_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_uchar_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Uint8)>>('gsl_matrix_uchar_set_all');
  late final _gsl_matrix_uchar_set_all = _gsl_matrix_uchar_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_uchar>, int)>();

  int gsl_matrix_uchar_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_uchar_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_fread');
  late final _gsl_matrix_uchar_fread = _gsl_matrix_uchar_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_uchar_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_fwrite');
  late final _gsl_matrix_uchar_fwrite = _gsl_matrix_uchar_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_uchar_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_fscanf');
  late final _gsl_matrix_uchar_fscanf = _gsl_matrix_uchar_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_uchar> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_uchar_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_uchar_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_uchar_fprintf');
  late final _gsl_matrix_uchar_fprintf =
      _gsl_matrix_uchar_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_uchar_memcpy(
    ffi.Pointer<gsl_matrix_uchar> dest,
    ffi.Pointer<gsl_matrix_uchar> src,
  ) {
    return _gsl_matrix_uchar_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_uchar_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_memcpy');
  late final _gsl_matrix_uchar_memcpy = _gsl_matrix_uchar_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_swap(
    ffi.Pointer<gsl_matrix_uchar> m1,
    ffi.Pointer<gsl_matrix_uchar> m2,
  ) {
    return _gsl_matrix_uchar_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_uchar_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_swap');
  late final _gsl_matrix_uchar_swap = _gsl_matrix_uchar_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_uchar> dest,
    ffi.Pointer<gsl_matrix_uchar> src,
  ) {
    return _gsl_matrix_uchar_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_uchar_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_tricpy');
  late final _gsl_matrix_uchar_tricpy = _gsl_matrix_uchar_tricpyPtr.asFunction<
      int Function(int, int, ffi.Pointer<gsl_matrix_uchar>,
          ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_swap_rows(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uchar_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uchar_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              size_t)>>('gsl_matrix_uchar_swap_rows');
  late final _gsl_matrix_uchar_swap_rows = _gsl_matrix_uchar_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>, int, int)>();

  int gsl_matrix_uchar_swap_columns(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uchar_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uchar_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              size_t)>>('gsl_matrix_uchar_swap_columns');
  late final _gsl_matrix_uchar_swap_columns = _gsl_matrix_uchar_swap_columnsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>, int, int)>();

  int gsl_matrix_uchar_swap_rowcol(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uchar_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uchar_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              size_t)>>('gsl_matrix_uchar_swap_rowcol');
  late final _gsl_matrix_uchar_swap_rowcol = _gsl_matrix_uchar_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>, int, int)>();

  int gsl_matrix_uchar_transpose(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_transpose(
      m,
    );
  }

  late final _gsl_matrix_uchar_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_transpose');
  late final _gsl_matrix_uchar_transpose = _gsl_matrix_uchar_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_transpose_memcpy(
    ffi.Pointer<gsl_matrix_uchar> dest,
    ffi.Pointer<gsl_matrix_uchar> src,
  ) {
    return _gsl_matrix_uchar_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_uchar_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
                  ffi.Pointer<gsl_matrix_uchar>)>>(
      'gsl_matrix_uchar_transpose_memcpy');
  late final _gsl_matrix_uchar_transpose_memcpy =
      _gsl_matrix_uchar_transpose_memcpyPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_uchar> dest,
    ffi.Pointer<gsl_matrix_uchar> src,
  ) {
    return _gsl_matrix_uchar_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_uchar_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<gsl_matrix_uchar>,
                  ffi.Pointer<gsl_matrix_uchar>)>>(
      'gsl_matrix_uchar_transpose_tricpy');
  late final _gsl_matrix_uchar_transpose_tricpy =
      _gsl_matrix_uchar_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_max(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_max(
      m,
    );
  }

  late final _gsl_matrix_uchar_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_max');
  late final _gsl_matrix_uchar_max = _gsl_matrix_uchar_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_min(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_min(
      m,
    );
  }

  late final _gsl_matrix_uchar_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_min');
  late final _gsl_matrix_uchar_min = _gsl_matrix_uchar_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>)>();

  void gsl_matrix_uchar_minmax(
    ffi.Pointer<gsl_matrix_uchar> m,
    ffi.Pointer<ffi.Uint8> min_out,
    ffi.Pointer<ffi.Uint8> max_out,
  ) {
    return _gsl_matrix_uchar_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_uchar_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('gsl_matrix_uchar_minmax');
  late final _gsl_matrix_uchar_minmax = _gsl_matrix_uchar_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>)>();

  void gsl_matrix_uchar_max_index(
    ffi.Pointer<gsl_matrix_uchar> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_uchar_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_uchar_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_uchar_max_index');
  late final _gsl_matrix_uchar_max_index =
      _gsl_matrix_uchar_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_uchar_min_index(
    ffi.Pointer<gsl_matrix_uchar> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_uchar_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_uchar_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_uchar_min_index');
  late final _gsl_matrix_uchar_min_index =
      _gsl_matrix_uchar_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_uchar_minmax_index(
    ffi.Pointer<gsl_matrix_uchar> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_uchar_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_uchar_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_uchar_minmax_index');
  late final _gsl_matrix_uchar_minmax_index =
      _gsl_matrix_uchar_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_uchar_equal(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_matrix_uchar> b,
  ) {
    return _gsl_matrix_uchar_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_uchar_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_equal');
  late final _gsl_matrix_uchar_equal = _gsl_matrix_uchar_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_isnull(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_isnull(
      m,
    );
  }

  late final _gsl_matrix_uchar_isnullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_isnull');
  late final _gsl_matrix_uchar_isnull = _gsl_matrix_uchar_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_ispos(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_ispos(
      m,
    );
  }

  late final _gsl_matrix_uchar_isposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_ispos');
  late final _gsl_matrix_uchar_ispos = _gsl_matrix_uchar_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_isneg(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_isneg(
      m,
    );
  }

  late final _gsl_matrix_uchar_isnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_isneg');
  late final _gsl_matrix_uchar_isneg = _gsl_matrix_uchar_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_isnonneg(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_uchar_isnonnegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_isnonneg');
  late final _gsl_matrix_uchar_isnonneg = _gsl_matrix_uchar_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_norm1(
    ffi.Pointer<gsl_matrix_uchar> m,
  ) {
    return _gsl_matrix_uchar_norm1(
      m,
    );
  }

  late final _gsl_matrix_uchar_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_norm1');
  late final _gsl_matrix_uchar_norm1 = _gsl_matrix_uchar_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_add(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_matrix_uchar> b,
  ) {
    return _gsl_matrix_uchar_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_uchar_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_add');
  late final _gsl_matrix_uchar_add = _gsl_matrix_uchar_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_sub(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_matrix_uchar> b,
  ) {
    return _gsl_matrix_uchar_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_uchar_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_sub');
  late final _gsl_matrix_uchar_sub = _gsl_matrix_uchar_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_mul_elements(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_matrix_uchar> b,
  ) {
    return _gsl_matrix_uchar_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_uchar_mul_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_mul_elements');
  late final _gsl_matrix_uchar_mul_elements =
      _gsl_matrix_uchar_mul_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_div_elements(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_matrix_uchar> b,
  ) {
    return _gsl_matrix_uchar_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_uchar_div_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_matrix_uchar_div_elements');
  late final _gsl_matrix_uchar_div_elements =
      _gsl_matrix_uchar_div_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_matrix_uchar_scale(
    ffi.Pointer<gsl_matrix_uchar> a,
    int x,
  ) {
    return _gsl_matrix_uchar_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_uchar_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Uint8)>>('gsl_matrix_uchar_scale');
  late final _gsl_matrix_uchar_scale = _gsl_matrix_uchar_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>, int)>();

  int gsl_matrix_uchar_scale_rows(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_vector_uchar> x,
  ) {
    return _gsl_matrix_uchar_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_uchar_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_matrix_uchar_scale_rows');
  late final _gsl_matrix_uchar_scale_rows =
      _gsl_matrix_uchar_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_matrix_uchar_scale_columns(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_vector_uchar> x,
  ) {
    return _gsl_matrix_uchar_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_uchar_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
                  ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_matrix_uchar_scale_columns');
  late final _gsl_matrix_uchar_scale_columns =
      _gsl_matrix_uchar_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_matrix_uchar_add_constant(
    ffi.Pointer<gsl_matrix_uchar> a,
    int x,
  ) {
    return _gsl_matrix_uchar_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_uchar_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Uint8)>>('gsl_matrix_uchar_add_constant');
  late final _gsl_matrix_uchar_add_constant = _gsl_matrix_uchar_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>, int)>();

  int gsl_matrix_uchar_add_diagonal(
    ffi.Pointer<gsl_matrix_uchar> a,
    int x,
  ) {
    return _gsl_matrix_uchar_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_uchar_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Uint8)>>('gsl_matrix_uchar_add_diagonal');
  late final _gsl_matrix_uchar_add_diagonal = _gsl_matrix_uchar_add_diagonalPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>, int)>();

  int gsl_matrix_uchar_get_row(
    ffi.Pointer<gsl_vector_uchar> v,
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
  ) {
    return _gsl_matrix_uchar_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_uchar_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_matrix_uchar_get_row');
  late final _gsl_matrix_uchar_get_row =
      _gsl_matrix_uchar_get_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  int gsl_matrix_uchar_get_col(
    ffi.Pointer<gsl_vector_uchar> v,
    ffi.Pointer<gsl_matrix_uchar> m,
    int j,
  ) {
    return _gsl_matrix_uchar_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_uchar_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_matrix_uchar>,
              size_t)>>('gsl_matrix_uchar_get_col');
  late final _gsl_matrix_uchar_get_col =
      _gsl_matrix_uchar_get_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_matrix_uchar>, int)>();

  int gsl_matrix_uchar_set_row(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_matrix_uchar_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_uchar_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_matrix_uchar_set_row');
  late final _gsl_matrix_uchar_set_row =
      _gsl_matrix_uchar_set_rowPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_uchar>, int,
              ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_matrix_uchar_set_col(
    ffi.Pointer<gsl_matrix_uchar> m,
    int j,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_matrix_uchar_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_uchar_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_matrix_uchar_set_col');
  late final _gsl_matrix_uchar_set_col =
      _gsl_matrix_uchar_set_colPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_uchar>, int,
              ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_matrix_uchar_get(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uchar_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uchar_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              size_t)>>('gsl_matrix_uchar_get');
  late final _gsl_matrix_uchar_get = _gsl_matrix_uchar_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_uchar>, int, int)>();

  void gsl_matrix_uchar_set(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_matrix_uchar_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_uchar_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_uchar>, size_t, size_t,
              ffi.Uint8)>>('gsl_matrix_uchar_set');
  late final _gsl_matrix_uchar_set = _gsl_matrix_uchar_setPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_uchar>, int, int, int)>();

  ffi.Pointer<ffi.Uint8> gsl_matrix_uchar_ptr(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uchar_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uchar_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              size_t)>>('gsl_matrix_uchar_ptr');
  late final _gsl_matrix_uchar_ptr = _gsl_matrix_uchar_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<gsl_matrix_uchar>, int, int)>();

  ffi.Pointer<ffi.Uint8> gsl_matrix_uchar_const_ptr(
    ffi.Pointer<gsl_matrix_uchar> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_uchar_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_uchar_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<gsl_matrix_uchar>, size_t,
              size_t)>>('gsl_matrix_uchar_const_ptr');
  late final _gsl_matrix_uchar_const_ptr =
      _gsl_matrix_uchar_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<gsl_matrix_uchar>, int, int)>();

  ffi.Pointer<gsl_matrix_char> gsl_matrix_char_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_char_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_char_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_char> Function(
              size_t, size_t)>>('gsl_matrix_char_alloc');
  late final _gsl_matrix_char_alloc = _gsl_matrix_char_allocPtr
      .asFunction<ffi.Pointer<gsl_matrix_char> Function(int, int)>();

  ffi.Pointer<gsl_matrix_char> gsl_matrix_char_calloc(
    int n1,
    int n2,
  ) {
    return _gsl_matrix_char_calloc(
      n1,
      n2,
    );
  }

  late final _gsl_matrix_char_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_char> Function(
              size_t, size_t)>>('gsl_matrix_char_calloc');
  late final _gsl_matrix_char_calloc = _gsl_matrix_char_callocPtr
      .asFunction<ffi.Pointer<gsl_matrix_char> Function(int, int)>();

  ffi.Pointer<gsl_matrix_char> gsl_matrix_char_alloc_from_block(
    ffi.Pointer<gsl_block_char> b,
    int offset,
    int n1,
    int n2,
    int d2,
  ) {
    return _gsl_matrix_char_alloc_from_block(
      b,
      offset,
      n1,
      n2,
      d2,
    );
  }

  late final _gsl_matrix_char_alloc_from_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_char> Function(
              ffi.Pointer<gsl_block_char>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_char_alloc_from_block');
  late final _gsl_matrix_char_alloc_from_block =
      _gsl_matrix_char_alloc_from_blockPtr.asFunction<
          ffi.Pointer<gsl_matrix_char> Function(
              ffi.Pointer<gsl_block_char>, int, int, int, int)>();

  ffi.Pointer<gsl_matrix_char> gsl_matrix_char_alloc_from_matrix(
    ffi.Pointer<gsl_matrix_char> m,
    int k1,
    int k2,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_char_alloc_from_matrix(
      m,
      k1,
      k2,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_char_alloc_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix_char> Function(
              ffi.Pointer<gsl_matrix_char>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_char_alloc_from_matrix');
  late final _gsl_matrix_char_alloc_from_matrix =
      _gsl_matrix_char_alloc_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_matrix_char> Function(
              ffi.Pointer<gsl_matrix_char>, int, int, int, int)>();

  ffi.Pointer<gsl_vector_char> gsl_vector_char_alloc_row_from_matrix(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
  ) {
    return _gsl_vector_char_alloc_row_from_matrix(
      m,
      i,
    );
  }

  late final _gsl_vector_char_alloc_row_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_char> Function(ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_vector_char_alloc_row_from_matrix');
  late final _gsl_vector_char_alloc_row_from_matrix =
      _gsl_vector_char_alloc_row_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_char> Function(
              ffi.Pointer<gsl_matrix_char>, int)>();

  ffi.Pointer<gsl_vector_char> gsl_vector_char_alloc_col_from_matrix(
    ffi.Pointer<gsl_matrix_char> m,
    int j,
  ) {
    return _gsl_vector_char_alloc_col_from_matrix(
      m,
      j,
    );
  }

  late final _gsl_vector_char_alloc_col_from_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector_char> Function(ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_vector_char_alloc_col_from_matrix');
  late final _gsl_vector_char_alloc_col_from_matrix =
      _gsl_vector_char_alloc_col_from_matrixPtr.asFunction<
          ffi.Pointer<gsl_vector_char> Function(
              ffi.Pointer<gsl_matrix_char>, int)>();

  void gsl_matrix_char_free(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_free(
      m,
    );
  }

  late final _gsl_matrix_char_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_free');
  late final _gsl_matrix_char_free = _gsl_matrix_char_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_char>)>();

  _gsl_matrix_char_view gsl_matrix_char_submatrix(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_char_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_char_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_view Function(ffi.Pointer<gsl_matrix_char>, size_t,
              size_t, size_t, size_t)>>('gsl_matrix_char_submatrix');
  late final _gsl_matrix_char_submatrix =
      _gsl_matrix_char_submatrixPtr.asFunction<
          _gsl_matrix_char_view Function(
              ffi.Pointer<gsl_matrix_char>, int, int, int, int)>();

  _gsl_vector_char_view gsl_matrix_char_row(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
  ) {
    return _gsl_matrix_char_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_char_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(
              ffi.Pointer<gsl_matrix_char>, size_t)>>('gsl_matrix_char_row');
  late final _gsl_matrix_char_row = _gsl_matrix_char_rowPtr.asFunction<
      _gsl_vector_char_view Function(ffi.Pointer<gsl_matrix_char>, int)>();

  _gsl_vector_char_view gsl_matrix_char_column(
    ffi.Pointer<gsl_matrix_char> m,
    int j,
  ) {
    return _gsl_matrix_char_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_char_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(
              ffi.Pointer<gsl_matrix_char>, size_t)>>('gsl_matrix_char_column');
  late final _gsl_matrix_char_column = _gsl_matrix_char_columnPtr.asFunction<
      _gsl_vector_char_view Function(ffi.Pointer<gsl_matrix_char>, int)>();

  _gsl_vector_char_view gsl_matrix_char_diagonal(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_diagonal(
      m,
    );
  }

  late final _gsl_matrix_char_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_diagonal');
  late final _gsl_matrix_char_diagonal =
      _gsl_matrix_char_diagonalPtr.asFunction<
          _gsl_vector_char_view Function(ffi.Pointer<gsl_matrix_char>)>();

  _gsl_vector_char_view gsl_matrix_char_subdiagonal(
    ffi.Pointer<gsl_matrix_char> m,
    int k,
  ) {
    return _gsl_matrix_char_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_char_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_matrix_char_subdiagonal');
  late final _gsl_matrix_char_subdiagonal =
      _gsl_matrix_char_subdiagonalPtr.asFunction<
          _gsl_vector_char_view Function(ffi.Pointer<gsl_matrix_char>, int)>();

  _gsl_vector_char_view gsl_matrix_char_superdiagonal(
    ffi.Pointer<gsl_matrix_char> m,
    int k,
  ) {
    return _gsl_matrix_char_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_char_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_matrix_char_superdiagonal');
  late final _gsl_matrix_char_superdiagonal =
      _gsl_matrix_char_superdiagonalPtr.asFunction<
          _gsl_vector_char_view Function(ffi.Pointer<gsl_matrix_char>, int)>();

  _gsl_vector_char_view gsl_matrix_char_subrow(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_char_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_char_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(ffi.Pointer<gsl_matrix_char>, size_t,
              size_t, size_t)>>('gsl_matrix_char_subrow');
  late final _gsl_matrix_char_subrow = _gsl_matrix_char_subrowPtr.asFunction<
      _gsl_vector_char_view Function(
          ffi.Pointer<gsl_matrix_char>, int, int, int)>();

  _gsl_vector_char_view gsl_matrix_char_subcolumn(
    ffi.Pointer<gsl_matrix_char> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_char_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_char_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_view Function(ffi.Pointer<gsl_matrix_char>, size_t,
              size_t, size_t)>>('gsl_matrix_char_subcolumn');
  late final _gsl_matrix_char_subcolumn =
      _gsl_matrix_char_subcolumnPtr.asFunction<
          _gsl_vector_char_view Function(
              ffi.Pointer<gsl_matrix_char>, int, int, int)>();

  _gsl_matrix_char_view gsl_matrix_char_view_array(
    ffi.Pointer<ffi.Int8> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_char_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_char_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_view Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_matrix_char_view_array');
  late final _gsl_matrix_char_view_array =
      _gsl_matrix_char_view_arrayPtr.asFunction<
          _gsl_matrix_char_view Function(ffi.Pointer<ffi.Int8>, int, int)>();

  _gsl_matrix_char_view gsl_matrix_char_view_array_with_tda(
    ffi.Pointer<ffi.Int8> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_char_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_char_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_view Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              size_t)>>('gsl_matrix_char_view_array_with_tda');
  late final _gsl_matrix_char_view_array_with_tda =
      _gsl_matrix_char_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_char_view Function(
              ffi.Pointer<ffi.Int8>, int, int, int)>();

  _gsl_matrix_char_view gsl_matrix_char_view_vector(
    ffi.Pointer<gsl_vector_char> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_char_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_char_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_view Function(ffi.Pointer<gsl_vector_char>, size_t,
              size_t)>>('gsl_matrix_char_view_vector');
  late final _gsl_matrix_char_view_vector =
      _gsl_matrix_char_view_vectorPtr.asFunction<
          _gsl_matrix_char_view Function(
              ffi.Pointer<gsl_vector_char>, int, int)>();

  _gsl_matrix_char_view gsl_matrix_char_view_vector_with_tda(
    ffi.Pointer<gsl_vector_char> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_char_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_char_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_view Function(ffi.Pointer<gsl_vector_char>, size_t,
              size_t, size_t)>>('gsl_matrix_char_view_vector_with_tda');
  late final _gsl_matrix_char_view_vector_with_tda =
      _gsl_matrix_char_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_char_view Function(
              ffi.Pointer<gsl_vector_char>, int, int, int)>();

  _gsl_matrix_char_const_view gsl_matrix_char_const_submatrix(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int j,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_char_const_submatrix(
      m,
      i,
      j,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_char_const_submatrixPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_const_view Function(
              ffi.Pointer<gsl_matrix_char>,
              size_t,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_char_const_submatrix');
  late final _gsl_matrix_char_const_submatrix =
      _gsl_matrix_char_const_submatrixPtr.asFunction<
          _gsl_matrix_char_const_view Function(
              ffi.Pointer<gsl_matrix_char>, int, int, int, int)>();

  _gsl_vector_char_const_view gsl_matrix_char_const_row(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
  ) {
    return _gsl_matrix_char_const_row(
      m,
      i,
    );
  }

  late final _gsl_matrix_char_const_rowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_matrix_char_const_row');
  late final _gsl_matrix_char_const_row =
      _gsl_matrix_char_const_rowPtr.asFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_matrix_char>, int)>();

  _gsl_vector_char_const_view gsl_matrix_char_const_column(
    ffi.Pointer<gsl_matrix_char> m,
    int j,
  ) {
    return _gsl_matrix_char_const_column(
      m,
      j,
    );
  }

  late final _gsl_matrix_char_const_columnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_matrix_char_const_column');
  late final _gsl_matrix_char_const_column =
      _gsl_matrix_char_const_columnPtr.asFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_matrix_char>, int)>();

  _gsl_vector_char_const_view gsl_matrix_char_const_diagonal(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_const_diagonal(
      m,
    );
  }

  late final _gsl_matrix_char_const_diagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_const_diagonal');
  late final _gsl_matrix_char_const_diagonal =
      _gsl_matrix_char_const_diagonalPtr.asFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<gsl_matrix_char>)>();

  _gsl_vector_char_const_view gsl_matrix_char_const_subdiagonal(
    ffi.Pointer<gsl_matrix_char> m,
    int k,
  ) {
    return _gsl_matrix_char_const_subdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_char_const_subdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_matrix_char_const_subdiagonal');
  late final _gsl_matrix_char_const_subdiagonal =
      _gsl_matrix_char_const_subdiagonalPtr.asFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_matrix_char>, int)>();

  _gsl_vector_char_const_view gsl_matrix_char_const_superdiagonal(
    ffi.Pointer<gsl_matrix_char> m,
    int k,
  ) {
    return _gsl_matrix_char_const_superdiagonal(
      m,
      k,
    );
  }

  late final _gsl_matrix_char_const_superdiagonalPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_matrix_char_const_superdiagonal');
  late final _gsl_matrix_char_const_superdiagonal =
      _gsl_matrix_char_const_superdiagonalPtr.asFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_matrix_char>, int)>();

  _gsl_vector_char_const_view gsl_matrix_char_const_subrow(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int offset,
    int n,
  ) {
    return _gsl_matrix_char_const_subrow(
      m,
      i,
      offset,
      n,
    );
  }

  late final _gsl_matrix_char_const_subrowPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<gsl_matrix_char>,
              size_t, size_t, size_t)>>('gsl_matrix_char_const_subrow');
  late final _gsl_matrix_char_const_subrow =
      _gsl_matrix_char_const_subrowPtr.asFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_matrix_char>, int, int, int)>();

  _gsl_vector_char_const_view gsl_matrix_char_const_subcolumn(
    ffi.Pointer<gsl_matrix_char> m,
    int j,
    int offset,
    int n,
  ) {
    return _gsl_matrix_char_const_subcolumn(
      m,
      j,
      offset,
      n,
    );
  }

  late final _gsl_matrix_char_const_subcolumnPtr = _lookup<
      ffi.NativeFunction<
          _gsl_vector_char_const_view Function(ffi.Pointer<gsl_matrix_char>,
              size_t, size_t, size_t)>>('gsl_matrix_char_const_subcolumn');
  late final _gsl_matrix_char_const_subcolumn =
      _gsl_matrix_char_const_subcolumnPtr.asFunction<
          _gsl_vector_char_const_view Function(
              ffi.Pointer<gsl_matrix_char>, int, int, int)>();

  _gsl_matrix_char_const_view gsl_matrix_char_const_view_array(
    ffi.Pointer<ffi.Int8> base,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_char_const_view_array(
      base,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_char_const_view_arrayPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_const_view Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_matrix_char_const_view_array');
  late final _gsl_matrix_char_const_view_array =
      _gsl_matrix_char_const_view_arrayPtr.asFunction<
          _gsl_matrix_char_const_view Function(
              ffi.Pointer<ffi.Int8>, int, int)>();

  _gsl_matrix_char_const_view gsl_matrix_char_const_view_array_with_tda(
    ffi.Pointer<ffi.Int8> base,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_char_const_view_array_with_tda(
      base,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_char_const_view_array_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_const_view Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t, size_t)>>('gsl_matrix_char_const_view_array_with_tda');
  late final _gsl_matrix_char_const_view_array_with_tda =
      _gsl_matrix_char_const_view_array_with_tdaPtr.asFunction<
          _gsl_matrix_char_const_view Function(
              ffi.Pointer<ffi.Int8>, int, int, int)>();

  _gsl_matrix_char_const_view gsl_matrix_char_const_view_vector(
    ffi.Pointer<gsl_vector_char> v,
    int n1,
    int n2,
  ) {
    return _gsl_matrix_char_const_view_vector(
      v,
      n1,
      n2,
    );
  }

  late final _gsl_matrix_char_const_view_vectorPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_const_view Function(ffi.Pointer<gsl_vector_char>,
              size_t, size_t)>>('gsl_matrix_char_const_view_vector');
  late final _gsl_matrix_char_const_view_vector =
      _gsl_matrix_char_const_view_vectorPtr.asFunction<
          _gsl_matrix_char_const_view Function(
              ffi.Pointer<gsl_vector_char>, int, int)>();

  _gsl_matrix_char_const_view gsl_matrix_char_const_view_vector_with_tda(
    ffi.Pointer<gsl_vector_char> v,
    int n1,
    int n2,
    int tda,
  ) {
    return _gsl_matrix_char_const_view_vector_with_tda(
      v,
      n1,
      n2,
      tda,
    );
  }

  late final _gsl_matrix_char_const_view_vector_with_tdaPtr = _lookup<
      ffi.NativeFunction<
          _gsl_matrix_char_const_view Function(
              ffi.Pointer<gsl_vector_char>,
              size_t,
              size_t,
              size_t)>>('gsl_matrix_char_const_view_vector_with_tda');
  late final _gsl_matrix_char_const_view_vector_with_tda =
      _gsl_matrix_char_const_view_vector_with_tdaPtr.asFunction<
          _gsl_matrix_char_const_view Function(
              ffi.Pointer<gsl_vector_char>, int, int, int)>();

  void gsl_matrix_char_set_zero(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_set_zero(
      m,
    );
  }

  late final _gsl_matrix_char_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_set_zero');
  late final _gsl_matrix_char_set_zero = _gsl_matrix_char_set_zeroPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_char>)>();

  void gsl_matrix_char_set_identity(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_set_identity(
      m,
    );
  }

  late final _gsl_matrix_char_set_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_set_identity');
  late final _gsl_matrix_char_set_identity = _gsl_matrix_char_set_identityPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_char>)>();

  void gsl_matrix_char_set_all(
    ffi.Pointer<gsl_matrix_char> m,
    int x,
  ) {
    return _gsl_matrix_char_set_all(
      m,
      x,
    );
  }

  late final _gsl_matrix_char_set_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Int8)>>('gsl_matrix_char_set_all');
  late final _gsl_matrix_char_set_all = _gsl_matrix_char_set_allPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_char>, int)>();

  int gsl_matrix_char_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_fread(
      stream,
      m,
    );
  }

  late final _gsl_matrix_char_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_fread');
  late final _gsl_matrix_char_fread = _gsl_matrix_char_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_matrix_char_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_fwrite');
  late final _gsl_matrix_char_fwrite = _gsl_matrix_char_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_fscanf(
      stream,
      m,
    );
  }

  late final _gsl_matrix_char_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_fscanf');
  late final _gsl_matrix_char_fscanf = _gsl_matrix_char_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_matrix_char> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_matrix_char_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_matrix_char_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_char_fprintf');
  late final _gsl_matrix_char_fprintf = _gsl_matrix_char_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_matrix_char>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_matrix_char_memcpy(
    ffi.Pointer<gsl_matrix_char> dest,
    ffi.Pointer<gsl_matrix_char> src,
  ) {
    return _gsl_matrix_char_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_char_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_memcpy');
  late final _gsl_matrix_char_memcpy = _gsl_matrix_char_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_swap(
    ffi.Pointer<gsl_matrix_char> m1,
    ffi.Pointer<gsl_matrix_char> m2,
  ) {
    return _gsl_matrix_char_swap(
      m1,
      m2,
    );
  }

  late final _gsl_matrix_char_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_swap');
  late final _gsl_matrix_char_swap = _gsl_matrix_char_swapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_tricpy(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_char> dest,
    ffi.Pointer<gsl_matrix_char> src,
  ) {
    return _gsl_matrix_char_tricpy(
      Uplo,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_char_tricpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_tricpy');
  late final _gsl_matrix_char_tricpy = _gsl_matrix_char_tricpyPtr.asFunction<
      int Function(int, int, ffi.Pointer<gsl_matrix_char>,
          ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_swap_rows(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_char_swap_rows(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_char_swap_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>, size_t,
              size_t)>>('gsl_matrix_char_swap_rows');
  late final _gsl_matrix_char_swap_rows = _gsl_matrix_char_swap_rowsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>, int, int)>();

  int gsl_matrix_char_swap_columns(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_char_swap_columns(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_char_swap_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>, size_t,
              size_t)>>('gsl_matrix_char_swap_columns');
  late final _gsl_matrix_char_swap_columns = _gsl_matrix_char_swap_columnsPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>, int, int)>();

  int gsl_matrix_char_swap_rowcol(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_char_swap_rowcol(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_char_swap_rowcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>, size_t,
              size_t)>>('gsl_matrix_char_swap_rowcol');
  late final _gsl_matrix_char_swap_rowcol = _gsl_matrix_char_swap_rowcolPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>, int, int)>();

  int gsl_matrix_char_transpose(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_transpose(
      m,
    );
  }

  late final _gsl_matrix_char_transposePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_transpose');
  late final _gsl_matrix_char_transpose = _gsl_matrix_char_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_transpose_memcpy(
    ffi.Pointer<gsl_matrix_char> dest,
    ffi.Pointer<gsl_matrix_char> src,
  ) {
    return _gsl_matrix_char_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_matrix_char_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_transpose_memcpy');
  late final _gsl_matrix_char_transpose_memcpy =
      _gsl_matrix_char_transpose_memcpyPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_transpose_tricpy(
    int Uplo_src,
    int Diag,
    ffi.Pointer<gsl_matrix_char> dest,
    ffi.Pointer<gsl_matrix_char> src,
  ) {
    return _gsl_matrix_char_transpose_tricpy(
      Uplo_src,
      Diag,
      dest,
      src,
    );
  }

  late final _gsl_matrix_char_transpose_tricpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Int32, ffi.Int32,
                  ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_transpose_tricpy');
  late final _gsl_matrix_char_transpose_tricpy =
      _gsl_matrix_char_transpose_tricpyPtr.asFunction<
          int Function(int, int, ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_max(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_max(
      m,
    );
  }

  late final _gsl_matrix_char_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_max');
  late final _gsl_matrix_char_max = _gsl_matrix_char_maxPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_min(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_min(
      m,
    );
  }

  late final _gsl_matrix_char_minPtr = _lookup<
          ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_min');
  late final _gsl_matrix_char_min = _gsl_matrix_char_minPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>)>();

  void gsl_matrix_char_minmax(
    ffi.Pointer<gsl_matrix_char> m,
    ffi.Pointer<ffi.Int8> min_out,
    ffi.Pointer<ffi.Int8> max_out,
  ) {
    return _gsl_matrix_char_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_matrix_char_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_char>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('gsl_matrix_char_minmax');
  late final _gsl_matrix_char_minmax = _gsl_matrix_char_minmaxPtr.asFunction<
      void Function(ffi.Pointer<gsl_matrix_char>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void gsl_matrix_char_max_index(
    ffi.Pointer<gsl_matrix_char> m,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_char_max_index(
      m,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_char_max_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_char>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_char_max_index');
  late final _gsl_matrix_char_max_index =
      _gsl_matrix_char_max_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_char>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_char_min_index(
    ffi.Pointer<gsl_matrix_char> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
  ) {
    return _gsl_matrix_char_min_index(
      m,
      imin,
      jmin,
    );
  }

  late final _gsl_matrix_char_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_char>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_char_min_index');
  late final _gsl_matrix_char_min_index =
      _gsl_matrix_char_min_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_char>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  void gsl_matrix_char_minmax_index(
    ffi.Pointer<gsl_matrix_char> m,
    ffi.Pointer<size_t> imin,
    ffi.Pointer<size_t> jmin,
    ffi.Pointer<size_t> imax,
    ffi.Pointer<size_t> jmax,
  ) {
    return _gsl_matrix_char_minmax_index(
      m,
      imin,
      jmin,
      imax,
      jmax,
    );
  }

  late final _gsl_matrix_char_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_matrix_char_minmax_index');
  late final _gsl_matrix_char_minmax_index =
      _gsl_matrix_char_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<gsl_matrix_char>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_matrix_char_equal(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_matrix_char> b,
  ) {
    return _gsl_matrix_char_equal(
      a,
      b,
    );
  }

  late final _gsl_matrix_char_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_equal');
  late final _gsl_matrix_char_equal = _gsl_matrix_char_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_isnull(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_isnull(
      m,
    );
  }

  late final _gsl_matrix_char_isnullPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_isnull');
  late final _gsl_matrix_char_isnull = _gsl_matrix_char_isnullPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_ispos(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_ispos(
      m,
    );
  }

  late final _gsl_matrix_char_isposPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_ispos');
  late final _gsl_matrix_char_ispos = _gsl_matrix_char_isposPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_isneg(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_isneg(
      m,
    );
  }

  late final _gsl_matrix_char_isnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_isneg');
  late final _gsl_matrix_char_isneg = _gsl_matrix_char_isnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_isnonneg(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_isnonneg(
      m,
    );
  }

  late final _gsl_matrix_char_isnonnegPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_isnonneg');
  late final _gsl_matrix_char_isnonneg = _gsl_matrix_char_isnonnegPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_norm1(
    ffi.Pointer<gsl_matrix_char> m,
  ) {
    return _gsl_matrix_char_norm1(
      m,
    );
  }

  late final _gsl_matrix_char_norm1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<gsl_matrix_char>)>>(
      'gsl_matrix_char_norm1');
  late final _gsl_matrix_char_norm1 = _gsl_matrix_char_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_add(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_matrix_char> b,
  ) {
    return _gsl_matrix_char_add(
      a,
      b,
    );
  }

  late final _gsl_matrix_char_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_add');
  late final _gsl_matrix_char_add = _gsl_matrix_char_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_sub(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_matrix_char> b,
  ) {
    return _gsl_matrix_char_sub(
      a,
      b,
    );
  }

  late final _gsl_matrix_char_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_sub');
  late final _gsl_matrix_char_sub = _gsl_matrix_char_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_mul_elements(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_matrix_char> b,
  ) {
    return _gsl_matrix_char_mul_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_char_mul_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_mul_elements');
  late final _gsl_matrix_char_mul_elements =
      _gsl_matrix_char_mul_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_div_elements(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_matrix_char> b,
  ) {
    return _gsl_matrix_char_div_elements(
      a,
      b,
    );
  }

  late final _gsl_matrix_char_div_elementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_matrix_char_div_elements');
  late final _gsl_matrix_char_div_elements =
      _gsl_matrix_char_div_elementsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_matrix_char_scale(
    ffi.Pointer<gsl_matrix_char> a,
    int x,
  ) {
    return _gsl_matrix_char_scale(
      a,
      x,
    );
  }

  late final _gsl_matrix_char_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Int8)>>('gsl_matrix_char_scale');
  late final _gsl_matrix_char_scale = _gsl_matrix_char_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>, int)>();

  int gsl_matrix_char_scale_rows(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_vector_char> x,
  ) {
    return _gsl_matrix_char_scale_rows(
      a,
      x,
    );
  }

  late final _gsl_matrix_char_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_matrix_char_scale_rows');
  late final _gsl_matrix_char_scale_rows =
      _gsl_matrix_char_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_matrix_char_scale_columns(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_vector_char> x,
  ) {
    return _gsl_matrix_char_scale_columns(
      a,
      x,
    );
  }

  late final _gsl_matrix_char_scale_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_matrix_char_scale_columns');
  late final _gsl_matrix_char_scale_columns =
      _gsl_matrix_char_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_matrix_char_add_constant(
    ffi.Pointer<gsl_matrix_char> a,
    int x,
  ) {
    return _gsl_matrix_char_add_constant(
      a,
      x,
    );
  }

  late final _gsl_matrix_char_add_constantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Int8)>>('gsl_matrix_char_add_constant');
  late final _gsl_matrix_char_add_constant = _gsl_matrix_char_add_constantPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>, int)>();

  int gsl_matrix_char_add_diagonal(
    ffi.Pointer<gsl_matrix_char> a,
    int x,
  ) {
    return _gsl_matrix_char_add_diagonal(
      a,
      x,
    );
  }

  late final _gsl_matrix_char_add_diagonalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Int8)>>('gsl_matrix_char_add_diagonal');
  late final _gsl_matrix_char_add_diagonal = _gsl_matrix_char_add_diagonalPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>, int)>();

  int gsl_matrix_char_get_row(
    ffi.Pointer<gsl_vector_char> v,
    ffi.Pointer<gsl_matrix_char> m,
    int i,
  ) {
    return _gsl_matrix_char_get_row(
      v,
      m,
      i,
    );
  }

  late final _gsl_matrix_char_get_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_matrix_char_get_row');
  late final _gsl_matrix_char_get_row = _gsl_matrix_char_get_rowPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_matrix_char>, int)>();

  int gsl_matrix_char_get_col(
    ffi.Pointer<gsl_vector_char> v,
    ffi.Pointer<gsl_matrix_char> m,
    int j,
  ) {
    return _gsl_matrix_char_get_col(
      v,
      m,
      j,
    );
  }

  late final _gsl_matrix_char_get_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_matrix_char>,
              size_t)>>('gsl_matrix_char_get_col');
  late final _gsl_matrix_char_get_col = _gsl_matrix_char_get_colPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_matrix_char>, int)>();

  int gsl_matrix_char_set_row(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_matrix_char_set_row(
      m,
      i,
      v,
    );
  }

  late final _gsl_matrix_char_set_rowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>, size_t,
              ffi.Pointer<gsl_vector_char>)>>('gsl_matrix_char_set_row');
  late final _gsl_matrix_char_set_row = _gsl_matrix_char_set_rowPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_char>, int, ffi.Pointer<gsl_vector_char>)>();

  int gsl_matrix_char_set_col(
    ffi.Pointer<gsl_matrix_char> m,
    int j,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_matrix_char_set_col(
      m,
      j,
      v,
    );
  }

  late final _gsl_matrix_char_set_colPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>, size_t,
              ffi.Pointer<gsl_vector_char>)>>('gsl_matrix_char_set_col');
  late final _gsl_matrix_char_set_col = _gsl_matrix_char_set_colPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_char>, int, ffi.Pointer<gsl_vector_char>)>();

  int gsl_matrix_char_get(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_char_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_char_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<gsl_matrix_char>, size_t,
              size_t)>>('gsl_matrix_char_get');
  late final _gsl_matrix_char_get = _gsl_matrix_char_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_char>, int, int)>();

  void gsl_matrix_char_set(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_matrix_char_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_matrix_char_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_matrix_char>, size_t, size_t,
              ffi.Int8)>>('gsl_matrix_char_set');
  late final _gsl_matrix_char_set = _gsl_matrix_char_setPtr
      .asFunction<void Function(ffi.Pointer<gsl_matrix_char>, int, int, int)>();

  ffi.Pointer<ffi.Int8> gsl_matrix_char_ptr(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_char_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_char_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_matrix_char>, size_t,
              size_t)>>('gsl_matrix_char_ptr');
  late final _gsl_matrix_char_ptr = _gsl_matrix_char_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_matrix_char>, int, int)>();

  ffi.Pointer<ffi.Int8> gsl_matrix_char_const_ptr(
    ffi.Pointer<gsl_matrix_char> m,
    int i,
    int j,
  ) {
    return _gsl_matrix_char_const_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_matrix_char_const_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_matrix_char>, size_t,
              size_t)>>('gsl_matrix_char_const_ptr');
  late final _gsl_matrix_char_const_ptr =
      _gsl_matrix_char_const_ptrPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_matrix_char>, int, int)>();

  ffi.Pointer<gsl_eigen_symm_workspace> gsl_eigen_symm_alloc(
    int n,
  ) {
    return _gsl_eigen_symm_alloc(
      n,
    );
  }

  late final _gsl_eigen_symm_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_symm_workspace> Function(
              size_t)>>('gsl_eigen_symm_alloc');
  late final _gsl_eigen_symm_alloc = _gsl_eigen_symm_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_symm_workspace> Function(int)>();

  void gsl_eigen_symm_free(
    ffi.Pointer<gsl_eigen_symm_workspace> w,
  ) {
    return _gsl_eigen_symm_free(
      w,
    );
  }

  late final _gsl_eigen_symm_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_eigen_symm_workspace>)>>('gsl_eigen_symm_free');
  late final _gsl_eigen_symm_free = _gsl_eigen_symm_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_symm_workspace>)>();

  int gsl_eigen_symm(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_eigen_symm_workspace> w,
  ) {
    return _gsl_eigen_symm(
      A,
      eval,
      w,
    );
  }

  late final _gsl_eigen_symmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_eigen_symm_workspace>)>>('gsl_eigen_symm');
  late final _gsl_eigen_symm = _gsl_eigen_symmPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_eigen_symm_workspace>)>();

  ffi.Pointer<gsl_eigen_symmv_workspace> gsl_eigen_symmv_alloc(
    int n,
  ) {
    return _gsl_eigen_symmv_alloc(
      n,
    );
  }

  late final _gsl_eigen_symmv_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_symmv_workspace> Function(
              size_t)>>('gsl_eigen_symmv_alloc');
  late final _gsl_eigen_symmv_alloc = _gsl_eigen_symmv_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_symmv_workspace> Function(int)>();

  void gsl_eigen_symmv_free(
    ffi.Pointer<gsl_eigen_symmv_workspace> w,
  ) {
    return _gsl_eigen_symmv_free(
      w,
    );
  }

  late final _gsl_eigen_symmv_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_eigen_symmv_workspace>)>>('gsl_eigen_symmv_free');
  late final _gsl_eigen_symmv_free = _gsl_eigen_symmv_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_symmv_workspace>)>();

  int gsl_eigen_symmv(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_matrix> evec,
    ffi.Pointer<gsl_eigen_symmv_workspace> w,
  ) {
    return _gsl_eigen_symmv(
      A,
      eval,
      evec,
      w,
    );
  }

  late final _gsl_eigen_symmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_eigen_symmv_workspace>)>>('gsl_eigen_symmv');
  late final _gsl_eigen_symmv = _gsl_eigen_symmvPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_eigen_symmv_workspace>)>();

  ffi.Pointer<gsl_eigen_herm_workspace> gsl_eigen_herm_alloc(
    int n,
  ) {
    return _gsl_eigen_herm_alloc(
      n,
    );
  }

  late final _gsl_eigen_herm_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_herm_workspace> Function(
              size_t)>>('gsl_eigen_herm_alloc');
  late final _gsl_eigen_herm_alloc = _gsl_eigen_herm_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_herm_workspace> Function(int)>();

  void gsl_eigen_herm_free(
    ffi.Pointer<gsl_eigen_herm_workspace> w,
  ) {
    return _gsl_eigen_herm_free(
      w,
    );
  }

  late final _gsl_eigen_herm_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_eigen_herm_workspace>)>>('gsl_eigen_herm_free');
  late final _gsl_eigen_herm_free = _gsl_eigen_herm_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_herm_workspace>)>();

  int gsl_eigen_herm(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_eigen_herm_workspace> w,
  ) {
    return _gsl_eigen_herm(
      A,
      eval,
      w,
    );
  }

  late final _gsl_eigen_hermPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_eigen_herm_workspace>)>>('gsl_eigen_herm');
  late final _gsl_eigen_herm = _gsl_eigen_hermPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix_complex>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_eigen_herm_workspace>)>();

  ffi.Pointer<gsl_eigen_hermv_workspace> gsl_eigen_hermv_alloc(
    int n,
  ) {
    return _gsl_eigen_hermv_alloc(
      n,
    );
  }

  late final _gsl_eigen_hermv_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_hermv_workspace> Function(
              size_t)>>('gsl_eigen_hermv_alloc');
  late final _gsl_eigen_hermv_alloc = _gsl_eigen_hermv_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_hermv_workspace> Function(int)>();

  void gsl_eigen_hermv_free(
    ffi.Pointer<gsl_eigen_hermv_workspace> w,
  ) {
    return _gsl_eigen_hermv_free(
      w,
    );
  }

  late final _gsl_eigen_hermv_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_eigen_hermv_workspace>)>>('gsl_eigen_hermv_free');
  late final _gsl_eigen_hermv_free = _gsl_eigen_hermv_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_hermv_workspace>)>();

  int gsl_eigen_hermv(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_matrix_complex> evec,
    ffi.Pointer<gsl_eigen_hermv_workspace> w,
  ) {
    return _gsl_eigen_hermv(
      A,
      eval,
      evec,
      w,
    );
  }

  late final _gsl_eigen_hermvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_eigen_hermv_workspace>)>>('gsl_eigen_hermv');
  late final _gsl_eigen_hermv = _gsl_eigen_hermvPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_eigen_hermv_workspace>)>();

  ffi.Pointer<gsl_eigen_francis_workspace> gsl_eigen_francis_alloc() {
    return _gsl_eigen_francis_alloc();
  }

  late final _gsl_eigen_francis_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_francis_workspace>
              Function()>>('gsl_eigen_francis_alloc');
  late final _gsl_eigen_francis_alloc = _gsl_eigen_francis_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_francis_workspace> Function()>();

  void gsl_eigen_francis_free(
    ffi.Pointer<gsl_eigen_francis_workspace> w,
  ) {
    return _gsl_eigen_francis_free(
      w,
    );
  }

  late final _gsl_eigen_francis_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_eigen_francis_workspace>)>>(
      'gsl_eigen_francis_free');
  late final _gsl_eigen_francis_free = _gsl_eigen_francis_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_francis_workspace>)>();

  void gsl_eigen_francis_T(
    int compute_t,
    ffi.Pointer<gsl_eigen_francis_workspace> w,
  ) {
    return _gsl_eigen_francis_T(
      compute_t,
      w,
    );
  }

  late final _gsl_eigen_francis_TPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int32, ffi.Pointer<gsl_eigen_francis_workspace>)>>(
      'gsl_eigen_francis_T');
  late final _gsl_eigen_francis_T = _gsl_eigen_francis_TPtr.asFunction<
      void Function(int, ffi.Pointer<gsl_eigen_francis_workspace>)>();

  int gsl_eigen_francis(
    ffi.Pointer<gsl_matrix> H,
    ffi.Pointer<gsl_vector_complex> eval,
    ffi.Pointer<gsl_eigen_francis_workspace> w,
  ) {
    return _gsl_eigen_francis(
      H,
      eval,
      w,
    );
  }

  late final _gsl_eigen_francisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_eigen_francis_workspace>)>>('gsl_eigen_francis');
  late final _gsl_eigen_francis = _gsl_eigen_francisPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_eigen_francis_workspace>)>();

  int gsl_eigen_francis_Z(
    ffi.Pointer<gsl_matrix> H,
    ffi.Pointer<gsl_vector_complex> eval,
    ffi.Pointer<gsl_matrix> Z,
    ffi.Pointer<gsl_eigen_francis_workspace> w,
  ) {
    return _gsl_eigen_francis_Z(
      H,
      eval,
      Z,
      w,
    );
  }

  late final _gsl_eigen_francis_ZPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_eigen_francis_workspace>)>>(
      'gsl_eigen_francis_Z');
  late final _gsl_eigen_francis_Z = _gsl_eigen_francis_ZPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_eigen_francis_workspace>)>();

  ffi.Pointer<gsl_eigen_nonsymm_workspace> gsl_eigen_nonsymm_alloc(
    int n,
  ) {
    return _gsl_eigen_nonsymm_alloc(
      n,
    );
  }

  late final _gsl_eigen_nonsymm_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_nonsymm_workspace> Function(
              size_t)>>('gsl_eigen_nonsymm_alloc');
  late final _gsl_eigen_nonsymm_alloc = _gsl_eigen_nonsymm_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_nonsymm_workspace> Function(int)>();

  void gsl_eigen_nonsymm_free(
    ffi.Pointer<gsl_eigen_nonsymm_workspace> w,
  ) {
    return _gsl_eigen_nonsymm_free(
      w,
    );
  }

  late final _gsl_eigen_nonsymm_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_eigen_nonsymm_workspace>)>>(
      'gsl_eigen_nonsymm_free');
  late final _gsl_eigen_nonsymm_free = _gsl_eigen_nonsymm_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_nonsymm_workspace>)>();

  void gsl_eigen_nonsymm_params(
    int compute_t,
    int balance,
    ffi.Pointer<gsl_eigen_nonsymm_workspace> w,
  ) {
    return _gsl_eigen_nonsymm_params(
      compute_t,
      balance,
      w,
    );
  }

  late final _gsl_eigen_nonsymm_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int32, ffi.Int32,
                  ffi.Pointer<gsl_eigen_nonsymm_workspace>)>>(
      'gsl_eigen_nonsymm_params');
  late final _gsl_eigen_nonsymm_params =
      _gsl_eigen_nonsymm_paramsPtr.asFunction<
          void Function(int, int, ffi.Pointer<gsl_eigen_nonsymm_workspace>)>();

  int gsl_eigen_nonsymm(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector_complex> eval,
    ffi.Pointer<gsl_eigen_nonsymm_workspace> w,
  ) {
    return _gsl_eigen_nonsymm(
      A,
      eval,
      w,
    );
  }

  late final _gsl_eigen_nonsymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_eigen_nonsymm_workspace>)>>('gsl_eigen_nonsymm');
  late final _gsl_eigen_nonsymm = _gsl_eigen_nonsymmPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_eigen_nonsymm_workspace>)>();

  int gsl_eigen_nonsymm_Z(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector_complex> eval,
    ffi.Pointer<gsl_matrix> Z,
    ffi.Pointer<gsl_eigen_nonsymm_workspace> w,
  ) {
    return _gsl_eigen_nonsymm_Z(
      A,
      eval,
      Z,
      w,
    );
  }

  late final _gsl_eigen_nonsymm_ZPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_eigen_nonsymm_workspace>)>>(
      'gsl_eigen_nonsymm_Z');
  late final _gsl_eigen_nonsymm_Z = _gsl_eigen_nonsymm_ZPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_eigen_nonsymm_workspace>)>();

  ffi.Pointer<gsl_eigen_nonsymmv_workspace> gsl_eigen_nonsymmv_alloc(
    int n,
  ) {
    return _gsl_eigen_nonsymmv_alloc(
      n,
    );
  }

  late final _gsl_eigen_nonsymmv_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_nonsymmv_workspace> Function(
              size_t)>>('gsl_eigen_nonsymmv_alloc');
  late final _gsl_eigen_nonsymmv_alloc = _gsl_eigen_nonsymmv_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_nonsymmv_workspace> Function(int)>();

  void gsl_eigen_nonsymmv_free(
    ffi.Pointer<gsl_eigen_nonsymmv_workspace> w,
  ) {
    return _gsl_eigen_nonsymmv_free(
      w,
    );
  }

  late final _gsl_eigen_nonsymmv_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_eigen_nonsymmv_workspace>)>>(
      'gsl_eigen_nonsymmv_free');
  late final _gsl_eigen_nonsymmv_free = _gsl_eigen_nonsymmv_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_nonsymmv_workspace>)>();

  void gsl_eigen_nonsymmv_params(
    int balance,
    ffi.Pointer<gsl_eigen_nonsymmv_workspace> w,
  ) {
    return _gsl_eigen_nonsymmv_params(
      balance,
      w,
    );
  }

  late final _gsl_eigen_nonsymmv_paramsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int32, ffi.Pointer<gsl_eigen_nonsymmv_workspace>)>>(
      'gsl_eigen_nonsymmv_params');
  late final _gsl_eigen_nonsymmv_params =
      _gsl_eigen_nonsymmv_paramsPtr.asFunction<
          void Function(int, ffi.Pointer<gsl_eigen_nonsymmv_workspace>)>();

  int gsl_eigen_nonsymmv(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector_complex> eval,
    ffi.Pointer<gsl_matrix_complex> evec,
    ffi.Pointer<gsl_eigen_nonsymmv_workspace> w,
  ) {
    return _gsl_eigen_nonsymmv(
      A,
      eval,
      evec,
      w,
    );
  }

  late final _gsl_eigen_nonsymmvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_eigen_nonsymmv_workspace>)>>(
      'gsl_eigen_nonsymmv');
  late final _gsl_eigen_nonsymmv = _gsl_eigen_nonsymmvPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_eigen_nonsymmv_workspace>)>();

  int gsl_eigen_nonsymmv_Z(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector_complex> eval,
    ffi.Pointer<gsl_matrix_complex> evec,
    ffi.Pointer<gsl_matrix> Z,
    ffi.Pointer<gsl_eigen_nonsymmv_workspace> w,
  ) {
    return _gsl_eigen_nonsymmv_Z(
      A,
      eval,
      evec,
      Z,
      w,
    );
  }

  late final _gsl_eigen_nonsymmv_ZPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_eigen_nonsymmv_workspace>)>>(
      'gsl_eigen_nonsymmv_Z');
  late final _gsl_eigen_nonsymmv_Z = _gsl_eigen_nonsymmv_ZPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_eigen_nonsymmv_workspace>)>();

  ffi.Pointer<gsl_eigen_gensymm_workspace> gsl_eigen_gensymm_alloc(
    int n,
  ) {
    return _gsl_eigen_gensymm_alloc(
      n,
    );
  }

  late final _gsl_eigen_gensymm_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_gensymm_workspace> Function(
              size_t)>>('gsl_eigen_gensymm_alloc');
  late final _gsl_eigen_gensymm_alloc = _gsl_eigen_gensymm_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_gensymm_workspace> Function(int)>();

  void gsl_eigen_gensymm_free(
    ffi.Pointer<gsl_eigen_gensymm_workspace> w,
  ) {
    return _gsl_eigen_gensymm_free(
      w,
    );
  }

  late final _gsl_eigen_gensymm_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_eigen_gensymm_workspace>)>>(
      'gsl_eigen_gensymm_free');
  late final _gsl_eigen_gensymm_free = _gsl_eigen_gensymm_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_gensymm_workspace>)>();

  int gsl_eigen_gensymm(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_eigen_gensymm_workspace> w,
  ) {
    return _gsl_eigen_gensymm(
      A,
      B,
      eval,
      w,
    );
  }

  late final _gsl_eigen_gensymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_eigen_gensymm_workspace>)>>('gsl_eigen_gensymm');
  late final _gsl_eigen_gensymm = _gsl_eigen_gensymmPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_eigen_gensymm_workspace>)>();

  int gsl_eigen_gensymm_standardize(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
  ) {
    return _gsl_eigen_gensymm_standardize(
      A,
      B,
    );
  }

  late final _gsl_eigen_gensymm_standardizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_eigen_gensymm_standardize');
  late final _gsl_eigen_gensymm_standardize =
      _gsl_eigen_gensymm_standardizePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  ffi.Pointer<gsl_eigen_gensymmv_workspace> gsl_eigen_gensymmv_alloc(
    int n,
  ) {
    return _gsl_eigen_gensymmv_alloc(
      n,
    );
  }

  late final _gsl_eigen_gensymmv_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_gensymmv_workspace> Function(
              size_t)>>('gsl_eigen_gensymmv_alloc');
  late final _gsl_eigen_gensymmv_alloc = _gsl_eigen_gensymmv_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_gensymmv_workspace> Function(int)>();

  void gsl_eigen_gensymmv_free(
    ffi.Pointer<gsl_eigen_gensymmv_workspace> w,
  ) {
    return _gsl_eigen_gensymmv_free(
      w,
    );
  }

  late final _gsl_eigen_gensymmv_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_eigen_gensymmv_workspace>)>>(
      'gsl_eigen_gensymmv_free');
  late final _gsl_eigen_gensymmv_free = _gsl_eigen_gensymmv_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_gensymmv_workspace>)>();

  int gsl_eigen_gensymmv(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_matrix> evec,
    ffi.Pointer<gsl_eigen_gensymmv_workspace> w,
  ) {
    return _gsl_eigen_gensymmv(
      A,
      B,
      eval,
      evec,
      w,
    );
  }

  late final _gsl_eigen_gensymmvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_eigen_gensymmv_workspace>)>>(
      'gsl_eigen_gensymmv');
  late final _gsl_eigen_gensymmv = _gsl_eigen_gensymmvPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_eigen_gensymmv_workspace>)>();

  ffi.Pointer<gsl_eigen_genherm_workspace> gsl_eigen_genherm_alloc(
    int n,
  ) {
    return _gsl_eigen_genherm_alloc(
      n,
    );
  }

  late final _gsl_eigen_genherm_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_genherm_workspace> Function(
              size_t)>>('gsl_eigen_genherm_alloc');
  late final _gsl_eigen_genherm_alloc = _gsl_eigen_genherm_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_genherm_workspace> Function(int)>();

  void gsl_eigen_genherm_free(
    ffi.Pointer<gsl_eigen_genherm_workspace> w,
  ) {
    return _gsl_eigen_genherm_free(
      w,
    );
  }

  late final _gsl_eigen_genherm_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_eigen_genherm_workspace>)>>(
      'gsl_eigen_genherm_free');
  late final _gsl_eigen_genherm_free = _gsl_eigen_genherm_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_genherm_workspace>)>();

  int gsl_eigen_genherm(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_eigen_genherm_workspace> w,
  ) {
    return _gsl_eigen_genherm(
      A,
      B,
      eval,
      w,
    );
  }

  late final _gsl_eigen_genhermPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_eigen_genherm_workspace>)>>('gsl_eigen_genherm');
  late final _gsl_eigen_genherm = _gsl_eigen_genhermPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_eigen_genherm_workspace>)>();

  int gsl_eigen_genherm_standardize(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
  ) {
    return _gsl_eigen_genherm_standardize(
      A,
      B,
    );
  }

  late final _gsl_eigen_genherm_standardizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_eigen_genherm_standardize');
  late final _gsl_eigen_genherm_standardize =
      _gsl_eigen_genherm_standardizePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  ffi.Pointer<gsl_eigen_genhermv_workspace> gsl_eigen_genhermv_alloc(
    int n,
  ) {
    return _gsl_eigen_genhermv_alloc(
      n,
    );
  }

  late final _gsl_eigen_genhermv_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_genhermv_workspace> Function(
              size_t)>>('gsl_eigen_genhermv_alloc');
  late final _gsl_eigen_genhermv_alloc = _gsl_eigen_genhermv_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_genhermv_workspace> Function(int)>();

  void gsl_eigen_genhermv_free(
    ffi.Pointer<gsl_eigen_genhermv_workspace> w,
  ) {
    return _gsl_eigen_genhermv_free(
      w,
    );
  }

  late final _gsl_eigen_genhermv_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_eigen_genhermv_workspace>)>>(
      'gsl_eigen_genhermv_free');
  late final _gsl_eigen_genhermv_free = _gsl_eigen_genhermv_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_genhermv_workspace>)>();

  int gsl_eigen_genhermv(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_matrix_complex> evec,
    ffi.Pointer<gsl_eigen_genhermv_workspace> w,
  ) {
    return _gsl_eigen_genhermv(
      A,
      B,
      eval,
      evec,
      w,
    );
  }

  late final _gsl_eigen_genhermvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_eigen_genhermv_workspace>)>>(
      'gsl_eigen_genhermv');
  late final _gsl_eigen_genhermv = _gsl_eigen_genhermvPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_eigen_genhermv_workspace>)>();

  ffi.Pointer<gsl_eigen_gen_workspace> gsl_eigen_gen_alloc(
    int n,
  ) {
    return _gsl_eigen_gen_alloc(
      n,
    );
  }

  late final _gsl_eigen_gen_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_gen_workspace> Function(
              size_t)>>('gsl_eigen_gen_alloc');
  late final _gsl_eigen_gen_alloc = _gsl_eigen_gen_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_gen_workspace> Function(int)>();

  void gsl_eigen_gen_free(
    ffi.Pointer<gsl_eigen_gen_workspace> w,
  ) {
    return _gsl_eigen_gen_free(
      w,
    );
  }

  late final _gsl_eigen_gen_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_eigen_gen_workspace>)>>('gsl_eigen_gen_free');
  late final _gsl_eigen_gen_free = _gsl_eigen_gen_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_gen_workspace>)>();

  void gsl_eigen_gen_params(
    int compute_s,
    int compute_t,
    int balance,
    ffi.Pointer<gsl_eigen_gen_workspace> w,
  ) {
    return _gsl_eigen_gen_params(
      compute_s,
      compute_t,
      balance,
      w,
    );
  }

  late final _gsl_eigen_gen_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Pointer<gsl_eigen_gen_workspace>)>>('gsl_eigen_gen_params');
  late final _gsl_eigen_gen_params = _gsl_eigen_gen_paramsPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<gsl_eigen_gen_workspace>)>();

  int gsl_eigen_gen(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_vector_complex> alpha,
    ffi.Pointer<gsl_vector> beta,
    ffi.Pointer<gsl_eigen_gen_workspace> w,
  ) {
    return _gsl_eigen_gen(
      A,
      B,
      alpha,
      beta,
      w,
    );
  }

  late final _gsl_eigen_genPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_eigen_gen_workspace>)>>('gsl_eigen_gen');
  late final _gsl_eigen_gen = _gsl_eigen_genPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_eigen_gen_workspace>)>();

  int gsl_eigen_gen_QZ(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_vector_complex> alpha,
    ffi.Pointer<gsl_vector> beta,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> Z,
    ffi.Pointer<gsl_eigen_gen_workspace> w,
  ) {
    return _gsl_eigen_gen_QZ(
      A,
      B,
      alpha,
      beta,
      Q,
      Z,
      w,
    );
  }

  late final _gsl_eigen_gen_QZPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_eigen_gen_workspace>)>>('gsl_eigen_gen_QZ');
  late final _gsl_eigen_gen_QZ = _gsl_eigen_gen_QZPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_eigen_gen_workspace>)>();

  ffi.Pointer<gsl_eigen_genv_workspace> gsl_eigen_genv_alloc(
    int n,
  ) {
    return _gsl_eigen_genv_alloc(
      n,
    );
  }

  late final _gsl_eigen_genv_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_eigen_genv_workspace> Function(
              size_t)>>('gsl_eigen_genv_alloc');
  late final _gsl_eigen_genv_alloc = _gsl_eigen_genv_allocPtr
      .asFunction<ffi.Pointer<gsl_eigen_genv_workspace> Function(int)>();

  void gsl_eigen_genv_free(
    ffi.Pointer<gsl_eigen_genv_workspace> w,
  ) {
    return _gsl_eigen_genv_free(
      w,
    );
  }

  late final _gsl_eigen_genv_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_eigen_genv_workspace>)>>('gsl_eigen_genv_free');
  late final _gsl_eigen_genv_free = _gsl_eigen_genv_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_eigen_genv_workspace>)>();

  int gsl_eigen_genv(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_vector_complex> alpha,
    ffi.Pointer<gsl_vector> beta,
    ffi.Pointer<gsl_matrix_complex> evec,
    ffi.Pointer<gsl_eigen_genv_workspace> w,
  ) {
    return _gsl_eigen_genv(
      A,
      B,
      alpha,
      beta,
      evec,
      w,
    );
  }

  late final _gsl_eigen_genvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_eigen_genv_workspace>)>>('gsl_eigen_genv');
  late final _gsl_eigen_genv = _gsl_eigen_genvPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_eigen_genv_workspace>)>();

  int gsl_eigen_genv_QZ(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_vector_complex> alpha,
    ffi.Pointer<gsl_vector> beta,
    ffi.Pointer<gsl_matrix_complex> evec,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> Z,
    ffi.Pointer<gsl_eigen_genv_workspace> w,
  ) {
    return _gsl_eigen_genv_QZ(
      A,
      B,
      alpha,
      beta,
      evec,
      Q,
      Z,
      w,
    );
  }

  late final _gsl_eigen_genv_QZPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_eigen_genv_workspace>)>>('gsl_eigen_genv_QZ');
  late final _gsl_eigen_genv_QZ = _gsl_eigen_genv_QZPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_eigen_genv_workspace>)>();

  int gsl_eigen_symmv_sort(
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_matrix> evec,
    int sort_type,
  ) {
    return _gsl_eigen_symmv_sort(
      eval,
      evec,
      sort_type,
    );
  }

  late final _gsl_eigen_symmv_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>,
              ffi.Int32)>>('gsl_eigen_symmv_sort');
  late final _gsl_eigen_symmv_sort = _gsl_eigen_symmv_sortPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>, int)>();

  int gsl_eigen_hermv_sort(
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_matrix_complex> evec,
    int sort_type,
  ) {
    return _gsl_eigen_hermv_sort(
      eval,
      evec,
      sort_type,
    );
  }

  late final _gsl_eigen_hermv_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Int32)>>('gsl_eigen_hermv_sort');
  late final _gsl_eigen_hermv_sort = _gsl_eigen_hermv_sortPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix_complex>, int)>();

  int gsl_eigen_nonsymmv_sort(
    ffi.Pointer<gsl_vector_complex> eval,
    ffi.Pointer<gsl_matrix_complex> evec,
    int sort_type,
  ) {
    return _gsl_eigen_nonsymmv_sort(
      eval,
      evec,
      sort_type,
    );
  }

  late final _gsl_eigen_nonsymmv_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Int32)>>('gsl_eigen_nonsymmv_sort');
  late final _gsl_eigen_nonsymmv_sort = _gsl_eigen_nonsymmv_sortPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_matrix_complex>, int)>();

  int gsl_eigen_gensymmv_sort(
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_matrix> evec,
    int sort_type,
  ) {
    return _gsl_eigen_gensymmv_sort(
      eval,
      evec,
      sort_type,
    );
  }

  late final _gsl_eigen_gensymmv_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>,
              ffi.Int32)>>('gsl_eigen_gensymmv_sort');
  late final _gsl_eigen_gensymmv_sort = _gsl_eigen_gensymmv_sortPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>, int)>();

  int gsl_eigen_genhermv_sort(
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_matrix_complex> evec,
    int sort_type,
  ) {
    return _gsl_eigen_genhermv_sort(
      eval,
      evec,
      sort_type,
    );
  }

  late final _gsl_eigen_genhermv_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Int32)>>('gsl_eigen_genhermv_sort');
  late final _gsl_eigen_genhermv_sort = _gsl_eigen_genhermv_sortPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix_complex>, int)>();

  int gsl_eigen_genv_sort(
    ffi.Pointer<gsl_vector_complex> alpha,
    ffi.Pointer<gsl_vector> beta,
    ffi.Pointer<gsl_matrix_complex> evec,
    int sort_type,
  ) {
    return _gsl_eigen_genv_sort(
      alpha,
      beta,
      evec,
      sort_type,
    );
  }

  late final _gsl_eigen_genv_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Int32)>>('gsl_eigen_genv_sort');
  late final _gsl_eigen_genv_sort = _gsl_eigen_genv_sortPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix_complex>, int)>();

  int gsl_schur_gen_eigvals(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<ffi.Double> wr1,
    ffi.Pointer<ffi.Double> wr2,
    ffi.Pointer<ffi.Double> wi,
    ffi.Pointer<ffi.Double> scale1,
    ffi.Pointer<ffi.Double> scale2,
  ) {
    return _gsl_schur_gen_eigvals(
      A,
      B,
      wr1,
      wr2,
      wi,
      scale1,
      scale2,
    );
  }

  late final _gsl_schur_gen_eigvalsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_schur_gen_eigvals');
  late final _gsl_schur_gen_eigvals = _gsl_schur_gen_eigvalsPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_schur_solve_equation(
    double ca,
    ffi.Pointer<gsl_matrix> A,
    double z,
    double d1,
    double d2,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<ffi.Double> s,
    ffi.Pointer<ffi.Double> xnorm,
    double smin,
  ) {
    return _gsl_schur_solve_equation(
      ca,
      A,
      z,
      d1,
      d2,
      b,
      x,
      s,
      xnorm,
      smin,
    );
  }

  late final _gsl_schur_solve_equationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double)>>('gsl_schur_solve_equation');
  late final _gsl_schur_solve_equation =
      _gsl_schur_solve_equationPtr.asFunction<
          int Function(
              double,
              ffi.Pointer<gsl_matrix>,
              double,
              double,
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double)>();

  int gsl_schur_solve_equation_z(
    double ca,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_complex> z,
    double d1,
    double d2,
    ffi.Pointer<gsl_vector_complex> b,
    ffi.Pointer<gsl_vector_complex> x,
    ffi.Pointer<ffi.Double> s,
    ffi.Pointer<ffi.Double> xnorm,
    double smin,
  ) {
    return _gsl_schur_solve_equation_z(
      ca,
      A,
      z,
      d1,
      d2,
      b,
      x,
      s,
      xnorm,
      smin,
    );
  }

  late final _gsl_schur_solve_equation_zPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_complex>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double)>>('gsl_schur_solve_equation_z');
  late final _gsl_schur_solve_equation_z =
      _gsl_schur_solve_equation_zPtr.asFunction<
          int Function(
              double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_complex>,
              double,
              double,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double)>();

  int gsl_eigen_jacobi(
    ffi.Pointer<gsl_matrix> matrix,
    ffi.Pointer<gsl_vector> eval,
    ffi.Pointer<gsl_matrix> evec,
    int max_rot,
    ffi.Pointer<ffi.Uint32> nrot,
  ) {
    return _gsl_eigen_jacobi(
      matrix,
      eval,
      evec,
      max_rot,
      nrot,
    );
  }

  late final _gsl_eigen_jacobiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('gsl_eigen_jacobi');
  late final _gsl_eigen_jacobi = _gsl_eigen_jacobiPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>, int, ffi.Pointer<ffi.Uint32>)>();

  int gsl_eigen_invert_jacobi(
    ffi.Pointer<gsl_matrix> matrix,
    ffi.Pointer<gsl_matrix> ainv,
    int max_rot,
  ) {
    return _gsl_eigen_invert_jacobi(
      matrix,
      ainv,
      max_rot,
    );
  }

  late final _gsl_eigen_invert_jacobiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Uint32)>>('gsl_eigen_invert_jacobi');
  late final _gsl_eigen_invert_jacobi = _gsl_eigen_invert_jacobiPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>, int)>();

  int gsl_sf_mathieu_a_array(
    int order_min,
    int order_max,
    double qq,
    ffi.Pointer<gsl_sf_mathieu_workspace> work,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_mathieu_a_array(
      order_min,
      order_max,
      qq,
      work,
      result_array,
    );
  }

  late final _gsl_sf_mathieu_a_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_sf_mathieu_workspace>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_mathieu_a_array');
  late final _gsl_sf_mathieu_a_array = _gsl_sf_mathieu_a_arrayPtr.asFunction<
      int Function(int, int, double, ffi.Pointer<gsl_sf_mathieu_workspace>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_sf_mathieu_b_array(
    int order_min,
    int order_max,
    double qq,
    ffi.Pointer<gsl_sf_mathieu_workspace> work,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_mathieu_b_array(
      order_min,
      order_max,
      qq,
      work,
      result_array,
    );
  }

  late final _gsl_sf_mathieu_b_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_sf_mathieu_workspace>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_mathieu_b_array');
  late final _gsl_sf_mathieu_b_array = _gsl_sf_mathieu_b_arrayPtr.asFunction<
      int Function(int, int, double, ffi.Pointer<gsl_sf_mathieu_workspace>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_sf_mathieu_a_e(
    int order,
    double qq,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_mathieu_a_e(
      order,
      qq,
      result,
    );
  }

  late final _gsl_sf_mathieu_a_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_mathieu_a_e');
  late final _gsl_sf_mathieu_a_e = _gsl_sf_mathieu_a_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_mathieu_a(
    int order,
    double qq,
  ) {
    return _gsl_sf_mathieu_a(
      order,
      qq,
    );
  }

  late final _gsl_sf_mathieu_aPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_mathieu_a');
  late final _gsl_sf_mathieu_a =
      _gsl_sf_mathieu_aPtr.asFunction<double Function(int, double)>();

  int gsl_sf_mathieu_b_e(
    int order,
    double qq,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_mathieu_b_e(
      order,
      qq,
      result,
    );
  }

  late final _gsl_sf_mathieu_b_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_mathieu_b_e');
  late final _gsl_sf_mathieu_b_e = _gsl_sf_mathieu_b_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_mathieu_b(
    int order,
    double qq,
  ) {
    return _gsl_sf_mathieu_b(
      order,
      qq,
    );
  }

  late final _gsl_sf_mathieu_bPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_mathieu_b');
  late final _gsl_sf_mathieu_b =
      _gsl_sf_mathieu_bPtr.asFunction<double Function(int, double)>();

  int gsl_sf_mathieu_a_coeff(
    int order,
    double qq,
    double aa,
    ffi.Pointer<ffi.Double> coeff,
  ) {
    return _gsl_sf_mathieu_a_coeff(
      order,
      qq,
      aa,
      coeff,
    );
  }

  late final _gsl_sf_mathieu_a_coeffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_mathieu_a_coeff');
  late final _gsl_sf_mathieu_a_coeff = _gsl_sf_mathieu_a_coeffPtr
      .asFunction<int Function(int, double, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_mathieu_b_coeff(
    int order,
    double qq,
    double aa,
    ffi.Pointer<ffi.Double> coeff,
  ) {
    return _gsl_sf_mathieu_b_coeff(
      order,
      qq,
      aa,
      coeff,
    );
  }

  late final _gsl_sf_mathieu_b_coeffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_mathieu_b_coeff');
  late final _gsl_sf_mathieu_b_coeff = _gsl_sf_mathieu_b_coeffPtr
      .asFunction<int Function(int, double, double, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_sf_mathieu_workspace> gsl_sf_mathieu_alloc(
    int nn,
    double qq,
  ) {
    return _gsl_sf_mathieu_alloc(
      nn,
      qq,
    );
  }

  late final _gsl_sf_mathieu_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_sf_mathieu_workspace> Function(
              size_t, ffi.Double)>>('gsl_sf_mathieu_alloc');
  late final _gsl_sf_mathieu_alloc = _gsl_sf_mathieu_allocPtr.asFunction<
      ffi.Pointer<gsl_sf_mathieu_workspace> Function(int, double)>();

  void gsl_sf_mathieu_free(
    ffi.Pointer<gsl_sf_mathieu_workspace> workspace,
  ) {
    return _gsl_sf_mathieu_free(
      workspace,
    );
  }

  late final _gsl_sf_mathieu_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_sf_mathieu_workspace>)>>('gsl_sf_mathieu_free');
  late final _gsl_sf_mathieu_free = _gsl_sf_mathieu_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_sf_mathieu_workspace>)>();

  int gsl_sf_mathieu_ce_e(
    int order,
    double qq,
    double zz,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_mathieu_ce_e(
      order,
      qq,
      zz,
      result,
    );
  }

  late final _gsl_sf_mathieu_ce_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_mathieu_ce_e');
  late final _gsl_sf_mathieu_ce_e = _gsl_sf_mathieu_ce_ePtr.asFunction<
      int Function(int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_mathieu_ce(
    int order,
    double qq,
    double zz,
  ) {
    return _gsl_sf_mathieu_ce(
      order,
      qq,
      zz,
    );
  }

  late final _gsl_sf_mathieu_cePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Double, ffi.Double)>>('gsl_sf_mathieu_ce');
  late final _gsl_sf_mathieu_ce =
      _gsl_sf_mathieu_cePtr.asFunction<double Function(int, double, double)>();

  int gsl_sf_mathieu_se_e(
    int order,
    double qq,
    double zz,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_mathieu_se_e(
      order,
      qq,
      zz,
      result,
    );
  }

  late final _gsl_sf_mathieu_se_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_mathieu_se_e');
  late final _gsl_sf_mathieu_se_e = _gsl_sf_mathieu_se_ePtr.asFunction<
      int Function(int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_mathieu_se(
    int order,
    double qq,
    double zz,
  ) {
    return _gsl_sf_mathieu_se(
      order,
      qq,
      zz,
    );
  }

  late final _gsl_sf_mathieu_sePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Double, ffi.Double)>>('gsl_sf_mathieu_se');
  late final _gsl_sf_mathieu_se =
      _gsl_sf_mathieu_sePtr.asFunction<double Function(int, double, double)>();

  int gsl_sf_mathieu_ce_array(
    int nmin,
    int nmax,
    double qq,
    double zz,
    ffi.Pointer<gsl_sf_mathieu_workspace> work,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_mathieu_ce_array(
      nmin,
      nmax,
      qq,
      zz,
      work,
      result_array,
    );
  }

  late final _gsl_sf_mathieu_ce_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_sf_mathieu_workspace>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_mathieu_ce_array');
  late final _gsl_sf_mathieu_ce_array = _gsl_sf_mathieu_ce_arrayPtr.asFunction<
      int Function(int, int, double, double,
          ffi.Pointer<gsl_sf_mathieu_workspace>, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_mathieu_se_array(
    int nmin,
    int nmax,
    double qq,
    double zz,
    ffi.Pointer<gsl_sf_mathieu_workspace> work,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_mathieu_se_array(
      nmin,
      nmax,
      qq,
      zz,
      work,
      result_array,
    );
  }

  late final _gsl_sf_mathieu_se_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_sf_mathieu_workspace>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_mathieu_se_array');
  late final _gsl_sf_mathieu_se_array = _gsl_sf_mathieu_se_arrayPtr.asFunction<
      int Function(int, int, double, double,
          ffi.Pointer<gsl_sf_mathieu_workspace>, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_mathieu_Mc_e(
    int kind,
    int order,
    double qq,
    double zz,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_mathieu_Mc_e(
      kind,
      order,
      qq,
      zz,
      result,
    );
  }

  late final _gsl_sf_mathieu_Mc_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_mathieu_Mc_e');
  late final _gsl_sf_mathieu_Mc_e = _gsl_sf_mathieu_Mc_ePtr.asFunction<
      int Function(int, int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_mathieu_Mc(
    int kind,
    int order,
    double qq,
    double zz,
  ) {
    return _gsl_sf_mathieu_Mc(
      kind,
      order,
      qq,
      zz,
    );
  }

  late final _gsl_sf_mathieu_McPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Double)>>('gsl_sf_mathieu_Mc');
  late final _gsl_sf_mathieu_Mc = _gsl_sf_mathieu_McPtr
      .asFunction<double Function(int, int, double, double)>();

  int gsl_sf_mathieu_Ms_e(
    int kind,
    int order,
    double qq,
    double zz,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_mathieu_Ms_e(
      kind,
      order,
      qq,
      zz,
      result,
    );
  }

  late final _gsl_sf_mathieu_Ms_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_mathieu_Ms_e');
  late final _gsl_sf_mathieu_Ms_e = _gsl_sf_mathieu_Ms_ePtr.asFunction<
      int Function(int, int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_mathieu_Ms(
    int kind,
    int order,
    double qq,
    double zz,
  ) {
    return _gsl_sf_mathieu_Ms(
      kind,
      order,
      qq,
      zz,
    );
  }

  late final _gsl_sf_mathieu_MsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Double)>>('gsl_sf_mathieu_Ms');
  late final _gsl_sf_mathieu_Ms = _gsl_sf_mathieu_MsPtr
      .asFunction<double Function(int, int, double, double)>();

  int gsl_sf_mathieu_Mc_array(
    int kind,
    int nmin,
    int nmax,
    double qq,
    double zz,
    ffi.Pointer<gsl_sf_mathieu_workspace> work,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_mathieu_Mc_array(
      kind,
      nmin,
      nmax,
      qq,
      zz,
      work,
      result_array,
    );
  }

  late final _gsl_sf_mathieu_Mc_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_sf_mathieu_workspace>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_mathieu_Mc_array');
  late final _gsl_sf_mathieu_Mc_array = _gsl_sf_mathieu_Mc_arrayPtr.asFunction<
      int Function(int, int, int, double, double,
          ffi.Pointer<gsl_sf_mathieu_workspace>, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_mathieu_Ms_array(
    int kind,
    int nmin,
    int nmax,
    double qq,
    double zz,
    ffi.Pointer<gsl_sf_mathieu_workspace> work,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_mathieu_Ms_array(
      kind,
      nmin,
      nmax,
      qq,
      zz,
      work,
      result_array,
    );
  }

  late final _gsl_sf_mathieu_Ms_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_sf_mathieu_workspace>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_mathieu_Ms_array');
  late final _gsl_sf_mathieu_Ms_array = _gsl_sf_mathieu_Ms_arrayPtr.asFunction<
      int Function(int, int, int, double, double,
          ffi.Pointer<gsl_sf_mathieu_workspace>, ffi.Pointer<ffi.Double>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Double>> _gsl_prec_eps =
      _lookup<ffi.Pointer<ffi.Double>>('gsl_prec_eps');

  ffi.Pointer<ffi.Double> get gsl_prec_eps => _gsl_prec_eps.value;

  set gsl_prec_eps(ffi.Pointer<ffi.Double> value) =>
      _gsl_prec_eps.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Double>> _gsl_prec_sqrt_eps =
      _lookup<ffi.Pointer<ffi.Double>>('gsl_prec_sqrt_eps');

  ffi.Pointer<ffi.Double> get gsl_prec_sqrt_eps => _gsl_prec_sqrt_eps.value;

  set gsl_prec_sqrt_eps(ffi.Pointer<ffi.Double> value) =>
      _gsl_prec_sqrt_eps.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Double>> _gsl_prec_root3_eps =
      _lookup<ffi.Pointer<ffi.Double>>('gsl_prec_root3_eps');

  ffi.Pointer<ffi.Double> get gsl_prec_root3_eps => _gsl_prec_root3_eps.value;

  set gsl_prec_root3_eps(ffi.Pointer<ffi.Double> value) =>
      _gsl_prec_root3_eps.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Double>> _gsl_prec_root4_eps =
      _lookup<ffi.Pointer<ffi.Double>>('gsl_prec_root4_eps');

  ffi.Pointer<ffi.Double> get gsl_prec_root4_eps => _gsl_prec_root4_eps.value;

  set gsl_prec_root4_eps(ffi.Pointer<ffi.Double> value) =>
      _gsl_prec_root4_eps.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Double>> _gsl_prec_root5_eps =
      _lookup<ffi.Pointer<ffi.Double>>('gsl_prec_root5_eps');

  ffi.Pointer<ffi.Double> get gsl_prec_root5_eps => _gsl_prec_root5_eps.value;

  set gsl_prec_root5_eps(ffi.Pointer<ffi.Double> value) =>
      _gsl_prec_root5_eps.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Double>> _gsl_prec_root6_eps =
      _lookup<ffi.Pointer<ffi.Double>>('gsl_prec_root6_eps');

  ffi.Pointer<ffi.Double> get gsl_prec_root6_eps => _gsl_prec_root6_eps.value;

  set gsl_prec_root6_eps(ffi.Pointer<ffi.Double> value) =>
      _gsl_prec_root6_eps.value = value;

  int gsl_sf_exp_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_exp_e(
      x,
      result,
    );
  }

  late final _gsl_sf_exp_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_exp_e');
  late final _gsl_sf_exp_e = _gsl_sf_exp_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_exp(
    double x,
  ) {
    return _gsl_sf_exp(
      x,
    );
  }

  late final _gsl_sf_expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_exp');
  late final _gsl_sf_exp = _gsl_sf_expPtr.asFunction<double Function(double)>();

  int gsl_sf_exp_e10_e(
    double x,
    ffi.Pointer<gsl_sf_result_e10> result,
  ) {
    return _gsl_sf_exp_e10_e(
      x,
      result,
    );
  }

  late final _gsl_sf_exp_e10_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result_e10>)>>('gsl_sf_exp_e10_e');
  late final _gsl_sf_exp_e10_e = _gsl_sf_exp_e10_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result_e10>)>();

  int gsl_sf_exp_mult_e(
    double x,
    double y,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_exp_mult_e(
      x,
      y,
      result,
    );
  }

  late final _gsl_sf_exp_mult_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_exp_mult_e');
  late final _gsl_sf_exp_mult_e = _gsl_sf_exp_mult_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_exp_mult(
    double x,
    double y,
  ) {
    return _gsl_sf_exp_mult(
      x,
      y,
    );
  }

  late final _gsl_sf_exp_multPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_exp_mult');
  late final _gsl_sf_exp_mult =
      _gsl_sf_exp_multPtr.asFunction<double Function(double, double)>();

  int gsl_sf_exp_mult_e10_e(
    double x,
    double y,
    ffi.Pointer<gsl_sf_result_e10> result,
  ) {
    return _gsl_sf_exp_mult_e10_e(
      x,
      y,
      result,
    );
  }

  late final _gsl_sf_exp_mult_e10_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result_e10>)>>('gsl_sf_exp_mult_e10_e');
  late final _gsl_sf_exp_mult_e10_e = _gsl_sf_exp_mult_e10_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result_e10>)>();

  int gsl_sf_expm1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expm1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_expm1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expm1_e');
  late final _gsl_sf_expm1_e = _gsl_sf_expm1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expm1(
    double x,
  ) {
    return _gsl_sf_expm1(
      x,
    );
  }

  late final _gsl_sf_expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_expm1');
  late final _gsl_sf_expm1 =
      _gsl_sf_expm1Ptr.asFunction<double Function(double)>();

  int gsl_sf_exprel_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_exprel_e(
      x,
      result,
    );
  }

  late final _gsl_sf_exprel_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_exprel_e');
  late final _gsl_sf_exprel_e = _gsl_sf_exprel_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_exprel(
    double x,
  ) {
    return _gsl_sf_exprel(
      x,
    );
  }

  late final _gsl_sf_exprelPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_exprel');
  late final _gsl_sf_exprel =
      _gsl_sf_exprelPtr.asFunction<double Function(double)>();

  int gsl_sf_exprel_2_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_exprel_2_e(
      x,
      result,
    );
  }

  late final _gsl_sf_exprel_2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_exprel_2_e');
  late final _gsl_sf_exprel_2_e = _gsl_sf_exprel_2_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_exprel_2(
    double x,
  ) {
    return _gsl_sf_exprel_2(
      x,
    );
  }

  late final _gsl_sf_exprel_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_exprel_2');
  late final _gsl_sf_exprel_2 =
      _gsl_sf_exprel_2Ptr.asFunction<double Function(double)>();

  int gsl_sf_exprel_n_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_exprel_n_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_exprel_n_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_exprel_n_e');
  late final _gsl_sf_exprel_n_e = _gsl_sf_exprel_n_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_exprel_n(
    int n,
    double x,
  ) {
    return _gsl_sf_exprel_n(
      n,
      x,
    );
  }

  late final _gsl_sf_exprel_nPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_exprel_n');
  late final _gsl_sf_exprel_n =
      _gsl_sf_exprel_nPtr.asFunction<double Function(int, double)>();

  int gsl_sf_exprel_n_CF_e(
    double n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_exprel_n_CF_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_exprel_n_CF_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_exprel_n_CF_e');
  late final _gsl_sf_exprel_n_CF_e = _gsl_sf_exprel_n_CF_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_exp_err_e(
    double x,
    double dx,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_exp_err_e(
      x,
      dx,
      result,
    );
  }

  late final _gsl_sf_exp_err_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_exp_err_e');
  late final _gsl_sf_exp_err_e = _gsl_sf_exp_err_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_exp_err_e10_e(
    double x,
    double dx,
    ffi.Pointer<gsl_sf_result_e10> result,
  ) {
    return _gsl_sf_exp_err_e10_e(
      x,
      dx,
      result,
    );
  }

  late final _gsl_sf_exp_err_e10_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result_e10>)>>('gsl_sf_exp_err_e10_e');
  late final _gsl_sf_exp_err_e10_e = _gsl_sf_exp_err_e10_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result_e10>)>();

  int gsl_sf_exp_mult_err_e(
    double x,
    double dx,
    double y,
    double dy,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_exp_mult_err_e(
      x,
      dx,
      y,
      dy,
      result,
    );
  }

  late final _gsl_sf_exp_mult_err_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_exp_mult_err_e');
  late final _gsl_sf_exp_mult_err_e = _gsl_sf_exp_mult_err_ePtr.asFunction<
      int Function(
          double, double, double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_exp_mult_err_e10_e(
    double x,
    double dx,
    double y,
    double dy,
    ffi.Pointer<gsl_sf_result_e10> result,
  ) {
    return _gsl_sf_exp_mult_err_e10_e(
      x,
      dx,
      y,
      dy,
      result,
    );
  }

  late final _gsl_sf_exp_mult_err_e10_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result_e10>)>>('gsl_sf_exp_mult_err_e10_e');
  late final _gsl_sf_exp_mult_err_e10_e =
      _gsl_sf_exp_mult_err_e10_ePtr.asFunction<
          int Function(double, double, double, double,
              ffi.Pointer<gsl_sf_result_e10>)>();

  int gsl_sf_log_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_log_e(
      x,
      result,
    );
  }

  late final _gsl_sf_log_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_log_e');
  late final _gsl_sf_log_e = _gsl_sf_log_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_log(
    double x,
  ) {
    return _gsl_sf_log(
      x,
    );
  }

  late final _gsl_sf_logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_log');
  late final _gsl_sf_log = _gsl_sf_logPtr.asFunction<double Function(double)>();

  int gsl_sf_log_abs_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_log_abs_e(
      x,
      result,
    );
  }

  late final _gsl_sf_log_abs_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_log_abs_e');
  late final _gsl_sf_log_abs_e = _gsl_sf_log_abs_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_log_abs(
    double x,
  ) {
    return _gsl_sf_log_abs(
      x,
    );
  }

  late final _gsl_sf_log_absPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_log_abs');
  late final _gsl_sf_log_abs =
      _gsl_sf_log_absPtr.asFunction<double Function(double)>();

  int gsl_sf_complex_log_e(
    double zr,
    double zi,
    ffi.Pointer<gsl_sf_result> lnr,
    ffi.Pointer<gsl_sf_result> theta,
  ) {
    return _gsl_sf_complex_log_e(
      zr,
      zi,
      lnr,
      theta,
    );
  }

  late final _gsl_sf_complex_log_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_complex_log_e');
  late final _gsl_sf_complex_log_e = _gsl_sf_complex_log_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_log_1plusx_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_log_1plusx_e(
      x,
      result,
    );
  }

  late final _gsl_sf_log_1plusx_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_log_1plusx_e');
  late final _gsl_sf_log_1plusx_e = _gsl_sf_log_1plusx_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_log_1plusx(
    double x,
  ) {
    return _gsl_sf_log_1plusx(
      x,
    );
  }

  late final _gsl_sf_log_1plusxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_log_1plusx');
  late final _gsl_sf_log_1plusx =
      _gsl_sf_log_1plusxPtr.asFunction<double Function(double)>();

  int gsl_sf_log_1plusx_mx_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_log_1plusx_mx_e(
      x,
      result,
    );
  }

  late final _gsl_sf_log_1plusx_mx_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_log_1plusx_mx_e');
  late final _gsl_sf_log_1plusx_mx_e = _gsl_sf_log_1plusx_mx_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_log_1plusx_mx(
    double x,
  ) {
    return _gsl_sf_log_1plusx_mx(
      x,
    );
  }

  late final _gsl_sf_log_1plusx_mxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_log_1plusx_mx');
  late final _gsl_sf_log_1plusx_mx =
      _gsl_sf_log_1plusx_mxPtr.asFunction<double Function(double)>();

  double acos(
    double __x,
  ) {
    return _acos(
      __x,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double __acos(
    double __x,
  ) {
    return ___acos(
      __x,
    );
  }

  late final ___acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acos');
  late final ___acos = ___acosPtr.asFunction<double Function(double)>();

  double asin(
    double __x,
  ) {
    return _asin(
      __x,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double __asin(
    double __x,
  ) {
    return ___asin(
      __x,
    );
  }

  late final ___asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asin');
  late final ___asin = ___asinPtr.asFunction<double Function(double)>();

  double atan(
    double __x,
  ) {
    return _atan(
      __x,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double __atan(
    double __x,
  ) {
    return ___atan(
      __x,
    );
  }

  late final ___atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atan');
  late final ___atan = ___atanPtr.asFunction<double Function(double)>();

  double atan2(
    double __y,
    double __x,
  ) {
    return _atan2(
      __y,
      __x,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double __atan2(
    double __y,
    double __x,
  ) {
    return ___atan2(
      __y,
      __x,
    );
  }

  late final ___atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__atan2');
  late final ___atan2 =
      ___atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double __x,
  ) {
    return _cos(
      __x,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double __cos(
    double __x,
  ) {
    return ___cos(
      __x,
    );
  }

  late final ___cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cos');
  late final ___cos = ___cosPtr.asFunction<double Function(double)>();

  double sin(
    double __x,
  ) {
    return _sin(
      __x,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double __sin(
    double __x,
  ) {
    return ___sin(
      __x,
    );
  }

  late final ___sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sin');
  late final ___sin = ___sinPtr.asFunction<double Function(double)>();

  double tan(
    double __x,
  ) {
    return _tan(
      __x,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double __tan(
    double __x,
  ) {
    return ___tan(
      __x,
    );
  }

  late final ___tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tan');
  late final ___tan = ___tanPtr.asFunction<double Function(double)>();

  double cosh(
    double __x,
  ) {
    return _cosh(
      __x,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double __cosh(
    double __x,
  ) {
    return ___cosh(
      __x,
    );
  }

  late final ___coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cosh');
  late final ___cosh = ___coshPtr.asFunction<double Function(double)>();

  double sinh(
    double __x,
  ) {
    return _sinh(
      __x,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double __sinh(
    double __x,
  ) {
    return ___sinh(
      __x,
    );
  }

  late final ___sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinh');
  late final ___sinh = ___sinhPtr.asFunction<double Function(double)>();

  double tanh(
    double __x,
  ) {
    return _tanh(
      __x,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double __tanh(
    double __x,
  ) {
    return ___tanh(
      __x,
    );
  }

  late final ___tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanh');
  late final ___tanh = ___tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double __x,
  ) {
    return _acosh(
      __x,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double __acosh(
    double __x,
  ) {
    return ___acosh(
      __x,
    );
  }

  late final ___acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__acosh');
  late final ___acosh = ___acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double __x,
  ) {
    return _asinh(
      __x,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double __asinh(
    double __x,
  ) {
    return ___asinh(
      __x,
    );
  }

  late final ___asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__asinh');
  late final ___asinh = ___asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double __x,
  ) {
    return _atanh(
      __x,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double __atanh(
    double __x,
  ) {
    return ___atanh(
      __x,
    );
  }

  late final ___atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__atanh');
  late final ___atanh = ___atanhPtr.asFunction<double Function(double)>();

  double exp(
    double __x,
  ) {
    return _exp(
      __x,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double __exp(
    double __x,
  ) {
    return ___exp(
      __x,
    );
  }

  late final ___expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp');
  late final ___exp = ___expPtr.asFunction<double Function(double)>();

  double frexp(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    return _frexp(
      __x,
      __exponent,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int32>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double __frexp(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    return ___frexp(
      __x,
      __exponent,
    );
  }

  late final ___frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int32>)>>('__frexp');
  late final ___frexp =
      ___frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double ldexp(
    double __x,
    int __exponent,
  ) {
    return _ldexp(
      __x,
      __exponent,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double __ldexp(
    double __x,
    int __exponent,
  ) {
    return ___ldexp(
      __x,
      __exponent,
    );
  }

  late final ___ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          '__ldexp');
  late final ___ldexp = ___ldexpPtr.asFunction<double Function(double, int)>();

  double log(
    double __x,
  ) {
    return _log(
      __x,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double __log(
    double __x,
  ) {
    return ___log(
      __x,
    );
  }

  late final ___logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log');
  late final ___log = ___logPtr.asFunction<double Function(double)>();

  double log10(
    double __x,
  ) {
    return _log10(
      __x,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double __log10(
    double __x,
  ) {
    return ___log10(
      __x,
    );
  }

  late final ___log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log10');
  late final ___log10 = ___log10Ptr.asFunction<double Function(double)>();

  double modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return _modf(
      __x,
      __iptr,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double __modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    return ___modf(
      __x,
      __iptr,
    );
  }

  late final ___modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('__modf');
  late final ___modf =
      ___modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double expm1(
    double __x,
  ) {
    return _expm1(
      __x,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double __expm1(
    double __x,
  ) {
    return ___expm1(
      __x,
    );
  }

  late final ___expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__expm1');
  late final ___expm1 = ___expm1Ptr.asFunction<double Function(double)>();

  double log1p(
    double __x,
  ) {
    return _log1p(
      __x,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double __log1p(
    double __x,
  ) {
    return ___log1p(
      __x,
    );
  }

  late final ___log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log1p');
  late final ___log1p = ___log1pPtr.asFunction<double Function(double)>();

  double logb(
    double __x,
  ) {
    return _logb(
      __x,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double __logb(
    double __x,
  ) {
    return ___logb(
      __x,
    );
  }

  late final ___logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__logb');
  late final ___logb = ___logbPtr.asFunction<double Function(double)>();

  double exp2(
    double __x,
  ) {
    return _exp2(
      __x,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double __exp2(
    double __x,
  ) {
    return ___exp2(
      __x,
    );
  }

  late final ___exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp2');
  late final ___exp2 = ___exp2Ptr.asFunction<double Function(double)>();

  double log2(
    double __x,
  ) {
    return _log2(
      __x,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double __log2(
    double __x,
  ) {
    return ___log2(
      __x,
    );
  }

  late final ___log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__log2');
  late final ___log2 = ___log2Ptr.asFunction<double Function(double)>();

  double pow(
    double __x,
    double __y,
  ) {
    return _pow(
      __x,
      __y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double __pow(
    double __x,
    double __y,
  ) {
    return ___pow(
      __x,
      __y,
    );
  }

  late final ___powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__pow');
  late final ___pow = ___powPtr.asFunction<double Function(double, double)>();

  double sqrt(
    double __x,
  ) {
    return _sqrt(
      __x,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double __sqrt(
    double __x,
  ) {
    return ___sqrt(
      __x,
    );
  }

  late final ___sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sqrt');
  late final ___sqrt = ___sqrtPtr.asFunction<double Function(double)>();

  double hypot(
    double __x,
    double __y,
  ) {
    return _hypot(
      __x,
      __y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double __hypot(
    double __x,
    double __y,
  ) {
    return ___hypot(
      __x,
      __y,
    );
  }

  late final ___hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__hypot');
  late final ___hypot =
      ___hypotPtr.asFunction<double Function(double, double)>();

  double cbrt(
    double __x,
  ) {
    return _cbrt(
      __x,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double __cbrt(
    double __x,
  ) {
    return ___cbrt(
      __x,
    );
  }

  late final ___cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cbrt');
  late final ___cbrt = ___cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double __x,
  ) {
    return _ceil(
      __x,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double __ceil(
    double __x,
  ) {
    return ___ceil(
      __x,
    );
  }

  late final ___ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__ceil');
  late final ___ceil = ___ceilPtr.asFunction<double Function(double)>();

  double fabs(
    double __x,
  ) {
    return _fabs(
      __x,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double __fabs(
    double __x,
  ) {
    return ___fabs(
      __x,
    );
  }

  late final ___fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__fabs');
  late final ___fabs = ___fabsPtr.asFunction<double Function(double)>();

  double floor(
    double __x,
  ) {
    return _floor(
      __x,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double __floor(
    double __x,
  ) {
    return ___floor(
      __x,
    );
  }

  late final ___floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__floor');
  late final ___floor = ___floorPtr.asFunction<double Function(double)>();

  double fmod(
    double __x,
    double __y,
  ) {
    return _fmod(
      __x,
      __y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double __fmod(
    double __x,
    double __y,
  ) {
    return ___fmod(
      __x,
      __y,
    );
  }

  late final ___fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmod');
  late final ___fmod = ___fmodPtr.asFunction<double Function(double, double)>();

  int __isinf(
    double __value,
  ) {
    return ___isinf(
      __value,
    );
  }

  late final ___isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__isinf');
  late final ___isinf = ___isinfPtr.asFunction<int Function(double)>();

  int __finite(
    double __value,
  ) {
    return ___finite(
      __value,
    );
  }

  late final ___finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__finite');
  late final ___finite = ___finitePtr.asFunction<int Function(double)>();

  int isinf(
    double __value,
  ) {
    return _isinf(
      __value,
    );
  }

  late final _isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('isinf');
  late final _isinf = _isinfPtr.asFunction<int Function(double)>();

  int finite(
    double __value,
  ) {
    return _finite(
      __value,
    );
  }

  late final _finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('finite');
  late final _finite = _finitePtr.asFunction<int Function(double)>();

  double drem(
    double __x,
    double __y,
  ) {
    return _drem(
      __x,
      __y,
    );
  }

  late final _dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'drem');
  late final _drem = _dremPtr.asFunction<double Function(double, double)>();

  double __drem(
    double __x,
    double __y,
  ) {
    return ___drem(
      __x,
      __y,
    );
  }

  late final ___dremPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__drem');
  late final ___drem = ___dremPtr.asFunction<double Function(double, double)>();

  double significand(
    double __x,
  ) {
    return _significand(
      __x,
    );
  }

  late final _significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'significand');
  late final _significand =
      _significandPtr.asFunction<double Function(double)>();

  double __significand(
    double __x,
  ) {
    return ___significand(
      __x,
    );
  }

  late final ___significandPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__significand');
  late final ___significand =
      ___significandPtr.asFunction<double Function(double)>();

  double copysign(
    double __x,
    double __y,
  ) {
    return _copysign(
      __x,
      __y,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double __copysign(
    double __x,
    double __y,
  ) {
    return ___copysign(
      __x,
      __y,
    );
  }

  late final ___copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__copysign');
  late final ___copysign =
      ___copysignPtr.asFunction<double Function(double, double)>();

  double nan(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    return _nan(
      __tagb,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  double __nan(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    return ___nan(
      __tagb,
    );
  }

  late final ___nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          '__nan');
  late final ___nan =
      ___nanPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int __isnan(
    double __value,
  ) {
    return ___isnan(
      __value,
    );
  }

  late final ___isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__isnan');
  late final ___isnan = ___isnanPtr.asFunction<int Function(double)>();

  int isnan(
    double __value,
  ) {
    return _isnan(
      __value,
    );
  }

  late final _isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('isnan');
  late final _isnan = _isnanPtr.asFunction<int Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double __j0(
    double arg0,
  ) {
    return ___j0(
      arg0,
    );
  }

  late final ___j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j0');
  late final ___j0 = ___j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double __j1(
    double arg0,
  ) {
    return ___j1(
      arg0,
    );
  }

  late final ___j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__j1');
  late final ___j1 = ___j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double __jn(
    int arg0,
    double arg1,
  ) {
    return ___jn(
      arg0,
      arg1,
    );
  }

  late final ___jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          '__jn');
  late final ___jn = ___jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double __y0(
    double arg0,
  ) {
    return ___y0(
      arg0,
    );
  }

  late final ___y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y0');
  late final ___y0 = ___y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double __y1(
    double arg0,
  ) {
    return ___y1(
      arg0,
    );
  }

  late final ___y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__y1');
  late final ___y1 = ___y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double __yn(
    int arg0,
    double arg1,
  ) {
    return ___yn(
      arg0,
      arg1,
    );
  }

  late final ___ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          '__yn');
  late final ___yn = ___ynPtr.asFunction<double Function(int, double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double __erf(
    double arg0,
  ) {
    return ___erf(
      arg0,
    );
  }

  late final ___erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erf');
  late final ___erf = ___erfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double __erfc(
    double arg0,
  ) {
    return ___erfc(
      arg0,
    );
  }

  late final ___erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__erfc');
  late final ___erfc = ___erfcPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double __lgamma(
    double arg0,
  ) {
    return ___lgamma(
      arg0,
    );
  }

  late final ___lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__lgamma');
  late final ___lgamma = ___lgammaPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double __tgamma(
    double arg0,
  ) {
    return ___tgamma(
      arg0,
    );
  }

  late final ___tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tgamma');
  late final ___tgamma = ___tgammaPtr.asFunction<double Function(double)>();

  double gamma(
    double arg0,
  ) {
    return _gamma(
      arg0,
    );
  }

  late final _gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gamma');
  late final _gamma = _gammaPtr.asFunction<double Function(double)>();

  double __gamma(
    double arg0,
  ) {
    return ___gamma(
      arg0,
    );
  }

  late final ___gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__gamma');
  late final ___gamma = ___gammaPtr.asFunction<double Function(double)>();

  double lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    return _lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int32>)>>('lgamma_r');
  late final _lgamma_r = _lgamma_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double __lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    return ___lgamma_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgamma_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Pointer<ffi.Int32>)>>('__lgamma_r');
  late final ___lgamma_r = ___lgamma_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double rint(
    double __x,
  ) {
    return _rint(
      __x,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double __rint(
    double __x,
  ) {
    return ___rint(
      __x,
    );
  }

  late final ___rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__rint');
  late final ___rint = ___rintPtr.asFunction<double Function(double)>();

  double nextafter(
    double __x,
    double __y,
  ) {
    return _nextafter(
      __x,
      __y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double __nextafter(
    double __x,
    double __y,
  ) {
    return ___nextafter(
      __x,
      __y,
    );
  }

  late final ___nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__nextafter');
  late final ___nextafter =
      ___nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double __x,
    double __y,
  ) {
    return _remainder(
      __x,
      __y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double __remainder(
    double __x,
    double __y,
  ) {
    return ___remainder(
      __x,
      __y,
    );
  }

  late final ___remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__remainder');
  late final ___remainder =
      ___remainderPtr.asFunction<double Function(double, double)>();

  double scalbn(
    double __x,
    int __n,
  ) {
    return _scalbn(
      __x,
      __n,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double __scalbn(
    double __x,
    int __n,
  ) {
    return ___scalbn(
      __x,
      __n,
    );
  }

  late final ___scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          '__scalbn');
  late final ___scalbn =
      ___scalbnPtr.asFunction<double Function(double, int)>();

  int ilogb(
    double __x,
  ) {
    return _ilogb(
      __x,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  int __ilogb(
    double __x,
  ) {
    return ___ilogb(
      __x,
    );
  }

  late final ___ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__ilogb');
  late final ___ilogb = ___ilogbPtr.asFunction<int Function(double)>();

  double scalbln(
    double __x,
    int __n,
  ) {
    return _scalbln(
      __x,
      __n,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int64)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double __scalbln(
    double __x,
    int __n,
  ) {
    return ___scalbln(
      __x,
      __n,
    );
  }

  late final ___scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int64)>>(
          '__scalbln');
  late final ___scalbln =
      ___scalblnPtr.asFunction<double Function(double, int)>();

  double nearbyint(
    double __x,
  ) {
    return _nearbyint(
      __x,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double __nearbyint(
    double __x,
  ) {
    return ___nearbyint(
      __x,
    );
  }

  late final ___nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          '__nearbyint');
  late final ___nearbyint =
      ___nearbyintPtr.asFunction<double Function(double)>();

  double round(
    double __x,
  ) {
    return _round(
      __x,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double __round(
    double __x,
  ) {
    return ___round(
      __x,
    );
  }

  late final ___roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__round');
  late final ___round = ___roundPtr.asFunction<double Function(double)>();

  double trunc(
    double __x,
  ) {
    return _trunc(
      __x,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double __trunc(
    double __x,
  ) {
    return ___trunc(
      __x,
    );
  }

  late final ___truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__trunc');
  late final ___trunc = ___truncPtr.asFunction<double Function(double)>();

  double remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    return _remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int32>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  double __remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    return ___remquo(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int32>)>>('__remquo');
  late final ___remquo = ___remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  int lrint(
    double __x,
  ) {
    return _lrint(
      __x,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int __lrint(
    double __x,
  ) {
    return ___lrint(
      __x,
    );
  }

  late final ___lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('__lrint');
  late final ___lrint = ___lrintPtr.asFunction<int Function(double)>();

  int llrint(
    double __x,
  ) {
    return _llrint(
      __x,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int __llrint(
    double __x,
  ) {
    return ___llrint(
      __x,
    );
  }

  late final ___llrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('__llrint');
  late final ___llrint = ___llrintPtr.asFunction<int Function(double)>();

  int lround(
    double __x,
  ) {
    return _lround(
      __x,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int __lround(
    double __x,
  ) {
    return ___lround(
      __x,
    );
  }

  late final ___lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('__lround');
  late final ___lround = ___lroundPtr.asFunction<int Function(double)>();

  int llround(
    double __x,
  ) {
    return _llround(
      __x,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  int __llround(
    double __x,
  ) {
    return ___llround(
      __x,
    );
  }

  late final ___llroundPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Double)>>('__llround');
  late final ___llround = ___llroundPtr.asFunction<int Function(double)>();

  double fdim(
    double __x,
    double __y,
  ) {
    return _fdim(
      __x,
      __y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double __fdim(
    double __x,
    double __y,
  ) {
    return ___fdim(
      __x,
      __y,
    );
  }

  late final ___fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fdim');
  late final ___fdim = ___fdimPtr.asFunction<double Function(double, double)>();

  double fmax(
    double __x,
    double __y,
  ) {
    return _fmax(
      __x,
      __y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double __fmax(
    double __x,
    double __y,
  ) {
    return ___fmax(
      __x,
      __y,
    );
  }

  late final ___fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmax');
  late final ___fmax = ___fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double __x,
    double __y,
  ) {
    return _fmin(
      __x,
      __y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double __fmin(
    double __x,
    double __y,
  ) {
    return ___fmin(
      __x,
      __y,
    );
  }

  late final ___fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__fmin');
  late final ___fmin = ___fminPtr.asFunction<double Function(double, double)>();

  int __fpclassify(
    double __value,
  ) {
    return ___fpclassify(
      __value,
    );
  }

  late final ___fpclassifyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>(
          '__fpclassify');
  late final ___fpclassify =
      ___fpclassifyPtr.asFunction<int Function(double)>();

  int __signbit(
    double __value,
  ) {
    return ___signbit(
      __value,
    );
  }

  late final ___signbitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('__signbit');
  late final ___signbit = ___signbitPtr.asFunction<int Function(double)>();

  double fma(
    double __x,
    double __y,
    double __z,
  ) {
    return _fma(
      __x,
      __y,
      __z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double __fma(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fma(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('__fma');
  late final ___fma =
      ___fmaPtr.asFunction<double Function(double, double, double)>();

  double scalb(
    double __x,
    double __n,
  ) {
    return _scalb(
      __x,
      __n,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  double __scalb(
    double __x,
    double __n,
  ) {
    return ___scalb(
      __x,
      __n,
    );
  }

  late final ___scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '__scalb');
  late final ___scalb =
      ___scalbPtr.asFunction<double Function(double, double)>();

  double acosf(
    double __x,
  ) {
    return _acosf(
      __x,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double __acosf(
    double __x,
  ) {
    return ___acosf(
      __x,
    );
  }

  late final ___acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acosf');
  late final ___acosf = ___acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double __x,
  ) {
    return _asinf(
      __x,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double __asinf(
    double __x,
  ) {
    return ___asinf(
      __x,
    );
  }

  late final ___asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinf');
  late final ___asinf = ___asinfPtr.asFunction<double Function(double)>();

  double atanf(
    double __x,
  ) {
    return _atanf(
      __x,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double __atanf(
    double __x,
  ) {
    return ___atanf(
      __x,
    );
  }

  late final ___atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanf');
  late final ___atanf = ___atanfPtr.asFunction<double Function(double)>();

  double atan2f(
    double __y,
    double __x,
  ) {
    return _atan2f(
      __y,
      __x,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double __atan2f(
    double __y,
    double __x,
  ) {
    return ___atan2f(
      __y,
      __x,
    );
  }

  late final ___atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__atan2f');
  late final ___atan2f =
      ___atan2fPtr.asFunction<double Function(double, double)>();

  double cosf(
    double __x,
  ) {
    return _cosf(
      __x,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double __cosf(
    double __x,
  ) {
    return ___cosf(
      __x,
    );
  }

  late final ___cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cosf');
  late final ___cosf = ___cosfPtr.asFunction<double Function(double)>();

  double sinf(
    double __x,
  ) {
    return _sinf(
      __x,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double __sinf(
    double __x,
  ) {
    return ___sinf(
      __x,
    );
  }

  late final ___sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinf');
  late final ___sinf = ___sinfPtr.asFunction<double Function(double)>();

  double tanf(
    double __x,
  ) {
    return _tanf(
      __x,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double __tanf(
    double __x,
  ) {
    return ___tanf(
      __x,
    );
  }

  late final ___tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanf');
  late final ___tanf = ___tanfPtr.asFunction<double Function(double)>();

  double coshf(
    double __x,
  ) {
    return _coshf(
      __x,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double __coshf(
    double __x,
  ) {
    return ___coshf(
      __x,
    );
  }

  late final ___coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__coshf');
  late final ___coshf = ___coshfPtr.asFunction<double Function(double)>();

  double sinhf(
    double __x,
  ) {
    return _sinhf(
      __x,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double __sinhf(
    double __x,
  ) {
    return ___sinhf(
      __x,
    );
  }

  late final ___sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinhf');
  late final ___sinhf = ___sinhfPtr.asFunction<double Function(double)>();

  double tanhf(
    double __x,
  ) {
    return _tanhf(
      __x,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double __tanhf(
    double __x,
  ) {
    return ___tanhf(
      __x,
    );
  }

  late final ___tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanhf');
  late final ___tanhf = ___tanhfPtr.asFunction<double Function(double)>();

  double acoshf(
    double __x,
  ) {
    return _acoshf(
      __x,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double __acoshf(
    double __x,
  ) {
    return ___acoshf(
      __x,
    );
  }

  late final ___acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__acoshf');
  late final ___acoshf = ___acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double __x,
  ) {
    return _asinhf(
      __x,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double __asinhf(
    double __x,
  ) {
    return ___asinhf(
      __x,
    );
  }

  late final ___asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__asinhf');
  late final ___asinhf = ___asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double __x,
  ) {
    return _atanhf(
      __x,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double __atanhf(
    double __x,
  ) {
    return ___atanhf(
      __x,
    );
  }

  late final ___atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__atanhf');
  late final ___atanhf = ___atanhfPtr.asFunction<double Function(double)>();

  double expf(
    double __x,
  ) {
    return _expf(
      __x,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double __expf(
    double __x,
  ) {
    return ___expf(
      __x,
    );
  }

  late final ___expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expf');
  late final ___expf = ___expfPtr.asFunction<double Function(double)>();

  double frexpf(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    return _frexpf(
      __x,
      __exponent,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int32>)>>('frexpf');
  late final _frexpf =
      _frexpfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double __frexpf(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    return ___frexpf(
      __x,
      __exponent,
    );
  }

  late final ___frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int32>)>>('__frexpf');
  late final ___frexpf = ___frexpfPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double ldexpf(
    double __x,
    int __exponent,
  ) {
    return _ldexpf(
      __x,
      __exponent,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double __ldexpf(
    double __x,
    int __exponent,
  ) {
    return ___ldexpf(
      __x,
      __exponent,
    );
  }

  late final ___ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          '__ldexpf');
  late final ___ldexpf =
      ___ldexpfPtr.asFunction<double Function(double, int)>();

  double logf(
    double __x,
  ) {
    return _logf(
      __x,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double __logf(
    double __x,
  ) {
    return ___logf(
      __x,
    );
  }

  late final ___logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logf');
  late final ___logf = ___logfPtr.asFunction<double Function(double)>();

  double log10f(
    double __x,
  ) {
    return _log10f(
      __x,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double __log10f(
    double __x,
  ) {
    return ___log10f(
      __x,
    );
  }

  late final ___log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log10f');
  late final ___log10f = ___log10fPtr.asFunction<double Function(double)>();

  double modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return _modff(
      __x,
      __iptr,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double __modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    return ___modff(
      __x,
      __iptr,
    );
  }

  late final ___modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('__modff');
  late final ___modff =
      ___modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double expm1f(
    double __x,
  ) {
    return _expm1f(
      __x,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double __expm1f(
    double __x,
  ) {
    return ___expm1f(
      __x,
    );
  }

  late final ___expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__expm1f');
  late final ___expm1f = ___expm1fPtr.asFunction<double Function(double)>();

  double log1pf(
    double __x,
  ) {
    return _log1pf(
      __x,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double __log1pf(
    double __x,
  ) {
    return ___log1pf(
      __x,
    );
  }

  late final ___log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log1pf');
  late final ___log1pf = ___log1pfPtr.asFunction<double Function(double)>();

  double logbf(
    double __x,
  ) {
    return _logbf(
      __x,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double __logbf(
    double __x,
  ) {
    return ___logbf(
      __x,
    );
  }

  late final ___logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__logbf');
  late final ___logbf = ___logbfPtr.asFunction<double Function(double)>();

  double exp2f(
    double __x,
  ) {
    return _exp2f(
      __x,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double __exp2f(
    double __x,
  ) {
    return ___exp2f(
      __x,
    );
  }

  late final ___exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp2f');
  late final ___exp2f = ___exp2fPtr.asFunction<double Function(double)>();

  double log2f(
    double __x,
  ) {
    return _log2f(
      __x,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double __log2f(
    double __x,
  ) {
    return ___log2f(
      __x,
    );
  }

  late final ___log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__log2f');
  late final ___log2f = ___log2fPtr.asFunction<double Function(double)>();

  double powf(
    double __x,
    double __y,
  ) {
    return _powf(
      __x,
      __y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double __powf(
    double __x,
    double __y,
  ) {
    return ___powf(
      __x,
      __y,
    );
  }

  late final ___powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__powf');
  late final ___powf = ___powfPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double __x,
  ) {
    return _sqrtf(
      __x,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double __sqrtf(
    double __x,
  ) {
    return ___sqrtf(
      __x,
    );
  }

  late final ___sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sqrtf');
  late final ___sqrtf = ___sqrtfPtr.asFunction<double Function(double)>();

  double hypotf(
    double __x,
    double __y,
  ) {
    return _hypotf(
      __x,
      __y,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double __hypotf(
    double __x,
    double __y,
  ) {
    return ___hypotf(
      __x,
      __y,
    );
  }

  late final ___hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__hypotf');
  late final ___hypotf =
      ___hypotfPtr.asFunction<double Function(double, double)>();

  double cbrtf(
    double __x,
  ) {
    return _cbrtf(
      __x,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double __cbrtf(
    double __x,
  ) {
    return ___cbrtf(
      __x,
    );
  }

  late final ___cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cbrtf');
  late final ___cbrtf = ___cbrtfPtr.asFunction<double Function(double)>();

  double ceilf(
    double __x,
  ) {
    return _ceilf(
      __x,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double __ceilf(
    double __x,
  ) {
    return ___ceilf(
      __x,
    );
  }

  late final ___ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__ceilf');
  late final ___ceilf = ___ceilfPtr.asFunction<double Function(double)>();

  double fabsf(
    double __x,
  ) {
    return _fabsf(
      __x,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double __fabsf(
    double __x,
  ) {
    return ___fabsf(
      __x,
    );
  }

  late final ___fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__fabsf');
  late final ___fabsf = ___fabsfPtr.asFunction<double Function(double)>();

  double floorf(
    double __x,
  ) {
    return _floorf(
      __x,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double __floorf(
    double __x,
  ) {
    return ___floorf(
      __x,
    );
  }

  late final ___floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__floorf');
  late final ___floorf = ___floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double __x,
    double __y,
  ) {
    return _fmodf(
      __x,
      __y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double __fmodf(
    double __x,
    double __y,
  ) {
    return ___fmodf(
      __x,
      __y,
    );
  }

  late final ___fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmodf');
  late final ___fmodf =
      ___fmodfPtr.asFunction<double Function(double, double)>();

  int __isinff(
    double __value,
  ) {
    return ___isinff(
      __value,
    );
  }

  late final ___isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__isinff');
  late final ___isinff = ___isinffPtr.asFunction<int Function(double)>();

  int __finitef(
    double __value,
  ) {
    return ___finitef(
      __value,
    );
  }

  late final ___finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__finitef');
  late final ___finitef = ___finitefPtr.asFunction<int Function(double)>();

  int isinff(
    double __value,
  ) {
    return _isinff(
      __value,
    );
  }

  late final _isinffPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('isinff');
  late final _isinff = _isinffPtr.asFunction<int Function(double)>();

  int finitef(
    double __value,
  ) {
    return _finitef(
      __value,
    );
  }

  late final _finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('finitef');
  late final _finitef = _finitefPtr.asFunction<int Function(double)>();

  double dremf(
    double __x,
    double __y,
  ) {
    return _dremf(
      __x,
      __y,
    );
  }

  late final _dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'dremf');
  late final _dremf = _dremfPtr.asFunction<double Function(double, double)>();

  double __dremf(
    double __x,
    double __y,
  ) {
    return ___dremf(
      __x,
      __y,
    );
  }

  late final ___dremfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__dremf');
  late final ___dremf =
      ___dremfPtr.asFunction<double Function(double, double)>();

  double significandf(
    double __x,
  ) {
    return _significandf(
      __x,
    );
  }

  late final _significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'significandf');
  late final _significandf =
      _significandfPtr.asFunction<double Function(double)>();

  double __significandf(
    double __x,
  ) {
    return ___significandf(
      __x,
    );
  }

  late final ___significandfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__significandf');
  late final ___significandf =
      ___significandfPtr.asFunction<double Function(double)>();

  double copysignf(
    double __x,
    double __y,
  ) {
    return _copysignf(
      __x,
      __y,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double __copysignf(
    double __x,
    double __y,
  ) {
    return ___copysignf(
      __x,
      __y,
    );
  }

  late final ___copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__copysignf');
  late final ___copysignf =
      ___copysignfPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    return _nanf(
      __tagb,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Int8>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  double __nanf(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    return ___nanf(
      __tagb,
    );
  }

  late final ___nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Int8>)>>(
          '__nanf');
  late final ___nanf =
      ___nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int __isnanf(
    double __value,
  ) {
    return ___isnanf(
      __value,
    );
  }

  late final ___isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__isnanf');
  late final ___isnanf = ___isnanfPtr.asFunction<int Function(double)>();

  int isnanf(
    double __value,
  ) {
    return _isnanf(
      __value,
    );
  }

  late final _isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('isnanf');
  late final _isnanf = _isnanfPtr.asFunction<int Function(double)>();

  double j0f(
    double arg0,
  ) {
    return _j0f(
      arg0,
    );
  }

  late final _j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j0f');
  late final _j0f = _j0fPtr.asFunction<double Function(double)>();

  double __j0f(
    double arg0,
  ) {
    return ___j0f(
      arg0,
    );
  }

  late final ___j0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j0f');
  late final ___j0f = ___j0fPtr.asFunction<double Function(double)>();

  double j1f(
    double arg0,
  ) {
    return _j1f(
      arg0,
    );
  }

  late final _j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('j1f');
  late final _j1f = _j1fPtr.asFunction<double Function(double)>();

  double __j1f(
    double arg0,
  ) {
    return ___j1f(
      arg0,
    );
  }

  late final ___j1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__j1f');
  late final ___j1f = ___j1fPtr.asFunction<double Function(double)>();

  double jnf(
    int arg0,
    double arg1,
  ) {
    return _jnf(
      arg0,
      arg1,
    );
  }

  late final _jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32, ffi.Float)>>(
          'jnf');
  late final _jnf = _jnfPtr.asFunction<double Function(int, double)>();

  double __jnf(
    int arg0,
    double arg1,
  ) {
    return ___jnf(
      arg0,
      arg1,
    );
  }

  late final ___jnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32, ffi.Float)>>(
          '__jnf');
  late final ___jnf = ___jnfPtr.asFunction<double Function(int, double)>();

  double y0f(
    double arg0,
  ) {
    return _y0f(
      arg0,
    );
  }

  late final _y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y0f');
  late final _y0f = _y0fPtr.asFunction<double Function(double)>();

  double __y0f(
    double arg0,
  ) {
    return ___y0f(
      arg0,
    );
  }

  late final ___y0fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y0f');
  late final ___y0f = ___y0fPtr.asFunction<double Function(double)>();

  double y1f(
    double arg0,
  ) {
    return _y1f(
      arg0,
    );
  }

  late final _y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('y1f');
  late final _y1f = _y1fPtr.asFunction<double Function(double)>();

  double __y1f(
    double arg0,
  ) {
    return ___y1f(
      arg0,
    );
  }

  late final ___y1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__y1f');
  late final ___y1f = ___y1fPtr.asFunction<double Function(double)>();

  double ynf(
    int arg0,
    double arg1,
  ) {
    return _ynf(
      arg0,
      arg1,
    );
  }

  late final _ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32, ffi.Float)>>(
          'ynf');
  late final _ynf = _ynfPtr.asFunction<double Function(int, double)>();

  double __ynf(
    int arg0,
    double arg1,
  ) {
    return ___ynf(
      arg0,
      arg1,
    );
  }

  late final ___ynfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32, ffi.Float)>>(
          '__ynf');
  late final ___ynf = ___ynfPtr.asFunction<double Function(int, double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double __erff(
    double arg0,
  ) {
    return ___erff(
      arg0,
    );
  }

  late final ___erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erff');
  late final ___erff = ___erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double __erfcf(
    double arg0,
  ) {
    return ___erfcf(
      arg0,
    );
  }

  late final ___erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__erfcf');
  late final ___erfcf = ___erfcfPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double __lgammaf(
    double arg0,
  ) {
    return ___lgammaf(
      arg0,
    );
  }

  late final ___lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__lgammaf');
  late final ___lgammaf = ___lgammafPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double __tgammaf(
    double arg0,
  ) {
    return ___tgammaf(
      arg0,
    );
  }

  late final ___tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tgammaf');
  late final ___tgammaf = ___tgammafPtr.asFunction<double Function(double)>();

  double gammaf(
    double arg0,
  ) {
    return _gammaf(
      arg0,
    );
  }

  late final _gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('gammaf');
  late final _gammaf = _gammafPtr.asFunction<double Function(double)>();

  double __gammaf(
    double arg0,
  ) {
    return ___gammaf(
      arg0,
    );
  }

  late final ___gammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__gammaf');
  late final ___gammaf = ___gammafPtr.asFunction<double Function(double)>();

  double lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    return _lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final _lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Int32>)>>('lgammaf_r');
  late final _lgammaf_r = _lgammaf_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double __lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    return ___lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  late final ___lgammaf_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Pointer<ffi.Int32>)>>('__lgammaf_r');
  late final ___lgammaf_r = ___lgammaf_rPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  double rintf(
    double __x,
  ) {
    return _rintf(
      __x,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double __rintf(
    double __x,
  ) {
    return ___rintf(
      __x,
    );
  }

  late final ___rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__rintf');
  late final ___rintf = ___rintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double __x,
    double __y,
  ) {
    return _nextafterf(
      __x,
      __y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double __nextafterf(
    double __x,
    double __y,
  ) {
    return ___nextafterf(
      __x,
      __y,
    );
  }

  late final ___nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__nextafterf');
  late final ___nextafterf =
      ___nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double __x,
    double __y,
  ) {
    return _remainderf(
      __x,
      __y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double __remainderf(
    double __x,
    double __y,
  ) {
    return ___remainderf(
      __x,
      __y,
    );
  }

  late final ___remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__remainderf');
  late final ___remainderf =
      ___remainderfPtr.asFunction<double Function(double, double)>();

  double scalbnf(
    double __x,
    int __n,
  ) {
    return _scalbnf(
      __x,
      __n,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double __scalbnf(
    double __x,
    int __n,
  ) {
    return ___scalbnf(
      __x,
      __n,
    );
  }

  late final ___scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int32)>>(
          '__scalbnf');
  late final ___scalbnf =
      ___scalbnfPtr.asFunction<double Function(double, int)>();

  int ilogbf(
    double __x,
  ) {
    return _ilogbf(
      __x,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int __ilogbf(
    double __x,
  ) {
    return ___ilogbf(
      __x,
    );
  }

  late final ___ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__ilogbf');
  late final ___ilogbf = ___ilogbfPtr.asFunction<int Function(double)>();

  double scalblnf(
    double __x,
    int __n,
  ) {
    return _scalblnf(
      __x,
      __n,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int64)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double __scalblnf(
    double __x,
    int __n,
  ) {
    return ___scalblnf(
      __x,
      __n,
    );
  }

  late final ___scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int64)>>(
          '__scalblnf');
  late final ___scalblnf =
      ___scalblnfPtr.asFunction<double Function(double, int)>();

  double nearbyintf(
    double __x,
  ) {
    return _nearbyintf(
      __x,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double __nearbyintf(
    double __x,
  ) {
    return ___nearbyintf(
      __x,
    );
  }

  late final ___nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          '__nearbyintf');
  late final ___nearbyintf =
      ___nearbyintfPtr.asFunction<double Function(double)>();

  double roundf(
    double __x,
  ) {
    return _roundf(
      __x,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double __roundf(
    double __x,
  ) {
    return ___roundf(
      __x,
    );
  }

  late final ___roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__roundf');
  late final ___roundf = ___roundfPtr.asFunction<double Function(double)>();

  double truncf(
    double __x,
  ) {
    return _truncf(
      __x,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double __truncf(
    double __x,
  ) {
    return ___truncf(
      __x,
    );
  }

  late final ___truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__truncf');
  late final ___truncf = ___truncfPtr.asFunction<double Function(double)>();

  double remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    return _remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int32>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  double __remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    return ___remquof(
      __x,
      __y,
      __quo,
    );
  }

  late final ___remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int32>)>>('__remquof');
  late final ___remquof = ___remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int32>)>();

  int lrintf(
    double __x,
  ) {
    return _lrintf(
      __x,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int __lrintf(
    double __x,
  ) {
    return ___lrintf(
      __x,
    );
  }

  late final ___lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('__lrintf');
  late final ___lrintf = ___lrintfPtr.asFunction<int Function(double)>();

  int llrintf(
    double __x,
  ) {
    return _llrintf(
      __x,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int __llrintf(
    double __x,
  ) {
    return ___llrintf(
      __x,
    );
  }

  late final ___llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('__llrintf');
  late final ___llrintf = ___llrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double __x,
  ) {
    return _lroundf(
      __x,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int __lroundf(
    double __x,
  ) {
    return ___lroundf(
      __x,
    );
  }

  late final ___lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('__lroundf');
  late final ___lroundf = ___lroundfPtr.asFunction<int Function(double)>();

  int llroundf(
    double __x,
  ) {
    return _llroundf(
      __x,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int __llroundf(
    double __x,
  ) {
    return ___llroundf(
      __x,
    );
  }

  late final ___llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Float)>>('__llroundf');
  late final ___llroundf = ___llroundfPtr.asFunction<int Function(double)>();

  double fdimf(
    double __x,
    double __y,
  ) {
    return _fdimf(
      __x,
      __y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double __fdimf(
    double __x,
    double __y,
  ) {
    return ___fdimf(
      __x,
      __y,
    );
  }

  late final ___fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fdimf');
  late final ___fdimf =
      ___fdimfPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double __x,
    double __y,
  ) {
    return _fmaxf(
      __x,
      __y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double __fmaxf(
    double __x,
    double __y,
  ) {
    return ___fmaxf(
      __x,
      __y,
    );
  }

  late final ___fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fmaxf');
  late final ___fmaxf =
      ___fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double __x,
    double __y,
  ) {
    return _fminf(
      __x,
      __y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double __fminf(
    double __x,
    double __y,
  ) {
    return ___fminf(
      __x,
      __y,
    );
  }

  late final ___fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__fminf');
  late final ___fminf =
      ___fminfPtr.asFunction<double Function(double, double)>();

  int __fpclassifyf(
    double __value,
  ) {
    return ___fpclassifyf(
      __value,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>(
          '__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __signbitf(
    double __value,
  ) {
    return ___signbitf(
      __value,
    );
  }

  late final ___signbitfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Float)>>('__signbitf');
  late final ___signbitf = ___signbitfPtr.asFunction<int Function(double)>();

  double fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return _fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double __fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    return ___fmaf(
      __x,
      __y,
      __z,
    );
  }

  late final ___fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('__fmaf');
  late final ___fmaf =
      ___fmafPtr.asFunction<double Function(double, double, double)>();

  double scalbf(
    double __x,
    double __n,
  ) {
    return _scalbf(
      __x,
      __n,
    );
  }

  late final _scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'scalbf');
  late final _scalbf = _scalbfPtr.asFunction<double Function(double, double)>();

  double __scalbf(
    double __x,
    double __n,
  ) {
    return ___scalbf(
      __x,
      __n,
    );
  }

  late final ___scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '__scalbf');
  late final ___scalbf =
      ___scalbfPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<ffi.Int32> _signgam = _lookup<ffi.Int32>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  late final ffi.Pointer<ffi.Int32> __LIB_VERSION =
      _lookup<ffi.Int32>('_LIB_VERSION');

  int get _LIB_VERSION => __LIB_VERSION.value;

  set _LIB_VERSION(int value) => __LIB_VERSION.value = value;

  int matherr(
    ffi.Pointer<exception> __exc,
  ) {
    return _matherr(
      __exc,
    );
  }

  late final _matherrPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<exception>)>>(
          'matherr');
  late final _matherr =
      _matherrPtr.asFunction<int Function(ffi.Pointer<exception>)>();

  double gsl_log1p(
    double x,
  ) {
    return _gsl_log1p(
      x,
    );
  }

  late final _gsl_log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_log1p');
  late final _gsl_log1p = _gsl_log1pPtr.asFunction<double Function(double)>();

  double gsl_expm1(
    double x,
  ) {
    return _gsl_expm1(
      x,
    );
  }

  late final _gsl_expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_expm1');
  late final _gsl_expm1 = _gsl_expm1Ptr.asFunction<double Function(double)>();

  double gsl_hypot(
    double x,
    double y,
  ) {
    return _gsl_hypot(
      x,
      y,
    );
  }

  late final _gsl_hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_hypot');
  late final _gsl_hypot =
      _gsl_hypotPtr.asFunction<double Function(double, double)>();

  double gsl_hypot3(
    double x,
    double y,
    double z,
  ) {
    return _gsl_hypot3(
      x,
      y,
      z,
    );
  }

  late final _gsl_hypot3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_hypot3');
  late final _gsl_hypot3 =
      _gsl_hypot3Ptr.asFunction<double Function(double, double, double)>();

  double gsl_acosh(
    double x,
  ) {
    return _gsl_acosh(
      x,
    );
  }

  late final _gsl_acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_acosh');
  late final _gsl_acosh = _gsl_acoshPtr.asFunction<double Function(double)>();

  double gsl_asinh(
    double x,
  ) {
    return _gsl_asinh(
      x,
    );
  }

  late final _gsl_asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_asinh');
  late final _gsl_asinh = _gsl_asinhPtr.asFunction<double Function(double)>();

  double gsl_atanh(
    double x,
  ) {
    return _gsl_atanh(
      x,
    );
  }

  late final _gsl_atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_atanh');
  late final _gsl_atanh = _gsl_atanhPtr.asFunction<double Function(double)>();

  int gsl_isnan(
    double x,
  ) {
    return _gsl_isnan(
      x,
    );
  }

  late final _gsl_isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('gsl_isnan');
  late final _gsl_isnan = _gsl_isnanPtr.asFunction<int Function(double)>();

  int gsl_isinf(
    double x,
  ) {
    return _gsl_isinf(
      x,
    );
  }

  late final _gsl_isinfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('gsl_isinf');
  late final _gsl_isinf = _gsl_isinfPtr.asFunction<int Function(double)>();

  int gsl_finite(
    double x,
  ) {
    return _gsl_finite(
      x,
    );
  }

  late final _gsl_finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double)>>('gsl_finite');
  late final _gsl_finite = _gsl_finitePtr.asFunction<int Function(double)>();

  double gsl_nan() {
    return _gsl_nan();
  }

  late final _gsl_nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('gsl_nan');
  late final _gsl_nan = _gsl_nanPtr.asFunction<double Function()>();

  double gsl_posinf() {
    return _gsl_posinf();
  }

  late final _gsl_posinfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('gsl_posinf');
  late final _gsl_posinf = _gsl_posinfPtr.asFunction<double Function()>();

  double gsl_neginf() {
    return _gsl_neginf();
  }

  late final _gsl_neginfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('gsl_neginf');
  late final _gsl_neginf = _gsl_neginfPtr.asFunction<double Function()>();

  double gsl_fdiv(
    double x,
    double y,
  ) {
    return _gsl_fdiv(
      x,
      y,
    );
  }

  late final _gsl_fdivPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_fdiv');
  late final _gsl_fdiv =
      _gsl_fdivPtr.asFunction<double Function(double, double)>();

  double gsl_coerce_double(
    double x,
  ) {
    return _gsl_coerce_double(
      x,
    );
  }

  late final _gsl_coerce_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_coerce_double');
  late final _gsl_coerce_double =
      _gsl_coerce_doublePtr.asFunction<double Function(double)>();

  double gsl_coerce_float(
    double x,
  ) {
    return _gsl_coerce_float(
      x,
    );
  }

  late final _gsl_coerce_floatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'gsl_coerce_float');
  late final _gsl_coerce_float =
      _gsl_coerce_floatPtr.asFunction<double Function(double)>();

  double gsl_ldexp(
    double x,
    int e,
  ) {
    return _gsl_ldexp(
      x,
      e,
    );
  }

  late final _gsl_ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          'gsl_ldexp');
  late final _gsl_ldexp =
      _gsl_ldexpPtr.asFunction<double Function(double, int)>();

  double gsl_frexp(
    double x,
    ffi.Pointer<ffi.Int32> e,
  ) {
    return _gsl_frexp(
      x,
      e,
    );
  }

  late final _gsl_frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Pointer<ffi.Int32>)>>('gsl_frexp');
  late final _gsl_frexp = _gsl_frexpPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Int32>)>();

  int gsl_fcmp(
    double x1,
    double x2,
    double epsilon,
  ) {
    return _gsl_fcmp(
      x1,
      x2,
      epsilon,
    );
  }

  late final _gsl_fcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double)>>('gsl_fcmp');
  late final _gsl_fcmp =
      _gsl_fcmpPtr.asFunction<int Function(double, double, double)>();

  double gsl_pow_2(
    double x,
  ) {
    return _gsl_pow_2(
      x,
    );
  }

  late final _gsl_pow_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_pow_2');
  late final _gsl_pow_2 = _gsl_pow_2Ptr.asFunction<double Function(double)>();

  double gsl_pow_3(
    double x,
  ) {
    return _gsl_pow_3(
      x,
    );
  }

  late final _gsl_pow_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_pow_3');
  late final _gsl_pow_3 = _gsl_pow_3Ptr.asFunction<double Function(double)>();

  double gsl_pow_4(
    double x,
  ) {
    return _gsl_pow_4(
      x,
    );
  }

  late final _gsl_pow_4Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_pow_4');
  late final _gsl_pow_4 = _gsl_pow_4Ptr.asFunction<double Function(double)>();

  double gsl_pow_5(
    double x,
  ) {
    return _gsl_pow_5(
      x,
    );
  }

  late final _gsl_pow_5Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_pow_5');
  late final _gsl_pow_5 = _gsl_pow_5Ptr.asFunction<double Function(double)>();

  double gsl_pow_6(
    double x,
  ) {
    return _gsl_pow_6(
      x,
    );
  }

  late final _gsl_pow_6Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_pow_6');
  late final _gsl_pow_6 = _gsl_pow_6Ptr.asFunction<double Function(double)>();

  double gsl_pow_7(
    double x,
  ) {
    return _gsl_pow_7(
      x,
    );
  }

  late final _gsl_pow_7Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_pow_7');
  late final _gsl_pow_7 = _gsl_pow_7Ptr.asFunction<double Function(double)>();

  double gsl_pow_8(
    double x,
  ) {
    return _gsl_pow_8(
      x,
    );
  }

  late final _gsl_pow_8Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_pow_8');
  late final _gsl_pow_8 = _gsl_pow_8Ptr.asFunction<double Function(double)>();

  double gsl_pow_9(
    double x,
  ) {
    return _gsl_pow_9(
      x,
    );
  }

  late final _gsl_pow_9Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_pow_9');
  late final _gsl_pow_9 = _gsl_pow_9Ptr.asFunction<double Function(double)>();

  double gsl_pow_int(
    double x,
    int n,
  ) {
    return _gsl_pow_int(
      x,
      n,
    );
  }

  late final _gsl_pow_intPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          'gsl_pow_int');
  late final _gsl_pow_int =
      _gsl_pow_intPtr.asFunction<double Function(double, int)>();

  double gsl_pow_uint(
    double x,
    int n,
  ) {
    return _gsl_pow_uint(
      x,
      n,
    );
  }

  late final _gsl_pow_uintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Uint32)>>(
          'gsl_pow_uint');
  late final _gsl_pow_uint =
      _gsl_pow_uintPtr.asFunction<double Function(double, int)>();

  double gsl_max(
    double a,
    double b,
  ) {
    return _gsl_max(
      a,
      b,
    );
  }

  late final _gsl_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_max');
  late final _gsl_max =
      _gsl_maxPtr.asFunction<double Function(double, double)>();

  double gsl_min(
    double a,
    double b,
  ) {
    return _gsl_min(
      a,
      b,
    );
  }

  late final _gsl_minPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_min');
  late final _gsl_min =
      _gsl_minPtr.asFunction<double Function(double, double)>();

  void gsl_spmatrix_cumsum(
    int n,
    ffi.Pointer<ffi.Int32> c,
  ) {
    return _gsl_spmatrix_cumsum(
      n,
      c,
    );
  }

  late final _gsl_spmatrix_cumsumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              size_t, ffi.Pointer<ffi.Int32>)>>('gsl_spmatrix_cumsum');
  late final _gsl_spmatrix_cumsum = _gsl_spmatrix_cumsumPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Int32>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_bst_type>> _gsl_bst_avl =
      _lookup<ffi.Pointer<gsl_bst_type>>('gsl_bst_avl');

  ffi.Pointer<gsl_bst_type> get gsl_bst_avl => _gsl_bst_avl.value;

  set gsl_bst_avl(ffi.Pointer<gsl_bst_type> value) =>
      _gsl_bst_avl.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_bst_type>> _gsl_bst_rb =
      _lookup<ffi.Pointer<gsl_bst_type>>('gsl_bst_rb');

  ffi.Pointer<gsl_bst_type> get gsl_bst_rb => _gsl_bst_rb.value;

  set gsl_bst_rb(ffi.Pointer<gsl_bst_type> value) => _gsl_bst_rb.value = value;

  ffi.Pointer<gsl_bst_workspace> gsl_bst_alloc(
    ffi.Pointer<gsl_bst_type> T,
    ffi.Pointer<gsl_bst_allocator> allocator,
    ffi.Pointer<gsl_bst_cmp_function> compare,
    ffi.Pointer<ffi.Void> params,
  ) {
    return _gsl_bst_alloc(
      T,
      allocator,
      compare,
      params,
    );
  }

  late final _gsl_bst_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_bst_workspace> Function(
              ffi.Pointer<gsl_bst_type>,
              ffi.Pointer<gsl_bst_allocator>,
              ffi.Pointer<gsl_bst_cmp_function>,
              ffi.Pointer<ffi.Void>)>>('gsl_bst_alloc');
  late final _gsl_bst_alloc = _gsl_bst_allocPtr.asFunction<
      ffi.Pointer<gsl_bst_workspace> Function(
          ffi.Pointer<gsl_bst_type>,
          ffi.Pointer<gsl_bst_allocator>,
          ffi.Pointer<gsl_bst_cmp_function>,
          ffi.Pointer<ffi.Void>)>();

  void gsl_bst_free(
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_free(
      w,
    );
  }

  late final _gsl_bst_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_free');
  late final _gsl_bst_free = _gsl_bst_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_bst_workspace>)>();

  int gsl_bst_empty(
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_empty(
      w,
    );
  }

  late final _gsl_bst_emptyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_empty');
  late final _gsl_bst_empty = _gsl_bst_emptyPtr
      .asFunction<int Function(ffi.Pointer<gsl_bst_workspace>)>();

  ffi.Pointer<ffi.Void> gsl_bst_insert(
    ffi.Pointer<ffi.Void> item,
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_insert(
      item,
      w,
    );
  }

  late final _gsl_bst_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_insert');
  late final _gsl_bst_insert = _gsl_bst_insertPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_bst_workspace>)>();

  ffi.Pointer<ffi.Void> gsl_bst_find(
    ffi.Pointer<ffi.Void> item,
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_find(
      item,
      w,
    );
  }

  late final _gsl_bst_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_find');
  late final _gsl_bst_find = _gsl_bst_findPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_bst_workspace>)>();

  ffi.Pointer<ffi.Void> gsl_bst_remove(
    ffi.Pointer<ffi.Void> item,
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_remove(
      item,
      w,
    );
  }

  late final _gsl_bst_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_remove');
  late final _gsl_bst_remove = _gsl_bst_removePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_bst_workspace>)>();

  int gsl_bst_nodes(
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_nodes(
      w,
    );
  }

  late final _gsl_bst_nodesPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_bst_workspace>)>>(
      'gsl_bst_nodes');
  late final _gsl_bst_nodes = _gsl_bst_nodesPtr
      .asFunction<int Function(ffi.Pointer<gsl_bst_workspace>)>();

  int gsl_bst_node_size(
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_node_size(
      w,
    );
  }

  late final _gsl_bst_node_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_bst_workspace>)>>(
      'gsl_bst_node_size');
  late final _gsl_bst_node_size = _gsl_bst_node_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_bst_workspace>)>();

  ffi.Pointer<ffi.Int8> gsl_bst_name(
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_name(
      w,
    );
  }

  late final _gsl_bst_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_name');
  late final _gsl_bst_name = _gsl_bst_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_bst_workspace>)>();

  int gsl_bst_trav_init(
    ffi.Pointer<gsl_bst_trav> trav,
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_trav_init(
      trav,
      w,
    );
  }

  late final _gsl_bst_trav_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_bst_trav>,
              ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_trav_init');
  late final _gsl_bst_trav_init = _gsl_bst_trav_initPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_bst_trav>, ffi.Pointer<gsl_bst_workspace>)>();

  ffi.Pointer<ffi.Void> gsl_bst_trav_first(
    ffi.Pointer<gsl_bst_trav> trav,
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_trav_first(
      trav,
      w,
    );
  }

  late final _gsl_bst_trav_firstPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<gsl_bst_trav>,
              ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_trav_first');
  late final _gsl_bst_trav_first = _gsl_bst_trav_firstPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<gsl_bst_trav>, ffi.Pointer<gsl_bst_workspace>)>();

  ffi.Pointer<ffi.Void> gsl_bst_trav_last(
    ffi.Pointer<gsl_bst_trav> trav,
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_trav_last(
      trav,
      w,
    );
  }

  late final _gsl_bst_trav_lastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<gsl_bst_trav>,
              ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_trav_last');
  late final _gsl_bst_trav_last = _gsl_bst_trav_lastPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<gsl_bst_trav>, ffi.Pointer<gsl_bst_workspace>)>();

  ffi.Pointer<ffi.Void> gsl_bst_trav_find(
    ffi.Pointer<ffi.Void> item,
    ffi.Pointer<gsl_bst_trav> trav,
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_trav_find(
      item,
      trav,
      w,
    );
  }

  late final _gsl_bst_trav_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_bst_trav>,
              ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_trav_find');
  late final _gsl_bst_trav_find = _gsl_bst_trav_findPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<gsl_bst_trav>, ffi.Pointer<gsl_bst_workspace>)>();

  ffi.Pointer<ffi.Void> gsl_bst_trav_insert(
    ffi.Pointer<ffi.Void> item,
    ffi.Pointer<gsl_bst_trav> trav,
    ffi.Pointer<gsl_bst_workspace> w,
  ) {
    return _gsl_bst_trav_insert(
      item,
      trav,
      w,
    );
  }

  late final _gsl_bst_trav_insertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_bst_trav>,
              ffi.Pointer<gsl_bst_workspace>)>>('gsl_bst_trav_insert');
  late final _gsl_bst_trav_insert = _gsl_bst_trav_insertPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<gsl_bst_trav>, ffi.Pointer<gsl_bst_workspace>)>();

  ffi.Pointer<ffi.Void> gsl_bst_trav_copy(
    ffi.Pointer<gsl_bst_trav> dest,
    ffi.Pointer<gsl_bst_trav> src,
  ) {
    return _gsl_bst_trav_copy(
      dest,
      src,
    );
  }

  late final _gsl_bst_trav_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<gsl_bst_trav>,
              ffi.Pointer<gsl_bst_trav>)>>('gsl_bst_trav_copy');
  late final _gsl_bst_trav_copy = _gsl_bst_trav_copyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<gsl_bst_trav>, ffi.Pointer<gsl_bst_trav>)>();

  ffi.Pointer<ffi.Void> gsl_bst_trav_next(
    ffi.Pointer<gsl_bst_trav> trav,
  ) {
    return _gsl_bst_trav_next(
      trav,
    );
  }

  late final _gsl_bst_trav_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gsl_bst_trav>)>>('gsl_bst_trav_next');
  late final _gsl_bst_trav_next = _gsl_bst_trav_nextPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<gsl_bst_trav>)>();

  ffi.Pointer<ffi.Void> gsl_bst_trav_prev(
    ffi.Pointer<gsl_bst_trav> trav,
  ) {
    return _gsl_bst_trav_prev(
      trav,
    );
  }

  late final _gsl_bst_trav_prevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gsl_bst_trav>)>>('gsl_bst_trav_prev');
  late final _gsl_bst_trav_prev = _gsl_bst_trav_prevPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<gsl_bst_trav>)>();

  ffi.Pointer<ffi.Void> gsl_bst_trav_cur(
    ffi.Pointer<gsl_bst_trav> trav,
  ) {
    return _gsl_bst_trav_cur(
      trav,
    );
  }

  late final _gsl_bst_trav_curPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gsl_bst_trav>)>>('gsl_bst_trav_cur');
  late final _gsl_bst_trav_cur = _gsl_bst_trav_curPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<gsl_bst_trav>)>();

  ffi.Pointer<ffi.Void> gsl_bst_trav_replace(
    ffi.Pointer<gsl_bst_trav> trav,
    ffi.Pointer<ffi.Void> new_item,
  ) {
    return _gsl_bst_trav_replace(
      trav,
      new_item,
    );
  }

  late final _gsl_bst_trav_replacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<gsl_bst_trav>,
              ffi.Pointer<ffi.Void>)>>('gsl_bst_trav_replace');
  late final _gsl_bst_trav_replace = _gsl_bst_trav_replacePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<gsl_bst_trav>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<gsl_spmatrix_complex_long_double>
      gsl_spmatrix_complex_long_double_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_complex_long_double_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_complex_long_double_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              size_t, size_t)>>('gsl_spmatrix_complex_long_double_alloc');
  late final _gsl_spmatrix_complex_long_double_alloc =
      _gsl_spmatrix_complex_long_double_allocPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_complex_long_double>
      gsl_spmatrix_complex_long_double_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_complex_long_double_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_complex_long_double_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              size_t,
              size_t,
              size_t,
              ffi.Int32)>>('gsl_spmatrix_complex_long_double_alloc_nzmax');
  late final _gsl_spmatrix_complex_long_double_alloc_nzmax =
      _gsl_spmatrix_complex_long_double_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              int, int, int, int)>();

  void gsl_spmatrix_complex_long_double_free(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_free(
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_free');
  late final _gsl_spmatrix_complex_long_double_free =
      _gsl_spmatrix_complex_long_double_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_reallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  size_t, ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_realloc');
  late final _gsl_spmatrix_complex_long_double_realloc =
      _gsl_spmatrix_complex_long_double_reallocPtr.asFunction<
          int Function(int, ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_nnz(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_nnzPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_nnz');
  late final _gsl_spmatrix_complex_long_double_nnz =
      _gsl_spmatrix_complex_long_double_nnzPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_complex_long_double_type(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_type(
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_type');
  late final _gsl_spmatrix_complex_long_double_type =
      _gsl_spmatrix_complex_long_double_typePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_set_zero(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_set_zero');
  late final _gsl_spmatrix_complex_long_double_set_zero =
      _gsl_spmatrix_complex_long_double_set_zeroPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_tree_rebuild');
  late final _gsl_spmatrix_complex_long_double_tree_rebuild =
      _gsl_spmatrix_complex_long_double_tree_rebuildPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_csc(
    ffi.Pointer<gsl_spmatrix_complex_long_double> dest,
    ffi.Pointer<gsl_spmatrix_complex_long_double> src,
  ) {
    return _gsl_spmatrix_complex_long_double_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_long_double_cscPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_csc');
  late final _gsl_spmatrix_complex_long_double_csc =
      _gsl_spmatrix_complex_long_double_cscPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_csr(
    ffi.Pointer<gsl_spmatrix_complex_long_double> dest,
    ffi.Pointer<gsl_spmatrix_complex_long_double> src,
  ) {
    return _gsl_spmatrix_complex_long_double_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_long_double_csrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_csr');
  late final _gsl_spmatrix_complex_long_double_csr =
      _gsl_spmatrix_complex_long_double_csrPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  ffi.Pointer<gsl_spmatrix_complex_long_double>
      gsl_spmatrix_complex_long_double_compress(
    ffi.Pointer<gsl_spmatrix_complex_long_double> src,
    int sptype,
  ) {
    return _gsl_spmatrix_complex_long_double_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_complex_long_double_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Int32)>>('gsl_spmatrix_complex_long_double_compress');
  late final _gsl_spmatrix_complex_long_double_compress =
      _gsl_spmatrix_complex_long_double_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              ffi.Pointer<gsl_spmatrix_complex_long_double>, int)>();

  ffi.Pointer<gsl_spmatrix_complex_long_double>
      gsl_spmatrix_complex_long_double_compcol(
    ffi.Pointer<gsl_spmatrix_complex_long_double> src,
  ) {
    return _gsl_spmatrix_complex_long_double_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_complex_long_double_compcolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_compcol');
  late final _gsl_spmatrix_complex_long_double_compcol =
      _gsl_spmatrix_complex_long_double_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  ffi.Pointer<gsl_spmatrix_complex_long_double>
      gsl_spmatrix_complex_long_double_ccs(
    ffi.Pointer<gsl_spmatrix_complex_long_double> src,
  ) {
    return _gsl_spmatrix_complex_long_double_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_complex_long_double_ccsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_ccs');
  late final _gsl_spmatrix_complex_long_double_ccs =
      _gsl_spmatrix_complex_long_double_ccsPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  ffi.Pointer<gsl_spmatrix_complex_long_double>
      gsl_spmatrix_complex_long_double_crs(
    ffi.Pointer<gsl_spmatrix_complex_long_double> src,
  ) {
    return _gsl_spmatrix_complex_long_double_crs(
      src,
    );
  }

  late final _gsl_spmatrix_complex_long_double_crsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_crs');
  late final _gsl_spmatrix_complex_long_double_crs =
      _gsl_spmatrix_complex_long_double_crsPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_memcpy(
    ffi.Pointer<gsl_spmatrix_complex_long_double> dest,
    ffi.Pointer<gsl_spmatrix_complex_long_double> src,
  ) {
    return _gsl_spmatrix_complex_long_double_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_long_double_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_memcpy');
  late final _gsl_spmatrix_complex_long_double_memcpy =
      _gsl_spmatrix_complex_long_double_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_complex_long_double_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_complex_long_double_fprintfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<ffi.Int8>)>>(
      'gsl_spmatrix_complex_long_double_fprintf');
  late final _gsl_spmatrix_complex_long_double_fprintf =
      _gsl_spmatrix_complex_long_double_fprintfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_complex_long_double>
      gsl_spmatrix_complex_long_double_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_complex_long_double_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_complex_long_double_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_complex_long_double_fscanf');
  late final _gsl_spmatrix_complex_long_double_fscanf =
      _gsl_spmatrix_complex_long_double_fscanfPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_long_double> Function(
              ffi.Pointer<FILE>)>();

  int gsl_spmatrix_complex_long_double_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_fwrite');
  late final _gsl_spmatrix_complex_long_double_fwrite =
      _gsl_spmatrix_complex_long_double_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<FILE>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_fread');
  late final _gsl_spmatrix_complex_long_double_fread =
      _gsl_spmatrix_complex_long_double_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  ffi.Pointer<gsl_complex_long_double> gsl_spmatrix_complex_long_double_ptr(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_complex_long_double_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_complex_long_double_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_spmatrix_complex_long_double>,
              size_t,
              size_t)>>('gsl_spmatrix_complex_long_double_ptr');
  late final _gsl_spmatrix_complex_long_double_ptr =
      _gsl_spmatrix_complex_long_double_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_long_double> Function(
              ffi.Pointer<gsl_spmatrix_complex_long_double>, int, int)>();

  int gsl_spmatrix_complex_long_double_scale_columns(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
    ffi.Pointer<gsl_vector_complex_long_double> x,
  ) {
    return _gsl_spmatrix_complex_long_double_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_complex_long_double_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_scale_columns');
  late final _gsl_spmatrix_complex_long_double_scale_columns =
      _gsl_spmatrix_complex_long_double_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_scale_rows(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
    ffi.Pointer<gsl_vector_complex_long_double> x,
  ) {
    return _gsl_spmatrix_complex_long_double_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_complex_long_double_scale_rowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_scale_rows');
  late final _gsl_spmatrix_complex_long_double_scale_rows =
      _gsl_spmatrix_complex_long_double_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_add(
    ffi.Pointer<gsl_spmatrix_complex_long_double> c,
    ffi.Pointer<gsl_spmatrix_complex_long_double> a,
    ffi.Pointer<gsl_spmatrix_complex_long_double> b,
  ) {
    return _gsl_spmatrix_complex_long_double_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_long_double_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_add');
  late final _gsl_spmatrix_complex_long_double_add =
      _gsl_spmatrix_complex_long_double_addPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_dense_add(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_spmatrix_complex_long_double> b,
  ) {
    return _gsl_spmatrix_complex_long_double_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_long_double_dense_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_dense_add');
  late final _gsl_spmatrix_complex_long_double_dense_add =
      _gsl_spmatrix_complex_long_double_dense_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_dense_sub(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_spmatrix_complex_long_double> b,
  ) {
    return _gsl_spmatrix_complex_long_double_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_long_double_dense_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_dense_sub');
  late final _gsl_spmatrix_complex_long_double_dense_sub =
      _gsl_spmatrix_complex_long_double_dense_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_d2sp(
    ffi.Pointer<gsl_spmatrix_complex_long_double> T,
    ffi.Pointer<gsl_matrix_complex_long_double> A,
  ) {
    return _gsl_spmatrix_complex_long_double_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_complex_long_double_d2spPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_d2sp');
  late final _gsl_spmatrix_complex_long_double_d2sp =
      _gsl_spmatrix_complex_long_double_d2spPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_sp2d(
    ffi.Pointer<gsl_matrix_complex_long_double> A,
    ffi.Pointer<gsl_spmatrix_complex_long_double> S,
  ) {
    return _gsl_spmatrix_complex_long_double_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_complex_long_double_sp2dPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_sp2d');
  late final _gsl_spmatrix_complex_long_double_sp2d =
      _gsl_spmatrix_complex_long_double_sp2dPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_add_to_dense(
    ffi.Pointer<gsl_matrix_complex_long_double> a,
    ffi.Pointer<gsl_spmatrix_complex_long_double> b,
  ) {
    return _gsl_spmatrix_complex_long_double_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_long_double_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_add_to_dense');
  late final _gsl_spmatrix_complex_long_double_add_to_dense =
      _gsl_spmatrix_complex_long_double_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_equal(
    ffi.Pointer<gsl_spmatrix_complex_long_double> a,
    ffi.Pointer<gsl_spmatrix_complex_long_double> b,
  ) {
    return _gsl_spmatrix_complex_long_double_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_long_double_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_equal');
  late final _gsl_spmatrix_complex_long_double_equal =
      _gsl_spmatrix_complex_long_double_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_transpose(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_transpose');
  late final _gsl_spmatrix_complex_long_double_transpose =
      _gsl_spmatrix_complex_long_double_transposePtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_transpose2(
    ffi.Pointer<gsl_spmatrix_complex_long_double> m,
  ) {
    return _gsl_spmatrix_complex_long_double_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_complex_long_double_transpose2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_transpose2');
  late final _gsl_spmatrix_complex_long_double_transpose2 =
      _gsl_spmatrix_complex_long_double_transpose2Ptr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  int gsl_spmatrix_complex_long_double_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_complex_long_double> dest,
    ffi.Pointer<gsl_spmatrix_complex_long_double> src,
  ) {
    return _gsl_spmatrix_complex_long_double_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_long_double_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
                  ffi.Pointer<gsl_spmatrix_complex_long_double>)>>(
      'gsl_spmatrix_complex_long_double_transpose_memcpy');
  late final _gsl_spmatrix_complex_long_double_transpose_memcpy =
      _gsl_spmatrix_complex_long_double_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_long_double>,
              ffi.Pointer<gsl_spmatrix_complex_long_double>)>();

  ffi.Pointer<gsl_spmatrix_complex> gsl_spmatrix_complex_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_complex_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_complex_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(
              size_t, size_t)>>('gsl_spmatrix_complex_alloc');
  late final _gsl_spmatrix_complex_alloc = _gsl_spmatrix_complex_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_complex> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_complex> gsl_spmatrix_complex_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_complex_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_complex_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_complex_alloc_nzmax');
  late final _gsl_spmatrix_complex_alloc_nzmax =
      _gsl_spmatrix_complex_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(int, int, int, int)>();

  void gsl_spmatrix_complex_free(
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_free(
      m,
    );
  }

  late final _gsl_spmatrix_complex_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_spmatrix_complex>)>>('gsl_spmatrix_complex_free');
  late final _gsl_spmatrix_complex_free = _gsl_spmatrix_complex_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_complex_reallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(size_t, ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_realloc');
  late final _gsl_spmatrix_complex_realloc = _gsl_spmatrix_complex_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_nnz(
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_complex_nnzPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_spmatrix_complex>)>>('gsl_spmatrix_complex_nnz');
  late final _gsl_spmatrix_complex_nnz = _gsl_spmatrix_complex_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_complex_type(
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_type(
      m,
    );
  }

  late final _gsl_spmatrix_complex_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_complex>)>>('gsl_spmatrix_complex_type');
  late final _gsl_spmatrix_complex_type =
      _gsl_spmatrix_complex_typePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_set_zero(
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_complex_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_set_zero');
  late final _gsl_spmatrix_complex_set_zero = _gsl_spmatrix_complex_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_complex_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_tree_rebuild');
  late final _gsl_spmatrix_complex_tree_rebuild =
      _gsl_spmatrix_complex_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_csc(
    ffi.Pointer<gsl_spmatrix_complex> dest,
    ffi.Pointer<gsl_spmatrix_complex> src,
  ) {
    return _gsl_spmatrix_complex_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>>('gsl_spmatrix_complex_csc');
  late final _gsl_spmatrix_complex_csc =
      _gsl_spmatrix_complex_cscPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_csr(
    ffi.Pointer<gsl_spmatrix_complex> dest,
    ffi.Pointer<gsl_spmatrix_complex> src,
  ) {
    return _gsl_spmatrix_complex_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>>('gsl_spmatrix_complex_csr');
  late final _gsl_spmatrix_complex_csr =
      _gsl_spmatrix_complex_csrPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  ffi.Pointer<gsl_spmatrix_complex> gsl_spmatrix_complex_compress(
    ffi.Pointer<gsl_spmatrix_complex> src,
    int sptype,
  ) {
    return _gsl_spmatrix_complex_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_complex_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(
              ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Int32)>>('gsl_spmatrix_complex_compress');
  late final _gsl_spmatrix_complex_compress =
      _gsl_spmatrix_complex_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(
              ffi.Pointer<gsl_spmatrix_complex>, int)>();

  ffi.Pointer<gsl_spmatrix_complex> gsl_spmatrix_complex_compcol(
    ffi.Pointer<gsl_spmatrix_complex> src,
  ) {
    return _gsl_spmatrix_complex_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_complex_compcolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_complex> Function(
                  ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_compcol');
  late final _gsl_spmatrix_complex_compcol =
      _gsl_spmatrix_complex_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(
              ffi.Pointer<gsl_spmatrix_complex>)>();

  ffi.Pointer<gsl_spmatrix_complex> gsl_spmatrix_complex_ccs(
    ffi.Pointer<gsl_spmatrix_complex> src,
  ) {
    return _gsl_spmatrix_complex_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_complex_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(
              ffi.Pointer<gsl_spmatrix_complex>)>>('gsl_spmatrix_complex_ccs');
  late final _gsl_spmatrix_complex_ccs =
      _gsl_spmatrix_complex_ccsPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(
              ffi.Pointer<gsl_spmatrix_complex>)>();

  ffi.Pointer<gsl_spmatrix_complex> gsl_spmatrix_complex_crs(
    ffi.Pointer<gsl_spmatrix_complex> src,
  ) {
    return _gsl_spmatrix_complex_crs(
      src,
    );
  }

  late final _gsl_spmatrix_complex_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(
              ffi.Pointer<gsl_spmatrix_complex>)>>('gsl_spmatrix_complex_crs');
  late final _gsl_spmatrix_complex_crs =
      _gsl_spmatrix_complex_crsPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(
              ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_memcpy(
    ffi.Pointer<gsl_spmatrix_complex> dest,
    ffi.Pointer<gsl_spmatrix_complex> src,
  ) {
    return _gsl_spmatrix_complex_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>,
                  ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_memcpy');
  late final _gsl_spmatrix_complex_memcpy =
      _gsl_spmatrix_complex_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_complex> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_complex_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_complex_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_complex_fprintf');
  late final _gsl_spmatrix_complex_fprintf =
      _gsl_spmatrix_complex_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_complex> gsl_spmatrix_complex_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_complex_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_complex_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_complex_fscanf');
  late final _gsl_spmatrix_complex_fscanf =
      _gsl_spmatrix_complex_fscanfPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_complex_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_complex_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_fwrite');
  late final _gsl_spmatrix_complex_fwrite =
      _gsl_spmatrix_complex_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_complex_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_fread');
  late final _gsl_spmatrix_complex_fread =
      _gsl_spmatrix_complex_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_complex>)>();

  gsl_complex gsl_spmatrix_complex_get(
    ffi.Pointer<gsl_spmatrix_complex> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_complex_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_complex_getPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex Function(ffi.Pointer<gsl_spmatrix_complex>, size_t,
              size_t)>>('gsl_spmatrix_complex_get');
  late final _gsl_spmatrix_complex_get =
      _gsl_spmatrix_complex_getPtr.asFunction<
          gsl_complex Function(ffi.Pointer<gsl_spmatrix_complex>, int, int)>();

  int gsl_spmatrix_complex_set(
    ffi.Pointer<gsl_spmatrix_complex> m,
    int i,
    int j,
    gsl_complex x,
  ) {
    return _gsl_spmatrix_complex_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_complex_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>, size_t, size_t,
              gsl_complex)>>('gsl_spmatrix_complex_set');
  late final _gsl_spmatrix_complex_set =
      _gsl_spmatrix_complex_setPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_complex>, int, int, gsl_complex)>();

  ffi.Pointer<gsl_complex> gsl_spmatrix_complex_ptr(
    ffi.Pointer<gsl_spmatrix_complex> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_complex_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_complex_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex> Function(ffi.Pointer<gsl_spmatrix_complex>,
              size_t, size_t)>>('gsl_spmatrix_complex_ptr');
  late final _gsl_spmatrix_complex_ptr =
      _gsl_spmatrix_complex_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex> Function(
              ffi.Pointer<gsl_spmatrix_complex>, int, int)>();

  int gsl_spmatrix_complex_scale(
    ffi.Pointer<gsl_spmatrix_complex> m,
    gsl_complex x,
  ) {
    return _gsl_spmatrix_complex_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_complex_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>,
              gsl_complex)>>('gsl_spmatrix_complex_scale');
  late final _gsl_spmatrix_complex_scale =
      _gsl_spmatrix_complex_scalePtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex>, gsl_complex)>();

  int gsl_spmatrix_complex_scale_columns(
    ffi.Pointer<gsl_spmatrix_complex> m,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_spmatrix_complex_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_complex_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_spmatrix_complex_scale_columns');
  late final _gsl_spmatrix_complex_scale_columns =
      _gsl_spmatrix_complex_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_spmatrix_complex_scale_rows(
    ffi.Pointer<gsl_spmatrix_complex> m,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_spmatrix_complex_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_complex_scale_rowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_spmatrix_complex_scale_rows');
  late final _gsl_spmatrix_complex_scale_rows =
      _gsl_spmatrix_complex_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_spmatrix_complex_add(
    ffi.Pointer<gsl_spmatrix_complex> c,
    ffi.Pointer<gsl_spmatrix_complex> a,
    ffi.Pointer<gsl_spmatrix_complex> b,
  ) {
    return _gsl_spmatrix_complex_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>>('gsl_spmatrix_complex_add');
  late final _gsl_spmatrix_complex_add =
      _gsl_spmatrix_complex_addPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_dense_add(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_spmatrix_complex> b,
  ) {
    return _gsl_spmatrix_complex_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_dense_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_dense_add');
  late final _gsl_spmatrix_complex_dense_add =
      _gsl_spmatrix_complex_dense_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_dense_sub(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_spmatrix_complex> b,
  ) {
    return _gsl_spmatrix_complex_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_dense_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_dense_sub');
  late final _gsl_spmatrix_complex_dense_sub =
      _gsl_spmatrix_complex_dense_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_d2sp(
    ffi.Pointer<gsl_spmatrix_complex> T,
    ffi.Pointer<gsl_matrix_complex> A,
  ) {
    return _gsl_spmatrix_complex_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_complex_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_spmatrix_complex_d2sp');
  late final _gsl_spmatrix_complex_d2sp =
      _gsl_spmatrix_complex_d2spPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_spmatrix_complex_sp2d(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_spmatrix_complex> S,
  ) {
    return _gsl_spmatrix_complex_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_complex_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>>('gsl_spmatrix_complex_sp2d');
  late final _gsl_spmatrix_complex_sp2d =
      _gsl_spmatrix_complex_sp2dPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_add_to_dense(
    ffi.Pointer<gsl_matrix_complex> a,
    ffi.Pointer<gsl_spmatrix_complex> b,
  ) {
    return _gsl_spmatrix_complex_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_add_to_dense');
  late final _gsl_spmatrix_complex_add_to_dense =
      _gsl_spmatrix_complex_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_equal(
    ffi.Pointer<gsl_spmatrix_complex> a,
    ffi.Pointer<gsl_spmatrix_complex> b,
  ) {
    return _gsl_spmatrix_complex_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>,
                  ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_equal');
  late final _gsl_spmatrix_complex_equal =
      _gsl_spmatrix_complex_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_transpose(
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_complex_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_transpose');
  late final _gsl_spmatrix_complex_transpose =
      _gsl_spmatrix_complex_transposePtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_transpose2(
    ffi.Pointer<gsl_spmatrix_complex> m,
  ) {
    return _gsl_spmatrix_complex_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_complex_transpose2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_transpose2');
  late final _gsl_spmatrix_complex_transpose2 =
      _gsl_spmatrix_complex_transpose2Ptr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex>)>();

  int gsl_spmatrix_complex_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_complex> dest,
    ffi.Pointer<gsl_spmatrix_complex> src,
  ) {
    return _gsl_spmatrix_complex_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex>,
                  ffi.Pointer<gsl_spmatrix_complex>)>>(
      'gsl_spmatrix_complex_transpose_memcpy');
  late final _gsl_spmatrix_complex_transpose_memcpy =
      _gsl_spmatrix_complex_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex>,
              ffi.Pointer<gsl_spmatrix_complex>)>();

  ffi.Pointer<gsl_spmatrix_complex_float> gsl_spmatrix_complex_float_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_complex_float_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_complex_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(
              size_t, size_t)>>('gsl_spmatrix_complex_float_alloc');
  late final _gsl_spmatrix_complex_float_alloc =
      _gsl_spmatrix_complex_float_allocPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_complex_float>
      gsl_spmatrix_complex_float_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_complex_float_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_complex_float_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(size_t, size_t,
              size_t, ffi.Int32)>>('gsl_spmatrix_complex_float_alloc_nzmax');
  late final _gsl_spmatrix_complex_float_alloc_nzmax =
      _gsl_spmatrix_complex_float_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(
              int, int, int, int)>();

  void gsl_spmatrix_complex_float_free(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_free(
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_free');
  late final _gsl_spmatrix_complex_float_free =
      _gsl_spmatrix_complex_float_freePtr
          .asFunction<void Function(ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_reallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  size_t, ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_realloc');
  late final _gsl_spmatrix_complex_float_realloc =
      _gsl_spmatrix_complex_float_reallocPtr.asFunction<
          int Function(int, ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_nnz(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_nnzPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_nnz');
  late final _gsl_spmatrix_complex_float_nnz =
      _gsl_spmatrix_complex_float_nnzPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex_float>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_complex_float_type(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_type(
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_type');
  late final _gsl_spmatrix_complex_float_type =
      _gsl_spmatrix_complex_float_typePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_set_zero(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_set_zero');
  late final _gsl_spmatrix_complex_float_set_zero =
      _gsl_spmatrix_complex_float_set_zeroPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_tree_rebuild');
  late final _gsl_spmatrix_complex_float_tree_rebuild =
      _gsl_spmatrix_complex_float_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_csc(
    ffi.Pointer<gsl_spmatrix_complex_float> dest,
    ffi.Pointer<gsl_spmatrix_complex_float> src,
  ) {
    return _gsl_spmatrix_complex_float_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_float_cscPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_csc');
  late final _gsl_spmatrix_complex_float_csc =
      _gsl_spmatrix_complex_float_cscPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_csr(
    ffi.Pointer<gsl_spmatrix_complex_float> dest,
    ffi.Pointer<gsl_spmatrix_complex_float> src,
  ) {
    return _gsl_spmatrix_complex_float_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_float_csrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_csr');
  late final _gsl_spmatrix_complex_float_csr =
      _gsl_spmatrix_complex_float_csrPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  ffi.Pointer<gsl_spmatrix_complex_float> gsl_spmatrix_complex_float_compress(
    ffi.Pointer<gsl_spmatrix_complex_float> src,
    int sptype,
  ) {
    return _gsl_spmatrix_complex_float_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_complex_float_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(
              ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Int32)>>('gsl_spmatrix_complex_float_compress');
  late final _gsl_spmatrix_complex_float_compress =
      _gsl_spmatrix_complex_float_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(
              ffi.Pointer<gsl_spmatrix_complex_float>, int)>();

  ffi.Pointer<gsl_spmatrix_complex_float> gsl_spmatrix_complex_float_compcol(
    ffi.Pointer<gsl_spmatrix_complex_float> src,
  ) {
    return _gsl_spmatrix_complex_float_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_complex_float_compcolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_complex_float> Function(
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_compcol');
  late final _gsl_spmatrix_complex_float_compcol =
      _gsl_spmatrix_complex_float_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  ffi.Pointer<gsl_spmatrix_complex_float> gsl_spmatrix_complex_float_ccs(
    ffi.Pointer<gsl_spmatrix_complex_float> src,
  ) {
    return _gsl_spmatrix_complex_float_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_complex_float_ccsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_complex_float> Function(
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_ccs');
  late final _gsl_spmatrix_complex_float_ccs =
      _gsl_spmatrix_complex_float_ccsPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  ffi.Pointer<gsl_spmatrix_complex_float> gsl_spmatrix_complex_float_crs(
    ffi.Pointer<gsl_spmatrix_complex_float> src,
  ) {
    return _gsl_spmatrix_complex_float_crs(
      src,
    );
  }

  late final _gsl_spmatrix_complex_float_crsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_complex_float> Function(
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_crs');
  late final _gsl_spmatrix_complex_float_crs =
      _gsl_spmatrix_complex_float_crsPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_memcpy(
    ffi.Pointer<gsl_spmatrix_complex_float> dest,
    ffi.Pointer<gsl_spmatrix_complex_float> src,
  ) {
    return _gsl_spmatrix_complex_float_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_float_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_memcpy');
  late final _gsl_spmatrix_complex_float_memcpy =
      _gsl_spmatrix_complex_float_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_complex_float> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_complex_float_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_complex_float_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_complex_float_fprintf');
  late final _gsl_spmatrix_complex_float_fprintf =
      _gsl_spmatrix_complex_float_fprintfPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_complex_float> gsl_spmatrix_complex_float_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_complex_float_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_complex_float_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_complex_float_fscanf');
  late final _gsl_spmatrix_complex_float_fscanf =
      _gsl_spmatrix_complex_float_fscanfPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_complex_float> Function(
              ffi.Pointer<FILE>)>();

  int gsl_spmatrix_complex_float_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_fwrite');
  late final _gsl_spmatrix_complex_float_fwrite =
      _gsl_spmatrix_complex_float_fwritePtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_fread');
  late final _gsl_spmatrix_complex_float_fread =
      _gsl_spmatrix_complex_float_freadPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_complex_float>)>();

  gsl_complex_float gsl_spmatrix_complex_float_get(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_complex_float_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_complex_float_getPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex_float Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              size_t, size_t)>>('gsl_spmatrix_complex_float_get');
  late final _gsl_spmatrix_complex_float_get =
      _gsl_spmatrix_complex_float_getPtr.asFunction<
          gsl_complex_float Function(
              ffi.Pointer<gsl_spmatrix_complex_float>, int, int)>();

  int gsl_spmatrix_complex_float_set(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
    int i,
    int j,
    gsl_complex_float x,
  ) {
    return _gsl_spmatrix_complex_float_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_complex_float_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>, size_t,
              size_t, gsl_complex_float)>>('gsl_spmatrix_complex_float_set');
  late final _gsl_spmatrix_complex_float_set =
      _gsl_spmatrix_complex_float_setPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_float>, int, int,
              gsl_complex_float)>();

  ffi.Pointer<gsl_complex_float> gsl_spmatrix_complex_float_ptr(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_complex_float_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_complex_float_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_spmatrix_complex_float>,
              size_t,
              size_t)>>('gsl_spmatrix_complex_float_ptr');
  late final _gsl_spmatrix_complex_float_ptr =
      _gsl_spmatrix_complex_float_ptrPtr.asFunction<
          ffi.Pointer<gsl_complex_float> Function(
              ffi.Pointer<gsl_spmatrix_complex_float>, int, int)>();

  int gsl_spmatrix_complex_float_scale(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
    gsl_complex_float x,
  ) {
    return _gsl_spmatrix_complex_float_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_complex_float_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              gsl_complex_float)>>('gsl_spmatrix_complex_float_scale');
  late final _gsl_spmatrix_complex_float_scale =
      _gsl_spmatrix_complex_float_scalePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_complex_float>, gsl_complex_float)>();

  int gsl_spmatrix_complex_float_scale_columns(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
    ffi.Pointer<gsl_vector_complex_float> x,
  ) {
    return _gsl_spmatrix_complex_float_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_complex_float_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_spmatrix_complex_float_scale_columns');
  late final _gsl_spmatrix_complex_float_scale_columns =
      _gsl_spmatrix_complex_float_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_spmatrix_complex_float_scale_rows(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
    ffi.Pointer<gsl_vector_complex_float> x,
  ) {
    return _gsl_spmatrix_complex_float_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_complex_float_scale_rowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_spmatrix_complex_float_scale_rows');
  late final _gsl_spmatrix_complex_float_scale_rows =
      _gsl_spmatrix_complex_float_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_spmatrix_complex_float_add(
    ffi.Pointer<gsl_spmatrix_complex_float> c,
    ffi.Pointer<gsl_spmatrix_complex_float> a,
    ffi.Pointer<gsl_spmatrix_complex_float> b,
  ) {
    return _gsl_spmatrix_complex_float_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_float_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_add');
  late final _gsl_spmatrix_complex_float_add =
      _gsl_spmatrix_complex_float_addPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_dense_add(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_spmatrix_complex_float> b,
  ) {
    return _gsl_spmatrix_complex_float_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_float_dense_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_dense_add');
  late final _gsl_spmatrix_complex_float_dense_add =
      _gsl_spmatrix_complex_float_dense_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_dense_sub(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_spmatrix_complex_float> b,
  ) {
    return _gsl_spmatrix_complex_float_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_float_dense_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_dense_sub');
  late final _gsl_spmatrix_complex_float_dense_sub =
      _gsl_spmatrix_complex_float_dense_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_d2sp(
    ffi.Pointer<gsl_spmatrix_complex_float> T,
    ffi.Pointer<gsl_matrix_complex_float> A,
  ) {
    return _gsl_spmatrix_complex_float_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_complex_float_d2spPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_d2sp');
  late final _gsl_spmatrix_complex_float_d2sp =
      _gsl_spmatrix_complex_float_d2spPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_spmatrix_complex_float_sp2d(
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_spmatrix_complex_float> S,
  ) {
    return _gsl_spmatrix_complex_float_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_complex_float_sp2dPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_sp2d');
  late final _gsl_spmatrix_complex_float_sp2d =
      _gsl_spmatrix_complex_float_sp2dPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_add_to_dense(
    ffi.Pointer<gsl_matrix_complex_float> a,
    ffi.Pointer<gsl_spmatrix_complex_float> b,
  ) {
    return _gsl_spmatrix_complex_float_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_float_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_add_to_dense');
  late final _gsl_spmatrix_complex_float_add_to_dense =
      _gsl_spmatrix_complex_float_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_equal(
    ffi.Pointer<gsl_spmatrix_complex_float> a,
    ffi.Pointer<gsl_spmatrix_complex_float> b,
  ) {
    return _gsl_spmatrix_complex_float_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_complex_float_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_equal');
  late final _gsl_spmatrix_complex_float_equal =
      _gsl_spmatrix_complex_float_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_transpose(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_transpose');
  late final _gsl_spmatrix_complex_float_transpose =
      _gsl_spmatrix_complex_float_transposePtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_transpose2(
    ffi.Pointer<gsl_spmatrix_complex_float> m,
  ) {
    return _gsl_spmatrix_complex_float_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_complex_float_transpose2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_transpose2');
  late final _gsl_spmatrix_complex_float_transpose2 =
      _gsl_spmatrix_complex_float_transpose2Ptr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_complex_float>)>();

  int gsl_spmatrix_complex_float_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_complex_float> dest,
    ffi.Pointer<gsl_spmatrix_complex_float> src,
  ) {
    return _gsl_spmatrix_complex_float_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_complex_float_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_complex_float>,
                  ffi.Pointer<gsl_spmatrix_complex_float>)>>(
      'gsl_spmatrix_complex_float_transpose_memcpy');
  late final _gsl_spmatrix_complex_float_transpose_memcpy =
      _gsl_spmatrix_complex_float_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_complex_float>,
              ffi.Pointer<gsl_spmatrix_complex_float>)>();

  ffi.Pointer<gsl_spmatrix_long_double> gsl_spmatrix_long_double_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_long_double_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_long_double_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(
              size_t, size_t)>>('gsl_spmatrix_long_double_alloc');
  late final _gsl_spmatrix_long_double_alloc =
      _gsl_spmatrix_long_double_allocPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_long_double> gsl_spmatrix_long_double_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_long_double_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_long_double_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_long_double_alloc_nzmax');
  late final _gsl_spmatrix_long_double_alloc_nzmax =
      _gsl_spmatrix_long_double_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(int, int, int, int)>();

  void gsl_spmatrix_long_double_free(
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_free(
      m,
    );
  }

  late final _gsl_spmatrix_long_double_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_free');
  late final _gsl_spmatrix_long_double_free = _gsl_spmatrix_long_double_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_long_double_reallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  size_t, ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_realloc');
  late final _gsl_spmatrix_long_double_realloc =
      _gsl_spmatrix_long_double_reallocPtr.asFunction<
          int Function(int, ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_nnz(
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_long_double_nnzPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_nnz');
  late final _gsl_spmatrix_long_double_nnz = _gsl_spmatrix_long_double_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long_double>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_long_double_type(
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_type(
      m,
    );
  }

  late final _gsl_spmatrix_long_double_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_type');
  late final _gsl_spmatrix_long_double_type =
      _gsl_spmatrix_long_double_typePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_set_zero(
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_long_double_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_set_zero');
  late final _gsl_spmatrix_long_double_set_zero =
      _gsl_spmatrix_long_double_set_zeroPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_long_double_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_tree_rebuild');
  late final _gsl_spmatrix_long_double_tree_rebuild =
      _gsl_spmatrix_long_double_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_csc(
    ffi.Pointer<gsl_spmatrix_long_double> dest,
    ffi.Pointer<gsl_spmatrix_long_double> src,
  ) {
    return _gsl_spmatrix_long_double_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_long_double_cscPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_csc');
  late final _gsl_spmatrix_long_double_csc =
      _gsl_spmatrix_long_double_cscPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_csr(
    ffi.Pointer<gsl_spmatrix_long_double> dest,
    ffi.Pointer<gsl_spmatrix_long_double> src,
  ) {
    return _gsl_spmatrix_long_double_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_long_double_csrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_csr');
  late final _gsl_spmatrix_long_double_csr =
      _gsl_spmatrix_long_double_csrPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  ffi.Pointer<gsl_spmatrix_long_double> gsl_spmatrix_long_double_compress(
    ffi.Pointer<gsl_spmatrix_long_double> src,
    int sptype,
  ) {
    return _gsl_spmatrix_long_double_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_long_double_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(
              ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Int32)>>('gsl_spmatrix_long_double_compress');
  late final _gsl_spmatrix_long_double_compress =
      _gsl_spmatrix_long_double_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(
              ffi.Pointer<gsl_spmatrix_long_double>, int)>();

  ffi.Pointer<gsl_spmatrix_long_double> gsl_spmatrix_long_double_compcol(
    ffi.Pointer<gsl_spmatrix_long_double> src,
  ) {
    return _gsl_spmatrix_long_double_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_long_double_compcolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_long_double> Function(
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_compcol');
  late final _gsl_spmatrix_long_double_compcol =
      _gsl_spmatrix_long_double_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  ffi.Pointer<gsl_spmatrix_long_double> gsl_spmatrix_long_double_ccs(
    ffi.Pointer<gsl_spmatrix_long_double> src,
  ) {
    return _gsl_spmatrix_long_double_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_long_double_ccsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_long_double> Function(
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_ccs');
  late final _gsl_spmatrix_long_double_ccs =
      _gsl_spmatrix_long_double_ccsPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  ffi.Pointer<gsl_spmatrix_long_double> gsl_spmatrix_long_double_crs(
    ffi.Pointer<gsl_spmatrix_long_double> src,
  ) {
    return _gsl_spmatrix_long_double_crs(
      src,
    );
  }

  late final _gsl_spmatrix_long_double_crsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_long_double> Function(
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_crs');
  late final _gsl_spmatrix_long_double_crs =
      _gsl_spmatrix_long_double_crsPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_memcpy(
    ffi.Pointer<gsl_spmatrix_long_double> dest,
    ffi.Pointer<gsl_spmatrix_long_double> src,
  ) {
    return _gsl_spmatrix_long_double_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_long_double_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_memcpy');
  late final _gsl_spmatrix_long_double_memcpy =
      _gsl_spmatrix_long_double_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_long_double> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_long_double_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_long_double_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_long_double_fprintf');
  late final _gsl_spmatrix_long_double_fprintf =
      _gsl_spmatrix_long_double_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_long_double> gsl_spmatrix_long_double_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_long_double_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_long_double_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_long_double_fscanf');
  late final _gsl_spmatrix_long_double_fscanf =
      _gsl_spmatrix_long_double_fscanfPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long_double> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_long_double_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_long_double_fwritePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_fwrite');
  late final _gsl_spmatrix_long_double_fwrite =
      _gsl_spmatrix_long_double_fwritePtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_long_double_freadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_fread');
  late final _gsl_spmatrix_long_double_fread =
      _gsl_spmatrix_long_double_freadPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_min_index(
    ffi.Pointer<gsl_spmatrix_long_double> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_long_double_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_long_double_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_long_double_min_index');
  late final _gsl_spmatrix_long_double_min_index =
      _gsl_spmatrix_long_double_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  int gsl_spmatrix_long_double_scale_columns(
    ffi.Pointer<gsl_spmatrix_long_double> m,
    ffi.Pointer<gsl_vector_long_double> x,
  ) {
    return _gsl_spmatrix_long_double_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_long_double_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_spmatrix_long_double_scale_columns');
  late final _gsl_spmatrix_long_double_scale_columns =
      _gsl_spmatrix_long_double_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_spmatrix_long_double_scale_rows(
    ffi.Pointer<gsl_spmatrix_long_double> m,
    ffi.Pointer<gsl_vector_long_double> x,
  ) {
    return _gsl_spmatrix_long_double_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_long_double_scale_rowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_spmatrix_long_double_scale_rows');
  late final _gsl_spmatrix_long_double_scale_rows =
      _gsl_spmatrix_long_double_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_spmatrix_long_double_add(
    ffi.Pointer<gsl_spmatrix_long_double> c,
    ffi.Pointer<gsl_spmatrix_long_double> a,
    ffi.Pointer<gsl_spmatrix_long_double> b,
  ) {
    return _gsl_spmatrix_long_double_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_double_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_add');
  late final _gsl_spmatrix_long_double_add =
      _gsl_spmatrix_long_double_addPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_dense_add(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_spmatrix_long_double> b,
  ) {
    return _gsl_spmatrix_long_double_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_double_dense_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_dense_add');
  late final _gsl_spmatrix_long_double_dense_add =
      _gsl_spmatrix_long_double_dense_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_dense_sub(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_spmatrix_long_double> b,
  ) {
    return _gsl_spmatrix_long_double_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_double_dense_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_dense_sub');
  late final _gsl_spmatrix_long_double_dense_sub =
      _gsl_spmatrix_long_double_dense_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_d2sp(
    ffi.Pointer<gsl_spmatrix_long_double> T,
    ffi.Pointer<gsl_matrix_long_double> A,
  ) {
    return _gsl_spmatrix_long_double_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_long_double_d2spPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_spmatrix_long_double_d2sp');
  late final _gsl_spmatrix_long_double_d2sp =
      _gsl_spmatrix_long_double_d2spPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_spmatrix_long_double_sp2d(
    ffi.Pointer<gsl_matrix_long_double> A,
    ffi.Pointer<gsl_spmatrix_long_double> S,
  ) {
    return _gsl_spmatrix_long_double_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_long_double_sp2dPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_sp2d');
  late final _gsl_spmatrix_long_double_sp2d =
      _gsl_spmatrix_long_double_sp2dPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_add_to_dense(
    ffi.Pointer<gsl_matrix_long_double> a,
    ffi.Pointer<gsl_spmatrix_long_double> b,
  ) {
    return _gsl_spmatrix_long_double_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_double_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_add_to_dense');
  late final _gsl_spmatrix_long_double_add_to_dense =
      _gsl_spmatrix_long_double_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_equal(
    ffi.Pointer<gsl_spmatrix_long_double> a,
    ffi.Pointer<gsl_spmatrix_long_double> b,
  ) {
    return _gsl_spmatrix_long_double_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_double_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_equal');
  late final _gsl_spmatrix_long_double_equal =
      _gsl_spmatrix_long_double_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_transpose(
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_long_double_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_transpose');
  late final _gsl_spmatrix_long_double_transpose =
      _gsl_spmatrix_long_double_transposePtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_transpose2(
    ffi.Pointer<gsl_spmatrix_long_double> m,
  ) {
    return _gsl_spmatrix_long_double_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_long_double_transpose2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_transpose2');
  late final _gsl_spmatrix_long_double_transpose2 =
      _gsl_spmatrix_long_double_transpose2Ptr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long_double>)>();

  int gsl_spmatrix_long_double_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_long_double> dest,
    ffi.Pointer<gsl_spmatrix_long_double> src,
  ) {
    return _gsl_spmatrix_long_double_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_long_double_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long_double>,
                  ffi.Pointer<gsl_spmatrix_long_double>)>>(
      'gsl_spmatrix_long_double_transpose_memcpy');
  late final _gsl_spmatrix_long_double_transpose_memcpy =
      _gsl_spmatrix_long_double_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long_double>,
              ffi.Pointer<gsl_spmatrix_long_double>)>();

  ffi.Pointer<gsl_spmatrix> gsl_spmatrix_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix> Function(
              size_t, size_t)>>('gsl_spmatrix_alloc');
  late final _gsl_spmatrix_alloc = _gsl_spmatrix_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix> gsl_spmatrix_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix> Function(
              size_t, size_t, size_t, ffi.Int32)>>('gsl_spmatrix_alloc_nzmax');
  late final _gsl_spmatrix_alloc_nzmax = _gsl_spmatrix_alloc_nzmaxPtr
      .asFunction<ffi.Pointer<gsl_spmatrix> Function(int, int, int, int)>();

  void gsl_spmatrix_free(
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_free(
      m,
    );
  }

  late final _gsl_spmatrix_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_spmatrix>)>>(
          'gsl_spmatrix_free');
  late final _gsl_spmatrix_free = _gsl_spmatrix_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              size_t, ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_realloc');
  late final _gsl_spmatrix_realloc = _gsl_spmatrix_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_nnz(
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_nnzPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spmatrix>)>>(
          'gsl_spmatrix_nnz');
  late final _gsl_spmatrix_nnz = _gsl_spmatrix_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_type(
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_type(
      m,
    );
  }

  late final _gsl_spmatrix_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_type');
  late final _gsl_spmatrix_type = _gsl_spmatrix_typePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_set_zero(
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_set_zeroPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>)>>(
      'gsl_spmatrix_set_zero');
  late final _gsl_spmatrix_set_zero = _gsl_spmatrix_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_tree_rebuild(
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>)>>(
      'gsl_spmatrix_tree_rebuild');
  late final _gsl_spmatrix_tree_rebuild = _gsl_spmatrix_tree_rebuildPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_csc(
    ffi.Pointer<gsl_spmatrix> dest,
    ffi.Pointer<gsl_spmatrix> src,
  ) {
    return _gsl_spmatrix_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_csc');
  late final _gsl_spmatrix_csc = _gsl_spmatrix_cscPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_csr(
    ffi.Pointer<gsl_spmatrix> dest,
    ffi.Pointer<gsl_spmatrix> src,
  ) {
    return _gsl_spmatrix_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_csr');
  late final _gsl_spmatrix_csr = _gsl_spmatrix_csrPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_spmatrix>)>();

  ffi.Pointer<gsl_spmatrix> gsl_spmatrix_compress(
    ffi.Pointer<gsl_spmatrix> src,
    int sptype,
  ) {
    return _gsl_spmatrix_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix> Function(
              ffi.Pointer<gsl_spmatrix>, ffi.Int32)>>('gsl_spmatrix_compress');
  late final _gsl_spmatrix_compress = _gsl_spmatrix_compressPtr.asFunction<
      ffi.Pointer<gsl_spmatrix> Function(ffi.Pointer<gsl_spmatrix>, int)>();

  ffi.Pointer<gsl_spmatrix> gsl_spmatrix_compcol(
    ffi.Pointer<gsl_spmatrix> src,
  ) {
    return _gsl_spmatrix_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_compcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix> Function(
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_compcol');
  late final _gsl_spmatrix_compcol = _gsl_spmatrix_compcolPtr.asFunction<
      ffi.Pointer<gsl_spmatrix> Function(ffi.Pointer<gsl_spmatrix>)>();

  ffi.Pointer<gsl_spmatrix> gsl_spmatrix_ccs(
    ffi.Pointer<gsl_spmatrix> src,
  ) {
    return _gsl_spmatrix_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix> Function(
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_ccs');
  late final _gsl_spmatrix_ccs = _gsl_spmatrix_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix> Function(ffi.Pointer<gsl_spmatrix>)>();

  ffi.Pointer<gsl_spmatrix> gsl_spmatrix_crs(
    ffi.Pointer<gsl_spmatrix> src,
  ) {
    return _gsl_spmatrix_crs(
      src,
    );
  }

  late final _gsl_spmatrix_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix> Function(
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_crs');
  late final _gsl_spmatrix_crs = _gsl_spmatrix_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix> Function(ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_memcpy(
    ffi.Pointer<gsl_spmatrix> dest,
    ffi.Pointer<gsl_spmatrix> src,
  ) {
    return _gsl_spmatrix_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_memcpy');
  late final _gsl_spmatrix_memcpy = _gsl_spmatrix_memcpyPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_fprintf');
  late final _gsl_spmatrix_fprintf = _gsl_spmatrix_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix>,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix> gsl_spmatrix_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_fscanf');
  late final _gsl_spmatrix_fscanf = _gsl_spmatrix_fscanfPtr
      .asFunction<ffi.Pointer<gsl_spmatrix> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_fwrite');
  late final _gsl_spmatrix_fwrite = _gsl_spmatrix_fwritePtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_fread');
  late final _gsl_spmatrix_fread = _gsl_spmatrix_freadPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix>)>();

  double gsl_spmatrix_get(
    ffi.Pointer<gsl_spmatrix> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_spmatrix>, size_t, size_t)>>('gsl_spmatrix_get');
  late final _gsl_spmatrix_get = _gsl_spmatrix_getPtr
      .asFunction<double Function(ffi.Pointer<gsl_spmatrix>, int, int)>();

  int gsl_spmatrix_set(
    ffi.Pointer<gsl_spmatrix> m,
    int i,
    int j,
    double x,
  ) {
    return _gsl_spmatrix_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>, size_t, size_t,
              ffi.Double)>>('gsl_spmatrix_set');
  late final _gsl_spmatrix_set = _gsl_spmatrix_setPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix>, int, int, double)>();

  ffi.Pointer<ffi.Double> gsl_spmatrix_ptr(
    ffi.Pointer<gsl_spmatrix> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<gsl_spmatrix>, size_t, size_t)>>('gsl_spmatrix_ptr');
  late final _gsl_spmatrix_ptr = _gsl_spmatrix_ptrPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<gsl_spmatrix>, int, int)>();

  int gsl_spmatrix_minmax(
    ffi.Pointer<gsl_spmatrix> m,
    ffi.Pointer<ffi.Double> min_out,
    ffi.Pointer<ffi.Double> max_out,
  ) {
    return _gsl_spmatrix_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_spmatrix_minmax');
  late final _gsl_spmatrix_minmax = _gsl_spmatrix_minmaxPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_spmatrix_min_index(
    ffi.Pointer<gsl_spmatrix> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_min_index');
  late final _gsl_spmatrix_min_index = _gsl_spmatrix_min_indexPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<size_t>,
          ffi.Pointer<size_t>)>();

  int gsl_spmatrix_scale(
    ffi.Pointer<gsl_spmatrix> m,
    double x,
  ) {
    return _gsl_spmatrix_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix>, ffi.Double)>>('gsl_spmatrix_scale');
  late final _gsl_spmatrix_scale = _gsl_spmatrix_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix>, double)>();

  int gsl_spmatrix_scale_columns(
    ffi.Pointer<gsl_spmatrix> m,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_spmatrix_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_scale_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_spmatrix_scale_columns');
  late final _gsl_spmatrix_scale_columns =
      _gsl_spmatrix_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_spmatrix_scale_rows(
    ffi.Pointer<gsl_spmatrix> m,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_spmatrix_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_spmatrix_scale_rows');
  late final _gsl_spmatrix_scale_rows = _gsl_spmatrix_scale_rowsPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_spmatrix_add(
    ffi.Pointer<gsl_spmatrix> c,
    ffi.Pointer<gsl_spmatrix> a,
    ffi.Pointer<gsl_spmatrix> b,
  ) {
    return _gsl_spmatrix_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_add');
  late final _gsl_spmatrix_add = _gsl_spmatrix_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_spmatrix>,
          ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_dense_add(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_spmatrix> b,
  ) {
    return _gsl_spmatrix_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_dense_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_dense_add');
  late final _gsl_spmatrix_dense_add = _gsl_spmatrix_dense_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_dense_sub(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_spmatrix> b,
  ) {
    return _gsl_spmatrix_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_dense_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_dense_sub');
  late final _gsl_spmatrix_dense_sub = _gsl_spmatrix_dense_subPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_d2sp(
    ffi.Pointer<gsl_spmatrix> T,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_spmatrix_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_spmatrix_d2sp');
  late final _gsl_spmatrix_d2sp = _gsl_spmatrix_d2spPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_spmatrix_sp2d(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_spmatrix> S,
  ) {
    return _gsl_spmatrix_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_sp2d');
  late final _gsl_spmatrix_sp2d = _gsl_spmatrix_sp2dPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_add_to_dense(
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_spmatrix> b,
  ) {
    return _gsl_spmatrix_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_add_to_densePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_add_to_dense');
  late final _gsl_spmatrix_add_to_dense =
      _gsl_spmatrix_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_equal(
    ffi.Pointer<gsl_spmatrix> a,
    ffi.Pointer<gsl_spmatrix> b,
  ) {
    return _gsl_spmatrix_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_equal');
  late final _gsl_spmatrix_equal = _gsl_spmatrix_equalPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_spmatrix>)>();

  double gsl_spmatrix_norm1(
    ffi.Pointer<gsl_spmatrix> a,
  ) {
    return _gsl_spmatrix_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_norm1Ptr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_spmatrix>)>>(
      'gsl_spmatrix_norm1');
  late final _gsl_spmatrix_norm1 = _gsl_spmatrix_norm1Ptr
      .asFunction<double Function(ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_transpose(
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_transposePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>)>>(
      'gsl_spmatrix_transpose');
  late final _gsl_spmatrix_transpose = _gsl_spmatrix_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_transpose2(
    ffi.Pointer<gsl_spmatrix> m,
  ) {
    return _gsl_spmatrix_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_transpose2Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>)>>(
      'gsl_spmatrix_transpose2');
  late final _gsl_spmatrix_transpose2 = _gsl_spmatrix_transpose2Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spmatrix_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix> dest,
    ffi.Pointer<gsl_spmatrix> src,
  ) {
    return _gsl_spmatrix_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_transpose_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spmatrix_transpose_memcpy');
  late final _gsl_spmatrix_transpose_memcpy =
      _gsl_spmatrix_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_spmatrix>)>();

  ffi.Pointer<gsl_spmatrix_float> gsl_spmatrix_float_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_float_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(
              size_t, size_t)>>('gsl_spmatrix_float_alloc');
  late final _gsl_spmatrix_float_alloc = _gsl_spmatrix_float_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_float> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_float> gsl_spmatrix_float_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_float_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_float_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_float_alloc_nzmax');
  late final _gsl_spmatrix_float_alloc_nzmax =
      _gsl_spmatrix_float_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(int, int, int, int)>();

  void gsl_spmatrix_float_free(
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_free(
      m,
    );
  }

  late final _gsl_spmatrix_float_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_free');
  late final _gsl_spmatrix_float_free = _gsl_spmatrix_float_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_float_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t,
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_realloc');
  late final _gsl_spmatrix_float_realloc = _gsl_spmatrix_float_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_nnz(
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_float_nnzPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spmatrix_float>)>>(
      'gsl_spmatrix_float_nnz');
  late final _gsl_spmatrix_float_nnz = _gsl_spmatrix_float_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_float>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_float_type(
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_type(
      m,
    );
  }

  late final _gsl_spmatrix_float_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_type');
  late final _gsl_spmatrix_float_type = _gsl_spmatrix_float_typePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_set_zero(
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_float_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_set_zero');
  late final _gsl_spmatrix_float_set_zero = _gsl_spmatrix_float_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_float_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>)>>(
      'gsl_spmatrix_float_tree_rebuild');
  late final _gsl_spmatrix_float_tree_rebuild =
      _gsl_spmatrix_float_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_csc(
    ffi.Pointer<gsl_spmatrix_float> dest,
    ffi.Pointer<gsl_spmatrix_float> src,
  ) {
    return _gsl_spmatrix_float_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_float_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_csc');
  late final _gsl_spmatrix_float_csc = _gsl_spmatrix_float_cscPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_float>, ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_csr(
    ffi.Pointer<gsl_spmatrix_float> dest,
    ffi.Pointer<gsl_spmatrix_float> src,
  ) {
    return _gsl_spmatrix_float_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_float_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_csr');
  late final _gsl_spmatrix_float_csr = _gsl_spmatrix_float_csrPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_float>, ffi.Pointer<gsl_spmatrix_float>)>();

  ffi.Pointer<gsl_spmatrix_float> gsl_spmatrix_float_compress(
    ffi.Pointer<gsl_spmatrix_float> src,
    int sptype,
  ) {
    return _gsl_spmatrix_float_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_float_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(
              ffi.Pointer<gsl_spmatrix_float>,
              ffi.Int32)>>('gsl_spmatrix_float_compress');
  late final _gsl_spmatrix_float_compress =
      _gsl_spmatrix_float_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(
              ffi.Pointer<gsl_spmatrix_float>, int)>();

  ffi.Pointer<gsl_spmatrix_float> gsl_spmatrix_float_compcol(
    ffi.Pointer<gsl_spmatrix_float> src,
  ) {
    return _gsl_spmatrix_float_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_float_compcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_compcol');
  late final _gsl_spmatrix_float_compcol =
      _gsl_spmatrix_float_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(
              ffi.Pointer<gsl_spmatrix_float>)>();

  ffi.Pointer<gsl_spmatrix_float> gsl_spmatrix_float_ccs(
    ffi.Pointer<gsl_spmatrix_float> src,
  ) {
    return _gsl_spmatrix_float_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_float_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_ccs');
  late final _gsl_spmatrix_float_ccs = _gsl_spmatrix_float_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_float> Function(
          ffi.Pointer<gsl_spmatrix_float>)>();

  ffi.Pointer<gsl_spmatrix_float> gsl_spmatrix_float_crs(
    ffi.Pointer<gsl_spmatrix_float> src,
  ) {
    return _gsl_spmatrix_float_crs(
      src,
    );
  }

  late final _gsl_spmatrix_float_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_crs');
  late final _gsl_spmatrix_float_crs = _gsl_spmatrix_float_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_float> Function(
          ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_memcpy(
    ffi.Pointer<gsl_spmatrix_float> dest,
    ffi.Pointer<gsl_spmatrix_float> src,
  ) {
    return _gsl_spmatrix_float_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_float_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_memcpy');
  late final _gsl_spmatrix_float_memcpy =
      _gsl_spmatrix_float_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_float> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_float_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_float_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_float_fprintf');
  late final _gsl_spmatrix_float_fprintf =
      _gsl_spmatrix_float_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_float> gsl_spmatrix_float_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_float_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_float_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_float_fscanf');
  late final _gsl_spmatrix_float_fscanf =
      _gsl_spmatrix_float_fscanfPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_float> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_float_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_float_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_fwrite');
  late final _gsl_spmatrix_float_fwrite =
      _gsl_spmatrix_float_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_float_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_fread');
  late final _gsl_spmatrix_float_fread =
      _gsl_spmatrix_float_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_float>)>();

  double gsl_spmatrix_float_get(
    ffi.Pointer<gsl_spmatrix_float> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_float_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_float_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<gsl_spmatrix_float>, size_t,
              size_t)>>('gsl_spmatrix_float_get');
  late final _gsl_spmatrix_float_get = _gsl_spmatrix_float_getPtr
      .asFunction<double Function(ffi.Pointer<gsl_spmatrix_float>, int, int)>();

  int gsl_spmatrix_float_set(
    ffi.Pointer<gsl_spmatrix_float> m,
    int i,
    int j,
    double x,
  ) {
    return _gsl_spmatrix_float_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_float_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>, size_t, size_t,
              ffi.Float)>>('gsl_spmatrix_float_set');
  late final _gsl_spmatrix_float_set = _gsl_spmatrix_float_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_float>, int, int, double)>();

  ffi.Pointer<ffi.Float> gsl_spmatrix_float_ptr(
    ffi.Pointer<gsl_spmatrix_float> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_float_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_float_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<gsl_spmatrix_float>,
              size_t, size_t)>>('gsl_spmatrix_float_ptr');
  late final _gsl_spmatrix_float_ptr = _gsl_spmatrix_float_ptrPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(
          ffi.Pointer<gsl_spmatrix_float>, int, int)>();

  int gsl_spmatrix_float_minmax(
    ffi.Pointer<gsl_spmatrix_float> m,
    ffi.Pointer<ffi.Float> min_out,
    ffi.Pointer<ffi.Float> max_out,
  ) {
    return _gsl_spmatrix_float_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_float_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('gsl_spmatrix_float_minmax');
  late final _gsl_spmatrix_float_minmax =
      _gsl_spmatrix_float_minmaxPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_float>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>();

  int gsl_spmatrix_float_min_index(
    ffi.Pointer<gsl_spmatrix_float> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_float_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_float_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_float_min_index');
  late final _gsl_spmatrix_float_min_index =
      _gsl_spmatrix_float_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_float>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_spmatrix_float_scale(
    ffi.Pointer<gsl_spmatrix_float> m,
    double x,
  ) {
    return _gsl_spmatrix_float_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_float_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Float)>>('gsl_spmatrix_float_scale');
  late final _gsl_spmatrix_float_scale = _gsl_spmatrix_float_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_float>, double)>();

  int gsl_spmatrix_float_scale_columns(
    ffi.Pointer<gsl_spmatrix_float> m,
    ffi.Pointer<gsl_vector_float> x,
  ) {
    return _gsl_spmatrix_float_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_float_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>,
                  ffi.Pointer<gsl_vector_float>)>>(
      'gsl_spmatrix_float_scale_columns');
  late final _gsl_spmatrix_float_scale_columns =
      _gsl_spmatrix_float_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_vector_float>)>();

  int gsl_spmatrix_float_scale_rows(
    ffi.Pointer<gsl_spmatrix_float> m,
    ffi.Pointer<gsl_vector_float> x,
  ) {
    return _gsl_spmatrix_float_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_float_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_spmatrix_float_scale_rows');
  late final _gsl_spmatrix_float_scale_rows =
      _gsl_spmatrix_float_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_vector_float>)>();

  int gsl_spmatrix_float_add(
    ffi.Pointer<gsl_spmatrix_float> c,
    ffi.Pointer<gsl_spmatrix_float> a,
    ffi.Pointer<gsl_spmatrix_float> b,
  ) {
    return _gsl_spmatrix_float_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_float_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_add');
  late final _gsl_spmatrix_float_add = _gsl_spmatrix_float_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_float>,
          ffi.Pointer<gsl_spmatrix_float>, ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_dense_add(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_spmatrix_float> b,
  ) {
    return _gsl_spmatrix_float_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_float_dense_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
                  ffi.Pointer<gsl_spmatrix_float>)>>(
      'gsl_spmatrix_float_dense_add');
  late final _gsl_spmatrix_float_dense_add =
      _gsl_spmatrix_float_dense_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_dense_sub(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_spmatrix_float> b,
  ) {
    return _gsl_spmatrix_float_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_float_dense_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
                  ffi.Pointer<gsl_spmatrix_float>)>>(
      'gsl_spmatrix_float_dense_sub');
  late final _gsl_spmatrix_float_dense_sub =
      _gsl_spmatrix_float_dense_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_d2sp(
    ffi.Pointer<gsl_spmatrix_float> T,
    ffi.Pointer<gsl_matrix_float> A,
  ) {
    return _gsl_spmatrix_float_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_float_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_spmatrix_float_d2sp');
  late final _gsl_spmatrix_float_d2sp = _gsl_spmatrix_float_d2spPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_spmatrix_float_sp2d(
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_spmatrix_float> S,
  ) {
    return _gsl_spmatrix_float_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_float_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_sp2d');
  late final _gsl_spmatrix_float_sp2d = _gsl_spmatrix_float_sp2dPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_float>, ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_add_to_dense(
    ffi.Pointer<gsl_matrix_float> a,
    ffi.Pointer<gsl_spmatrix_float> b,
  ) {
    return _gsl_spmatrix_float_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_float_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_float>,
                  ffi.Pointer<gsl_spmatrix_float>)>>(
      'gsl_spmatrix_float_add_to_dense');
  late final _gsl_spmatrix_float_add_to_dense =
      _gsl_spmatrix_float_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_equal(
    ffi.Pointer<gsl_spmatrix_float> a,
    ffi.Pointer<gsl_spmatrix_float> b,
  ) {
    return _gsl_spmatrix_float_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_float_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_equal');
  late final _gsl_spmatrix_float_equal =
      _gsl_spmatrix_float_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>();

  double gsl_spmatrix_float_norm1(
    ffi.Pointer<gsl_spmatrix_float> a,
  ) {
    return _gsl_spmatrix_float_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_float_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_spmatrix_float>)>>('gsl_spmatrix_float_norm1');
  late final _gsl_spmatrix_float_norm1 = _gsl_spmatrix_float_norm1Ptr
      .asFunction<double Function(ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_transpose(
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_float_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>)>>(
      'gsl_spmatrix_float_transpose');
  late final _gsl_spmatrix_float_transpose = _gsl_spmatrix_float_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_transpose2(
    ffi.Pointer<gsl_spmatrix_float> m,
  ) {
    return _gsl_spmatrix_float_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_float_transpose2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>)>>(
      'gsl_spmatrix_float_transpose2');
  late final _gsl_spmatrix_float_transpose2 = _gsl_spmatrix_float_transpose2Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_float>)>();

  int gsl_spmatrix_float_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_float> dest,
    ffi.Pointer<gsl_spmatrix_float> src,
  ) {
    return _gsl_spmatrix_float_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_float_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_float>,
                  ffi.Pointer<gsl_spmatrix_float>)>>(
      'gsl_spmatrix_float_transpose_memcpy');
  late final _gsl_spmatrix_float_transpose_memcpy =
      _gsl_spmatrix_float_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_float>,
              ffi.Pointer<gsl_spmatrix_float>)>();

  ffi.Pointer<gsl_spmatrix_ulong> gsl_spmatrix_ulong_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_ulong_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_ulong_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(
              size_t, size_t)>>('gsl_spmatrix_ulong_alloc');
  late final _gsl_spmatrix_ulong_alloc = _gsl_spmatrix_ulong_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_ulong> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_ulong> gsl_spmatrix_ulong_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_ulong_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_ulong_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_ulong_alloc_nzmax');
  late final _gsl_spmatrix_ulong_alloc_nzmax =
      _gsl_spmatrix_ulong_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(int, int, int, int)>();

  void gsl_spmatrix_ulong_free(
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_free(
      m,
    );
  }

  late final _gsl_spmatrix_ulong_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_free');
  late final _gsl_spmatrix_ulong_free = _gsl_spmatrix_ulong_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_ulong_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t,
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_realloc');
  late final _gsl_spmatrix_ulong_realloc = _gsl_spmatrix_ulong_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_nnz(
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_ulong_nnzPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spmatrix_ulong>)>>(
      'gsl_spmatrix_ulong_nnz');
  late final _gsl_spmatrix_ulong_nnz = _gsl_spmatrix_ulong_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ulong>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_ulong_type(
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_type(
      m,
    );
  }

  late final _gsl_spmatrix_ulong_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_type');
  late final _gsl_spmatrix_ulong_type = _gsl_spmatrix_ulong_typePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_set_zero(
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_ulong_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_set_zero');
  late final _gsl_spmatrix_ulong_set_zero = _gsl_spmatrix_ulong_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_ulong_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>)>>(
      'gsl_spmatrix_ulong_tree_rebuild');
  late final _gsl_spmatrix_ulong_tree_rebuild =
      _gsl_spmatrix_ulong_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_csc(
    ffi.Pointer<gsl_spmatrix_ulong> dest,
    ffi.Pointer<gsl_spmatrix_ulong> src,
  ) {
    return _gsl_spmatrix_ulong_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_ulong_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_csc');
  late final _gsl_spmatrix_ulong_csc = _gsl_spmatrix_ulong_cscPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_ulong>, ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_csr(
    ffi.Pointer<gsl_spmatrix_ulong> dest,
    ffi.Pointer<gsl_spmatrix_ulong> src,
  ) {
    return _gsl_spmatrix_ulong_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_ulong_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_csr');
  late final _gsl_spmatrix_ulong_csr = _gsl_spmatrix_ulong_csrPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_ulong>, ffi.Pointer<gsl_spmatrix_ulong>)>();

  ffi.Pointer<gsl_spmatrix_ulong> gsl_spmatrix_ulong_compress(
    ffi.Pointer<gsl_spmatrix_ulong> src,
    int sptype,
  ) {
    return _gsl_spmatrix_ulong_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_ulong_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(
              ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Int32)>>('gsl_spmatrix_ulong_compress');
  late final _gsl_spmatrix_ulong_compress =
      _gsl_spmatrix_ulong_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(
              ffi.Pointer<gsl_spmatrix_ulong>, int)>();

  ffi.Pointer<gsl_spmatrix_ulong> gsl_spmatrix_ulong_compcol(
    ffi.Pointer<gsl_spmatrix_ulong> src,
  ) {
    return _gsl_spmatrix_ulong_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_ulong_compcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_compcol');
  late final _gsl_spmatrix_ulong_compcol =
      _gsl_spmatrix_ulong_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(
              ffi.Pointer<gsl_spmatrix_ulong>)>();

  ffi.Pointer<gsl_spmatrix_ulong> gsl_spmatrix_ulong_ccs(
    ffi.Pointer<gsl_spmatrix_ulong> src,
  ) {
    return _gsl_spmatrix_ulong_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_ulong_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_ccs');
  late final _gsl_spmatrix_ulong_ccs = _gsl_spmatrix_ulong_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_ulong> Function(
          ffi.Pointer<gsl_spmatrix_ulong>)>();

  ffi.Pointer<gsl_spmatrix_ulong> gsl_spmatrix_ulong_crs(
    ffi.Pointer<gsl_spmatrix_ulong> src,
  ) {
    return _gsl_spmatrix_ulong_crs(
      src,
    );
  }

  late final _gsl_spmatrix_ulong_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_crs');
  late final _gsl_spmatrix_ulong_crs = _gsl_spmatrix_ulong_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_ulong> Function(
          ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_memcpy(
    ffi.Pointer<gsl_spmatrix_ulong> dest,
    ffi.Pointer<gsl_spmatrix_ulong> src,
  ) {
    return _gsl_spmatrix_ulong_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_ulong_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_memcpy');
  late final _gsl_spmatrix_ulong_memcpy =
      _gsl_spmatrix_ulong_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_ulong> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_ulong_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_ulong_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_ulong_fprintf');
  late final _gsl_spmatrix_ulong_fprintf =
      _gsl_spmatrix_ulong_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_ulong> gsl_spmatrix_ulong_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_ulong_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_ulong_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_ulong_fscanf');
  late final _gsl_spmatrix_ulong_fscanf =
      _gsl_spmatrix_ulong_fscanfPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_ulong> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_ulong_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_ulong_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_fwrite');
  late final _gsl_spmatrix_ulong_fwrite =
      _gsl_spmatrix_ulong_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_ulong_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_fread');
  late final _gsl_spmatrix_ulong_fread =
      _gsl_spmatrix_ulong_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_get(
    ffi.Pointer<gsl_spmatrix_ulong> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_ulong_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_ulong_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<gsl_spmatrix_ulong>, size_t,
              size_t)>>('gsl_spmatrix_ulong_get');
  late final _gsl_spmatrix_ulong_get = _gsl_spmatrix_ulong_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ulong>, int, int)>();

  int gsl_spmatrix_ulong_set(
    ffi.Pointer<gsl_spmatrix_ulong> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_spmatrix_ulong_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_ulong_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>, size_t, size_t,
              ffi.Uint64)>>('gsl_spmatrix_ulong_set');
  late final _gsl_spmatrix_ulong_set = _gsl_spmatrix_ulong_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_ulong>, int, int, int)>();

  ffi.Pointer<ffi.Uint64> gsl_spmatrix_ulong_ptr(
    ffi.Pointer<gsl_spmatrix_ulong> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_ulong_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_ulong_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint64> Function(ffi.Pointer<gsl_spmatrix_ulong>,
              size_t, size_t)>>('gsl_spmatrix_ulong_ptr');
  late final _gsl_spmatrix_ulong_ptr = _gsl_spmatrix_ulong_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint64> Function(
          ffi.Pointer<gsl_spmatrix_ulong>, int, int)>();

  int gsl_spmatrix_ulong_minmax(
    ffi.Pointer<gsl_spmatrix_ulong> m,
    ffi.Pointer<ffi.Uint64> min_out,
    ffi.Pointer<ffi.Uint64> max_out,
  ) {
    return _gsl_spmatrix_ulong_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_ulong_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>)>>('gsl_spmatrix_ulong_minmax');
  late final _gsl_spmatrix_ulong_minmax =
      _gsl_spmatrix_ulong_minmaxPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ulong>, ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>)>();

  int gsl_spmatrix_ulong_min_index(
    ffi.Pointer<gsl_spmatrix_ulong> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_ulong_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_ulong_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_ulong_min_index');
  late final _gsl_spmatrix_ulong_min_index =
      _gsl_spmatrix_ulong_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ulong>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_spmatrix_ulong_scale(
    ffi.Pointer<gsl_spmatrix_ulong> m,
    int x,
  ) {
    return _gsl_spmatrix_ulong_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_ulong_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Uint64)>>('gsl_spmatrix_ulong_scale');
  late final _gsl_spmatrix_ulong_scale = _gsl_spmatrix_ulong_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ulong>, int)>();

  int gsl_spmatrix_ulong_scale_columns(
    ffi.Pointer<gsl_spmatrix_ulong> m,
    ffi.Pointer<gsl_vector_ulong> x,
  ) {
    return _gsl_spmatrix_ulong_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_ulong_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>,
                  ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_spmatrix_ulong_scale_columns');
  late final _gsl_spmatrix_ulong_scale_columns =
      _gsl_spmatrix_ulong_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_spmatrix_ulong_scale_rows(
    ffi.Pointer<gsl_spmatrix_ulong> m,
    ffi.Pointer<gsl_vector_ulong> x,
  ) {
    return _gsl_spmatrix_ulong_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_ulong_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_spmatrix_ulong_scale_rows');
  late final _gsl_spmatrix_ulong_scale_rows =
      _gsl_spmatrix_ulong_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_spmatrix_ulong_add(
    ffi.Pointer<gsl_spmatrix_ulong> c,
    ffi.Pointer<gsl_spmatrix_ulong> a,
    ffi.Pointer<gsl_spmatrix_ulong> b,
  ) {
    return _gsl_spmatrix_ulong_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ulong_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_add');
  late final _gsl_spmatrix_ulong_add = _gsl_spmatrix_ulong_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_ulong>,
          ffi.Pointer<gsl_spmatrix_ulong>, ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_dense_add(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_spmatrix_ulong> b,
  ) {
    return _gsl_spmatrix_ulong_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ulong_dense_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
                  ffi.Pointer<gsl_spmatrix_ulong>)>>(
      'gsl_spmatrix_ulong_dense_add');
  late final _gsl_spmatrix_ulong_dense_add =
      _gsl_spmatrix_ulong_dense_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_dense_sub(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_spmatrix_ulong> b,
  ) {
    return _gsl_spmatrix_ulong_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ulong_dense_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
                  ffi.Pointer<gsl_spmatrix_ulong>)>>(
      'gsl_spmatrix_ulong_dense_sub');
  late final _gsl_spmatrix_ulong_dense_sub =
      _gsl_spmatrix_ulong_dense_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_d2sp(
    ffi.Pointer<gsl_spmatrix_ulong> T,
    ffi.Pointer<gsl_matrix_ulong> A,
  ) {
    return _gsl_spmatrix_ulong_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_ulong_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_spmatrix_ulong_d2sp');
  late final _gsl_spmatrix_ulong_d2sp = _gsl_spmatrix_ulong_d2spPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_ulong>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_spmatrix_ulong_sp2d(
    ffi.Pointer<gsl_matrix_ulong> A,
    ffi.Pointer<gsl_spmatrix_ulong> S,
  ) {
    return _gsl_spmatrix_ulong_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_ulong_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_sp2d');
  late final _gsl_spmatrix_ulong_sp2d = _gsl_spmatrix_ulong_sp2dPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_ulong>, ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_add_to_dense(
    ffi.Pointer<gsl_matrix_ulong> a,
    ffi.Pointer<gsl_spmatrix_ulong> b,
  ) {
    return _gsl_spmatrix_ulong_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ulong_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ulong>,
                  ffi.Pointer<gsl_spmatrix_ulong>)>>(
      'gsl_spmatrix_ulong_add_to_dense');
  late final _gsl_spmatrix_ulong_add_to_dense =
      _gsl_spmatrix_ulong_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_equal(
    ffi.Pointer<gsl_spmatrix_ulong> a,
    ffi.Pointer<gsl_spmatrix_ulong> b,
  ) {
    return _gsl_spmatrix_ulong_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ulong_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_equal');
  late final _gsl_spmatrix_ulong_equal =
      _gsl_spmatrix_ulong_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_norm1(
    ffi.Pointer<gsl_spmatrix_ulong> a,
  ) {
    return _gsl_spmatrix_ulong_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_ulong_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<gsl_spmatrix_ulong>)>>('gsl_spmatrix_ulong_norm1');
  late final _gsl_spmatrix_ulong_norm1 = _gsl_spmatrix_ulong_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_transpose(
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_ulong_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>)>>(
      'gsl_spmatrix_ulong_transpose');
  late final _gsl_spmatrix_ulong_transpose = _gsl_spmatrix_ulong_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_transpose2(
    ffi.Pointer<gsl_spmatrix_ulong> m,
  ) {
    return _gsl_spmatrix_ulong_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_ulong_transpose2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>)>>(
      'gsl_spmatrix_ulong_transpose2');
  late final _gsl_spmatrix_ulong_transpose2 = _gsl_spmatrix_ulong_transpose2Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ulong>)>();

  int gsl_spmatrix_ulong_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_ulong> dest,
    ffi.Pointer<gsl_spmatrix_ulong> src,
  ) {
    return _gsl_spmatrix_ulong_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_ulong_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ulong>,
                  ffi.Pointer<gsl_spmatrix_ulong>)>>(
      'gsl_spmatrix_ulong_transpose_memcpy');
  late final _gsl_spmatrix_ulong_transpose_memcpy =
      _gsl_spmatrix_ulong_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ulong>,
              ffi.Pointer<gsl_spmatrix_ulong>)>();

  ffi.Pointer<gsl_spmatrix_long> gsl_spmatrix_long_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_long_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_long_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(
              size_t, size_t)>>('gsl_spmatrix_long_alloc');
  late final _gsl_spmatrix_long_alloc = _gsl_spmatrix_long_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_long> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_long> gsl_spmatrix_long_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_long_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_long_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_long_alloc_nzmax');
  late final _gsl_spmatrix_long_alloc_nzmax =
      _gsl_spmatrix_long_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(int, int, int, int)>();

  void gsl_spmatrix_long_free(
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_free(
      m,
    );
  }

  late final _gsl_spmatrix_long_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_free');
  late final _gsl_spmatrix_long_free = _gsl_spmatrix_long_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_long_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_realloc');
  late final _gsl_spmatrix_long_realloc = _gsl_spmatrix_long_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_nnz(
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_long_nnzPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spmatrix_long>)>>(
      'gsl_spmatrix_long_nnz');
  late final _gsl_spmatrix_long_nnz = _gsl_spmatrix_long_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_long_type(
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_type(
      m,
    );
  }

  late final _gsl_spmatrix_long_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_type');
  late final _gsl_spmatrix_long_type = _gsl_spmatrix_long_typePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_set_zero(
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_long_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_set_zero');
  late final _gsl_spmatrix_long_set_zero = _gsl_spmatrix_long_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_long_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>)>>(
      'gsl_spmatrix_long_tree_rebuild');
  late final _gsl_spmatrix_long_tree_rebuild =
      _gsl_spmatrix_long_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_csc(
    ffi.Pointer<gsl_spmatrix_long> dest,
    ffi.Pointer<gsl_spmatrix_long> src,
  ) {
    return _gsl_spmatrix_long_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_long_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_csc');
  late final _gsl_spmatrix_long_csc = _gsl_spmatrix_long_cscPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_long>, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_csr(
    ffi.Pointer<gsl_spmatrix_long> dest,
    ffi.Pointer<gsl_spmatrix_long> src,
  ) {
    return _gsl_spmatrix_long_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_long_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_csr');
  late final _gsl_spmatrix_long_csr = _gsl_spmatrix_long_csrPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_long>, ffi.Pointer<gsl_spmatrix_long>)>();

  ffi.Pointer<gsl_spmatrix_long> gsl_spmatrix_long_compress(
    ffi.Pointer<gsl_spmatrix_long> src,
    int sptype,
  ) {
    return _gsl_spmatrix_long_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_long_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(
              ffi.Pointer<gsl_spmatrix_long>,
              ffi.Int32)>>('gsl_spmatrix_long_compress');
  late final _gsl_spmatrix_long_compress =
      _gsl_spmatrix_long_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(
              ffi.Pointer<gsl_spmatrix_long>, int)>();

  ffi.Pointer<gsl_spmatrix_long> gsl_spmatrix_long_compcol(
    ffi.Pointer<gsl_spmatrix_long> src,
  ) {
    return _gsl_spmatrix_long_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_long_compcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_compcol');
  late final _gsl_spmatrix_long_compcol =
      _gsl_spmatrix_long_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(
              ffi.Pointer<gsl_spmatrix_long>)>();

  ffi.Pointer<gsl_spmatrix_long> gsl_spmatrix_long_ccs(
    ffi.Pointer<gsl_spmatrix_long> src,
  ) {
    return _gsl_spmatrix_long_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_long_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_ccs');
  late final _gsl_spmatrix_long_ccs = _gsl_spmatrix_long_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_long> Function(
          ffi.Pointer<gsl_spmatrix_long>)>();

  ffi.Pointer<gsl_spmatrix_long> gsl_spmatrix_long_crs(
    ffi.Pointer<gsl_spmatrix_long> src,
  ) {
    return _gsl_spmatrix_long_crs(
      src,
    );
  }

  late final _gsl_spmatrix_long_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_crs');
  late final _gsl_spmatrix_long_crs = _gsl_spmatrix_long_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_long> Function(
          ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_memcpy(
    ffi.Pointer<gsl_spmatrix_long> dest,
    ffi.Pointer<gsl_spmatrix_long> src,
  ) {
    return _gsl_spmatrix_long_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_long_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_memcpy');
  late final _gsl_spmatrix_long_memcpy =
      _gsl_spmatrix_long_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_long> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_long_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_long_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_long_fprintf');
  late final _gsl_spmatrix_long_fprintf =
      _gsl_spmatrix_long_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_long> gsl_spmatrix_long_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_long_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_long_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_long> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_long_fscanf');
  late final _gsl_spmatrix_long_fscanf = _gsl_spmatrix_long_fscanfPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_long> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_long_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_long_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_fwrite');
  late final _gsl_spmatrix_long_fwrite =
      _gsl_spmatrix_long_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_long_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_fread');
  late final _gsl_spmatrix_long_fread = _gsl_spmatrix_long_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_get(
    ffi.Pointer<gsl_spmatrix_long> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_long_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_long_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<gsl_spmatrix_long>, size_t,
              size_t)>>('gsl_spmatrix_long_get');
  late final _gsl_spmatrix_long_get = _gsl_spmatrix_long_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long>, int, int)>();

  int gsl_spmatrix_long_set(
    ffi.Pointer<gsl_spmatrix_long> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_spmatrix_long_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_long_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>, size_t, size_t,
              ffi.Int64)>>('gsl_spmatrix_long_set');
  late final _gsl_spmatrix_long_set = _gsl_spmatrix_long_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_long>, int, int, int)>();

  ffi.Pointer<ffi.Int64> gsl_spmatrix_long_ptr(
    ffi.Pointer<gsl_spmatrix_long> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_long_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_long_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int64> Function(ffi.Pointer<gsl_spmatrix_long>,
              size_t, size_t)>>('gsl_spmatrix_long_ptr');
  late final _gsl_spmatrix_long_ptr = _gsl_spmatrix_long_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int64> Function(
          ffi.Pointer<gsl_spmatrix_long>, int, int)>();

  int gsl_spmatrix_long_minmax(
    ffi.Pointer<gsl_spmatrix_long> m,
    ffi.Pointer<ffi.Int64> min_out,
    ffi.Pointer<ffi.Int64> max_out,
  ) {
    return _gsl_spmatrix_long_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_long_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('gsl_spmatrix_long_minmax');
  late final _gsl_spmatrix_long_minmax =
      _gsl_spmatrix_long_minmaxPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>();

  int gsl_spmatrix_long_min_index(
    ffi.Pointer<gsl_spmatrix_long> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_long_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_long_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_long_min_index');
  late final _gsl_spmatrix_long_min_index =
      _gsl_spmatrix_long_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_spmatrix_long_scale(
    ffi.Pointer<gsl_spmatrix_long> m,
    int x,
  ) {
    return _gsl_spmatrix_long_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_long_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>,
              ffi.Int64)>>('gsl_spmatrix_long_scale');
  late final _gsl_spmatrix_long_scale = _gsl_spmatrix_long_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long>, int)>();

  int gsl_spmatrix_long_scale_columns(
    ffi.Pointer<gsl_spmatrix_long> m,
    ffi.Pointer<gsl_vector_long> x,
  ) {
    return _gsl_spmatrix_long_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_long_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>,
                  ffi.Pointer<gsl_vector_long>)>>(
      'gsl_spmatrix_long_scale_columns');
  late final _gsl_spmatrix_long_scale_columns =
      _gsl_spmatrix_long_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_spmatrix_long_scale_rows(
    ffi.Pointer<gsl_spmatrix_long> m,
    ffi.Pointer<gsl_vector_long> x,
  ) {
    return _gsl_spmatrix_long_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_long_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_spmatrix_long_scale_rows');
  late final _gsl_spmatrix_long_scale_rows =
      _gsl_spmatrix_long_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_spmatrix_long_add(
    ffi.Pointer<gsl_spmatrix_long> c,
    ffi.Pointer<gsl_spmatrix_long> a,
    ffi.Pointer<gsl_spmatrix_long> b,
  ) {
    return _gsl_spmatrix_long_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_add');
  late final _gsl_spmatrix_long_add = _gsl_spmatrix_long_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_long>,
          ffi.Pointer<gsl_spmatrix_long>, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_dense_add(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_spmatrix_long> b,
  ) {
    return _gsl_spmatrix_long_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_dense_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_dense_add');
  late final _gsl_spmatrix_long_dense_add =
      _gsl_spmatrix_long_dense_addPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_dense_sub(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_spmatrix_long> b,
  ) {
    return _gsl_spmatrix_long_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_dense_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_dense_sub');
  late final _gsl_spmatrix_long_dense_sub =
      _gsl_spmatrix_long_dense_subPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_d2sp(
    ffi.Pointer<gsl_spmatrix_long> T,
    ffi.Pointer<gsl_matrix_long> A,
  ) {
    return _gsl_spmatrix_long_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_long_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_spmatrix_long_d2sp');
  late final _gsl_spmatrix_long_d2sp = _gsl_spmatrix_long_d2spPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_long>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_spmatrix_long_sp2d(
    ffi.Pointer<gsl_matrix_long> A,
    ffi.Pointer<gsl_spmatrix_long> S,
  ) {
    return _gsl_spmatrix_long_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_long_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_sp2d');
  late final _gsl_spmatrix_long_sp2d = _gsl_spmatrix_long_sp2dPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_add_to_dense(
    ffi.Pointer<gsl_matrix_long> a,
    ffi.Pointer<gsl_spmatrix_long> b,
  ) {
    return _gsl_spmatrix_long_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_long>,
                  ffi.Pointer<gsl_spmatrix_long>)>>(
      'gsl_spmatrix_long_add_to_dense');
  late final _gsl_spmatrix_long_add_to_dense =
      _gsl_spmatrix_long_add_to_densePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_long>, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_equal(
    ffi.Pointer<gsl_spmatrix_long> a,
    ffi.Pointer<gsl_spmatrix_long> b,
  ) {
    return _gsl_spmatrix_long_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_long_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_equal');
  late final _gsl_spmatrix_long_equal = _gsl_spmatrix_long_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_long>, ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_norm1(
    ffi.Pointer<gsl_spmatrix_long> a,
  ) {
    return _gsl_spmatrix_long_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_long_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_norm1');
  late final _gsl_spmatrix_long_norm1 = _gsl_spmatrix_long_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_transpose(
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_long_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_transpose');
  late final _gsl_spmatrix_long_transpose = _gsl_spmatrix_long_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_transpose2(
    ffi.Pointer<gsl_spmatrix_long> m,
  ) {
    return _gsl_spmatrix_long_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_long_transpose2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_long>)>>('gsl_spmatrix_long_transpose2');
  late final _gsl_spmatrix_long_transpose2 = _gsl_spmatrix_long_transpose2Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_long>)>();

  int gsl_spmatrix_long_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_long> dest,
    ffi.Pointer<gsl_spmatrix_long> src,
  ) {
    return _gsl_spmatrix_long_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_long_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_long>,
                  ffi.Pointer<gsl_spmatrix_long>)>>(
      'gsl_spmatrix_long_transpose_memcpy');
  late final _gsl_spmatrix_long_transpose_memcpy =
      _gsl_spmatrix_long_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_long>,
              ffi.Pointer<gsl_spmatrix_long>)>();

  ffi.Pointer<gsl_spmatrix_uint> gsl_spmatrix_uint_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_uint_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_uint_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(
              size_t, size_t)>>('gsl_spmatrix_uint_alloc');
  late final _gsl_spmatrix_uint_alloc = _gsl_spmatrix_uint_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_uint> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_uint> gsl_spmatrix_uint_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_uint_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_uint_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_uint_alloc_nzmax');
  late final _gsl_spmatrix_uint_alloc_nzmax =
      _gsl_spmatrix_uint_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(int, int, int, int)>();

  void gsl_spmatrix_uint_free(
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_free(
      m,
    );
  }

  late final _gsl_spmatrix_uint_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_free');
  late final _gsl_spmatrix_uint_free = _gsl_spmatrix_uint_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_uint_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_realloc');
  late final _gsl_spmatrix_uint_realloc = _gsl_spmatrix_uint_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_nnz(
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_uint_nnzPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spmatrix_uint>)>>(
      'gsl_spmatrix_uint_nnz');
  late final _gsl_spmatrix_uint_nnz = _gsl_spmatrix_uint_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uint>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_uint_type(
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_type(
      m,
    );
  }

  late final _gsl_spmatrix_uint_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_type');
  late final _gsl_spmatrix_uint_type = _gsl_spmatrix_uint_typePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_set_zero(
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_uint_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_set_zero');
  late final _gsl_spmatrix_uint_set_zero = _gsl_spmatrix_uint_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_uint_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>)>>(
      'gsl_spmatrix_uint_tree_rebuild');
  late final _gsl_spmatrix_uint_tree_rebuild =
      _gsl_spmatrix_uint_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_csc(
    ffi.Pointer<gsl_spmatrix_uint> dest,
    ffi.Pointer<gsl_spmatrix_uint> src,
  ) {
    return _gsl_spmatrix_uint_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_uint_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_csc');
  late final _gsl_spmatrix_uint_csc = _gsl_spmatrix_uint_cscPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_uint>, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_csr(
    ffi.Pointer<gsl_spmatrix_uint> dest,
    ffi.Pointer<gsl_spmatrix_uint> src,
  ) {
    return _gsl_spmatrix_uint_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_uint_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_csr');
  late final _gsl_spmatrix_uint_csr = _gsl_spmatrix_uint_csrPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_uint>, ffi.Pointer<gsl_spmatrix_uint>)>();

  ffi.Pointer<gsl_spmatrix_uint> gsl_spmatrix_uint_compress(
    ffi.Pointer<gsl_spmatrix_uint> src,
    int sptype,
  ) {
    return _gsl_spmatrix_uint_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_uint_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(
              ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Int32)>>('gsl_spmatrix_uint_compress');
  late final _gsl_spmatrix_uint_compress =
      _gsl_spmatrix_uint_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(
              ffi.Pointer<gsl_spmatrix_uint>, int)>();

  ffi.Pointer<gsl_spmatrix_uint> gsl_spmatrix_uint_compcol(
    ffi.Pointer<gsl_spmatrix_uint> src,
  ) {
    return _gsl_spmatrix_uint_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_uint_compcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_compcol');
  late final _gsl_spmatrix_uint_compcol =
      _gsl_spmatrix_uint_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(
              ffi.Pointer<gsl_spmatrix_uint>)>();

  ffi.Pointer<gsl_spmatrix_uint> gsl_spmatrix_uint_ccs(
    ffi.Pointer<gsl_spmatrix_uint> src,
  ) {
    return _gsl_spmatrix_uint_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_uint_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_ccs');
  late final _gsl_spmatrix_uint_ccs = _gsl_spmatrix_uint_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_uint> Function(
          ffi.Pointer<gsl_spmatrix_uint>)>();

  ffi.Pointer<gsl_spmatrix_uint> gsl_spmatrix_uint_crs(
    ffi.Pointer<gsl_spmatrix_uint> src,
  ) {
    return _gsl_spmatrix_uint_crs(
      src,
    );
  }

  late final _gsl_spmatrix_uint_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_crs');
  late final _gsl_spmatrix_uint_crs = _gsl_spmatrix_uint_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_uint> Function(
          ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_memcpy(
    ffi.Pointer<gsl_spmatrix_uint> dest,
    ffi.Pointer<gsl_spmatrix_uint> src,
  ) {
    return _gsl_spmatrix_uint_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_uint_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_memcpy');
  late final _gsl_spmatrix_uint_memcpy =
      _gsl_spmatrix_uint_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_uint> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_uint_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_uint_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_uint_fprintf');
  late final _gsl_spmatrix_uint_fprintf =
      _gsl_spmatrix_uint_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_uint> gsl_spmatrix_uint_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_uint_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_uint_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uint> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_uint_fscanf');
  late final _gsl_spmatrix_uint_fscanf = _gsl_spmatrix_uint_fscanfPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_uint> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_uint_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_uint_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_fwrite');
  late final _gsl_spmatrix_uint_fwrite =
      _gsl_spmatrix_uint_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_uint_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_fread');
  late final _gsl_spmatrix_uint_fread = _gsl_spmatrix_uint_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_get(
    ffi.Pointer<gsl_spmatrix_uint> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_uint_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_uint_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<gsl_spmatrix_uint>, size_t,
              size_t)>>('gsl_spmatrix_uint_get');
  late final _gsl_spmatrix_uint_get = _gsl_spmatrix_uint_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uint>, int, int)>();

  int gsl_spmatrix_uint_set(
    ffi.Pointer<gsl_spmatrix_uint> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_spmatrix_uint_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_uint_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>, size_t, size_t,
              ffi.Uint32)>>('gsl_spmatrix_uint_set');
  late final _gsl_spmatrix_uint_set = _gsl_spmatrix_uint_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_uint>, int, int, int)>();

  ffi.Pointer<ffi.Uint32> gsl_spmatrix_uint_ptr(
    ffi.Pointer<gsl_spmatrix_uint> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_uint_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_uint_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<gsl_spmatrix_uint>,
              size_t, size_t)>>('gsl_spmatrix_uint_ptr');
  late final _gsl_spmatrix_uint_ptr = _gsl_spmatrix_uint_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint32> Function(
          ffi.Pointer<gsl_spmatrix_uint>, int, int)>();

  int gsl_spmatrix_uint_minmax(
    ffi.Pointer<gsl_spmatrix_uint> m,
    ffi.Pointer<ffi.Uint32> min_out,
    ffi.Pointer<ffi.Uint32> max_out,
  ) {
    return _gsl_spmatrix_uint_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_uint_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>>('gsl_spmatrix_uint_minmax');
  late final _gsl_spmatrix_uint_minmax =
      _gsl_spmatrix_uint_minmaxPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uint>, ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>)>();

  int gsl_spmatrix_uint_min_index(
    ffi.Pointer<gsl_spmatrix_uint> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_uint_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_uint_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_uint_min_index');
  late final _gsl_spmatrix_uint_min_index =
      _gsl_spmatrix_uint_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uint>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_spmatrix_uint_scale(
    ffi.Pointer<gsl_spmatrix_uint> m,
    int x,
  ) {
    return _gsl_spmatrix_uint_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_uint_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Uint32)>>('gsl_spmatrix_uint_scale');
  late final _gsl_spmatrix_uint_scale = _gsl_spmatrix_uint_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uint>, int)>();

  int gsl_spmatrix_uint_scale_columns(
    ffi.Pointer<gsl_spmatrix_uint> m,
    ffi.Pointer<gsl_vector_uint> x,
  ) {
    return _gsl_spmatrix_uint_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_uint_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>,
                  ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_spmatrix_uint_scale_columns');
  late final _gsl_spmatrix_uint_scale_columns =
      _gsl_spmatrix_uint_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_spmatrix_uint_scale_rows(
    ffi.Pointer<gsl_spmatrix_uint> m,
    ffi.Pointer<gsl_vector_uint> x,
  ) {
    return _gsl_spmatrix_uint_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_uint_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_spmatrix_uint_scale_rows');
  late final _gsl_spmatrix_uint_scale_rows =
      _gsl_spmatrix_uint_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_spmatrix_uint_add(
    ffi.Pointer<gsl_spmatrix_uint> c,
    ffi.Pointer<gsl_spmatrix_uint> a,
    ffi.Pointer<gsl_spmatrix_uint> b,
  ) {
    return _gsl_spmatrix_uint_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uint_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_add');
  late final _gsl_spmatrix_uint_add = _gsl_spmatrix_uint_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_uint>,
          ffi.Pointer<gsl_spmatrix_uint>, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_dense_add(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_spmatrix_uint> b,
  ) {
    return _gsl_spmatrix_uint_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uint_dense_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_dense_add');
  late final _gsl_spmatrix_uint_dense_add =
      _gsl_spmatrix_uint_dense_addPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_dense_sub(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_spmatrix_uint> b,
  ) {
    return _gsl_spmatrix_uint_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uint_dense_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_dense_sub');
  late final _gsl_spmatrix_uint_dense_sub =
      _gsl_spmatrix_uint_dense_subPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_d2sp(
    ffi.Pointer<gsl_spmatrix_uint> T,
    ffi.Pointer<gsl_matrix_uint> A,
  ) {
    return _gsl_spmatrix_uint_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_uint_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_spmatrix_uint_d2sp');
  late final _gsl_spmatrix_uint_d2sp = _gsl_spmatrix_uint_d2spPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_uint>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_spmatrix_uint_sp2d(
    ffi.Pointer<gsl_matrix_uint> A,
    ffi.Pointer<gsl_spmatrix_uint> S,
  ) {
    return _gsl_spmatrix_uint_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_uint_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_sp2d');
  late final _gsl_spmatrix_uint_sp2d = _gsl_spmatrix_uint_sp2dPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_add_to_dense(
    ffi.Pointer<gsl_matrix_uint> a,
    ffi.Pointer<gsl_spmatrix_uint> b,
  ) {
    return _gsl_spmatrix_uint_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uint_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_uint>,
                  ffi.Pointer<gsl_spmatrix_uint>)>>(
      'gsl_spmatrix_uint_add_to_dense');
  late final _gsl_spmatrix_uint_add_to_dense =
      _gsl_spmatrix_uint_add_to_densePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_uint>, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_equal(
    ffi.Pointer<gsl_spmatrix_uint> a,
    ffi.Pointer<gsl_spmatrix_uint> b,
  ) {
    return _gsl_spmatrix_uint_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uint_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_equal');
  late final _gsl_spmatrix_uint_equal = _gsl_spmatrix_uint_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_uint>, ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_norm1(
    ffi.Pointer<gsl_spmatrix_uint> a,
  ) {
    return _gsl_spmatrix_uint_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_uint_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_norm1');
  late final _gsl_spmatrix_uint_norm1 = _gsl_spmatrix_uint_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_transpose(
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_uint_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_transpose');
  late final _gsl_spmatrix_uint_transpose = _gsl_spmatrix_uint_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_transpose2(
    ffi.Pointer<gsl_spmatrix_uint> m,
  ) {
    return _gsl_spmatrix_uint_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_uint_transpose2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uint>)>>('gsl_spmatrix_uint_transpose2');
  late final _gsl_spmatrix_uint_transpose2 = _gsl_spmatrix_uint_transpose2Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uint>)>();

  int gsl_spmatrix_uint_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_uint> dest,
    ffi.Pointer<gsl_spmatrix_uint> src,
  ) {
    return _gsl_spmatrix_uint_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_uint_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uint>,
                  ffi.Pointer<gsl_spmatrix_uint>)>>(
      'gsl_spmatrix_uint_transpose_memcpy');
  late final _gsl_spmatrix_uint_transpose_memcpy =
      _gsl_spmatrix_uint_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uint>,
              ffi.Pointer<gsl_spmatrix_uint>)>();

  ffi.Pointer<gsl_spmatrix_int> gsl_spmatrix_int_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_int_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_int_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_int> Function(
              size_t, size_t)>>('gsl_spmatrix_int_alloc');
  late final _gsl_spmatrix_int_alloc = _gsl_spmatrix_int_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_int> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_int> gsl_spmatrix_int_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_int_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_int_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_int> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_int_alloc_nzmax');
  late final _gsl_spmatrix_int_alloc_nzmax = _gsl_spmatrix_int_alloc_nzmaxPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_int> Function(int, int, int, int)>();

  void gsl_spmatrix_int_free(
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_free(
      m,
    );
  }

  late final _gsl_spmatrix_int_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_spmatrix_int>)>>(
      'gsl_spmatrix_int_free');
  late final _gsl_spmatrix_int_free = _gsl_spmatrix_int_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_int_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_realloc');
  late final _gsl_spmatrix_int_realloc = _gsl_spmatrix_int_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_nnz(
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_int_nnzPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spmatrix_int>)>>(
      'gsl_spmatrix_int_nnz');
  late final _gsl_spmatrix_int_nnz = _gsl_spmatrix_int_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_int>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_int_type(
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_type(
      m,
    );
  }

  late final _gsl_spmatrix_int_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_type');
  late final _gsl_spmatrix_int_type = _gsl_spmatrix_int_typePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_set_zero(
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_int_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_set_zero');
  late final _gsl_spmatrix_int_set_zero = _gsl_spmatrix_int_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_int_tree_rebuildPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_tree_rebuild');
  late final _gsl_spmatrix_int_tree_rebuild = _gsl_spmatrix_int_tree_rebuildPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_csc(
    ffi.Pointer<gsl_spmatrix_int> dest,
    ffi.Pointer<gsl_spmatrix_int> src,
  ) {
    return _gsl_spmatrix_int_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_int_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_csc');
  late final _gsl_spmatrix_int_csc = _gsl_spmatrix_int_cscPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_csr(
    ffi.Pointer<gsl_spmatrix_int> dest,
    ffi.Pointer<gsl_spmatrix_int> src,
  ) {
    return _gsl_spmatrix_int_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_int_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_csr');
  late final _gsl_spmatrix_int_csr = _gsl_spmatrix_int_csrPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<gsl_spmatrix_int>)>();

  ffi.Pointer<gsl_spmatrix_int> gsl_spmatrix_int_compress(
    ffi.Pointer<gsl_spmatrix_int> src,
    int sptype,
  ) {
    return _gsl_spmatrix_int_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_int_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_int> Function(ffi.Pointer<gsl_spmatrix_int>,
              ffi.Int32)>>('gsl_spmatrix_int_compress');
  late final _gsl_spmatrix_int_compress =
      _gsl_spmatrix_int_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_int> Function(
              ffi.Pointer<gsl_spmatrix_int>, int)>();

  ffi.Pointer<gsl_spmatrix_int> gsl_spmatrix_int_compcol(
    ffi.Pointer<gsl_spmatrix_int> src,
  ) {
    return _gsl_spmatrix_int_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_int_compcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_int> Function(
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_compcol');
  late final _gsl_spmatrix_int_compcol =
      _gsl_spmatrix_int_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_int> Function(
              ffi.Pointer<gsl_spmatrix_int>)>();

  ffi.Pointer<gsl_spmatrix_int> gsl_spmatrix_int_ccs(
    ffi.Pointer<gsl_spmatrix_int> src,
  ) {
    return _gsl_spmatrix_int_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_int_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_int> Function(
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_ccs');
  late final _gsl_spmatrix_int_ccs = _gsl_spmatrix_int_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_int> Function(ffi.Pointer<gsl_spmatrix_int>)>();

  ffi.Pointer<gsl_spmatrix_int> gsl_spmatrix_int_crs(
    ffi.Pointer<gsl_spmatrix_int> src,
  ) {
    return _gsl_spmatrix_int_crs(
      src,
    );
  }

  late final _gsl_spmatrix_int_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_int> Function(
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_crs');
  late final _gsl_spmatrix_int_crs = _gsl_spmatrix_int_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_int> Function(ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_memcpy(
    ffi.Pointer<gsl_spmatrix_int> dest,
    ffi.Pointer<gsl_spmatrix_int> src,
  ) {
    return _gsl_spmatrix_int_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_int_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_memcpy');
  late final _gsl_spmatrix_int_memcpy = _gsl_spmatrix_int_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_int> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_int_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_int_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_int_fprintf');
  late final _gsl_spmatrix_int_fprintf =
      _gsl_spmatrix_int_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_int> gsl_spmatrix_int_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_int_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_int_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_int> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_int_fscanf');
  late final _gsl_spmatrix_int_fscanf = _gsl_spmatrix_int_fscanfPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_int> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_int_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_int_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_fwrite');
  late final _gsl_spmatrix_int_fwrite = _gsl_spmatrix_int_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_int_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_fread');
  late final _gsl_spmatrix_int_fread = _gsl_spmatrix_int_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_get(
    ffi.Pointer<gsl_spmatrix_int> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_int_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_int_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>, size_t,
              size_t)>>('gsl_spmatrix_int_get');
  late final _gsl_spmatrix_int_get = _gsl_spmatrix_int_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_int>, int, int)>();

  int gsl_spmatrix_int_set(
    ffi.Pointer<gsl_spmatrix_int> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_spmatrix_int_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_int_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_int_set');
  late final _gsl_spmatrix_int_set = _gsl_spmatrix_int_setPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_int>, int, int, int)>();

  ffi.Pointer<ffi.Int32> gsl_spmatrix_int_ptr(
    ffi.Pointer<gsl_spmatrix_int> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_int_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_int_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(ffi.Pointer<gsl_spmatrix_int>, size_t,
              size_t)>>('gsl_spmatrix_int_ptr');
  late final _gsl_spmatrix_int_ptr = _gsl_spmatrix_int_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function(
          ffi.Pointer<gsl_spmatrix_int>, int, int)>();

  int gsl_spmatrix_int_minmax(
    ffi.Pointer<gsl_spmatrix_int> m,
    ffi.Pointer<ffi.Int32> min_out,
    ffi.Pointer<ffi.Int32> max_out,
  ) {
    return _gsl_spmatrix_int_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_int_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('gsl_spmatrix_int_minmax');
  late final _gsl_spmatrix_int_minmax = _gsl_spmatrix_int_minmaxPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>)>();

  int gsl_spmatrix_int_min_index(
    ffi.Pointer<gsl_spmatrix_int> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_int_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_int_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_int_min_index');
  late final _gsl_spmatrix_int_min_index =
      _gsl_spmatrix_int_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_spmatrix_int_scale(
    ffi.Pointer<gsl_spmatrix_int> m,
    int x,
  ) {
    return _gsl_spmatrix_int_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_int_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>,
              ffi.Int32)>>('gsl_spmatrix_int_scale');
  late final _gsl_spmatrix_int_scale = _gsl_spmatrix_int_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_int>, int)>();

  int gsl_spmatrix_int_scale_columns(
    ffi.Pointer<gsl_spmatrix_int> m,
    ffi.Pointer<gsl_vector_int> x,
  ) {
    return _gsl_spmatrix_int_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_int_scale_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_spmatrix_int_scale_columns');
  late final _gsl_spmatrix_int_scale_columns =
      _gsl_spmatrix_int_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_spmatrix_int_scale_rows(
    ffi.Pointer<gsl_spmatrix_int> m,
    ffi.Pointer<gsl_vector_int> x,
  ) {
    return _gsl_spmatrix_int_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_int_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_spmatrix_int_scale_rows');
  late final _gsl_spmatrix_int_scale_rows =
      _gsl_spmatrix_int_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_spmatrix_int_add(
    ffi.Pointer<gsl_spmatrix_int> c,
    ffi.Pointer<gsl_spmatrix_int> a,
    ffi.Pointer<gsl_spmatrix_int> b,
  ) {
    return _gsl_spmatrix_int_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_int_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_add');
  late final _gsl_spmatrix_int_add = _gsl_spmatrix_int_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<gsl_spmatrix_int>,
          ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_dense_add(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_spmatrix_int> b,
  ) {
    return _gsl_spmatrix_int_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_int_dense_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_dense_add');
  late final _gsl_spmatrix_int_dense_add =
      _gsl_spmatrix_int_dense_addPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_dense_sub(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_spmatrix_int> b,
  ) {
    return _gsl_spmatrix_int_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_int_dense_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_dense_sub');
  late final _gsl_spmatrix_int_dense_sub =
      _gsl_spmatrix_int_dense_subPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_d2sp(
    ffi.Pointer<gsl_spmatrix_int> T,
    ffi.Pointer<gsl_matrix_int> A,
  ) {
    return _gsl_spmatrix_int_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_int_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_spmatrix_int_d2sp');
  late final _gsl_spmatrix_int_d2sp = _gsl_spmatrix_int_d2spPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_spmatrix_int_sp2d(
    ffi.Pointer<gsl_matrix_int> A,
    ffi.Pointer<gsl_spmatrix_int> S,
  ) {
    return _gsl_spmatrix_int_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_int_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_sp2d');
  late final _gsl_spmatrix_int_sp2d = _gsl_spmatrix_int_sp2dPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_add_to_dense(
    ffi.Pointer<gsl_matrix_int> a,
    ffi.Pointer<gsl_spmatrix_int> b,
  ) {
    return _gsl_spmatrix_int_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_int_add_to_densePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_int>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_add_to_dense');
  late final _gsl_spmatrix_int_add_to_dense =
      _gsl_spmatrix_int_add_to_densePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_int>, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_equal(
    ffi.Pointer<gsl_spmatrix_int> a,
    ffi.Pointer<gsl_spmatrix_int> b,
  ) {
    return _gsl_spmatrix_int_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_int_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>,
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_equal');
  late final _gsl_spmatrix_int_equal = _gsl_spmatrix_int_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_norm1(
    ffi.Pointer<gsl_spmatrix_int> a,
  ) {
    return _gsl_spmatrix_int_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_int_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_norm1');
  late final _gsl_spmatrix_int_norm1 = _gsl_spmatrix_int_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_transpose(
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_int_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_transpose');
  late final _gsl_spmatrix_int_transpose = _gsl_spmatrix_int_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_transpose2(
    ffi.Pointer<gsl_spmatrix_int> m,
  ) {
    return _gsl_spmatrix_int_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_int_transpose2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_int>)>>('gsl_spmatrix_int_transpose2');
  late final _gsl_spmatrix_int_transpose2 = _gsl_spmatrix_int_transpose2Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_int>)>();

  int gsl_spmatrix_int_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_int> dest,
    ffi.Pointer<gsl_spmatrix_int> src,
  ) {
    return _gsl_spmatrix_int_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_int_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_int>,
                  ffi.Pointer<gsl_spmatrix_int>)>>(
      'gsl_spmatrix_int_transpose_memcpy');
  late final _gsl_spmatrix_int_transpose_memcpy =
      _gsl_spmatrix_int_transpose_memcpyPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_int>, ffi.Pointer<gsl_spmatrix_int>)>();

  ffi.Pointer<gsl_spmatrix_ushort> gsl_spmatrix_ushort_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_ushort_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_ushort_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(
              size_t, size_t)>>('gsl_spmatrix_ushort_alloc');
  late final _gsl_spmatrix_ushort_alloc = _gsl_spmatrix_ushort_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_ushort> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_ushort> gsl_spmatrix_ushort_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_ushort_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_ushort_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_ushort_alloc_nzmax');
  late final _gsl_spmatrix_ushort_alloc_nzmax =
      _gsl_spmatrix_ushort_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(int, int, int, int)>();

  void gsl_spmatrix_ushort_free(
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_free(
      m,
    );
  }

  late final _gsl_spmatrix_ushort_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_free');
  late final _gsl_spmatrix_ushort_free = _gsl_spmatrix_ushort_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_ushort_reallocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(size_t, ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_realloc');
  late final _gsl_spmatrix_ushort_realloc = _gsl_spmatrix_ushort_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_nnz(
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_ushort_nnzPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_nnz');
  late final _gsl_spmatrix_ushort_nnz = _gsl_spmatrix_ushort_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ushort>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_ushort_type(
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_type(
      m,
    );
  }

  late final _gsl_spmatrix_ushort_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_type');
  late final _gsl_spmatrix_ushort_type =
      _gsl_spmatrix_ushort_typePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_set_zero(
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_ushort_set_zeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_set_zero');
  late final _gsl_spmatrix_ushort_set_zero = _gsl_spmatrix_ushort_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_ushort_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_tree_rebuild');
  late final _gsl_spmatrix_ushort_tree_rebuild =
      _gsl_spmatrix_ushort_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_csc(
    ffi.Pointer<gsl_spmatrix_ushort> dest,
    ffi.Pointer<gsl_spmatrix_ushort> src,
  ) {
    return _gsl_spmatrix_ushort_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_ushort_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_csc');
  late final _gsl_spmatrix_ushort_csc = _gsl_spmatrix_ushort_cscPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_ushort>,
          ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_csr(
    ffi.Pointer<gsl_spmatrix_ushort> dest,
    ffi.Pointer<gsl_spmatrix_ushort> src,
  ) {
    return _gsl_spmatrix_ushort_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_ushort_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_csr');
  late final _gsl_spmatrix_ushort_csr = _gsl_spmatrix_ushort_csrPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_ushort>,
          ffi.Pointer<gsl_spmatrix_ushort>)>();

  ffi.Pointer<gsl_spmatrix_ushort> gsl_spmatrix_ushort_compress(
    ffi.Pointer<gsl_spmatrix_ushort> src,
    int sptype,
  ) {
    return _gsl_spmatrix_ushort_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_ushort_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(
              ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Int32)>>('gsl_spmatrix_ushort_compress');
  late final _gsl_spmatrix_ushort_compress =
      _gsl_spmatrix_ushort_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(
              ffi.Pointer<gsl_spmatrix_ushort>, int)>();

  ffi.Pointer<gsl_spmatrix_ushort> gsl_spmatrix_ushort_compcol(
    ffi.Pointer<gsl_spmatrix_ushort> src,
  ) {
    return _gsl_spmatrix_ushort_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_ushort_compcolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_spmatrix_ushort> Function(
                  ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_compcol');
  late final _gsl_spmatrix_ushort_compcol =
      _gsl_spmatrix_ushort_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(
              ffi.Pointer<gsl_spmatrix_ushort>)>();

  ffi.Pointer<gsl_spmatrix_ushort> gsl_spmatrix_ushort_ccs(
    ffi.Pointer<gsl_spmatrix_ushort> src,
  ) {
    return _gsl_spmatrix_ushort_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_ushort_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_ccs');
  late final _gsl_spmatrix_ushort_ccs = _gsl_spmatrix_ushort_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_ushort> Function(
          ffi.Pointer<gsl_spmatrix_ushort>)>();

  ffi.Pointer<gsl_spmatrix_ushort> gsl_spmatrix_ushort_crs(
    ffi.Pointer<gsl_spmatrix_ushort> src,
  ) {
    return _gsl_spmatrix_ushort_crs(
      src,
    );
  }

  late final _gsl_spmatrix_ushort_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_crs');
  late final _gsl_spmatrix_ushort_crs = _gsl_spmatrix_ushort_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_ushort> Function(
          ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_memcpy(
    ffi.Pointer<gsl_spmatrix_ushort> dest,
    ffi.Pointer<gsl_spmatrix_ushort> src,
  ) {
    return _gsl_spmatrix_ushort_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_ushort_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_memcpy');
  late final _gsl_spmatrix_ushort_memcpy =
      _gsl_spmatrix_ushort_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_ushort> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_ushort_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_ushort_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_ushort_fprintf');
  late final _gsl_spmatrix_ushort_fprintf =
      _gsl_spmatrix_ushort_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_ushort> gsl_spmatrix_ushort_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_ushort_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_ushort_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_ushort_fscanf');
  late final _gsl_spmatrix_ushort_fscanf =
      _gsl_spmatrix_ushort_fscanfPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_ushort> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_ushort_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_ushort_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_fwrite');
  late final _gsl_spmatrix_ushort_fwrite =
      _gsl_spmatrix_ushort_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_ushort_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_fread');
  late final _gsl_spmatrix_ushort_fread =
      _gsl_spmatrix_ushort_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_get(
    ffi.Pointer<gsl_spmatrix_ushort> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_ushort_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_ushort_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<gsl_spmatrix_ushort>, size_t,
              size_t)>>('gsl_spmatrix_ushort_get');
  late final _gsl_spmatrix_ushort_get = _gsl_spmatrix_ushort_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ushort>, int, int)>();

  int gsl_spmatrix_ushort_set(
    ffi.Pointer<gsl_spmatrix_ushort> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_spmatrix_ushort_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_ushort_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>, size_t, size_t,
              ffi.Uint16)>>('gsl_spmatrix_ushort_set');
  late final _gsl_spmatrix_ushort_set = _gsl_spmatrix_ushort_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_ushort>, int, int, int)>();

  ffi.Pointer<ffi.Uint16> gsl_spmatrix_ushort_ptr(
    ffi.Pointer<gsl_spmatrix_ushort> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_ushort_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_ushort_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<gsl_spmatrix_ushort>,
              size_t, size_t)>>('gsl_spmatrix_ushort_ptr');
  late final _gsl_spmatrix_ushort_ptr = _gsl_spmatrix_ushort_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint16> Function(
          ffi.Pointer<gsl_spmatrix_ushort>, int, int)>();

  int gsl_spmatrix_ushort_minmax(
    ffi.Pointer<gsl_spmatrix_ushort> m,
    ffi.Pointer<ffi.Uint16> min_out,
    ffi.Pointer<ffi.Uint16> max_out,
  ) {
    return _gsl_spmatrix_ushort_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_ushort_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>)>>('gsl_spmatrix_ushort_minmax');
  late final _gsl_spmatrix_ushort_minmax =
      _gsl_spmatrix_ushort_minmaxPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>)>();

  int gsl_spmatrix_ushort_min_index(
    ffi.Pointer<gsl_spmatrix_ushort> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_ushort_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_ushort_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_ushort_min_index');
  late final _gsl_spmatrix_ushort_min_index =
      _gsl_spmatrix_ushort_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ushort>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_spmatrix_ushort_scale(
    ffi.Pointer<gsl_spmatrix_ushort> m,
    int x,
  ) {
    return _gsl_spmatrix_ushort_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_ushort_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Uint16)>>('gsl_spmatrix_ushort_scale');
  late final _gsl_spmatrix_ushort_scale = _gsl_spmatrix_ushort_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ushort>, int)>();

  int gsl_spmatrix_ushort_scale_columns(
    ffi.Pointer<gsl_spmatrix_ushort> m,
    ffi.Pointer<gsl_vector_ushort> x,
  ) {
    return _gsl_spmatrix_ushort_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_ushort_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>,
                  ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_spmatrix_ushort_scale_columns');
  late final _gsl_spmatrix_ushort_scale_columns =
      _gsl_spmatrix_ushort_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_spmatrix_ushort_scale_rows(
    ffi.Pointer<gsl_spmatrix_ushort> m,
    ffi.Pointer<gsl_vector_ushort> x,
  ) {
    return _gsl_spmatrix_ushort_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_ushort_scale_rowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>,
                  ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_spmatrix_ushort_scale_rows');
  late final _gsl_spmatrix_ushort_scale_rows =
      _gsl_spmatrix_ushort_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_spmatrix_ushort_add(
    ffi.Pointer<gsl_spmatrix_ushort> c,
    ffi.Pointer<gsl_spmatrix_ushort> a,
    ffi.Pointer<gsl_spmatrix_ushort> b,
  ) {
    return _gsl_spmatrix_ushort_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ushort_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_add');
  late final _gsl_spmatrix_ushort_add = _gsl_spmatrix_ushort_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_ushort>,
          ffi.Pointer<gsl_spmatrix_ushort>,
          ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_dense_add(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_spmatrix_ushort> b,
  ) {
    return _gsl_spmatrix_ushort_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ushort_dense_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
                  ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_dense_add');
  late final _gsl_spmatrix_ushort_dense_add =
      _gsl_spmatrix_ushort_dense_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_dense_sub(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_spmatrix_ushort> b,
  ) {
    return _gsl_spmatrix_ushort_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ushort_dense_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
                  ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_dense_sub');
  late final _gsl_spmatrix_ushort_dense_sub =
      _gsl_spmatrix_ushort_dense_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_d2sp(
    ffi.Pointer<gsl_spmatrix_ushort> T,
    ffi.Pointer<gsl_matrix_ushort> A,
  ) {
    return _gsl_spmatrix_ushort_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_ushort_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_spmatrix_ushort_d2sp');
  late final _gsl_spmatrix_ushort_d2sp =
      _gsl_spmatrix_ushort_d2spPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_spmatrix_ushort_sp2d(
    ffi.Pointer<gsl_matrix_ushort> A,
    ffi.Pointer<gsl_spmatrix_ushort> S,
  ) {
    return _gsl_spmatrix_ushort_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_ushort_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_sp2d');
  late final _gsl_spmatrix_ushort_sp2d =
      _gsl_spmatrix_ushort_sp2dPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_add_to_dense(
    ffi.Pointer<gsl_matrix_ushort> a,
    ffi.Pointer<gsl_spmatrix_ushort> b,
  ) {
    return _gsl_spmatrix_ushort_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ushort_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_ushort>,
                  ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_add_to_dense');
  late final _gsl_spmatrix_ushort_add_to_dense =
      _gsl_spmatrix_ushort_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_equal(
    ffi.Pointer<gsl_spmatrix_ushort> a,
    ffi.Pointer<gsl_spmatrix_ushort> b,
  ) {
    return _gsl_spmatrix_ushort_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_ushort_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_equal');
  late final _gsl_spmatrix_ushort_equal =
      _gsl_spmatrix_ushort_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_norm1(
    ffi.Pointer<gsl_spmatrix_ushort> a,
  ) {
    return _gsl_spmatrix_ushort_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_ushort_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(
              ffi.Pointer<gsl_spmatrix_ushort>)>>('gsl_spmatrix_ushort_norm1');
  late final _gsl_spmatrix_ushort_norm1 = _gsl_spmatrix_ushort_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_transpose(
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_ushort_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_transpose');
  late final _gsl_spmatrix_ushort_transpose = _gsl_spmatrix_ushort_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_transpose2(
    ffi.Pointer<gsl_spmatrix_ushort> m,
  ) {
    return _gsl_spmatrix_ushort_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_ushort_transpose2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_transpose2');
  late final _gsl_spmatrix_ushort_transpose2 =
      _gsl_spmatrix_ushort_transpose2Ptr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_ushort>)>();

  int gsl_spmatrix_ushort_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_ushort> dest,
    ffi.Pointer<gsl_spmatrix_ushort> src,
  ) {
    return _gsl_spmatrix_ushort_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_ushort_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_ushort>,
                  ffi.Pointer<gsl_spmatrix_ushort>)>>(
      'gsl_spmatrix_ushort_transpose_memcpy');
  late final _gsl_spmatrix_ushort_transpose_memcpy =
      _gsl_spmatrix_ushort_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_ushort>,
              ffi.Pointer<gsl_spmatrix_ushort>)>();

  ffi.Pointer<gsl_spmatrix_short> gsl_spmatrix_short_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_short_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_short_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(
              size_t, size_t)>>('gsl_spmatrix_short_alloc');
  late final _gsl_spmatrix_short_alloc = _gsl_spmatrix_short_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_short> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_short> gsl_spmatrix_short_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_short_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_short_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_short_alloc_nzmax');
  late final _gsl_spmatrix_short_alloc_nzmax =
      _gsl_spmatrix_short_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(int, int, int, int)>();

  void gsl_spmatrix_short_free(
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_free(
      m,
    );
  }

  late final _gsl_spmatrix_short_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_free');
  late final _gsl_spmatrix_short_free = _gsl_spmatrix_short_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_short_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t,
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_realloc');
  late final _gsl_spmatrix_short_realloc = _gsl_spmatrix_short_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_nnz(
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_short_nnzPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spmatrix_short>)>>(
      'gsl_spmatrix_short_nnz');
  late final _gsl_spmatrix_short_nnz = _gsl_spmatrix_short_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_short>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_short_type(
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_type(
      m,
    );
  }

  late final _gsl_spmatrix_short_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_type');
  late final _gsl_spmatrix_short_type = _gsl_spmatrix_short_typePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_set_zero(
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_short_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_set_zero');
  late final _gsl_spmatrix_short_set_zero = _gsl_spmatrix_short_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_short_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>)>>(
      'gsl_spmatrix_short_tree_rebuild');
  late final _gsl_spmatrix_short_tree_rebuild =
      _gsl_spmatrix_short_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_csc(
    ffi.Pointer<gsl_spmatrix_short> dest,
    ffi.Pointer<gsl_spmatrix_short> src,
  ) {
    return _gsl_spmatrix_short_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_short_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_csc');
  late final _gsl_spmatrix_short_csc = _gsl_spmatrix_short_cscPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_short>, ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_csr(
    ffi.Pointer<gsl_spmatrix_short> dest,
    ffi.Pointer<gsl_spmatrix_short> src,
  ) {
    return _gsl_spmatrix_short_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_short_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_csr');
  late final _gsl_spmatrix_short_csr = _gsl_spmatrix_short_csrPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_short>, ffi.Pointer<gsl_spmatrix_short>)>();

  ffi.Pointer<gsl_spmatrix_short> gsl_spmatrix_short_compress(
    ffi.Pointer<gsl_spmatrix_short> src,
    int sptype,
  ) {
    return _gsl_spmatrix_short_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_short_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(
              ffi.Pointer<gsl_spmatrix_short>,
              ffi.Int32)>>('gsl_spmatrix_short_compress');
  late final _gsl_spmatrix_short_compress =
      _gsl_spmatrix_short_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(
              ffi.Pointer<gsl_spmatrix_short>, int)>();

  ffi.Pointer<gsl_spmatrix_short> gsl_spmatrix_short_compcol(
    ffi.Pointer<gsl_spmatrix_short> src,
  ) {
    return _gsl_spmatrix_short_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_short_compcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_compcol');
  late final _gsl_spmatrix_short_compcol =
      _gsl_spmatrix_short_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(
              ffi.Pointer<gsl_spmatrix_short>)>();

  ffi.Pointer<gsl_spmatrix_short> gsl_spmatrix_short_ccs(
    ffi.Pointer<gsl_spmatrix_short> src,
  ) {
    return _gsl_spmatrix_short_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_short_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_ccs');
  late final _gsl_spmatrix_short_ccs = _gsl_spmatrix_short_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_short> Function(
          ffi.Pointer<gsl_spmatrix_short>)>();

  ffi.Pointer<gsl_spmatrix_short> gsl_spmatrix_short_crs(
    ffi.Pointer<gsl_spmatrix_short> src,
  ) {
    return _gsl_spmatrix_short_crs(
      src,
    );
  }

  late final _gsl_spmatrix_short_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_crs');
  late final _gsl_spmatrix_short_crs = _gsl_spmatrix_short_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_short> Function(
          ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_memcpy(
    ffi.Pointer<gsl_spmatrix_short> dest,
    ffi.Pointer<gsl_spmatrix_short> src,
  ) {
    return _gsl_spmatrix_short_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_short_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_memcpy');
  late final _gsl_spmatrix_short_memcpy =
      _gsl_spmatrix_short_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_short> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_short_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_short_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_short_fprintf');
  late final _gsl_spmatrix_short_fprintf =
      _gsl_spmatrix_short_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_short> gsl_spmatrix_short_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_short_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_short_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_short_fscanf');
  late final _gsl_spmatrix_short_fscanf =
      _gsl_spmatrix_short_fscanfPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_short> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_short_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_short_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_fwrite');
  late final _gsl_spmatrix_short_fwrite =
      _gsl_spmatrix_short_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_short_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_fread');
  late final _gsl_spmatrix_short_fread =
      _gsl_spmatrix_short_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_get(
    ffi.Pointer<gsl_spmatrix_short> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_short_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_short_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(ffi.Pointer<gsl_spmatrix_short>, size_t,
              size_t)>>('gsl_spmatrix_short_get');
  late final _gsl_spmatrix_short_get = _gsl_spmatrix_short_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_short>, int, int)>();

  int gsl_spmatrix_short_set(
    ffi.Pointer<gsl_spmatrix_short> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_spmatrix_short_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_short_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>, size_t, size_t,
              ffi.Int16)>>('gsl_spmatrix_short_set');
  late final _gsl_spmatrix_short_set = _gsl_spmatrix_short_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_short>, int, int, int)>();

  ffi.Pointer<ffi.Int16> gsl_spmatrix_short_ptr(
    ffi.Pointer<gsl_spmatrix_short> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_short_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_short_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int16> Function(ffi.Pointer<gsl_spmatrix_short>,
              size_t, size_t)>>('gsl_spmatrix_short_ptr');
  late final _gsl_spmatrix_short_ptr = _gsl_spmatrix_short_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int16> Function(
          ffi.Pointer<gsl_spmatrix_short>, int, int)>();

  int gsl_spmatrix_short_minmax(
    ffi.Pointer<gsl_spmatrix_short> m,
    ffi.Pointer<ffi.Int16> min_out,
    ffi.Pointer<ffi.Int16> max_out,
  ) {
    return _gsl_spmatrix_short_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_short_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int16>)>>('gsl_spmatrix_short_minmax');
  late final _gsl_spmatrix_short_minmax =
      _gsl_spmatrix_short_minmaxPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_short>, ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int16>)>();

  int gsl_spmatrix_short_min_index(
    ffi.Pointer<gsl_spmatrix_short> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_short_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_short_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_short_min_index');
  late final _gsl_spmatrix_short_min_index =
      _gsl_spmatrix_short_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_short>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_spmatrix_short_scale(
    ffi.Pointer<gsl_spmatrix_short> m,
    int x,
  ) {
    return _gsl_spmatrix_short_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_short_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Int16)>>('gsl_spmatrix_short_scale');
  late final _gsl_spmatrix_short_scale = _gsl_spmatrix_short_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_short>, int)>();

  int gsl_spmatrix_short_scale_columns(
    ffi.Pointer<gsl_spmatrix_short> m,
    ffi.Pointer<gsl_vector_short> x,
  ) {
    return _gsl_spmatrix_short_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_short_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>,
                  ffi.Pointer<gsl_vector_short>)>>(
      'gsl_spmatrix_short_scale_columns');
  late final _gsl_spmatrix_short_scale_columns =
      _gsl_spmatrix_short_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_vector_short>)>();

  int gsl_spmatrix_short_scale_rows(
    ffi.Pointer<gsl_spmatrix_short> m,
    ffi.Pointer<gsl_vector_short> x,
  ) {
    return _gsl_spmatrix_short_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_short_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_spmatrix_short_scale_rows');
  late final _gsl_spmatrix_short_scale_rows =
      _gsl_spmatrix_short_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_vector_short>)>();

  int gsl_spmatrix_short_add(
    ffi.Pointer<gsl_spmatrix_short> c,
    ffi.Pointer<gsl_spmatrix_short> a,
    ffi.Pointer<gsl_spmatrix_short> b,
  ) {
    return _gsl_spmatrix_short_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_short_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_add');
  late final _gsl_spmatrix_short_add = _gsl_spmatrix_short_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_short>,
          ffi.Pointer<gsl_spmatrix_short>, ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_dense_add(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_spmatrix_short> b,
  ) {
    return _gsl_spmatrix_short_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_short_dense_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
                  ffi.Pointer<gsl_spmatrix_short>)>>(
      'gsl_spmatrix_short_dense_add');
  late final _gsl_spmatrix_short_dense_add =
      _gsl_spmatrix_short_dense_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_dense_sub(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_spmatrix_short> b,
  ) {
    return _gsl_spmatrix_short_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_short_dense_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
                  ffi.Pointer<gsl_spmatrix_short>)>>(
      'gsl_spmatrix_short_dense_sub');
  late final _gsl_spmatrix_short_dense_sub =
      _gsl_spmatrix_short_dense_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_d2sp(
    ffi.Pointer<gsl_spmatrix_short> T,
    ffi.Pointer<gsl_matrix_short> A,
  ) {
    return _gsl_spmatrix_short_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_short_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_spmatrix_short_d2sp');
  late final _gsl_spmatrix_short_d2sp = _gsl_spmatrix_short_d2spPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_short>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_spmatrix_short_sp2d(
    ffi.Pointer<gsl_matrix_short> A,
    ffi.Pointer<gsl_spmatrix_short> S,
  ) {
    return _gsl_spmatrix_short_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_short_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_sp2d');
  late final _gsl_spmatrix_short_sp2d = _gsl_spmatrix_short_sp2dPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_short>, ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_add_to_dense(
    ffi.Pointer<gsl_matrix_short> a,
    ffi.Pointer<gsl_spmatrix_short> b,
  ) {
    return _gsl_spmatrix_short_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_short_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_short>,
                  ffi.Pointer<gsl_spmatrix_short>)>>(
      'gsl_spmatrix_short_add_to_dense');
  late final _gsl_spmatrix_short_add_to_dense =
      _gsl_spmatrix_short_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_equal(
    ffi.Pointer<gsl_spmatrix_short> a,
    ffi.Pointer<gsl_spmatrix_short> b,
  ) {
    return _gsl_spmatrix_short_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_short_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_equal');
  late final _gsl_spmatrix_short_equal =
      _gsl_spmatrix_short_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_norm1(
    ffi.Pointer<gsl_spmatrix_short> a,
  ) {
    return _gsl_spmatrix_short_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_short_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<gsl_spmatrix_short>)>>('gsl_spmatrix_short_norm1');
  late final _gsl_spmatrix_short_norm1 = _gsl_spmatrix_short_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_transpose(
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_short_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>)>>(
      'gsl_spmatrix_short_transpose');
  late final _gsl_spmatrix_short_transpose = _gsl_spmatrix_short_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_transpose2(
    ffi.Pointer<gsl_spmatrix_short> m,
  ) {
    return _gsl_spmatrix_short_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_short_transpose2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>)>>(
      'gsl_spmatrix_short_transpose2');
  late final _gsl_spmatrix_short_transpose2 = _gsl_spmatrix_short_transpose2Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_short>)>();

  int gsl_spmatrix_short_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_short> dest,
    ffi.Pointer<gsl_spmatrix_short> src,
  ) {
    return _gsl_spmatrix_short_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_short_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_short>,
                  ffi.Pointer<gsl_spmatrix_short>)>>(
      'gsl_spmatrix_short_transpose_memcpy');
  late final _gsl_spmatrix_short_transpose_memcpy =
      _gsl_spmatrix_short_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_short>,
              ffi.Pointer<gsl_spmatrix_short>)>();

  ffi.Pointer<gsl_spmatrix_uchar> gsl_spmatrix_uchar_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_uchar_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_uchar_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(
              size_t, size_t)>>('gsl_spmatrix_uchar_alloc');
  late final _gsl_spmatrix_uchar_alloc = _gsl_spmatrix_uchar_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_uchar> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_uchar> gsl_spmatrix_uchar_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_uchar_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_uchar_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_uchar_alloc_nzmax');
  late final _gsl_spmatrix_uchar_alloc_nzmax =
      _gsl_spmatrix_uchar_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(int, int, int, int)>();

  void gsl_spmatrix_uchar_free(
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_free(
      m,
    );
  }

  late final _gsl_spmatrix_uchar_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_free');
  late final _gsl_spmatrix_uchar_free = _gsl_spmatrix_uchar_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_uchar_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t,
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_realloc');
  late final _gsl_spmatrix_uchar_realloc = _gsl_spmatrix_uchar_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_nnz(
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_uchar_nnzPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spmatrix_uchar>)>>(
      'gsl_spmatrix_uchar_nnz');
  late final _gsl_spmatrix_uchar_nnz = _gsl_spmatrix_uchar_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uchar>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_uchar_type(
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_type(
      m,
    );
  }

  late final _gsl_spmatrix_uchar_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_type');
  late final _gsl_spmatrix_uchar_type = _gsl_spmatrix_uchar_typePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_set_zero(
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_uchar_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_set_zero');
  late final _gsl_spmatrix_uchar_set_zero = _gsl_spmatrix_uchar_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_uchar_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>)>>(
      'gsl_spmatrix_uchar_tree_rebuild');
  late final _gsl_spmatrix_uchar_tree_rebuild =
      _gsl_spmatrix_uchar_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_csc(
    ffi.Pointer<gsl_spmatrix_uchar> dest,
    ffi.Pointer<gsl_spmatrix_uchar> src,
  ) {
    return _gsl_spmatrix_uchar_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_uchar_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_csc');
  late final _gsl_spmatrix_uchar_csc = _gsl_spmatrix_uchar_cscPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_uchar>, ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_csr(
    ffi.Pointer<gsl_spmatrix_uchar> dest,
    ffi.Pointer<gsl_spmatrix_uchar> src,
  ) {
    return _gsl_spmatrix_uchar_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_uchar_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_csr');
  late final _gsl_spmatrix_uchar_csr = _gsl_spmatrix_uchar_csrPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_uchar>, ffi.Pointer<gsl_spmatrix_uchar>)>();

  ffi.Pointer<gsl_spmatrix_uchar> gsl_spmatrix_uchar_compress(
    ffi.Pointer<gsl_spmatrix_uchar> src,
    int sptype,
  ) {
    return _gsl_spmatrix_uchar_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_uchar_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(
              ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Int32)>>('gsl_spmatrix_uchar_compress');
  late final _gsl_spmatrix_uchar_compress =
      _gsl_spmatrix_uchar_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(
              ffi.Pointer<gsl_spmatrix_uchar>, int)>();

  ffi.Pointer<gsl_spmatrix_uchar> gsl_spmatrix_uchar_compcol(
    ffi.Pointer<gsl_spmatrix_uchar> src,
  ) {
    return _gsl_spmatrix_uchar_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_uchar_compcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_compcol');
  late final _gsl_spmatrix_uchar_compcol =
      _gsl_spmatrix_uchar_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(
              ffi.Pointer<gsl_spmatrix_uchar>)>();

  ffi.Pointer<gsl_spmatrix_uchar> gsl_spmatrix_uchar_ccs(
    ffi.Pointer<gsl_spmatrix_uchar> src,
  ) {
    return _gsl_spmatrix_uchar_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_uchar_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_ccs');
  late final _gsl_spmatrix_uchar_ccs = _gsl_spmatrix_uchar_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_uchar> Function(
          ffi.Pointer<gsl_spmatrix_uchar>)>();

  ffi.Pointer<gsl_spmatrix_uchar> gsl_spmatrix_uchar_crs(
    ffi.Pointer<gsl_spmatrix_uchar> src,
  ) {
    return _gsl_spmatrix_uchar_crs(
      src,
    );
  }

  late final _gsl_spmatrix_uchar_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_crs');
  late final _gsl_spmatrix_uchar_crs = _gsl_spmatrix_uchar_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_uchar> Function(
          ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_memcpy(
    ffi.Pointer<gsl_spmatrix_uchar> dest,
    ffi.Pointer<gsl_spmatrix_uchar> src,
  ) {
    return _gsl_spmatrix_uchar_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_uchar_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_memcpy');
  late final _gsl_spmatrix_uchar_memcpy =
      _gsl_spmatrix_uchar_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_uchar> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_uchar_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_uchar_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_uchar_fprintf');
  late final _gsl_spmatrix_uchar_fprintf =
      _gsl_spmatrix_uchar_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_uchar> gsl_spmatrix_uchar_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_uchar_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_uchar_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_uchar_fscanf');
  late final _gsl_spmatrix_uchar_fscanf =
      _gsl_spmatrix_uchar_fscanfPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_uchar> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_uchar_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_uchar_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_fwrite');
  late final _gsl_spmatrix_uchar_fwrite =
      _gsl_spmatrix_uchar_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_uchar_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_fread');
  late final _gsl_spmatrix_uchar_fread =
      _gsl_spmatrix_uchar_freadPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_get(
    ffi.Pointer<gsl_spmatrix_uchar> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_uchar_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_uchar_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<gsl_spmatrix_uchar>, size_t,
              size_t)>>('gsl_spmatrix_uchar_get');
  late final _gsl_spmatrix_uchar_get = _gsl_spmatrix_uchar_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uchar>, int, int)>();

  int gsl_spmatrix_uchar_set(
    ffi.Pointer<gsl_spmatrix_uchar> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_spmatrix_uchar_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_uchar_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>, size_t, size_t,
              ffi.Uint8)>>('gsl_spmatrix_uchar_set');
  late final _gsl_spmatrix_uchar_set = _gsl_spmatrix_uchar_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_uchar>, int, int, int)>();

  ffi.Pointer<ffi.Uint8> gsl_spmatrix_uchar_ptr(
    ffi.Pointer<gsl_spmatrix_uchar> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_uchar_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_uchar_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<gsl_spmatrix_uchar>,
              size_t, size_t)>>('gsl_spmatrix_uchar_ptr');
  late final _gsl_spmatrix_uchar_ptr = _gsl_spmatrix_uchar_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<gsl_spmatrix_uchar>, int, int)>();

  int gsl_spmatrix_uchar_minmax(
    ffi.Pointer<gsl_spmatrix_uchar> m,
    ffi.Pointer<ffi.Uint8> min_out,
    ffi.Pointer<ffi.Uint8> max_out,
  ) {
    return _gsl_spmatrix_uchar_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_uchar_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('gsl_spmatrix_uchar_minmax');
  late final _gsl_spmatrix_uchar_minmax =
      _gsl_spmatrix_uchar_minmaxPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uchar>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>();

  int gsl_spmatrix_uchar_min_index(
    ffi.Pointer<gsl_spmatrix_uchar> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_uchar_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_uchar_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_uchar_min_index');
  late final _gsl_spmatrix_uchar_min_index =
      _gsl_spmatrix_uchar_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uchar>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_spmatrix_uchar_scale(
    ffi.Pointer<gsl_spmatrix_uchar> m,
    int x,
  ) {
    return _gsl_spmatrix_uchar_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_uchar_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Uint8)>>('gsl_spmatrix_uchar_scale');
  late final _gsl_spmatrix_uchar_scale = _gsl_spmatrix_uchar_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uchar>, int)>();

  int gsl_spmatrix_uchar_scale_columns(
    ffi.Pointer<gsl_spmatrix_uchar> m,
    ffi.Pointer<gsl_vector_uchar> x,
  ) {
    return _gsl_spmatrix_uchar_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_uchar_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>,
                  ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_spmatrix_uchar_scale_columns');
  late final _gsl_spmatrix_uchar_scale_columns =
      _gsl_spmatrix_uchar_scale_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_spmatrix_uchar_scale_rows(
    ffi.Pointer<gsl_spmatrix_uchar> m,
    ffi.Pointer<gsl_vector_uchar> x,
  ) {
    return _gsl_spmatrix_uchar_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_uchar_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_spmatrix_uchar_scale_rows');
  late final _gsl_spmatrix_uchar_scale_rows =
      _gsl_spmatrix_uchar_scale_rowsPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_spmatrix_uchar_add(
    ffi.Pointer<gsl_spmatrix_uchar> c,
    ffi.Pointer<gsl_spmatrix_uchar> a,
    ffi.Pointer<gsl_spmatrix_uchar> b,
  ) {
    return _gsl_spmatrix_uchar_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uchar_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_add');
  late final _gsl_spmatrix_uchar_add = _gsl_spmatrix_uchar_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_uchar>,
          ffi.Pointer<gsl_spmatrix_uchar>, ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_dense_add(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_spmatrix_uchar> b,
  ) {
    return _gsl_spmatrix_uchar_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uchar_dense_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
                  ffi.Pointer<gsl_spmatrix_uchar>)>>(
      'gsl_spmatrix_uchar_dense_add');
  late final _gsl_spmatrix_uchar_dense_add =
      _gsl_spmatrix_uchar_dense_addPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_dense_sub(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_spmatrix_uchar> b,
  ) {
    return _gsl_spmatrix_uchar_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uchar_dense_subPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
                  ffi.Pointer<gsl_spmatrix_uchar>)>>(
      'gsl_spmatrix_uchar_dense_sub');
  late final _gsl_spmatrix_uchar_dense_sub =
      _gsl_spmatrix_uchar_dense_subPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_d2sp(
    ffi.Pointer<gsl_spmatrix_uchar> T,
    ffi.Pointer<gsl_matrix_uchar> A,
  ) {
    return _gsl_spmatrix_uchar_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_uchar_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_spmatrix_uchar_d2sp');
  late final _gsl_spmatrix_uchar_d2sp = _gsl_spmatrix_uchar_d2spPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_uchar>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_spmatrix_uchar_sp2d(
    ffi.Pointer<gsl_matrix_uchar> A,
    ffi.Pointer<gsl_spmatrix_uchar> S,
  ) {
    return _gsl_spmatrix_uchar_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_uchar_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_sp2d');
  late final _gsl_spmatrix_uchar_sp2d = _gsl_spmatrix_uchar_sp2dPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_uchar>, ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_add_to_dense(
    ffi.Pointer<gsl_matrix_uchar> a,
    ffi.Pointer<gsl_spmatrix_uchar> b,
  ) {
    return _gsl_spmatrix_uchar_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uchar_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_uchar>,
                  ffi.Pointer<gsl_spmatrix_uchar>)>>(
      'gsl_spmatrix_uchar_add_to_dense');
  late final _gsl_spmatrix_uchar_add_to_dense =
      _gsl_spmatrix_uchar_add_to_densePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_equal(
    ffi.Pointer<gsl_spmatrix_uchar> a,
    ffi.Pointer<gsl_spmatrix_uchar> b,
  ) {
    return _gsl_spmatrix_uchar_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_uchar_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_equal');
  late final _gsl_spmatrix_uchar_equal =
      _gsl_spmatrix_uchar_equalPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_norm1(
    ffi.Pointer<gsl_spmatrix_uchar> a,
  ) {
    return _gsl_spmatrix_uchar_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_uchar_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<gsl_spmatrix_uchar>)>>('gsl_spmatrix_uchar_norm1');
  late final _gsl_spmatrix_uchar_norm1 = _gsl_spmatrix_uchar_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_transpose(
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_uchar_transposePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>)>>(
      'gsl_spmatrix_uchar_transpose');
  late final _gsl_spmatrix_uchar_transpose = _gsl_spmatrix_uchar_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_transpose2(
    ffi.Pointer<gsl_spmatrix_uchar> m,
  ) {
    return _gsl_spmatrix_uchar_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_uchar_transpose2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>)>>(
      'gsl_spmatrix_uchar_transpose2');
  late final _gsl_spmatrix_uchar_transpose2 = _gsl_spmatrix_uchar_transpose2Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_uchar>)>();

  int gsl_spmatrix_uchar_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_uchar> dest,
    ffi.Pointer<gsl_spmatrix_uchar> src,
  ) {
    return _gsl_spmatrix_uchar_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_uchar_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_uchar>,
                  ffi.Pointer<gsl_spmatrix_uchar>)>>(
      'gsl_spmatrix_uchar_transpose_memcpy');
  late final _gsl_spmatrix_uchar_transpose_memcpy =
      _gsl_spmatrix_uchar_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_uchar>,
              ffi.Pointer<gsl_spmatrix_uchar>)>();

  ffi.Pointer<gsl_spmatrix_char> gsl_spmatrix_char_alloc(
    int n1,
    int n2,
  ) {
    return _gsl_spmatrix_char_alloc(
      n1,
      n2,
    );
  }

  late final _gsl_spmatrix_char_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(
              size_t, size_t)>>('gsl_spmatrix_char_alloc');
  late final _gsl_spmatrix_char_alloc = _gsl_spmatrix_char_allocPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_char> Function(int, int)>();

  ffi.Pointer<gsl_spmatrix_char> gsl_spmatrix_char_alloc_nzmax(
    int n1,
    int n2,
    int nzmax,
    int sptype,
  ) {
    return _gsl_spmatrix_char_alloc_nzmax(
      n1,
      n2,
      nzmax,
      sptype,
    );
  }

  late final _gsl_spmatrix_char_alloc_nzmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(size_t, size_t, size_t,
              ffi.Int32)>>('gsl_spmatrix_char_alloc_nzmax');
  late final _gsl_spmatrix_char_alloc_nzmax =
      _gsl_spmatrix_char_alloc_nzmaxPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(int, int, int, int)>();

  void gsl_spmatrix_char_free(
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_free(
      m,
    );
  }

  late final _gsl_spmatrix_char_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_free');
  late final _gsl_spmatrix_char_free = _gsl_spmatrix_char_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_realloc(
    int nzmax,
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_realloc(
      nzmax,
      m,
    );
  }

  late final _gsl_spmatrix_char_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_realloc');
  late final _gsl_spmatrix_char_realloc = _gsl_spmatrix_char_reallocPtr
      .asFunction<int Function(int, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_nnz(
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_nnz(
      m,
    );
  }

  late final _gsl_spmatrix_char_nnzPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spmatrix_char>)>>(
      'gsl_spmatrix_char_nnz');
  late final _gsl_spmatrix_char_nnz = _gsl_spmatrix_char_nnzPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_char>)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_char_type(
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_type(
      m,
    );
  }

  late final _gsl_spmatrix_char_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_type');
  late final _gsl_spmatrix_char_type = _gsl_spmatrix_char_typePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_set_zero(
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_set_zero(
      m,
    );
  }

  late final _gsl_spmatrix_char_set_zeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_set_zero');
  late final _gsl_spmatrix_char_set_zero = _gsl_spmatrix_char_set_zeroPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_tree_rebuild(
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_tree_rebuild(
      m,
    );
  }

  late final _gsl_spmatrix_char_tree_rebuildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>)>>(
      'gsl_spmatrix_char_tree_rebuild');
  late final _gsl_spmatrix_char_tree_rebuild =
      _gsl_spmatrix_char_tree_rebuildPtr
          .asFunction<int Function(ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_csc(
    ffi.Pointer<gsl_spmatrix_char> dest,
    ffi.Pointer<gsl_spmatrix_char> src,
  ) {
    return _gsl_spmatrix_char_csc(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_char_cscPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_csc');
  late final _gsl_spmatrix_char_csc = _gsl_spmatrix_char_cscPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_char>, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_csr(
    ffi.Pointer<gsl_spmatrix_char> dest,
    ffi.Pointer<gsl_spmatrix_char> src,
  ) {
    return _gsl_spmatrix_char_csr(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_char_csrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_csr');
  late final _gsl_spmatrix_char_csr = _gsl_spmatrix_char_csrPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_char>, ffi.Pointer<gsl_spmatrix_char>)>();

  ffi.Pointer<gsl_spmatrix_char> gsl_spmatrix_char_compress(
    ffi.Pointer<gsl_spmatrix_char> src,
    int sptype,
  ) {
    return _gsl_spmatrix_char_compress(
      src,
      sptype,
    );
  }

  late final _gsl_spmatrix_char_compressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(
              ffi.Pointer<gsl_spmatrix_char>,
              ffi.Int32)>>('gsl_spmatrix_char_compress');
  late final _gsl_spmatrix_char_compress =
      _gsl_spmatrix_char_compressPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(
              ffi.Pointer<gsl_spmatrix_char>, int)>();

  ffi.Pointer<gsl_spmatrix_char> gsl_spmatrix_char_compcol(
    ffi.Pointer<gsl_spmatrix_char> src,
  ) {
    return _gsl_spmatrix_char_compcol(
      src,
    );
  }

  late final _gsl_spmatrix_char_compcolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_compcol');
  late final _gsl_spmatrix_char_compcol =
      _gsl_spmatrix_char_compcolPtr.asFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(
              ffi.Pointer<gsl_spmatrix_char>)>();

  ffi.Pointer<gsl_spmatrix_char> gsl_spmatrix_char_ccs(
    ffi.Pointer<gsl_spmatrix_char> src,
  ) {
    return _gsl_spmatrix_char_ccs(
      src,
    );
  }

  late final _gsl_spmatrix_char_ccsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_ccs');
  late final _gsl_spmatrix_char_ccs = _gsl_spmatrix_char_ccsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_char> Function(
          ffi.Pointer<gsl_spmatrix_char>)>();

  ffi.Pointer<gsl_spmatrix_char> gsl_spmatrix_char_crs(
    ffi.Pointer<gsl_spmatrix_char> src,
  ) {
    return _gsl_spmatrix_char_crs(
      src,
    );
  }

  late final _gsl_spmatrix_char_crsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_crs');
  late final _gsl_spmatrix_char_crs = _gsl_spmatrix_char_crsPtr.asFunction<
      ffi.Pointer<gsl_spmatrix_char> Function(
          ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_memcpy(
    ffi.Pointer<gsl_spmatrix_char> dest,
    ffi.Pointer<gsl_spmatrix_char> src,
  ) {
    return _gsl_spmatrix_char_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_char_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_memcpy');
  late final _gsl_spmatrix_char_memcpy =
      _gsl_spmatrix_char_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_char> m,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_spmatrix_char_fprintf(
      stream,
      m,
      format,
    );
  }

  late final _gsl_spmatrix_char_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_char_fprintf');
  late final _gsl_spmatrix_char_fprintf =
      _gsl_spmatrix_char_fprintfPtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<gsl_spmatrix_char> gsl_spmatrix_char_fscanf(
    ffi.Pointer<FILE> stream,
  ) {
    return _gsl_spmatrix_char_fscanf(
      stream,
    );
  }

  late final _gsl_spmatrix_char_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spmatrix_char> Function(
              ffi.Pointer<FILE>)>>('gsl_spmatrix_char_fscanf');
  late final _gsl_spmatrix_char_fscanf = _gsl_spmatrix_char_fscanfPtr
      .asFunction<ffi.Pointer<gsl_spmatrix_char> Function(ffi.Pointer<FILE>)>();

  int gsl_spmatrix_char_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_fwrite(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_char_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_fwrite');
  late final _gsl_spmatrix_char_fwrite =
      _gsl_spmatrix_char_fwritePtr.asFunction<
          int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_fread(
      stream,
      m,
    );
  }

  late final _gsl_spmatrix_char_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_fread');
  late final _gsl_spmatrix_char_fread = _gsl_spmatrix_char_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_get(
    ffi.Pointer<gsl_spmatrix_char> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_char_get(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_char_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<gsl_spmatrix_char>, size_t,
              size_t)>>('gsl_spmatrix_char_get');
  late final _gsl_spmatrix_char_get = _gsl_spmatrix_char_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_char>, int, int)>();

  int gsl_spmatrix_char_set(
    ffi.Pointer<gsl_spmatrix_char> m,
    int i,
    int j,
    int x,
  ) {
    return _gsl_spmatrix_char_set(
      m,
      i,
      j,
      x,
    );
  }

  late final _gsl_spmatrix_char_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>, size_t, size_t,
              ffi.Int8)>>('gsl_spmatrix_char_set');
  late final _gsl_spmatrix_char_set = _gsl_spmatrix_char_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_char>, int, int, int)>();

  ffi.Pointer<ffi.Int8> gsl_spmatrix_char_ptr(
    ffi.Pointer<gsl_spmatrix_char> m,
    int i,
    int j,
  ) {
    return _gsl_spmatrix_char_ptr(
      m,
      i,
      j,
    );
  }

  late final _gsl_spmatrix_char_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spmatrix_char>, size_t,
              size_t)>>('gsl_spmatrix_char_ptr');
  late final _gsl_spmatrix_char_ptr = _gsl_spmatrix_char_ptrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<gsl_spmatrix_char>, int, int)>();

  int gsl_spmatrix_char_minmax(
    ffi.Pointer<gsl_spmatrix_char> m,
    ffi.Pointer<ffi.Int8> min_out,
    ffi.Pointer<ffi.Int8> max_out,
  ) {
    return _gsl_spmatrix_char_minmax(
      m,
      min_out,
      max_out,
    );
  }

  late final _gsl_spmatrix_char_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('gsl_spmatrix_char_minmax');
  late final _gsl_spmatrix_char_minmax =
      _gsl_spmatrix_char_minmaxPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_char>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  int gsl_spmatrix_char_min_index(
    ffi.Pointer<gsl_spmatrix_char> m,
    ffi.Pointer<size_t> imin_out,
    ffi.Pointer<size_t> jmin_out,
  ) {
    return _gsl_spmatrix_char_min_index(
      m,
      imin_out,
      jmin_out,
    );
  }

  late final _gsl_spmatrix_char_min_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_spmatrix_char_min_index');
  late final _gsl_spmatrix_char_min_index =
      _gsl_spmatrix_char_min_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_char>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>();

  int gsl_spmatrix_char_scale(
    ffi.Pointer<gsl_spmatrix_char> m,
    int x,
  ) {
    return _gsl_spmatrix_char_scale(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_char_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>,
              ffi.Int8)>>('gsl_spmatrix_char_scale');
  late final _gsl_spmatrix_char_scale = _gsl_spmatrix_char_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_char>, int)>();

  int gsl_spmatrix_char_scale_columns(
    ffi.Pointer<gsl_spmatrix_char> m,
    ffi.Pointer<gsl_vector_char> x,
  ) {
    return _gsl_spmatrix_char_scale_columns(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_char_scale_columnsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>,
                  ffi.Pointer<gsl_vector_char>)>>(
      'gsl_spmatrix_char_scale_columns');
  late final _gsl_spmatrix_char_scale_columns =
      _gsl_spmatrix_char_scale_columnsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_spmatrix_char_scale_rows(
    ffi.Pointer<gsl_spmatrix_char> m,
    ffi.Pointer<gsl_vector_char> x,
  ) {
    return _gsl_spmatrix_char_scale_rows(
      m,
      x,
    );
  }

  late final _gsl_spmatrix_char_scale_rowsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_spmatrix_char_scale_rows');
  late final _gsl_spmatrix_char_scale_rows =
      _gsl_spmatrix_char_scale_rowsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_spmatrix_char_add(
    ffi.Pointer<gsl_spmatrix_char> c,
    ffi.Pointer<gsl_spmatrix_char> a,
    ffi.Pointer<gsl_spmatrix_char> b,
  ) {
    return _gsl_spmatrix_char_add(
      c,
      a,
      b,
    );
  }

  late final _gsl_spmatrix_char_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_add');
  late final _gsl_spmatrix_char_add = _gsl_spmatrix_char_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_spmatrix_char>,
          ffi.Pointer<gsl_spmatrix_char>, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_dense_add(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_spmatrix_char> b,
  ) {
    return _gsl_spmatrix_char_dense_add(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_char_dense_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_dense_add');
  late final _gsl_spmatrix_char_dense_add =
      _gsl_spmatrix_char_dense_addPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_dense_sub(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_spmatrix_char> b,
  ) {
    return _gsl_spmatrix_char_dense_sub(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_char_dense_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_dense_sub');
  late final _gsl_spmatrix_char_dense_sub =
      _gsl_spmatrix_char_dense_subPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_d2sp(
    ffi.Pointer<gsl_spmatrix_char> T,
    ffi.Pointer<gsl_matrix_char> A,
  ) {
    return _gsl_spmatrix_char_d2sp(
      T,
      A,
    );
  }

  late final _gsl_spmatrix_char_d2spPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_spmatrix_char_d2sp');
  late final _gsl_spmatrix_char_d2sp = _gsl_spmatrix_char_d2spPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_char>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_spmatrix_char_sp2d(
    ffi.Pointer<gsl_matrix_char> A,
    ffi.Pointer<gsl_spmatrix_char> S,
  ) {
    return _gsl_spmatrix_char_sp2d(
      A,
      S,
    );
  }

  late final _gsl_spmatrix_char_sp2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_sp2d');
  late final _gsl_spmatrix_char_sp2d = _gsl_spmatrix_char_sp2dPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_add_to_dense(
    ffi.Pointer<gsl_matrix_char> a,
    ffi.Pointer<gsl_spmatrix_char> b,
  ) {
    return _gsl_spmatrix_char_add_to_dense(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_char_add_to_densePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_char>,
                  ffi.Pointer<gsl_spmatrix_char>)>>(
      'gsl_spmatrix_char_add_to_dense');
  late final _gsl_spmatrix_char_add_to_dense =
      _gsl_spmatrix_char_add_to_densePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_char>, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_equal(
    ffi.Pointer<gsl_spmatrix_char> a,
    ffi.Pointer<gsl_spmatrix_char> b,
  ) {
    return _gsl_spmatrix_char_equal(
      a,
      b,
    );
  }

  late final _gsl_spmatrix_char_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_equal');
  late final _gsl_spmatrix_char_equal = _gsl_spmatrix_char_equalPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix_char>, ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_norm1(
    ffi.Pointer<gsl_spmatrix_char> a,
  ) {
    return _gsl_spmatrix_char_norm1(
      a,
    );
  }

  late final _gsl_spmatrix_char_norm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_norm1');
  late final _gsl_spmatrix_char_norm1 = _gsl_spmatrix_char_norm1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_transpose(
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_transpose(
      m,
    );
  }

  late final _gsl_spmatrix_char_transposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_transpose');
  late final _gsl_spmatrix_char_transpose = _gsl_spmatrix_char_transposePtr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_transpose2(
    ffi.Pointer<gsl_spmatrix_char> m,
  ) {
    return _gsl_spmatrix_char_transpose2(
      m,
    );
  }

  late final _gsl_spmatrix_char_transpose2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix_char>)>>('gsl_spmatrix_char_transpose2');
  late final _gsl_spmatrix_char_transpose2 = _gsl_spmatrix_char_transpose2Ptr
      .asFunction<int Function(ffi.Pointer<gsl_spmatrix_char>)>();

  int gsl_spmatrix_char_transpose_memcpy(
    ffi.Pointer<gsl_spmatrix_char> dest,
    ffi.Pointer<gsl_spmatrix_char> src,
  ) {
    return _gsl_spmatrix_char_transpose_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_spmatrix_char_transpose_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_spmatrix_char>,
                  ffi.Pointer<gsl_spmatrix_char>)>>(
      'gsl_spmatrix_char_transpose_memcpy');
  late final _gsl_spmatrix_char_transpose_memcpy =
      _gsl_spmatrix_char_transpose_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_spmatrix_char>,
              ffi.Pointer<gsl_spmatrix_char>)>();

  ffi.Pointer<gsl_permutation> gsl_permutation_alloc(
    int n,
  ) {
    return _gsl_permutation_alloc(
      n,
    );
  }

  late final _gsl_permutation_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_permutation> Function(size_t)>>(
      'gsl_permutation_alloc');
  late final _gsl_permutation_alloc = _gsl_permutation_allocPtr
      .asFunction<ffi.Pointer<gsl_permutation> Function(int)>();

  ffi.Pointer<gsl_permutation> gsl_permutation_calloc(
    int n,
  ) {
    return _gsl_permutation_calloc(
      n,
    );
  }

  late final _gsl_permutation_callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_permutation> Function(size_t)>>(
      'gsl_permutation_calloc');
  late final _gsl_permutation_calloc = _gsl_permutation_callocPtr
      .asFunction<ffi.Pointer<gsl_permutation> Function(int)>();

  void gsl_permutation_init(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_init(
      p,
    );
  }

  late final _gsl_permutation_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_init');
  late final _gsl_permutation_init = _gsl_permutation_initPtr
      .asFunction<void Function(ffi.Pointer<gsl_permutation>)>();

  void gsl_permutation_free(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_free(
      p,
    );
  }

  late final _gsl_permutation_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_free');
  late final _gsl_permutation_free = _gsl_permutation_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_memcpy(
    ffi.Pointer<gsl_permutation> dest,
    ffi.Pointer<gsl_permutation> src,
  ) {
    return _gsl_permutation_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_permutation_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_permutation>)>>('gsl_permutation_memcpy');
  late final _gsl_permutation_memcpy = _gsl_permutation_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_fread(
      stream,
      p,
    );
  }

  late final _gsl_permutation_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_permutation>)>>('gsl_permutation_fread');
  late final _gsl_permutation_fread = _gsl_permutation_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_fwrite(
      stream,
      p,
    );
  }

  late final _gsl_permutation_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_permutation>)>>('gsl_permutation_fwrite');
  late final _gsl_permutation_fwrite = _gsl_permutation_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_fscanf(
      stream,
      p,
    );
  }

  late final _gsl_permutation_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_permutation>)>>('gsl_permutation_fscanf');
  late final _gsl_permutation_fscanf = _gsl_permutation_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_permutation_fprintf(
      stream,
      p,
      format,
    );
  }

  late final _gsl_permutation_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Int8>)>>('gsl_permutation_fprintf');
  late final _gsl_permutation_fprintf = _gsl_permutation_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_permutation>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_permutation_size(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_size(
      p,
    );
  }

  late final _gsl_permutation_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_size');
  late final _gsl_permutation_size = _gsl_permutation_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_permutation>)>();

  ffi.Pointer<size_t> gsl_permutation_data(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_data(
      p,
    );
  }

  late final _gsl_permutation_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<size_t> Function(
              ffi.Pointer<gsl_permutation>)>>('gsl_permutation_data');
  late final _gsl_permutation_data = _gsl_permutation_dataPtr
      .asFunction<ffi.Pointer<size_t> Function(ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_swap(
    ffi.Pointer<gsl_permutation> p,
    int i,
    int j,
  ) {
    return _gsl_permutation_swap(
      p,
      i,
      j,
    );
  }

  late final _gsl_permutation_swapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>, size_t,
              size_t)>>('gsl_permutation_swap');
  late final _gsl_permutation_swap = _gsl_permutation_swapPtr
      .asFunction<int Function(ffi.Pointer<gsl_permutation>, int, int)>();

  int gsl_permutation_valid(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_valid(
      p,
    );
  }

  late final _gsl_permutation_validPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_valid');
  late final _gsl_permutation_valid = _gsl_permutation_validPtr
      .asFunction<int Function(ffi.Pointer<gsl_permutation>)>();

  void gsl_permutation_reverse(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_reverse(
      p,
    );
  }

  late final _gsl_permutation_reversePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_reverse');
  late final _gsl_permutation_reverse = _gsl_permutation_reversePtr
      .asFunction<void Function(ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_inverse(
    ffi.Pointer<gsl_permutation> inv,
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_inverse(
      inv,
      p,
    );
  }

  late final _gsl_permutation_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_permutation>)>>('gsl_permutation_inverse');
  late final _gsl_permutation_inverse = _gsl_permutation_inversePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_next(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_next(
      p,
    );
  }

  late final _gsl_permutation_nextPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_next');
  late final _gsl_permutation_next = _gsl_permutation_nextPtr
      .asFunction<int Function(ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_prev(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_prev(
      p,
    );
  }

  late final _gsl_permutation_prevPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_prev');
  late final _gsl_permutation_prev = _gsl_permutation_prevPtr
      .asFunction<int Function(ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_mul(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_permutation> pa,
    ffi.Pointer<gsl_permutation> pb,
  ) {
    return _gsl_permutation_mul(
      p,
      pa,
      pb,
    );
  }

  late final _gsl_permutation_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_permutation>)>>('gsl_permutation_mul');
  late final _gsl_permutation_mul = _gsl_permutation_mulPtr.asFunction<
      int Function(ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_linear_to_canonical(
    ffi.Pointer<gsl_permutation> q,
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_linear_to_canonical(
      q,
      p,
    );
  }

  late final _gsl_permutation_linear_to_canonicalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_linear_to_canonical');
  late final _gsl_permutation_linear_to_canonical =
      _gsl_permutation_linear_to_canonicalPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_canonical_to_linear(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_permutation> q,
  ) {
    return _gsl_permutation_canonical_to_linear(
      p,
      q,
    );
  }

  late final _gsl_permutation_canonical_to_linearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_canonical_to_linear');
  late final _gsl_permutation_canonical_to_linear =
      _gsl_permutation_canonical_to_linearPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_inversions(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_inversions(
      p,
    );
  }

  late final _gsl_permutation_inversionsPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_inversions');
  late final _gsl_permutation_inversions = _gsl_permutation_inversionsPtr
      .asFunction<int Function(ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_linear_cycles(
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_permutation_linear_cycles(
      p,
    );
  }

  late final _gsl_permutation_linear_cyclesPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_linear_cycles');
  late final _gsl_permutation_linear_cycles = _gsl_permutation_linear_cyclesPtr
      .asFunction<int Function(ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_canonical_cycles(
    ffi.Pointer<gsl_permutation> q,
  ) {
    return _gsl_permutation_canonical_cycles(
      q,
    );
  }

  late final _gsl_permutation_canonical_cyclesPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_permutation>)>>(
      'gsl_permutation_canonical_cycles');
  late final _gsl_permutation_canonical_cycles =
      _gsl_permutation_canonical_cyclesPtr
          .asFunction<int Function(ffi.Pointer<gsl_permutation>)>();

  int gsl_permutation_get(
    ffi.Pointer<gsl_permutation> p,
    int i,
  ) {
    return _gsl_permutation_get(
      p,
      i,
    );
  }

  late final _gsl_permutation_getPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_permutation>, size_t)>>('gsl_permutation_get');
  late final _gsl_permutation_get = _gsl_permutation_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_permutation>, int)>();

  int gsl_blas_sdsdot(
    double alpha,
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
    ffi.Pointer<ffi.Float> result,
  ) {
    return _gsl_blas_sdsdot(
      alpha,
      X,
      Y,
      result,
    );
  }

  late final _gsl_blas_sdsdotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Float,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<ffi.Float>)>>('gsl_blas_sdsdot');
  late final _gsl_blas_sdsdot = _gsl_blas_sdsdotPtr.asFunction<
      int Function(double, ffi.Pointer<gsl_vector_float>,
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<ffi.Float>)>();

  int gsl_blas_dsdot(
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
    ffi.Pointer<ffi.Double> result,
  ) {
    return _gsl_blas_dsdot(
      X,
      Y,
      result,
    );
  }

  late final _gsl_blas_dsdotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<ffi.Double>)>>('gsl_blas_dsdot');
  late final _gsl_blas_dsdot = _gsl_blas_dsdotPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_blas_sdot(
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
    ffi.Pointer<ffi.Float> result,
  ) {
    return _gsl_blas_sdot(
      X,
      Y,
      result,
    );
  }

  late final _gsl_blas_sdotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<ffi.Float>)>>('gsl_blas_sdot');
  late final _gsl_blas_sdot = _gsl_blas_sdotPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>,
          ffi.Pointer<ffi.Float>)>();

  int gsl_blas_ddot(
    ffi.Pointer<gsl_vector> X,
    ffi.Pointer<gsl_vector> Y,
    ffi.Pointer<ffi.Double> result,
  ) {
    return _gsl_blas_ddot(
      X,
      Y,
      result,
    );
  }

  late final _gsl_blas_ddotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>)>>('gsl_blas_ddot');
  late final _gsl_blas_ddot = _gsl_blas_ddotPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_blas_cdotu(
    ffi.Pointer<gsl_vector_complex_float> X,
    ffi.Pointer<gsl_vector_complex_float> Y,
    ffi.Pointer<gsl_complex_float> dotu,
  ) {
    return _gsl_blas_cdotu(
      X,
      Y,
      dotu,
    );
  }

  late final _gsl_blas_cdotuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_complex_float>)>>('gsl_blas_cdotu');
  late final _gsl_blas_cdotu = _gsl_blas_cdotuPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_complex_float>)>();

  int gsl_blas_cdotc(
    ffi.Pointer<gsl_vector_complex_float> X,
    ffi.Pointer<gsl_vector_complex_float> Y,
    ffi.Pointer<gsl_complex_float> dotc,
  ) {
    return _gsl_blas_cdotc(
      X,
      Y,
      dotc,
    );
  }

  late final _gsl_blas_cdotcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_complex_float>)>>('gsl_blas_cdotc');
  late final _gsl_blas_cdotc = _gsl_blas_cdotcPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_complex_float>)>();

  int gsl_blas_zdotu(
    ffi.Pointer<gsl_vector_complex> X,
    ffi.Pointer<gsl_vector_complex> Y,
    ffi.Pointer<gsl_complex> dotu,
  ) {
    return _gsl_blas_zdotu(
      X,
      Y,
      dotu,
    );
  }

  late final _gsl_blas_zdotuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_complex>)>>('gsl_blas_zdotu');
  late final _gsl_blas_zdotu = _gsl_blas_zdotuPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_complex>)>();

  int gsl_blas_zdotc(
    ffi.Pointer<gsl_vector_complex> X,
    ffi.Pointer<gsl_vector_complex> Y,
    ffi.Pointer<gsl_complex> dotc,
  ) {
    return _gsl_blas_zdotc(
      X,
      Y,
      dotc,
    );
  }

  late final _gsl_blas_zdotcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_complex>)>>('gsl_blas_zdotc');
  late final _gsl_blas_zdotc = _gsl_blas_zdotcPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_complex>)>();

  double gsl_blas_snrm2(
    ffi.Pointer<gsl_vector_float> X,
  ) {
    return _gsl_blas_snrm2(
      X,
    );
  }

  late final _gsl_blas_snrm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<gsl_vector_float>)>>('gsl_blas_snrm2');
  late final _gsl_blas_snrm2 = _gsl_blas_snrm2Ptr
      .asFunction<double Function(ffi.Pointer<gsl_vector_float>)>();

  double gsl_blas_sasum(
    ffi.Pointer<gsl_vector_float> X,
  ) {
    return _gsl_blas_sasum(
      X,
    );
  }

  late final _gsl_blas_sasumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<gsl_vector_float>)>>('gsl_blas_sasum');
  late final _gsl_blas_sasum = _gsl_blas_sasumPtr
      .asFunction<double Function(ffi.Pointer<gsl_vector_float>)>();

  double gsl_blas_dnrm2(
    ffi.Pointer<gsl_vector> X,
  ) {
    return _gsl_blas_dnrm2(
      X,
    );
  }

  late final _gsl_blas_dnrm2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_blas_dnrm2');
  late final _gsl_blas_dnrm2 =
      _gsl_blas_dnrm2Ptr.asFunction<double Function(ffi.Pointer<gsl_vector>)>();

  double gsl_blas_dasum(
    ffi.Pointer<gsl_vector> X,
  ) {
    return _gsl_blas_dasum(
      X,
    );
  }

  late final _gsl_blas_dasumPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_blas_dasum');
  late final _gsl_blas_dasum =
      _gsl_blas_dasumPtr.asFunction<double Function(ffi.Pointer<gsl_vector>)>();

  double gsl_blas_scnrm2(
    ffi.Pointer<gsl_vector_complex_float> X,
  ) {
    return _gsl_blas_scnrm2(
      X,
    );
  }

  late final _gsl_blas_scnrm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_scnrm2');
  late final _gsl_blas_scnrm2 = _gsl_blas_scnrm2Ptr
      .asFunction<double Function(ffi.Pointer<gsl_vector_complex_float>)>();

  double gsl_blas_scasum(
    ffi.Pointer<gsl_vector_complex_float> X,
  ) {
    return _gsl_blas_scasum(
      X,
    );
  }

  late final _gsl_blas_scasumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_scasum');
  late final _gsl_blas_scasum = _gsl_blas_scasumPtr
      .asFunction<double Function(ffi.Pointer<gsl_vector_complex_float>)>();

  double gsl_blas_dznrm2(
    ffi.Pointer<gsl_vector_complex> X,
  ) {
    return _gsl_blas_dznrm2(
      X,
    );
  }

  late final _gsl_blas_dznrm2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_dznrm2');
  late final _gsl_blas_dznrm2 = _gsl_blas_dznrm2Ptr
      .asFunction<double Function(ffi.Pointer<gsl_vector_complex>)>();

  double gsl_blas_dzasum(
    ffi.Pointer<gsl_vector_complex> X,
  ) {
    return _gsl_blas_dzasum(
      X,
    );
  }

  late final _gsl_blas_dzasumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_dzasum');
  late final _gsl_blas_dzasum = _gsl_blas_dzasumPtr
      .asFunction<double Function(ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_isamax(
    ffi.Pointer<gsl_vector_float> X,
  ) {
    return _gsl_blas_isamax(
      X,
    );
  }

  late final _gsl_blas_isamaxPtr = _lookup<
      ffi.NativeFunction<
          CBLAS_INDEX_t Function(
              ffi.Pointer<gsl_vector_float>)>>('gsl_blas_isamax');
  late final _gsl_blas_isamax = _gsl_blas_isamaxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_float>)>();

  int gsl_blas_idamax(
    ffi.Pointer<gsl_vector> X,
  ) {
    return _gsl_blas_idamax(
      X,
    );
  }

  late final _gsl_blas_idamaxPtr = _lookup<
          ffi.NativeFunction<CBLAS_INDEX_t Function(ffi.Pointer<gsl_vector>)>>(
      'gsl_blas_idamax');
  late final _gsl_blas_idamax =
      _gsl_blas_idamaxPtr.asFunction<int Function(ffi.Pointer<gsl_vector>)>();

  int gsl_blas_icamax(
    ffi.Pointer<gsl_vector_complex_float> X,
  ) {
    return _gsl_blas_icamax(
      X,
    );
  }

  late final _gsl_blas_icamaxPtr = _lookup<
      ffi.NativeFunction<
          CBLAS_INDEX_t Function(
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_icamax');
  late final _gsl_blas_icamax = _gsl_blas_icamaxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_blas_izamax(
    ffi.Pointer<gsl_vector_complex> X,
  ) {
    return _gsl_blas_izamax(
      X,
    );
  }

  late final _gsl_blas_izamaxPtr = _lookup<
      ffi.NativeFunction<
          CBLAS_INDEX_t Function(
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_izamax');
  late final _gsl_blas_izamax = _gsl_blas_izamaxPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_sswap(
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
  ) {
    return _gsl_blas_sswap(
      X,
      Y,
    );
  }

  late final _gsl_blas_sswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_blas_sswap');
  late final _gsl_blas_sswap = _gsl_blas_sswapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_blas_scopy(
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
  ) {
    return _gsl_blas_scopy(
      X,
      Y,
    );
  }

  late final _gsl_blas_scopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_blas_scopy');
  late final _gsl_blas_scopy = _gsl_blas_scopyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_blas_saxpy(
    double alpha,
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
  ) {
    return _gsl_blas_saxpy(
      alpha,
      X,
      Y,
    );
  }

  late final _gsl_blas_saxpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Float, ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_blas_saxpy');
  late final _gsl_blas_saxpy = _gsl_blas_saxpyPtr.asFunction<
      int Function(double, ffi.Pointer<gsl_vector_float>,
          ffi.Pointer<gsl_vector_float>)>();

  int gsl_blas_dswap(
    ffi.Pointer<gsl_vector> X,
    ffi.Pointer<gsl_vector> Y,
  ) {
    return _gsl_blas_dswap(
      X,
      Y,
    );
  }

  late final _gsl_blas_dswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_blas_dswap');
  late final _gsl_blas_dswap = _gsl_blas_dswapPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_blas_dcopy(
    ffi.Pointer<gsl_vector> X,
    ffi.Pointer<gsl_vector> Y,
  ) {
    return _gsl_blas_dcopy(
      X,
      Y,
    );
  }

  late final _gsl_blas_dcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_blas_dcopy');
  late final _gsl_blas_dcopy = _gsl_blas_dcopyPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_blas_daxpy(
    double alpha,
    ffi.Pointer<gsl_vector> X,
    ffi.Pointer<gsl_vector> Y,
  ) {
    return _gsl_blas_daxpy(
      alpha,
      X,
      Y,
    );
  }

  late final _gsl_blas_daxpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_blas_daxpy');
  late final _gsl_blas_daxpy = _gsl_blas_daxpyPtr.asFunction<
      int Function(double, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_blas_cswap(
    ffi.Pointer<gsl_vector_complex_float> X,
    ffi.Pointer<gsl_vector_complex_float> Y,
  ) {
    return _gsl_blas_cswap(
      X,
      Y,
    );
  }

  late final _gsl_blas_cswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_cswap');
  late final _gsl_blas_cswap = _gsl_blas_cswapPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_blas_ccopy(
    ffi.Pointer<gsl_vector_complex_float> X,
    ffi.Pointer<gsl_vector_complex_float> Y,
  ) {
    return _gsl_blas_ccopy(
      X,
      Y,
    );
  }

  late final _gsl_blas_ccopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_ccopy');
  late final _gsl_blas_ccopy = _gsl_blas_ccopyPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_blas_caxpy(
    gsl_complex_float alpha,
    ffi.Pointer<gsl_vector_complex_float> X,
    ffi.Pointer<gsl_vector_complex_float> Y,
  ) {
    return _gsl_blas_caxpy(
      alpha,
      X,
      Y,
    );
  }

  late final _gsl_blas_caxpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gsl_complex_float,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_caxpy');
  late final _gsl_blas_caxpy = _gsl_blas_caxpyPtr.asFunction<
      int Function(gsl_complex_float, ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_blas_zswap(
    ffi.Pointer<gsl_vector_complex> X,
    ffi.Pointer<gsl_vector_complex> Y,
  ) {
    return _gsl_blas_zswap(
      X,
      Y,
    );
  }

  late final _gsl_blas_zswapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_zswap');
  late final _gsl_blas_zswap = _gsl_blas_zswapPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_zcopy(
    ffi.Pointer<gsl_vector_complex> X,
    ffi.Pointer<gsl_vector_complex> Y,
  ) {
    return _gsl_blas_zcopy(
      X,
      Y,
    );
  }

  late final _gsl_blas_zcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_zcopy');
  late final _gsl_blas_zcopy = _gsl_blas_zcopyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_zaxpy(
    gsl_complex alpha,
    ffi.Pointer<gsl_vector_complex> X,
    ffi.Pointer<gsl_vector_complex> Y,
  ) {
    return _gsl_blas_zaxpy(
      alpha,
      X,
      Y,
    );
  }

  late final _gsl_blas_zaxpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_zaxpy');
  late final _gsl_blas_zaxpy = _gsl_blas_zaxpyPtr.asFunction<
      int Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_srotg(
    ffi.Pointer<ffi.Float> a,
    ffi.Pointer<ffi.Float> b,
    ffi.Pointer<ffi.Float> c,
    ffi.Pointer<ffi.Float> s,
  ) {
    return _gsl_blas_srotg(
      a,
      b,
      c,
      s,
    );
  }

  late final _gsl_blas_srotgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('gsl_blas_srotg');
  late final _gsl_blas_srotg = _gsl_blas_srotgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  int gsl_blas_srotmg(
    ffi.Pointer<ffi.Float> d1,
    ffi.Pointer<ffi.Float> d2,
    ffi.Pointer<ffi.Float> b1,
    double b2,
    ffi.Pointer<ffi.Float> P,
  ) {
    return _gsl_blas_srotmg(
      d1,
      d2,
      b1,
      b2,
      P,
    );
  }

  late final _gsl_blas_srotmgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Pointer<ffi.Float>)>>('gsl_blas_srotmg');
  late final _gsl_blas_srotmg = _gsl_blas_srotmgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, double, ffi.Pointer<ffi.Float>)>();

  int gsl_blas_srot(
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
    double c,
    double s,
  ) {
    return _gsl_blas_srot(
      X,
      Y,
      c,
      s,
    );
  }

  late final _gsl_blas_srotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>,
              ffi.Float,
              ffi.Float)>>('gsl_blas_srot');
  late final _gsl_blas_srot = _gsl_blas_srotPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>,
          double, double)>();

  int gsl_blas_srotm(
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
    ffi.Pointer<ffi.Float> P,
  ) {
    return _gsl_blas_srotm(
      X,
      Y,
      P,
    );
  }

  late final _gsl_blas_srotmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<ffi.Float>)>>('gsl_blas_srotm');
  late final _gsl_blas_srotm = _gsl_blas_srotmPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>,
          ffi.Pointer<ffi.Float>)>();

  int gsl_blas_drotg(
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<ffi.Double> b,
    ffi.Pointer<ffi.Double> c,
    ffi.Pointer<ffi.Double> s,
  ) {
    return _gsl_blas_drotg(
      a,
      b,
      c,
      s,
    );
  }

  late final _gsl_blas_drotgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_blas_drotg');
  late final _gsl_blas_drotg = _gsl_blas_drotgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_blas_drotmg(
    ffi.Pointer<ffi.Double> d1,
    ffi.Pointer<ffi.Double> d2,
    ffi.Pointer<ffi.Double> b1,
    double b2,
    ffi.Pointer<ffi.Double> P,
  ) {
    return _gsl_blas_drotmg(
      d1,
      d2,
      b1,
      b2,
      P,
    );
  }

  late final _gsl_blas_drotmgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_blas_drotmg');
  late final _gsl_blas_drotmg = _gsl_blas_drotmgPtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, double, ffi.Pointer<ffi.Double>)>();

  int gsl_blas_drot(
    ffi.Pointer<gsl_vector> X,
    ffi.Pointer<gsl_vector> Y,
    double c,
    double s,
  ) {
    return _gsl_blas_drot(
      X,
      Y,
      c,
      s,
    );
  }

  late final _gsl_blas_drotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Double, ffi.Double)>>('gsl_blas_drot');
  late final _gsl_blas_drot = _gsl_blas_drotPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>, double, double)>();

  int gsl_blas_drotm(
    ffi.Pointer<gsl_vector> X,
    ffi.Pointer<gsl_vector> Y,
    ffi.Pointer<ffi.Double> P,
  ) {
    return _gsl_blas_drotm(
      X,
      Y,
      P,
    );
  }

  late final _gsl_blas_drotmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>)>>('gsl_blas_drotm');
  late final _gsl_blas_drotm = _gsl_blas_drotmPtr.asFunction<
      int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_blas_sscal(
    double alpha,
    ffi.Pointer<gsl_vector_float> X,
  ) {
    return _gsl_blas_sscal(
      alpha,
      X,
    );
  }

  late final _gsl_blas_sscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Float, ffi.Pointer<gsl_vector_float>)>>('gsl_blas_sscal');
  late final _gsl_blas_sscal = _gsl_blas_sscalPtr
      .asFunction<void Function(double, ffi.Pointer<gsl_vector_float>)>();

  void gsl_blas_dscal(
    double alpha,
    ffi.Pointer<gsl_vector> X,
  ) {
    return _gsl_blas_dscal(
      alpha,
      X,
    );
  }

  late final _gsl_blas_dscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Pointer<gsl_vector>)>>('gsl_blas_dscal');
  late final _gsl_blas_dscal = _gsl_blas_dscalPtr
      .asFunction<void Function(double, ffi.Pointer<gsl_vector>)>();

  void gsl_blas_cscal(
    gsl_complex_float alpha,
    ffi.Pointer<gsl_vector_complex_float> X,
  ) {
    return _gsl_blas_cscal(
      alpha,
      X,
    );
  }

  late final _gsl_blas_cscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(gsl_complex_float,
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_cscal');
  late final _gsl_blas_cscal = _gsl_blas_cscalPtr.asFunction<
      void Function(
          gsl_complex_float, ffi.Pointer<gsl_vector_complex_float>)>();

  void gsl_blas_zscal(
    gsl_complex alpha,
    ffi.Pointer<gsl_vector_complex> X,
  ) {
    return _gsl_blas_zscal(
      alpha,
      X,
    );
  }

  late final _gsl_blas_zscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              gsl_complex, ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_zscal');
  late final _gsl_blas_zscal = _gsl_blas_zscalPtr.asFunction<
      void Function(gsl_complex, ffi.Pointer<gsl_vector_complex>)>();

  void gsl_blas_csscal(
    double alpha,
    ffi.Pointer<gsl_vector_complex_float> X,
  ) {
    return _gsl_blas_csscal(
      alpha,
      X,
    );
  }

  late final _gsl_blas_csscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float,
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_csscal');
  late final _gsl_blas_csscal = _gsl_blas_csscalPtr.asFunction<
      void Function(double, ffi.Pointer<gsl_vector_complex_float>)>();

  void gsl_blas_zdscal(
    double alpha,
    ffi.Pointer<gsl_vector_complex> X,
  ) {
    return _gsl_blas_zdscal(
      alpha,
      X,
    );
  }

  late final _gsl_blas_zdscalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double, ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_zdscal');
  late final _gsl_blas_zdscal = _gsl_blas_zdscalPtr
      .asFunction<void Function(double, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_sgemv(
    int TransA,
    double alpha,
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_vector_float> X,
    double beta,
    ffi.Pointer<gsl_vector_float> Y,
  ) {
    return _gsl_blas_sgemv(
      TransA,
      alpha,
      A,
      X,
      beta,
      Y,
    );
  }

  late final _gsl_blas_sgemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_vector_float>,
              ffi.Float,
              ffi.Pointer<gsl_vector_float>)>>('gsl_blas_sgemv');
  late final _gsl_blas_sgemv = _gsl_blas_sgemvPtr.asFunction<
      int Function(
          int,
          double,
          ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_vector_float>,
          double,
          ffi.Pointer<gsl_vector_float>)>();

  int gsl_blas_strmv(
    int Uplo,
    int TransA,
    int Diag,
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_vector_float> X,
  ) {
    return _gsl_blas_strmv(
      Uplo,
      TransA,
      Diag,
      A,
      X,
    );
  }

  late final _gsl_blas_strmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_blas_strmv');
  late final _gsl_blas_strmv = _gsl_blas_strmvPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_vector_float>)>();

  int gsl_blas_strsv(
    int Uplo,
    int TransA,
    int Diag,
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_vector_float> X,
  ) {
    return _gsl_blas_strsv(
      Uplo,
      TransA,
      Diag,
      A,
      X,
    );
  }

  late final _gsl_blas_strsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_blas_strsv');
  late final _gsl_blas_strsv = _gsl_blas_strsvPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_vector_float>)>();

  int gsl_blas_dgemv(
    int TransA,
    double alpha,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> X,
    double beta,
    ffi.Pointer<gsl_vector> Y,
  ) {
    return _gsl_blas_dgemv(
      TransA,
      alpha,
      A,
      X,
      beta,
      Y,
    );
  }

  late final _gsl_blas_dgemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Pointer<gsl_vector>)>>('gsl_blas_dgemv');
  late final _gsl_blas_dgemv = _gsl_blas_dgemvPtr.asFunction<
      int Function(int, double, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, double, ffi.Pointer<gsl_vector>)>();

  int gsl_blas_dtrmv(
    int Uplo,
    int TransA,
    int Diag,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> X,
  ) {
    return _gsl_blas_dtrmv(
      Uplo,
      TransA,
      Diag,
      A,
      X,
    );
  }

  late final _gsl_blas_dtrmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_blas_dtrmv');
  late final _gsl_blas_dtrmv = _gsl_blas_dtrmvPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_blas_dtrsv(
    int Uplo,
    int TransA,
    int Diag,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> X,
  ) {
    return _gsl_blas_dtrsv(
      Uplo,
      TransA,
      Diag,
      A,
      X,
    );
  }

  late final _gsl_blas_dtrsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_blas_dtrsv');
  late final _gsl_blas_dtrsv = _gsl_blas_dtrsvPtr.asFunction<
      int Function(
          int, int, int, ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_blas_cgemv(
    int TransA,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_vector_complex_float> X,
    gsl_complex_float beta,
    ffi.Pointer<gsl_vector_complex_float> Y,
  ) {
    return _gsl_blas_cgemv(
      TransA,
      alpha,
      A,
      X,
      beta,
      Y,
    );
  }

  late final _gsl_blas_cgemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>,
              gsl_complex_float,
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_cgemv');
  late final _gsl_blas_cgemv = _gsl_blas_cgemvPtr.asFunction<
      int Function(
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>,
          gsl_complex_float,
          ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_blas_ctrmv(
    int Uplo,
    int TransA,
    int Diag,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_vector_complex_float> X,
  ) {
    return _gsl_blas_ctrmv(
      Uplo,
      TransA,
      Diag,
      A,
      X,
    );
  }

  late final _gsl_blas_ctrmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_ctrmv');
  late final _gsl_blas_ctrmv = _gsl_blas_ctrmvPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_blas_ctrsv(
    int Uplo,
    int TransA,
    int Diag,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_vector_complex_float> X,
  ) {
    return _gsl_blas_ctrsv(
      Uplo,
      TransA,
      Diag,
      A,
      X,
    );
  }

  late final _gsl_blas_ctrsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_ctrsv');
  late final _gsl_blas_ctrsv = _gsl_blas_ctrsvPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_blas_zgemv(
    int TransA,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector_complex> X,
    gsl_complex beta,
    ffi.Pointer<gsl_vector_complex> Y,
  ) {
    return _gsl_blas_zgemv(
      TransA,
      alpha,
      A,
      X,
      beta,
      Y,
    );
  }

  late final _gsl_blas_zgemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              gsl_complex,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_zgemv');
  late final _gsl_blas_zgemv = _gsl_blas_zgemvPtr.asFunction<
      int Function(
          int,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_vector_complex>,
          gsl_complex,
          ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_ztrmv(
    int Uplo,
    int TransA,
    int Diag,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector_complex> X,
  ) {
    return _gsl_blas_ztrmv(
      Uplo,
      TransA,
      Diag,
      A,
      X,
    );
  }

  late final _gsl_blas_ztrmvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_ztrmv');
  late final _gsl_blas_ztrmv = _gsl_blas_ztrmvPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_ztrsv(
    int Uplo,
    int TransA,
    int Diag,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector_complex> X,
  ) {
    return _gsl_blas_ztrsv(
      Uplo,
      TransA,
      Diag,
      A,
      X,
    );
  }

  late final _gsl_blas_ztrsvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_ztrsv');
  late final _gsl_blas_ztrsv = _gsl_blas_ztrsvPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_ssymv(
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_vector_float> X,
    double beta,
    ffi.Pointer<gsl_vector_float> Y,
  ) {
    return _gsl_blas_ssymv(
      Uplo,
      alpha,
      A,
      X,
      beta,
      Y,
    );
  }

  late final _gsl_blas_ssymvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_vector_float>,
              ffi.Float,
              ffi.Pointer<gsl_vector_float>)>>('gsl_blas_ssymv');
  late final _gsl_blas_ssymv = _gsl_blas_ssymvPtr.asFunction<
      int Function(
          int,
          double,
          ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_vector_float>,
          double,
          ffi.Pointer<gsl_vector_float>)>();

  int gsl_blas_sger(
    double alpha,
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
    ffi.Pointer<gsl_matrix_float> A,
  ) {
    return _gsl_blas_sger(
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_sgerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Float,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_blas_sger');
  late final _gsl_blas_sger = _gsl_blas_sgerPtr.asFunction<
      int Function(double, ffi.Pointer<gsl_vector_float>,
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_blas_ssyr(
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_matrix_float> A,
  ) {
    return _gsl_blas_ssyr(
      Uplo,
      alpha,
      X,
      A,
    );
  }

  late final _gsl_blas_ssyrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_blas_ssyr');
  late final _gsl_blas_ssyr = _gsl_blas_ssyrPtr.asFunction<
      int Function(int, double, ffi.Pointer<gsl_vector_float>,
          ffi.Pointer<gsl_matrix_float>)>();

  int gsl_blas_ssyr2(
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_vector_float> X,
    ffi.Pointer<gsl_vector_float> Y,
    ffi.Pointer<gsl_matrix_float> A,
  ) {
    return _gsl_blas_ssyr2(
      Uplo,
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_ssyr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_blas_ssyr2');
  late final _gsl_blas_ssyr2 = _gsl_blas_ssyr2Ptr.asFunction<
      int Function(int, double, ffi.Pointer<gsl_vector_float>,
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_matrix_float>)>();

  int gsl_blas_dsymv(
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> X,
    double beta,
    ffi.Pointer<gsl_vector> Y,
  ) {
    return _gsl_blas_dsymv(
      Uplo,
      alpha,
      A,
      X,
      beta,
      Y,
    );
  }

  late final _gsl_blas_dsymvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Pointer<gsl_vector>)>>('gsl_blas_dsymv');
  late final _gsl_blas_dsymv = _gsl_blas_dsymvPtr.asFunction<
      int Function(int, double, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, double, ffi.Pointer<gsl_vector>)>();

  int gsl_blas_dger(
    double alpha,
    ffi.Pointer<gsl_vector> X,
    ffi.Pointer<gsl_vector> Y,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_blas_dger(
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_dgerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_blas_dger');
  late final _gsl_blas_dger = _gsl_blas_dgerPtr.asFunction<
      int Function(double, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_blas_dsyr(
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_vector> X,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_blas_dsyr(
      Uplo,
      alpha,
      X,
      A,
    );
  }

  late final _gsl_blas_dsyrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_blas_dsyr');
  late final _gsl_blas_dsyr = _gsl_blas_dsyrPtr.asFunction<
      int Function(
          int, double, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>)>();

  int gsl_blas_dsyr2(
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_vector> X,
    ffi.Pointer<gsl_vector> Y,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_blas_dsyr2(
      Uplo,
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_dsyr2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_blas_dsyr2');
  late final _gsl_blas_dsyr2 = _gsl_blas_dsyr2Ptr.asFunction<
      int Function(int, double, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>)>();

  int gsl_blas_chemv(
    int Uplo,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_vector_complex_float> X,
    gsl_complex_float beta,
    ffi.Pointer<gsl_vector_complex_float> Y,
  ) {
    return _gsl_blas_chemv(
      Uplo,
      alpha,
      A,
      X,
      beta,
      Y,
    );
  }

  late final _gsl_blas_chemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>,
              gsl_complex_float,
              ffi.Pointer<gsl_vector_complex_float>)>>('gsl_blas_chemv');
  late final _gsl_blas_chemv = _gsl_blas_chemvPtr.asFunction<
      int Function(
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>,
          gsl_complex_float,
          ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_blas_cgeru(
    gsl_complex_float alpha,
    ffi.Pointer<gsl_vector_complex_float> X,
    ffi.Pointer<gsl_vector_complex_float> Y,
    ffi.Pointer<gsl_matrix_complex_float> A,
  ) {
    return _gsl_blas_cgeru(
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_cgeruPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gsl_complex_float,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_cgeru');
  late final _gsl_blas_cgeru = _gsl_blas_cgeruPtr.asFunction<
      int Function(
          gsl_complex_float,
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_cgerc(
    gsl_complex_float alpha,
    ffi.Pointer<gsl_vector_complex_float> X,
    ffi.Pointer<gsl_vector_complex_float> Y,
    ffi.Pointer<gsl_matrix_complex_float> A,
  ) {
    return _gsl_blas_cgerc(
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_cgercPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gsl_complex_float,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_cgerc');
  late final _gsl_blas_cgerc = _gsl_blas_cgercPtr.asFunction<
      int Function(
          gsl_complex_float,
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_cher(
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_vector_complex_float> X,
    ffi.Pointer<gsl_matrix_complex_float> A,
  ) {
    return _gsl_blas_cher(
      Uplo,
      alpha,
      X,
      A,
    );
  }

  late final _gsl_blas_cherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_cher');
  late final _gsl_blas_cher = _gsl_blas_cherPtr.asFunction<
      int Function(int, double, ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_cher2(
    int Uplo,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_vector_complex_float> X,
    ffi.Pointer<gsl_vector_complex_float> Y,
    ffi.Pointer<gsl_matrix_complex_float> A,
  ) {
    return _gsl_blas_cher2(
      Uplo,
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_cher2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_vector_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_cher2');
  late final _gsl_blas_cher2 = _gsl_blas_cher2Ptr.asFunction<
      int Function(
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_vector_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_zhemv(
    int Uplo,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector_complex> X,
    gsl_complex beta,
    ffi.Pointer<gsl_vector_complex> Y,
  ) {
    return _gsl_blas_zhemv(
      Uplo,
      alpha,
      A,
      X,
      beta,
      Y,
    );
  }

  late final _gsl_blas_zhemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              gsl_complex,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_blas_zhemv');
  late final _gsl_blas_zhemv = _gsl_blas_zhemvPtr.asFunction<
      int Function(
          int,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_vector_complex>,
          gsl_complex,
          ffi.Pointer<gsl_vector_complex>)>();

  int gsl_blas_zgeru(
    gsl_complex alpha,
    ffi.Pointer<gsl_vector_complex> X,
    ffi.Pointer<gsl_vector_complex> Y,
    ffi.Pointer<gsl_matrix_complex> A,
  ) {
    return _gsl_blas_zgeru(
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_zgeruPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gsl_complex,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zgeru');
  late final _gsl_blas_zgeru = _gsl_blas_zgeruPtr.asFunction<
      int Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_zgerc(
    gsl_complex alpha,
    ffi.Pointer<gsl_vector_complex> X,
    ffi.Pointer<gsl_vector_complex> Y,
    ffi.Pointer<gsl_matrix_complex> A,
  ) {
    return _gsl_blas_zgerc(
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_zgercPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gsl_complex,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zgerc');
  late final _gsl_blas_zgerc = _gsl_blas_zgercPtr.asFunction<
      int Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_zher(
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_vector_complex> X,
    ffi.Pointer<gsl_matrix_complex> A,
  ) {
    return _gsl_blas_zher(
      Uplo,
      alpha,
      X,
      A,
    );
  }

  late final _gsl_blas_zherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zher');
  late final _gsl_blas_zher = _gsl_blas_zherPtr.asFunction<
      int Function(int, double, ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_zher2(
    int Uplo,
    gsl_complex alpha,
    ffi.Pointer<gsl_vector_complex> X,
    ffi.Pointer<gsl_vector_complex> Y,
    ffi.Pointer<gsl_matrix_complex> A,
  ) {
    return _gsl_blas_zher2(
      Uplo,
      alpha,
      X,
      Y,
      A,
    );
  }

  late final _gsl_blas_zher2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zher2');
  late final _gsl_blas_zher2 = _gsl_blas_zher2Ptr.asFunction<
      int Function(int, gsl_complex, ffi.Pointer<gsl_vector_complex>,
          ffi.Pointer<gsl_vector_complex>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_sgemm(
    int TransA,
    int TransB,
    double alpha,
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_matrix_float> B,
    double beta,
    ffi.Pointer<gsl_matrix_float> C,
  ) {
    return _gsl_blas_sgemm(
      TransA,
      TransB,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_sgemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_blas_sgemm');
  late final _gsl_blas_sgemm = _gsl_blas_sgemmPtr.asFunction<
      int Function(
          int,
          int,
          double,
          ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_matrix_float>,
          double,
          ffi.Pointer<gsl_matrix_float>)>();

  int gsl_blas_ssymm(
    int Side,
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_matrix_float> B,
    double beta,
    ffi.Pointer<gsl_matrix_float> C,
  ) {
    return _gsl_blas_ssymm(
      Side,
      Uplo,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_ssymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_blas_ssymm');
  late final _gsl_blas_ssymm = _gsl_blas_ssymmPtr.asFunction<
      int Function(
          int,
          int,
          double,
          ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_matrix_float>,
          double,
          ffi.Pointer<gsl_matrix_float>)>();

  int gsl_blas_ssyrk(
    int Uplo,
    int Trans,
    double alpha,
    ffi.Pointer<gsl_matrix_float> A,
    double beta,
    ffi.Pointer<gsl_matrix_float> C,
  ) {
    return _gsl_blas_ssyrk(
      Uplo,
      Trans,
      alpha,
      A,
      beta,
      C,
    );
  }

  late final _gsl_blas_ssyrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_blas_ssyrk');
  late final _gsl_blas_ssyrk = _gsl_blas_ssyrkPtr.asFunction<
      int Function(int, int, double, ffi.Pointer<gsl_matrix_float>, double,
          ffi.Pointer<gsl_matrix_float>)>();

  int gsl_blas_ssyr2k(
    int Uplo,
    int Trans,
    double alpha,
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_matrix_float> B,
    double beta,
    ffi.Pointer<gsl_matrix_float> C,
  ) {
    return _gsl_blas_ssyr2k(
      Uplo,
      Trans,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_ssyr2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_blas_ssyr2k');
  late final _gsl_blas_ssyr2k = _gsl_blas_ssyr2kPtr.asFunction<
      int Function(
          int,
          int,
          double,
          ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_matrix_float>,
          double,
          ffi.Pointer<gsl_matrix_float>)>();

  int gsl_blas_strmm(
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    double alpha,
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_matrix_float> B,
  ) {
    return _gsl_blas_strmm(
      Side,
      Uplo,
      TransA,
      Diag,
      alpha,
      A,
      B,
    );
  }

  late final _gsl_blas_strmmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_blas_strmm');
  late final _gsl_blas_strmm = _gsl_blas_strmmPtr.asFunction<
      int Function(int, int, int, int, double, ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_matrix_float>)>();

  int gsl_blas_strsm(
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    double alpha,
    ffi.Pointer<gsl_matrix_float> A,
    ffi.Pointer<gsl_matrix_float> B,
  ) {
    return _gsl_blas_strsm(
      Side,
      Uplo,
      TransA,
      Diag,
      alpha,
      A,
      B,
    );
  }

  late final _gsl_blas_strsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_matrix_float>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_blas_strsm');
  late final _gsl_blas_strsm = _gsl_blas_strsmPtr.asFunction<
      int Function(int, int, int, int, double, ffi.Pointer<gsl_matrix_float>,
          ffi.Pointer<gsl_matrix_float>)>();

  int gsl_blas_dgemm(
    int TransA,
    int TransB,
    double alpha,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    double beta,
    ffi.Pointer<gsl_matrix> C,
  ) {
    return _gsl_blas_dgemm(
      TransA,
      TransB,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_dgemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Double,
              ffi.Pointer<gsl_matrix>)>>('gsl_blas_dgemm');
  late final _gsl_blas_dgemm = _gsl_blas_dgemmPtr.asFunction<
      int Function(int, int, double, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>, double, ffi.Pointer<gsl_matrix>)>();

  int gsl_blas_dsymm(
    int Side,
    int Uplo,
    double alpha,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    double beta,
    ffi.Pointer<gsl_matrix> C,
  ) {
    return _gsl_blas_dsymm(
      Side,
      Uplo,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_dsymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Double,
              ffi.Pointer<gsl_matrix>)>>('gsl_blas_dsymm');
  late final _gsl_blas_dsymm = _gsl_blas_dsymmPtr.asFunction<
      int Function(int, int, double, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>, double, ffi.Pointer<gsl_matrix>)>();

  int gsl_blas_dsyrk(
    int Uplo,
    int Trans,
    double alpha,
    ffi.Pointer<gsl_matrix> A,
    double beta,
    ffi.Pointer<gsl_matrix> C,
  ) {
    return _gsl_blas_dsyrk(
      Uplo,
      Trans,
      alpha,
      A,
      beta,
      C,
    );
  }

  late final _gsl_blas_dsyrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Double,
              ffi.Pointer<gsl_matrix>)>>('gsl_blas_dsyrk');
  late final _gsl_blas_dsyrk = _gsl_blas_dsyrkPtr.asFunction<
      int Function(int, int, double, ffi.Pointer<gsl_matrix>, double,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_blas_dsyr2k(
    int Uplo,
    int Trans,
    double alpha,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    double beta,
    ffi.Pointer<gsl_matrix> C,
  ) {
    return _gsl_blas_dsyr2k(
      Uplo,
      Trans,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_dsyr2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Double,
              ffi.Pointer<gsl_matrix>)>>('gsl_blas_dsyr2k');
  late final _gsl_blas_dsyr2k = _gsl_blas_dsyr2kPtr.asFunction<
      int Function(int, int, double, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>, double, ffi.Pointer<gsl_matrix>)>();

  int gsl_blas_dtrmm(
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    double alpha,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
  ) {
    return _gsl_blas_dtrmm(
      Side,
      Uplo,
      TransA,
      Diag,
      alpha,
      A,
      B,
    );
  }

  late final _gsl_blas_dtrmmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_blas_dtrmm');
  late final _gsl_blas_dtrmm = _gsl_blas_dtrmmPtr.asFunction<
      int Function(int, int, int, int, double, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_blas_dtrsm(
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    double alpha,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
  ) {
    return _gsl_blas_dtrsm(
      Side,
      Uplo,
      TransA,
      Diag,
      alpha,
      A,
      B,
    );
  }

  late final _gsl_blas_dtrsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_blas_dtrsm');
  late final _gsl_blas_dtrsm = _gsl_blas_dtrsmPtr.asFunction<
      int Function(int, int, int, int, double, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_blas_cgemm(
    int TransA,
    int TransB,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_matrix_complex_float> B,
    gsl_complex_float beta,
    ffi.Pointer<gsl_matrix_complex_float> C,
  ) {
    return _gsl_blas_cgemm(
      TransA,
      TransB,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_cgemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_cgemm');
  late final _gsl_blas_cgemm = _gsl_blas_cgemmPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_csymm(
    int Side,
    int Uplo,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_matrix_complex_float> B,
    gsl_complex_float beta,
    ffi.Pointer<gsl_matrix_complex_float> C,
  ) {
    return _gsl_blas_csymm(
      Side,
      Uplo,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_csymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_csymm');
  late final _gsl_blas_csymm = _gsl_blas_csymmPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_csyrk(
    int Uplo,
    int Trans,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    gsl_complex_float beta,
    ffi.Pointer<gsl_matrix_complex_float> C,
  ) {
    return _gsl_blas_csyrk(
      Uplo,
      Trans,
      alpha,
      A,
      beta,
      C,
    );
  }

  late final _gsl_blas_csyrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_csyrk');
  late final _gsl_blas_csyrk = _gsl_blas_csyrkPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_csyr2k(
    int Uplo,
    int Trans,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_matrix_complex_float> B,
    gsl_complex_float beta,
    ffi.Pointer<gsl_matrix_complex_float> C,
  ) {
    return _gsl_blas_csyr2k(
      Uplo,
      Trans,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_csyr2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_csyr2k');
  late final _gsl_blas_csyr2k = _gsl_blas_csyr2kPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_ctrmm(
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_matrix_complex_float> B,
  ) {
    return _gsl_blas_ctrmm(
      Side,
      Uplo,
      TransA,
      Diag,
      alpha,
      A,
      B,
    );
  }

  late final _gsl_blas_ctrmmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_ctrmm');
  late final _gsl_blas_ctrmm = _gsl_blas_ctrmmPtr.asFunction<
      int Function(
          int,
          int,
          int,
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_ctrsm(
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_matrix_complex_float> B,
  ) {
    return _gsl_blas_ctrsm(
      Side,
      Uplo,
      TransA,
      Diag,
      alpha,
      A,
      B,
    );
  }

  late final _gsl_blas_ctrsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_ctrsm');
  late final _gsl_blas_ctrsm = _gsl_blas_ctrsmPtr.asFunction<
      int Function(
          int,
          int,
          int,
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_zgemm(
    int TransA,
    int TransB,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
    gsl_complex beta,
    ffi.Pointer<gsl_matrix_complex> C,
  ) {
    return _gsl_blas_zgemm(
      TransA,
      TransB,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_zgemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zgemm');
  late final _gsl_blas_zgemm = _gsl_blas_zgemmPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_matrix_complex>,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_zsymm(
    int Side,
    int Uplo,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
    gsl_complex beta,
    ffi.Pointer<gsl_matrix_complex> C,
  ) {
    return _gsl_blas_zsymm(
      Side,
      Uplo,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_zsymmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zsymm');
  late final _gsl_blas_zsymm = _gsl_blas_zsymmPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_matrix_complex>,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_zsyrk(
    int Uplo,
    int Trans,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    gsl_complex beta,
    ffi.Pointer<gsl_matrix_complex> C,
  ) {
    return _gsl_blas_zsyrk(
      Uplo,
      Trans,
      alpha,
      A,
      beta,
      C,
    );
  }

  late final _gsl_blas_zsyrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zsyrk');
  late final _gsl_blas_zsyrk = _gsl_blas_zsyrkPtr.asFunction<
      int Function(int, int, gsl_complex, ffi.Pointer<gsl_matrix_complex>,
          gsl_complex, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_zsyr2k(
    int Uplo,
    int Trans,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
    gsl_complex beta,
    ffi.Pointer<gsl_matrix_complex> C,
  ) {
    return _gsl_blas_zsyr2k(
      Uplo,
      Trans,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_zsyr2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zsyr2k');
  late final _gsl_blas_zsyr2k = _gsl_blas_zsyr2kPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_matrix_complex>,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_ztrmm(
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
  ) {
    return _gsl_blas_ztrmm(
      Side,
      Uplo,
      TransA,
      Diag,
      alpha,
      A,
      B,
    );
  }

  late final _gsl_blas_ztrmmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_ztrmm');
  late final _gsl_blas_ztrmm = _gsl_blas_ztrmmPtr.asFunction<
      int Function(int, int, int, int, gsl_complex,
          ffi.Pointer<gsl_matrix_complex>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_ztrsm(
    int Side,
    int Uplo,
    int TransA,
    int Diag,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
  ) {
    return _gsl_blas_ztrsm(
      Side,
      Uplo,
      TransA,
      Diag,
      alpha,
      A,
      B,
    );
  }

  late final _gsl_blas_ztrsmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_ztrsm');
  late final _gsl_blas_ztrsm = _gsl_blas_ztrsmPtr.asFunction<
      int Function(int, int, int, int, gsl_complex,
          ffi.Pointer<gsl_matrix_complex>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_chemm(
    int Side,
    int Uplo,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_matrix_complex_float> B,
    gsl_complex_float beta,
    ffi.Pointer<gsl_matrix_complex_float> C,
  ) {
    return _gsl_blas_chemm(
      Side,
      Uplo,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_chemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_chemm');
  late final _gsl_blas_chemm = _gsl_blas_chemmPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_cherk(
    int Uplo,
    int Trans,
    double alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    double beta,
    ffi.Pointer<gsl_matrix_complex_float> C,
  ) {
    return _gsl_blas_cherk(
      Uplo,
      Trans,
      alpha,
      A,
      beta,
      C,
    );
  }

  late final _gsl_blas_cherkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Float,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_cherk');
  late final _gsl_blas_cherk = _gsl_blas_cherkPtr.asFunction<
      int Function(int, int, double, ffi.Pointer<gsl_matrix_complex_float>,
          double, ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_cher2k(
    int Uplo,
    int Trans,
    gsl_complex_float alpha,
    ffi.Pointer<gsl_matrix_complex_float> A,
    ffi.Pointer<gsl_matrix_complex_float> B,
    double beta,
    ffi.Pointer<gsl_matrix_complex_float> C,
  ) {
    return _gsl_blas_cher2k(
      Uplo,
      Trans,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_cher2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex_float,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Pointer<gsl_matrix_complex_float>,
              ffi.Float,
              ffi.Pointer<gsl_matrix_complex_float>)>>('gsl_blas_cher2k');
  late final _gsl_blas_cher2k = _gsl_blas_cher2kPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex_float,
          ffi.Pointer<gsl_matrix_complex_float>,
          ffi.Pointer<gsl_matrix_complex_float>,
          double,
          ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_blas_zhemm(
    int Side,
    int Uplo,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
    gsl_complex beta,
    ffi.Pointer<gsl_matrix_complex> C,
  ) {
    return _gsl_blas_zhemm(
      Side,
      Uplo,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_zhemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zhemm');
  late final _gsl_blas_zhemm = _gsl_blas_zhemmPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_matrix_complex>,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_zherk(
    int Uplo,
    int Trans,
    double alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    double beta,
    ffi.Pointer<gsl_matrix_complex> C,
  ) {
    return _gsl_blas_zherk(
      Uplo,
      Trans,
      alpha,
      A,
      beta,
      C,
    );
  }

  late final _gsl_blas_zherkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Double,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zherk');
  late final _gsl_blas_zherk = _gsl_blas_zherkPtr.asFunction<
      int Function(int, int, double, ffi.Pointer<gsl_matrix_complex>, double,
          ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_blas_zher2k(
    int Uplo,
    int Trans,
    gsl_complex alpha,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> B,
    double beta,
    ffi.Pointer<gsl_matrix_complex> C,
  ) {
    return _gsl_blas_zher2k(
      Uplo,
      Trans,
      alpha,
      A,
      B,
      beta,
      C,
    );
  }

  late final _gsl_blas_zher2kPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              gsl_complex,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Double,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_blas_zher2k');
  late final _gsl_blas_zher2k = _gsl_blas_zher2kPtr.asFunction<
      int Function(
          int,
          int,
          gsl_complex,
          ffi.Pointer<gsl_matrix_complex>,
          ffi.Pointer<gsl_matrix_complex>,
          double,
          ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_matmult(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_matrix> C,
  ) {
    return _gsl_linalg_matmult(
      A,
      B,
      C,
    );
  }

  late final _gsl_linalg_matmultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_matmult');
  late final _gsl_linalg_matmult = _gsl_linalg_matmultPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_matmult_mod(
    ffi.Pointer<gsl_matrix> A,
    int modA,
    ffi.Pointer<gsl_matrix> B,
    int modB,
    ffi.Pointer<gsl_matrix> C,
  ) {
    return _gsl_linalg_matmult_mod(
      A,
      modA,
      B,
      modB,
      C,
    );
  }

  late final _gsl_linalg_matmult_modPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Int32,
              ffi.Pointer<gsl_matrix>,
              ffi.Int32,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_matmult_mod');
  late final _gsl_linalg_matmult_mod = _gsl_linalg_matmult_modPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, int, ffi.Pointer<gsl_matrix>, int,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_exponential_ss(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> eA,
    int mode,
  ) {
    return _gsl_linalg_exponential_ss(
      A,
      eA,
      mode,
    );
  }

  late final _gsl_linalg_exponential_ssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              gsl_mode_t)>>('gsl_linalg_exponential_ss');
  late final _gsl_linalg_exponential_ss =
      _gsl_linalg_exponential_ssPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>, int)>();

  double gsl_linalg_householder_transform(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_linalg_householder_transform(
      v,
    );
  }

  late final _gsl_linalg_householder_transformPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_linalg_householder_transform');
  late final _gsl_linalg_householder_transform =
      _gsl_linalg_householder_transformPtr
          .asFunction<double Function(ffi.Pointer<gsl_vector>)>();

  double gsl_linalg_householder_transform2(
    ffi.Pointer<ffi.Double> alpha,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_linalg_householder_transform2(
      alpha,
      v,
    );
  }

  late final _gsl_linalg_householder_transform2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_householder_transform2');
  late final _gsl_linalg_householder_transform2 =
      _gsl_linalg_householder_transform2Ptr.asFunction<
          double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<gsl_vector>)>();

  gsl_complex gsl_linalg_complex_householder_transform(
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_linalg_complex_householder_transform(
      v,
    );
  }

  late final _gsl_linalg_complex_householder_transformPtr = _lookup<
          ffi.NativeFunction<
              gsl_complex Function(ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_householder_transform');
  late final _gsl_linalg_complex_householder_transform =
      _gsl_linalg_complex_householder_transformPtr
          .asFunction<gsl_complex Function(ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_householder_hm(
    double tau,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_householder_hm(
      tau,
      v,
      A,
    );
  }

  late final _gsl_linalg_householder_hmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_householder_hm');
  late final _gsl_linalg_householder_hm =
      _gsl_linalg_householder_hmPtr.asFunction<
          int Function(
              double, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_householder_mh(
    double tau,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_householder_mh(
      tau,
      v,
      A,
    );
  }

  late final _gsl_linalg_householder_mhPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_householder_mh');
  late final _gsl_linalg_householder_mh =
      _gsl_linalg_householder_mhPtr.asFunction<
          int Function(
              double, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_householder_hv(
    double tau,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_vector> w,
  ) {
    return _gsl_linalg_householder_hv(
      tau,
      v,
      w,
    );
  }

  late final _gsl_linalg_householder_hvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_householder_hv');
  late final _gsl_linalg_householder_hv =
      _gsl_linalg_householder_hvPtr.asFunction<
          int Function(
              double, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_householder_left(
    double tau,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_householder_left(
      tau,
      v,
      A,
      work,
    );
  }

  late final _gsl_linalg_householder_leftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_householder_left');
  late final _gsl_linalg_householder_left =
      _gsl_linalg_householder_leftPtr.asFunction<
          int Function(double, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_householder_right(
    double tau,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_householder_right(
      tau,
      v,
      A,
      work,
    );
  }

  late final _gsl_linalg_householder_rightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_householder_right');
  late final _gsl_linalg_householder_right =
      _gsl_linalg_householder_rightPtr.asFunction<
          int Function(double, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_householder_hm1(
    double tau,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_householder_hm1(
      tau,
      A,
    );
  }

  late final _gsl_linalg_householder_hm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_householder_hm1');
  late final _gsl_linalg_householder_hm1 = _gsl_linalg_householder_hm1Ptr
      .asFunction<int Function(double, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_complex_householder_hm(
    gsl_complex tau,
    ffi.Pointer<gsl_vector_complex> v,
    ffi.Pointer<gsl_matrix_complex> A,
  ) {
    return _gsl_linalg_complex_householder_hm(
      tau,
      v,
      A,
    );
  }

  late final _gsl_linalg_complex_householder_hmPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_linalg_complex_householder_hm');
  late final _gsl_linalg_complex_householder_hm =
      _gsl_linalg_complex_householder_hmPtr.asFunction<
          int Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_complex_householder_mh(
    gsl_complex tau,
    ffi.Pointer<gsl_vector_complex> v,
    ffi.Pointer<gsl_matrix_complex> A,
  ) {
    return _gsl_linalg_complex_householder_mh(
      tau,
      v,
      A,
    );
  }

  late final _gsl_linalg_complex_householder_mhPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_linalg_complex_householder_mh');
  late final _gsl_linalg_complex_householder_mh =
      _gsl_linalg_complex_householder_mhPtr.asFunction<
          int Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_complex_householder_hv(
    gsl_complex tau,
    ffi.Pointer<gsl_vector_complex> v,
    ffi.Pointer<gsl_vector_complex> w,
  ) {
    return _gsl_linalg_complex_householder_hv(
      tau,
      v,
      w,
    );
  }

  late final _gsl_linalg_complex_householder_hvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_householder_hv');
  late final _gsl_linalg_complex_householder_hv =
      _gsl_linalg_complex_householder_hvPtr.asFunction<
          int Function(gsl_complex, ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_householder_left(
    gsl_complex tau,
    ffi.Pointer<gsl_vector_complex> v,
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector_complex> work,
  ) {
    return _gsl_linalg_complex_householder_left(
      tau,
      v,
      A,
      work,
    );
  }

  late final _gsl_linalg_complex_householder_leftPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  gsl_complex,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_householder_left');
  late final _gsl_linalg_complex_householder_left =
      _gsl_linalg_complex_householder_leftPtr.asFunction<
          int Function(
              gsl_complex,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_hessenberg_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_linalg_hessenberg_decomp(
      A,
      tau,
    );
  }

  late final _gsl_linalg_hessenberg_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_hessenberg_decomp');
  late final _gsl_linalg_hessenberg_decomp =
      _gsl_linalg_hessenberg_decompPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_hessenberg_unpack(
    ffi.Pointer<gsl_matrix> H,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_matrix> U,
  ) {
    return _gsl_linalg_hessenberg_unpack(
      H,
      tau,
      U,
    );
  }

  late final _gsl_linalg_hessenberg_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_hessenberg_unpack');
  late final _gsl_linalg_hessenberg_unpack =
      _gsl_linalg_hessenberg_unpackPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_hessenberg_unpack_accum(
    ffi.Pointer<gsl_matrix> H,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_matrix> U,
  ) {
    return _gsl_linalg_hessenberg_unpack_accum(
      H,
      tau,
      U,
    );
  }

  late final _gsl_linalg_hessenberg_unpack_accumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_hessenberg_unpack_accum');
  late final _gsl_linalg_hessenberg_unpack_accum =
      _gsl_linalg_hessenberg_unpack_accumPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_hessenberg_set_zero(
    ffi.Pointer<gsl_matrix> H,
  ) {
    return _gsl_linalg_hessenberg_set_zero(
      H,
    );
  }

  late final _gsl_linalg_hessenberg_set_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_hessenberg_set_zero');
  late final _gsl_linalg_hessenberg_set_zero =
      _gsl_linalg_hessenberg_set_zeroPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_hessenberg_submatrix(
    ffi.Pointer<gsl_matrix> M,
    ffi.Pointer<gsl_matrix> A,
    int top,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_linalg_hessenberg_submatrix(
      M,
      A,
      top,
      tau,
    );
  }

  late final _gsl_linalg_hessenberg_submatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              size_t,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_hessenberg_submatrix');
  late final _gsl_linalg_hessenberg_submatrix =
      _gsl_linalg_hessenberg_submatrixPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>, int,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_hesstri_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_matrix> U,
    ffi.Pointer<gsl_matrix> V,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_hesstri_decomp(
      A,
      B,
      U,
      V,
      work,
    );
  }

  late final _gsl_linalg_hesstri_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_hesstri_decomp');
  late final _gsl_linalg_hesstri_decomp =
      _gsl_linalg_hesstri_decompPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_SV_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> V,
    ffi.Pointer<gsl_vector> S,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_SV_decomp(
      A,
      V,
      S,
      work,
    );
  }

  late final _gsl_linalg_SV_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_SV_decomp');
  late final _gsl_linalg_SV_decomp = _gsl_linalg_SV_decompPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_SV_decomp_mod(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_matrix> V,
    ffi.Pointer<gsl_vector> S,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_SV_decomp_mod(
      A,
      X,
      V,
      S,
      work,
    );
  }

  late final _gsl_linalg_SV_decomp_modPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_SV_decomp_mod');
  late final _gsl_linalg_SV_decomp_mod =
      _gsl_linalg_SV_decomp_modPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_SV_decomp_jacobi(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_vector> S,
  ) {
    return _gsl_linalg_SV_decomp_jacobi(
      A,
      Q,
      S,
    );
  }

  late final _gsl_linalg_SV_decomp_jacobiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_SV_decomp_jacobi');
  late final _gsl_linalg_SV_decomp_jacobi =
      _gsl_linalg_SV_decomp_jacobiPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_SV_solve(
    ffi.Pointer<gsl_matrix> U,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_vector> S,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_SV_solve(
      U,
      Q,
      S,
      b,
      x,
    );
  }

  late final _gsl_linalg_SV_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_SV_solve');
  late final _gsl_linalg_SV_solve = _gsl_linalg_SV_solvePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_SV_leverage(
    ffi.Pointer<gsl_matrix> U,
    ffi.Pointer<gsl_vector> h,
  ) {
    return _gsl_linalg_SV_leverage(
      U,
      h,
    );
  }

  late final _gsl_linalg_SV_leveragePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_SV_leverage');
  late final _gsl_linalg_SV_leverage = _gsl_linalg_SV_leveragePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LU_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<ffi.Int32> signum,
  ) {
    return _gsl_linalg_LU_decomp(
      A,
      p,
      signum,
    );
  }

  late final _gsl_linalg_LU_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Int32>)>>('gsl_linalg_LU_decomp');
  late final _gsl_linalg_LU_decomp = _gsl_linalg_LU_decompPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
          ffi.Pointer<ffi.Int32>)>();

  int gsl_linalg_LU_solve(
    ffi.Pointer<gsl_matrix> LU,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_LU_solve(
      LU,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_LU_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LU_solve');
  late final _gsl_linalg_LU_solve = _gsl_linalg_LU_solvePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LU_svx(
    ffi.Pointer<gsl_matrix> LU,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_LU_svx(
      LU,
      p,
      x,
    );
  }

  late final _gsl_linalg_LU_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LU_svx');
  late final _gsl_linalg_LU_svx = _gsl_linalg_LU_svxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LU_refine(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> LU,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_LU_refine(
      A,
      LU,
      p,
      b,
      x,
      work,
    );
  }

  late final _gsl_linalg_LU_refinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LU_refine');
  late final _gsl_linalg_LU_refine = _gsl_linalg_LU_refinePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LU_invert(
    ffi.Pointer<gsl_matrix> LU,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix> inverse,
  ) {
    return _gsl_linalg_LU_invert(
      LU,
      p,
      inverse,
    );
  }

  late final _gsl_linalg_LU_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_LU_invert');
  late final _gsl_linalg_LU_invert = _gsl_linalg_LU_invertPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_LU_invx(
    ffi.Pointer<gsl_matrix> LU,
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_linalg_LU_invx(
      LU,
      p,
    );
  }

  late final _gsl_linalg_LU_invxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>)>>('gsl_linalg_LU_invx');
  late final _gsl_linalg_LU_invx = _gsl_linalg_LU_invxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>)>();

  double gsl_linalg_LU_det(
    ffi.Pointer<gsl_matrix> LU,
    int signum,
  ) {
    return _gsl_linalg_LU_det(
      LU,
      signum,
    );
  }

  late final _gsl_linalg_LU_detPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_matrix>, ffi.Int32)>>('gsl_linalg_LU_det');
  late final _gsl_linalg_LU_det = _gsl_linalg_LU_detPtr
      .asFunction<double Function(ffi.Pointer<gsl_matrix>, int)>();

  double gsl_linalg_LU_lndet(
    ffi.Pointer<gsl_matrix> LU,
  ) {
    return _gsl_linalg_LU_lndet(
      LU,
    );
  }

  late final _gsl_linalg_LU_lndetPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_LU_lndet');
  late final _gsl_linalg_LU_lndet = _gsl_linalg_LU_lndetPtr
      .asFunction<double Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_LU_sgndet(
    ffi.Pointer<gsl_matrix> lu,
    int signum,
  ) {
    return _gsl_linalg_LU_sgndet(
      lu,
      signum,
    );
  }

  late final _gsl_linalg_LU_sgndetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>, ffi.Int32)>>('gsl_linalg_LU_sgndet');
  late final _gsl_linalg_LU_sgndet = _gsl_linalg_LU_sgndetPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>, int)>();

  int gsl_linalg_LU_band_decomp(
    int M,
    int lb,
    int ub,
    ffi.Pointer<gsl_matrix> AB,
    ffi.Pointer<gsl_vector_uint> piv,
  ) {
    return _gsl_linalg_LU_band_decomp(
      M,
      lb,
      ub,
      AB,
      piv,
    );
  }

  late final _gsl_linalg_LU_band_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t, size_t, size_t, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_linalg_LU_band_decomp');
  late final _gsl_linalg_LU_band_decomp =
      _gsl_linalg_LU_band_decompPtr.asFunction<
          int Function(int, int, int, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_uint>)>();

  int gsl_linalg_LU_band_solve(
    int lb,
    int ub,
    ffi.Pointer<gsl_matrix> LUB,
    ffi.Pointer<gsl_vector_uint> piv,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_LU_band_solve(
      lb,
      ub,
      LUB,
      piv,
      b,
      x,
    );
  }

  late final _gsl_linalg_LU_band_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              size_t,
              size_t,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LU_band_solve');
  late final _gsl_linalg_LU_band_solve =
      _gsl_linalg_LU_band_solvePtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LU_band_svx(
    int lb,
    int ub,
    ffi.Pointer<gsl_matrix> LUB,
    ffi.Pointer<gsl_vector_uint> piv,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_LU_band_svx(
      lb,
      ub,
      LUB,
      piv,
      x,
    );
  }

  late final _gsl_linalg_LU_band_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              size_t,
              size_t,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LU_band_svx');
  late final _gsl_linalg_LU_band_svx = _gsl_linalg_LU_band_svxPtr.asFunction<
      int Function(int, int, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LU_band_unpack(
    int M,
    int lb,
    int ub,
    ffi.Pointer<gsl_matrix> LUB,
    ffi.Pointer<gsl_vector_uint> piv,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_matrix> U,
  ) {
    return _gsl_linalg_LU_band_unpack(
      M,
      lb,
      ub,
      LUB,
      piv,
      L,
      U,
    );
  }

  late final _gsl_linalg_LU_band_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              size_t,
              size_t,
              size_t,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_LU_band_unpack');
  late final _gsl_linalg_LU_band_unpack =
      _gsl_linalg_LU_band_unpackPtr.asFunction<
          int Function(
              int,
              int,
              int,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_complex_LU_decomp(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<ffi.Int32> signum,
  ) {
    return _gsl_linalg_complex_LU_decomp(
      A,
      p,
      signum,
    );
  }

  late final _gsl_linalg_complex_LU_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Int32>)>>('gsl_linalg_complex_LU_decomp');
  late final _gsl_linalg_complex_LU_decomp =
      _gsl_linalg_complex_LU_decompPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_permutation>, ffi.Pointer<ffi.Int32>)>();

  int gsl_linalg_complex_LU_solve(
    ffi.Pointer<gsl_matrix_complex> LU,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_complex> b,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_linalg_complex_LU_solve(
      LU,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_complex_LU_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_linalg_complex_LU_solve');
  late final _gsl_linalg_complex_LU_solve =
      _gsl_linalg_complex_LU_solvePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_LU_svx(
    ffi.Pointer<gsl_matrix_complex> LU,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_linalg_complex_LU_svx(
      LU,
      p,
      x,
    );
  }

  late final _gsl_linalg_complex_LU_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_linalg_complex_LU_svx');
  late final _gsl_linalg_complex_LU_svx =
      _gsl_linalg_complex_LU_svxPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_LU_refine(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> LU,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_complex> b,
    ffi.Pointer<gsl_vector_complex> x,
    ffi.Pointer<gsl_vector_complex> work,
  ) {
    return _gsl_linalg_complex_LU_refine(
      A,
      LU,
      p,
      b,
      x,
      work,
    );
  }

  late final _gsl_linalg_complex_LU_refinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_LU_refine');
  late final _gsl_linalg_complex_LU_refine =
      _gsl_linalg_complex_LU_refinePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_LU_invert(
    ffi.Pointer<gsl_matrix_complex> LU,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_complex> inverse,
  ) {
    return _gsl_linalg_complex_LU_invert(
      LU,
      p,
      inverse,
    );
  }

  late final _gsl_linalg_complex_LU_invertPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_linalg_complex_LU_invert');
  late final _gsl_linalg_complex_LU_invert =
      _gsl_linalg_complex_LU_invertPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_complex_LU_invx(
    ffi.Pointer<gsl_matrix_complex> LU,
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_linalg_complex_LU_invx(
      LU,
      p,
    );
  }

  late final _gsl_linalg_complex_LU_invxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_permutation>)>>('gsl_linalg_complex_LU_invx');
  late final _gsl_linalg_complex_LU_invx =
      _gsl_linalg_complex_LU_invxPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>, ffi.Pointer<gsl_permutation>)>();

  gsl_complex gsl_linalg_complex_LU_det(
    ffi.Pointer<gsl_matrix_complex> LU,
    int signum,
  ) {
    return _gsl_linalg_complex_LU_det(
      LU,
      signum,
    );
  }

  late final _gsl_linalg_complex_LU_detPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Int32)>>('gsl_linalg_complex_LU_det');
  late final _gsl_linalg_complex_LU_det = _gsl_linalg_complex_LU_detPtr
      .asFunction<gsl_complex Function(ffi.Pointer<gsl_matrix_complex>, int)>();

  double gsl_linalg_complex_LU_lndet(
    ffi.Pointer<gsl_matrix_complex> LU,
  ) {
    return _gsl_linalg_complex_LU_lndet(
      LU,
    );
  }

  late final _gsl_linalg_complex_LU_lndetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_linalg_complex_LU_lndet');
  late final _gsl_linalg_complex_LU_lndet = _gsl_linalg_complex_LU_lndetPtr
      .asFunction<double Function(ffi.Pointer<gsl_matrix_complex>)>();

  gsl_complex gsl_linalg_complex_LU_sgndet(
    ffi.Pointer<gsl_matrix_complex> LU,
    int signum,
  ) {
    return _gsl_linalg_complex_LU_sgndet(
      LU,
      signum,
    );
  }

  late final _gsl_linalg_complex_LU_sgndetPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Int32)>>('gsl_linalg_complex_LU_sgndet');
  late final _gsl_linalg_complex_LU_sgndet = _gsl_linalg_complex_LU_sgndetPtr
      .asFunction<gsl_complex Function(ffi.Pointer<gsl_matrix_complex>, int)>();

  int gsl_linalg_QR_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_linalg_QR_decomp(
      A,
      tau,
    );
  }

  late final _gsl_linalg_QR_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_decomp');
  late final _gsl_linalg_QR_decomp = _gsl_linalg_QR_decompPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_decomp_old(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_linalg_QR_decomp_old(
      A,
      tau,
    );
  }

  late final _gsl_linalg_QR_decomp_oldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_decomp_old');
  late final _gsl_linalg_QR_decomp_old =
      _gsl_linalg_QR_decomp_oldPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_decomp_r(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_QR_decomp_r(
      A,
      T,
    );
  }

  late final _gsl_linalg_QR_decomp_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_decomp_r');
  late final _gsl_linalg_QR_decomp_r = _gsl_linalg_QR_decomp_rPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QR_solve(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QR_solve(
      QR,
      tau,
      b,
      x,
    );
  }

  late final _gsl_linalg_QR_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_solve');
  late final _gsl_linalg_QR_solve = _gsl_linalg_QR_solvePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_solve_r(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_matrix> T,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QR_solve_r(
      QR,
      T,
      b,
      x,
    );
  }

  late final _gsl_linalg_QR_solve_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_solve_r');
  late final _gsl_linalg_QR_solve_r = _gsl_linalg_QR_solve_rPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_svx(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QR_svx(
      QR,
      tau,
      x,
    );
  }

  late final _gsl_linalg_QR_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_svx');
  late final _gsl_linalg_QR_svx = _gsl_linalg_QR_svxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_lssolve(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> residual,
  ) {
    return _gsl_linalg_QR_lssolve(
      QR,
      tau,
      b,
      x,
      residual,
    );
  }

  late final _gsl_linalg_QR_lssolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_lssolve');
  late final _gsl_linalg_QR_lssolve = _gsl_linalg_QR_lssolvePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_lssolve_r(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_matrix> T,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_QR_lssolve_r(
      QR,
      T,
      b,
      x,
      work,
    );
  }

  late final _gsl_linalg_QR_lssolve_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_lssolve_r');
  late final _gsl_linalg_QR_lssolve_r = _gsl_linalg_QR_lssolve_rPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_QRsolve(
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QR_QRsolve(
      Q,
      R,
      b,
      x,
    );
  }

  late final _gsl_linalg_QR_QRsolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_QRsolve');
  late final _gsl_linalg_QR_QRsolve = _gsl_linalg_QR_QRsolvePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_Rsolve(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QR_Rsolve(
      QR,
      b,
      x,
    );
  }

  late final _gsl_linalg_QR_RsolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_Rsolve');
  late final _gsl_linalg_QR_Rsolve = _gsl_linalg_QR_RsolvePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_Rsvx(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QR_Rsvx(
      QR,
      x,
    );
  }

  late final _gsl_linalg_QR_RsvxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_Rsvx');
  late final _gsl_linalg_QR_Rsvx = _gsl_linalg_QR_RsvxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_update(
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_linalg_QR_update(
      Q,
      R,
      w,
      v,
    );
  }

  late final _gsl_linalg_QR_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_update');
  late final _gsl_linalg_QR_update = _gsl_linalg_QR_updatePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_QTvec(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_linalg_QR_QTvec(
      QR,
      tau,
      v,
    );
  }

  late final _gsl_linalg_QR_QTvecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_QTvec');
  late final _gsl_linalg_QR_QTvec = _gsl_linalg_QR_QTvecPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_QTvec_r(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_matrix> T,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_QR_QTvec_r(
      QR,
      T,
      b,
      work,
    );
  }

  late final _gsl_linalg_QR_QTvec_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_QTvec_r');
  late final _gsl_linalg_QR_QTvec_r = _gsl_linalg_QR_QTvec_rPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_Qvec(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_linalg_QR_Qvec(
      QR,
      tau,
      v,
    );
  }

  late final _gsl_linalg_QR_QvecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_Qvec');
  late final _gsl_linalg_QR_Qvec = _gsl_linalg_QR_QvecPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_QTmat(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_QR_QTmat(
      QR,
      tau,
      A,
    );
  }

  late final _gsl_linalg_QR_QTmatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_QTmat');
  late final _gsl_linalg_QR_QTmat = _gsl_linalg_QR_QTmatPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QR_QTmat_r(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_matrix> T,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_matrix> work,
  ) {
    return _gsl_linalg_QR_QTmat_r(
      QR,
      T,
      B,
      work,
    );
  }

  late final _gsl_linalg_QR_QTmat_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_QTmat_r');
  late final _gsl_linalg_QR_QTmat_r = _gsl_linalg_QR_QTmat_rPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QR_matQ(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_QR_matQ(
      QR,
      tau,
      A,
    );
  }

  late final _gsl_linalg_QR_matQPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_matQ');
  late final _gsl_linalg_QR_matQ = _gsl_linalg_QR_matQPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QR_unpack(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> R,
  ) {
    return _gsl_linalg_QR_unpack(
      QR,
      tau,
      Q,
      R,
    );
  }

  late final _gsl_linalg_QR_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_unpack');
  late final _gsl_linalg_QR_unpack = _gsl_linalg_QR_unpackPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QR_unpack_r(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_matrix> T,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> R,
  ) {
    return _gsl_linalg_QR_unpack_r(
      QR,
      T,
      Q,
      R,
    );
  }

  late final _gsl_linalg_QR_unpack_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_unpack_r');
  late final _gsl_linalg_QR_unpack_r = _gsl_linalg_QR_unpack_rPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_R_solve(
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_R_solve(
      R,
      b,
      x,
    );
  }

  late final _gsl_linalg_R_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_R_solve');
  late final _gsl_linalg_R_solve = _gsl_linalg_R_solvePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_R_svx(
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_R_svx(
      R,
      x,
    );
  }

  late final _gsl_linalg_R_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_R_svx');
  late final _gsl_linalg_R_svx = _gsl_linalg_R_svxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_rcond(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_QR_rcond(
      QR,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_QR_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_rcond');
  late final _gsl_linalg_QR_rcond = _gsl_linalg_QR_rcondPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_complex_QR_decomp(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector_complex> tau,
  ) {
    return _gsl_linalg_complex_QR_decomp(
      A,
      tau,
    );
  }

  late final _gsl_linalg_complex_QR_decompPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_QR_decomp');
  late final _gsl_linalg_complex_QR_decomp =
      _gsl_linalg_complex_QR_decompPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_QR_decomp_r(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_matrix_complex> T,
  ) {
    return _gsl_linalg_complex_QR_decomp_r(
      A,
      T,
    );
  }

  late final _gsl_linalg_complex_QR_decomp_rPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_linalg_complex_QR_decomp_r');
  late final _gsl_linalg_complex_QR_decomp_r =
      _gsl_linalg_complex_QR_decomp_rPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_complex_QR_solve(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_vector_complex> tau,
    ffi.Pointer<gsl_vector_complex> b,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_linalg_complex_QR_solve(
      QR,
      tau,
      b,
      x,
    );
  }

  late final _gsl_linalg_complex_QR_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_linalg_complex_QR_solve');
  late final _gsl_linalg_complex_QR_solve =
      _gsl_linalg_complex_QR_solvePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_QR_solve_r(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_matrix_complex> T,
    ffi.Pointer<gsl_vector_complex> b,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_linalg_complex_QR_solve_r(
      QR,
      T,
      b,
      x,
    );
  }

  late final _gsl_linalg_complex_QR_solve_rPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_QR_solve_r');
  late final _gsl_linalg_complex_QR_solve_r =
      _gsl_linalg_complex_QR_solve_rPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_QR_svx(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_vector_complex> tau,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_linalg_complex_QR_svx(
      QR,
      tau,
      x,
    );
  }

  late final _gsl_linalg_complex_QR_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_linalg_complex_QR_svx');
  late final _gsl_linalg_complex_QR_svx =
      _gsl_linalg_complex_QR_svxPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_QR_lssolve(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_vector_complex> tau,
    ffi.Pointer<gsl_vector_complex> b,
    ffi.Pointer<gsl_vector_complex> x,
    ffi.Pointer<gsl_vector_complex> residual,
  ) {
    return _gsl_linalg_complex_QR_lssolve(
      QR,
      tau,
      b,
      x,
      residual,
    );
  }

  late final _gsl_linalg_complex_QR_lssolvePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_QR_lssolve');
  late final _gsl_linalg_complex_QR_lssolve =
      _gsl_linalg_complex_QR_lssolvePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_QR_lssolve_r(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_matrix_complex> T,
    ffi.Pointer<gsl_vector_complex> b,
    ffi.Pointer<gsl_vector_complex> x,
    ffi.Pointer<gsl_vector_complex> work,
  ) {
    return _gsl_linalg_complex_QR_lssolve_r(
      QR,
      T,
      b,
      x,
      work,
    );
  }

  late final _gsl_linalg_complex_QR_lssolve_rPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_QR_lssolve_r');
  late final _gsl_linalg_complex_QR_lssolve_r =
      _gsl_linalg_complex_QR_lssolve_rPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_QR_QHvec(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_vector_complex> tau,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_linalg_complex_QR_QHvec(
      QR,
      tau,
      v,
    );
  }

  late final _gsl_linalg_complex_QR_QHvecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_linalg_complex_QR_QHvec');
  late final _gsl_linalg_complex_QR_QHvec =
      _gsl_linalg_complex_QR_QHvecPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_QR_QHvec_r(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_matrix_complex> T,
    ffi.Pointer<gsl_vector_complex> b,
    ffi.Pointer<gsl_vector_complex> work,
  ) {
    return _gsl_linalg_complex_QR_QHvec_r(
      QR,
      T,
      b,
      work,
    );
  }

  late final _gsl_linalg_complex_QR_QHvec_rPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_QR_QHvec_r');
  late final _gsl_linalg_complex_QR_QHvec_r =
      _gsl_linalg_complex_QR_QHvec_rPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_QR_Qvec(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_vector_complex> tau,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_linalg_complex_QR_Qvec(
      QR,
      tau,
      v,
    );
  }

  late final _gsl_linalg_complex_QR_QvecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_linalg_complex_QR_Qvec');
  late final _gsl_linalg_complex_QR_Qvec =
      _gsl_linalg_complex_QR_QvecPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_QR_unpack(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_vector_complex> tau,
    ffi.Pointer<gsl_matrix_complex> Q,
    ffi.Pointer<gsl_matrix_complex> R,
  ) {
    return _gsl_linalg_complex_QR_unpack(
      QR,
      tau,
      Q,
      R,
    );
  }

  late final _gsl_linalg_complex_QR_unpackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_linalg_complex_QR_unpack');
  late final _gsl_linalg_complex_QR_unpack =
      _gsl_linalg_complex_QR_unpackPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_complex_QR_unpack_r(
    ffi.Pointer<gsl_matrix_complex> QR,
    ffi.Pointer<gsl_matrix_complex> T,
    ffi.Pointer<gsl_matrix_complex> Q,
    ffi.Pointer<gsl_matrix_complex> R,
  ) {
    return _gsl_linalg_complex_QR_unpack_r(
      QR,
      T,
      Q,
      R,
    );
  }

  late final _gsl_linalg_complex_QR_unpack_rPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_linalg_complex_QR_unpack_r');
  late final _gsl_linalg_complex_QR_unpack_r =
      _gsl_linalg_complex_QR_unpack_rPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_QR_band_decomp_L2(
    int M,
    int p,
    int q,
    ffi.Pointer<gsl_matrix> AB,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_linalg_QR_band_decomp_L2(
      M,
      p,
      q,
      AB,
      tau,
    );
  }

  late final _gsl_linalg_QR_band_decomp_L2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t, size_t, size_t, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_band_decomp_L2');
  late final _gsl_linalg_QR_band_decomp_L2 =
      _gsl_linalg_QR_band_decomp_L2Ptr.asFunction<
          int Function(int, int, int, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_band_unpack_L2(
    int p,
    int q,
    ffi.Pointer<gsl_matrix> QRB,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> R,
  ) {
    return _gsl_linalg_QR_band_unpack_L2(
      p,
      q,
      QRB,
      tau,
      Q,
      R,
    );
  }

  late final _gsl_linalg_QR_band_unpack_L2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              size_t,
              size_t,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_band_unpack_L2');
  late final _gsl_linalg_QR_band_unpack_L2 =
      _gsl_linalg_QR_band_unpack_L2Ptr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QRPT_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<ffi.Int32> signum,
    ffi.Pointer<gsl_vector> norm,
  ) {
    return _gsl_linalg_QRPT_decomp(
      A,
      tau,
      p,
      signum,
      norm,
    );
  }

  late final _gsl_linalg_QRPT_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_decomp');
  late final _gsl_linalg_QRPT_decomp = _gsl_linalg_QRPT_decompPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_decomp2(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> q,
    ffi.Pointer<gsl_matrix> r,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<ffi.Int32> signum,
    ffi.Pointer<gsl_vector> norm,
  ) {
    return _gsl_linalg_QRPT_decomp2(
      A,
      q,
      r,
      tau,
      p,
      signum,
      norm,
    );
  }

  late final _gsl_linalg_QRPT_decomp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_decomp2');
  late final _gsl_linalg_QRPT_decomp2 = _gsl_linalg_QRPT_decomp2Ptr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_solve(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QRPT_solve(
      QR,
      tau,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_QRPT_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_solve');
  late final _gsl_linalg_QRPT_solve = _gsl_linalg_QRPT_solvePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_lssolve(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> residual,
  ) {
    return _gsl_linalg_QRPT_lssolve(
      QR,
      tau,
      p,
      b,
      x,
      residual,
    );
  }

  late final _gsl_linalg_QRPT_lssolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_lssolve');
  late final _gsl_linalg_QRPT_lssolve = _gsl_linalg_QRPT_lssolvePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_lssolve2(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    int rank,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> residual,
  ) {
    return _gsl_linalg_QRPT_lssolve2(
      QR,
      tau,
      p,
      b,
      rank,
      x,
      residual,
    );
  }

  late final _gsl_linalg_QRPT_lssolve2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              size_t,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_lssolve2');
  late final _gsl_linalg_QRPT_lssolve2 =
      _gsl_linalg_QRPT_lssolve2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              int,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_svx(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QRPT_svx(
      QR,
      tau,
      p,
      x,
    );
  }

  late final _gsl_linalg_QRPT_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_svx');
  late final _gsl_linalg_QRPT_svx = _gsl_linalg_QRPT_svxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_QRsolve(
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QRPT_QRsolve(
      Q,
      R,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_QRPT_QRsolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_QRsolve');
  late final _gsl_linalg_QRPT_QRsolve = _gsl_linalg_QRPT_QRsolvePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_Rsolve(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QRPT_Rsolve(
      QR,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_QRPT_RsolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_Rsolve');
  late final _gsl_linalg_QRPT_Rsolve = _gsl_linalg_QRPT_RsolvePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_Rsvx(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_QRPT_Rsvx(
      QR,
      p,
      x,
    );
  }

  late final _gsl_linalg_QRPT_RsvxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_Rsvx');
  late final _gsl_linalg_QRPT_Rsvx = _gsl_linalg_QRPT_RsvxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_update(
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> u,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_linalg_QRPT_update(
      Q,
      R,
      p,
      u,
      v,
    );
  }

  late final _gsl_linalg_QRPT_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_update');
  late final _gsl_linalg_QRPT_update = _gsl_linalg_QRPT_updatePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QRPT_rank(
    ffi.Pointer<gsl_matrix> QR,
    double tol,
  ) {
    return _gsl_linalg_QRPT_rank(
      QR,
      tol,
    );
  }

  late final _gsl_linalg_QRPT_rankPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_matrix>, ffi.Double)>>('gsl_linalg_QRPT_rank');
  late final _gsl_linalg_QRPT_rank = _gsl_linalg_QRPT_rankPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>, double)>();

  int gsl_linalg_QRPT_rcond(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_QRPT_rcond(
      QR,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_QRPT_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QRPT_rcond');
  late final _gsl_linalg_QRPT_rcond = _gsl_linalg_QRPT_rcondPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_UD_decomp(
    ffi.Pointer<gsl_matrix> U,
    ffi.Pointer<gsl_vector> D,
    ffi.Pointer<gsl_matrix> Y,
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_QR_UD_decomp(
      U,
      D,
      Y,
      T,
    );
  }

  late final _gsl_linalg_QR_UD_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_UD_decomp');
  late final _gsl_linalg_QR_UD_decomp = _gsl_linalg_QR_UD_decompPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QR_UD_lssolve(
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_matrix> Y,
    ffi.Pointer<gsl_matrix> T,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_QR_UD_lssolve(
      R,
      Y,
      T,
      b,
      x,
      work,
    );
  }

  late final _gsl_linalg_QR_UD_lssolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_UD_lssolve');
  late final _gsl_linalg_QR_UD_lssolve =
      _gsl_linalg_QR_UD_lssolvePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_UR_decomp(
    ffi.Pointer<gsl_matrix> S,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_QR_UR_decomp(
      S,
      A,
      T,
    );
  }

  late final _gsl_linalg_QR_UR_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_UR_decomp');
  late final _gsl_linalg_QR_UR_decomp = _gsl_linalg_QR_UR_decompPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QR_UU_decomp(
    ffi.Pointer<gsl_matrix> U,
    ffi.Pointer<gsl_matrix> S,
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_QR_UU_decomp(
      U,
      S,
      T,
    );
  }

  late final _gsl_linalg_QR_UU_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_UU_decomp');
  late final _gsl_linalg_QR_UU_decomp = _gsl_linalg_QR_UU_decompPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QR_UU_lssolve(
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_matrix> Y,
    ffi.Pointer<gsl_matrix> T,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_QR_UU_lssolve(
      R,
      Y,
      T,
      b,
      x,
      work,
    );
  }

  late final _gsl_linalg_QR_UU_lssolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_UU_lssolve');
  late final _gsl_linalg_QR_UU_lssolve =
      _gsl_linalg_QR_UU_lssolvePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_UU_QTvec(
    ffi.Pointer<gsl_matrix> Y,
    ffi.Pointer<gsl_matrix> T,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_QR_UU_QTvec(
      Y,
      T,
      b,
      work,
    );
  }

  late final _gsl_linalg_QR_UU_QTvecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QR_UU_QTvec');
  late final _gsl_linalg_QR_UU_QTvec = _gsl_linalg_QR_UU_QTvecPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QR_UZ_decomp(
    ffi.Pointer<gsl_matrix> S,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_QR_UZ_decomp(
      S,
      A,
      T,
    );
  }

  late final _gsl_linalg_QR_UZ_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QR_UZ_decomp');
  late final _gsl_linalg_QR_UZ_decomp = _gsl_linalg_QR_UZ_decompPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_QL_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_linalg_QL_decomp(
      A,
      tau,
    );
  }

  late final _gsl_linalg_QL_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_QL_decomp');
  late final _gsl_linalg_QL_decomp = _gsl_linalg_QL_decompPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_QL_unpack(
    ffi.Pointer<gsl_matrix> QL,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> L,
  ) {
    return _gsl_linalg_QL_unpack(
      QL,
      tau,
      Q,
      L,
    );
  }

  late final _gsl_linalg_QL_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_QL_unpack');
  late final _gsl_linalg_QL_unpack = _gsl_linalg_QL_unpackPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_COD_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau_Q,
    ffi.Pointer<gsl_vector> tau_Z,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<size_t> rank,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_COD_decomp(
      A,
      tau_Q,
      tau_Z,
      p,
      rank,
      work,
    );
  }

  late final _gsl_linalg_COD_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<size_t>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_COD_decomp');
  late final _gsl_linalg_COD_decomp = _gsl_linalg_COD_decompPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<size_t>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_COD_decomp_e(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau_Q,
    ffi.Pointer<gsl_vector> tau_Z,
    ffi.Pointer<gsl_permutation> p,
    double tol,
    ffi.Pointer<size_t> rank,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_COD_decomp_e(
      A,
      tau_Q,
      tau_Z,
      p,
      tol,
      rank,
      work,
    );
  }

  late final _gsl_linalg_COD_decomp_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Double,
              ffi.Pointer<size_t>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_COD_decomp_e');
  late final _gsl_linalg_COD_decomp_e = _gsl_linalg_COD_decomp_ePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          double,
          ffi.Pointer<size_t>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_COD_lssolve(
    ffi.Pointer<gsl_matrix> QRZT,
    ffi.Pointer<gsl_vector> tau_Q,
    ffi.Pointer<gsl_vector> tau_Z,
    ffi.Pointer<gsl_permutation> perm,
    int rank,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> residual,
  ) {
    return _gsl_linalg_COD_lssolve(
      QRZT,
      tau_Q,
      tau_Z,
      perm,
      rank,
      b,
      x,
      residual,
    );
  }

  late final _gsl_linalg_COD_lssolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              size_t,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_COD_lssolve');
  late final _gsl_linalg_COD_lssolve = _gsl_linalg_COD_lssolvePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          int,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_COD_lssolve2(
    double lambda,
    ffi.Pointer<gsl_matrix> QRZT,
    ffi.Pointer<gsl_vector> tau_Q,
    ffi.Pointer<gsl_vector> tau_Z,
    ffi.Pointer<gsl_permutation> perm,
    int rank,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> residual,
    ffi.Pointer<gsl_matrix> S,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_COD_lssolve2(
      lambda,
      QRZT,
      tau_Q,
      tau_Z,
      perm,
      rank,
      b,
      x,
      residual,
      S,
      work,
    );
  }

  late final _gsl_linalg_COD_lssolve2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              size_t,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_COD_lssolve2');
  late final _gsl_linalg_COD_lssolve2 = _gsl_linalg_COD_lssolve2Ptr.asFunction<
      int Function(
          double,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          int,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_COD_unpack(
    ffi.Pointer<gsl_matrix> QRZT,
    ffi.Pointer<gsl_vector> tau_Q,
    ffi.Pointer<gsl_vector> tau_Z,
    int rank,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_matrix> Z,
  ) {
    return _gsl_linalg_COD_unpack(
      QRZT,
      tau_Q,
      tau_Z,
      rank,
      Q,
      R,
      Z,
    );
  }

  late final _gsl_linalg_COD_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              size_t,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_COD_unpack');
  late final _gsl_linalg_COD_unpack = _gsl_linalg_COD_unpackPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          int,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_COD_matZ(
    ffi.Pointer<gsl_matrix> QRZT,
    ffi.Pointer<gsl_vector> tau_Z,
    int rank,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_COD_matZ(
      QRZT,
      tau_Z,
      rank,
      A,
      work,
    );
  }

  late final _gsl_linalg_COD_matZPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              size_t,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_COD_matZ');
  late final _gsl_linalg_COD_matZ = _gsl_linalg_COD_matZPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>, int,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_linalg_LQ_decomp(
      A,
      tau,
    );
  }

  late final _gsl_linalg_LQ_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_decomp');
  late final _gsl_linalg_LQ_decomp = _gsl_linalg_LQ_decompPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_lssolve(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> residual,
  ) {
    return _gsl_linalg_LQ_lssolve(
      LQ,
      tau,
      b,
      x,
      residual,
    );
  }

  late final _gsl_linalg_LQ_lssolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_lssolve');
  late final _gsl_linalg_LQ_lssolve = _gsl_linalg_LQ_lssolvePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_QTvec(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_linalg_LQ_QTvec(
      LQ,
      tau,
      v,
    );
  }

  late final _gsl_linalg_LQ_QTvecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_QTvec');
  late final _gsl_linalg_LQ_QTvec = _gsl_linalg_LQ_QTvecPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_solve_T(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_LQ_solve_T(
      LQ,
      tau,
      b,
      x,
    );
  }

  late final _gsl_linalg_LQ_solve_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_solve_T');
  late final _gsl_linalg_LQ_solve_T = _gsl_linalg_LQ_solve_TPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_svx_T(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_LQ_svx_T(
      LQ,
      tau,
      x,
    );
  }

  late final _gsl_linalg_LQ_svx_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_svx_T');
  late final _gsl_linalg_LQ_svx_T = _gsl_linalg_LQ_svx_TPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_lssolve_T(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> residual,
  ) {
    return _gsl_linalg_LQ_lssolve_T(
      LQ,
      tau,
      b,
      x,
      residual,
    );
  }

  late final _gsl_linalg_LQ_lssolve_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_lssolve_T');
  late final _gsl_linalg_LQ_lssolve_T = _gsl_linalg_LQ_lssolve_TPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_Lsolve_T(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_LQ_Lsolve_T(
      LQ,
      b,
      x,
    );
  }

  late final _gsl_linalg_LQ_Lsolve_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_Lsolve_T');
  late final _gsl_linalg_LQ_Lsolve_T = _gsl_linalg_LQ_Lsolve_TPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_Lsvx_T(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_LQ_Lsvx_T(
      LQ,
      x,
    );
  }

  late final _gsl_linalg_LQ_Lsvx_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_Lsvx_T');
  late final _gsl_linalg_LQ_Lsvx_T = _gsl_linalg_LQ_Lsvx_TPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_L_solve_T(
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_L_solve_T(
      L,
      b,
      x,
    );
  }

  late final _gsl_linalg_L_solve_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_L_solve_T');
  late final _gsl_linalg_L_solve_T = _gsl_linalg_L_solve_TPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_vecQ(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_linalg_LQ_vecQ(
      LQ,
      tau,
      v,
    );
  }

  late final _gsl_linalg_LQ_vecQPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_vecQ');
  late final _gsl_linalg_LQ_vecQ = _gsl_linalg_LQ_vecQPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_vecQT(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_linalg_LQ_vecQT(
      LQ,
      tau,
      v,
    );
  }

  late final _gsl_linalg_LQ_vecQTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_vecQT');
  late final _gsl_linalg_LQ_vecQT = _gsl_linalg_LQ_vecQTPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_unpack(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> L,
  ) {
    return _gsl_linalg_LQ_unpack(
      LQ,
      tau,
      Q,
      L,
    );
  }

  late final _gsl_linalg_LQ_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_LQ_unpack');
  late final _gsl_linalg_LQ_unpack = _gsl_linalg_LQ_unpackPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_LQ_update(
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> R,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_vector> w,
  ) {
    return _gsl_linalg_LQ_update(
      Q,
      R,
      v,
      w,
    );
  }

  late final _gsl_linalg_LQ_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_update');
  late final _gsl_linalg_LQ_update = _gsl_linalg_LQ_updatePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_LQ_LQsolve(
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_LQ_LQsolve(
      Q,
      L,
      b,
      x,
    );
  }

  late final _gsl_linalg_LQ_LQsolvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_LQ_LQsolve');
  late final _gsl_linalg_LQ_LQsolve = _gsl_linalg_LQ_LQsolvePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_PTLQ_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<ffi.Int32> signum,
    ffi.Pointer<gsl_vector> norm,
  ) {
    return _gsl_linalg_PTLQ_decomp(
      A,
      tau,
      p,
      signum,
      norm,
    );
  }

  late final _gsl_linalg_PTLQ_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_PTLQ_decomp');
  late final _gsl_linalg_PTLQ_decomp = _gsl_linalg_PTLQ_decompPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_PTLQ_decomp2(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_matrix> q,
    ffi.Pointer<gsl_matrix> r,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<ffi.Int32> signum,
    ffi.Pointer<gsl_vector> norm,
  ) {
    return _gsl_linalg_PTLQ_decomp2(
      A,
      q,
      r,
      tau,
      p,
      signum,
      norm,
    );
  }

  late final _gsl_linalg_PTLQ_decomp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_PTLQ_decomp2');
  late final _gsl_linalg_PTLQ_decomp2 = _gsl_linalg_PTLQ_decomp2Ptr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_PTLQ_solve_T(
    ffi.Pointer<gsl_matrix> QR,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_PTLQ_solve_T(
      QR,
      tau,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_PTLQ_solve_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_PTLQ_solve_T');
  late final _gsl_linalg_PTLQ_solve_T = _gsl_linalg_PTLQ_solve_TPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_PTLQ_svx_T(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_PTLQ_svx_T(
      LQ,
      tau,
      p,
      x,
    );
  }

  late final _gsl_linalg_PTLQ_svx_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_PTLQ_svx_T');
  late final _gsl_linalg_PTLQ_svx_T = _gsl_linalg_PTLQ_svx_TPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_PTLQ_LQsolve_T(
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_PTLQ_LQsolve_T(
      Q,
      L,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_PTLQ_LQsolve_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_PTLQ_LQsolve_T');
  late final _gsl_linalg_PTLQ_LQsolve_T =
      _gsl_linalg_PTLQ_LQsolve_TPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_PTLQ_Lsolve_T(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_PTLQ_Lsolve_T(
      LQ,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_PTLQ_Lsolve_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_PTLQ_Lsolve_T');
  late final _gsl_linalg_PTLQ_Lsolve_T =
      _gsl_linalg_PTLQ_Lsolve_TPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_PTLQ_Lsvx_T(
    ffi.Pointer<gsl_matrix> LQ,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_PTLQ_Lsvx_T(
      LQ,
      p,
      x,
    );
  }

  late final _gsl_linalg_PTLQ_Lsvx_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_PTLQ_Lsvx_T');
  late final _gsl_linalg_PTLQ_Lsvx_T = _gsl_linalg_PTLQ_Lsvx_TPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_PTLQ_update(
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_vector> w,
  ) {
    return _gsl_linalg_PTLQ_update(
      Q,
      L,
      p,
      v,
      w,
    );
  }

  late final _gsl_linalg_PTLQ_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_PTLQ_update');
  late final _gsl_linalg_PTLQ_update = _gsl_linalg_PTLQ_updatePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_permutation>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_decomp(
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_cholesky_decomp(
      A,
    );
  }

  late final _gsl_linalg_cholesky_decompPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_cholesky_decomp');
  late final _gsl_linalg_cholesky_decomp = _gsl_linalg_cholesky_decompPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_decomp1(
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_cholesky_decomp1(
      A,
    );
  }

  late final _gsl_linalg_cholesky_decomp1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_cholesky_decomp1');
  late final _gsl_linalg_cholesky_decomp1 = _gsl_linalg_cholesky_decomp1Ptr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_solve(
    ffi.Pointer<gsl_matrix> cholesky,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_cholesky_solve(
      cholesky,
      b,
      x,
    );
  }

  late final _gsl_linalg_cholesky_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_solve');
  late final _gsl_linalg_cholesky_solve =
      _gsl_linalg_cholesky_solvePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_solve_mat(
    ffi.Pointer<gsl_matrix> cholesky,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_matrix> X,
  ) {
    return _gsl_linalg_cholesky_solve_mat(
      cholesky,
      B,
      X,
    );
  }

  late final _gsl_linalg_cholesky_solve_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_cholesky_solve_mat');
  late final _gsl_linalg_cholesky_solve_mat =
      _gsl_linalg_cholesky_solve_matPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_svx(
    ffi.Pointer<gsl_matrix> cholesky,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_cholesky_svx(
      cholesky,
      x,
    );
  }

  late final _gsl_linalg_cholesky_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_svx');
  late final _gsl_linalg_cholesky_svx = _gsl_linalg_cholesky_svxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_svx_mat(
    ffi.Pointer<gsl_matrix> cholesky,
    ffi.Pointer<gsl_matrix> X,
  ) {
    return _gsl_linalg_cholesky_svx_mat(
      cholesky,
      X,
    );
  }

  late final _gsl_linalg_cholesky_svx_matPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_cholesky_svx_mat');
  late final _gsl_linalg_cholesky_svx_mat =
      _gsl_linalg_cholesky_svx_matPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_invert(
    ffi.Pointer<gsl_matrix> cholesky,
  ) {
    return _gsl_linalg_cholesky_invert(
      cholesky,
    );
  }

  late final _gsl_linalg_cholesky_invertPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_cholesky_invert');
  late final _gsl_linalg_cholesky_invert = _gsl_linalg_cholesky_invertPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_decomp_unit(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> D,
  ) {
    return _gsl_linalg_cholesky_decomp_unit(
      A,
      D,
    );
  }

  late final _gsl_linalg_cholesky_decomp_unitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_decomp_unit');
  late final _gsl_linalg_cholesky_decomp_unit =
      _gsl_linalg_cholesky_decomp_unitPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_scale(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> S,
  ) {
    return _gsl_linalg_cholesky_scale(
      A,
      S,
    );
  }

  late final _gsl_linalg_cholesky_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_scale');
  late final _gsl_linalg_cholesky_scale =
      _gsl_linalg_cholesky_scalePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_scale_apply(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> S,
  ) {
    return _gsl_linalg_cholesky_scale_apply(
      A,
      S,
    );
  }

  late final _gsl_linalg_cholesky_scale_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_scale_apply');
  late final _gsl_linalg_cholesky_scale_apply =
      _gsl_linalg_cholesky_scale_applyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_decomp2(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> S,
  ) {
    return _gsl_linalg_cholesky_decomp2(
      A,
      S,
    );
  }

  late final _gsl_linalg_cholesky_decomp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_decomp2');
  late final _gsl_linalg_cholesky_decomp2 =
      _gsl_linalg_cholesky_decomp2Ptr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_svx2(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<gsl_vector> S,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_cholesky_svx2(
      LLT,
      S,
      x,
    );
  }

  late final _gsl_linalg_cholesky_svx2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_svx2');
  late final _gsl_linalg_cholesky_svx2 =
      _gsl_linalg_cholesky_svx2Ptr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_solve2(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<gsl_vector> S,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_cholesky_solve2(
      LLT,
      S,
      b,
      x,
    );
  }

  late final _gsl_linalg_cholesky_solve2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_solve2');
  late final _gsl_linalg_cholesky_solve2 =
      _gsl_linalg_cholesky_solve2Ptr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_rcond(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_cholesky_rcond(
      LLT,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_cholesky_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_rcond');
  late final _gsl_linalg_cholesky_rcond =
      _gsl_linalg_cholesky_rcondPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_complex_cholesky_decomp(
    ffi.Pointer<gsl_matrix_complex> A,
  ) {
    return _gsl_linalg_complex_cholesky_decomp(
      A,
    );
  }

  late final _gsl_linalg_complex_cholesky_decompPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_linalg_complex_cholesky_decomp');
  late final _gsl_linalg_complex_cholesky_decomp =
      _gsl_linalg_complex_cholesky_decompPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_complex_cholesky_solve(
    ffi.Pointer<gsl_matrix_complex> cholesky,
    ffi.Pointer<gsl_vector_complex> b,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_linalg_complex_cholesky_solve(
      cholesky,
      b,
      x,
    );
  }

  late final _gsl_linalg_complex_cholesky_solvePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_cholesky_solve');
  late final _gsl_linalg_complex_cholesky_solve =
      _gsl_linalg_complex_cholesky_solvePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_cholesky_svx(
    ffi.Pointer<gsl_matrix_complex> cholesky,
    ffi.Pointer<gsl_vector_complex> x,
  ) {
    return _gsl_linalg_complex_cholesky_svx(
      cholesky,
      x,
    );
  }

  late final _gsl_linalg_complex_cholesky_svxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_linalg_complex_cholesky_svx');
  late final _gsl_linalg_complex_cholesky_svx =
      _gsl_linalg_complex_cholesky_svxPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_complex_cholesky_invert(
    ffi.Pointer<gsl_matrix_complex> cholesky,
  ) {
    return _gsl_linalg_complex_cholesky_invert(
      cholesky,
    );
  }

  late final _gsl_linalg_complex_cholesky_invertPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_linalg_complex_cholesky_invert');
  late final _gsl_linalg_complex_cholesky_invert =
      _gsl_linalg_complex_cholesky_invertPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_pcholesky_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_permutation> p,
  ) {
    return _gsl_linalg_pcholesky_decomp(
      A,
      p,
    );
  }

  late final _gsl_linalg_pcholesky_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>)>>('gsl_linalg_pcholesky_decomp');
  late final _gsl_linalg_pcholesky_decomp =
      _gsl_linalg_pcholesky_decompPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>)>();

  int gsl_linalg_pcholesky_solve(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_pcholesky_solve(
      LDLT,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_pcholesky_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_pcholesky_solve');
  late final _gsl_linalg_pcholesky_solve =
      _gsl_linalg_pcholesky_solvePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_pcholesky_svx(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_pcholesky_svx(
      LDLT,
      p,
      x,
    );
  }

  late final _gsl_linalg_pcholesky_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_pcholesky_svx');
  late final _gsl_linalg_pcholesky_svx =
      _gsl_linalg_pcholesky_svxPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_pcholesky_decomp2(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> S,
  ) {
    return _gsl_linalg_pcholesky_decomp2(
      A,
      p,
      S,
    );
  }

  late final _gsl_linalg_pcholesky_decomp2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_pcholesky_decomp2');
  late final _gsl_linalg_pcholesky_decomp2 =
      _gsl_linalg_pcholesky_decomp2Ptr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_pcholesky_solve2(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> S,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_pcholesky_solve2(
      LDLT,
      p,
      S,
      b,
      x,
    );
  }

  late final _gsl_linalg_pcholesky_solve2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_pcholesky_solve2');
  late final _gsl_linalg_pcholesky_solve2 =
      _gsl_linalg_pcholesky_solve2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_pcholesky_svx2(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> S,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_pcholesky_svx2(
      LDLT,
      p,
      S,
      x,
    );
  }

  late final _gsl_linalg_pcholesky_svx2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_pcholesky_svx2');
  late final _gsl_linalg_pcholesky_svx2 =
      _gsl_linalg_pcholesky_svx2Ptr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_pcholesky_invert(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix> Ainv,
  ) {
    return _gsl_linalg_pcholesky_invert(
      LDLT,
      p,
      Ainv,
    );
  }

  late final _gsl_linalg_pcholesky_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_pcholesky_invert');
  late final _gsl_linalg_pcholesky_invert =
      _gsl_linalg_pcholesky_invertPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_pcholesky_rcond(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_pcholesky_rcond(
      LDLT,
      p,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_pcholesky_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_pcholesky_rcond');
  late final _gsl_linalg_pcholesky_rcond =
      _gsl_linalg_pcholesky_rcondPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_mcholesky_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> E,
  ) {
    return _gsl_linalg_mcholesky_decomp(
      A,
      p,
      E,
    );
  }

  late final _gsl_linalg_mcholesky_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_mcholesky_decomp');
  late final _gsl_linalg_mcholesky_decomp =
      _gsl_linalg_mcholesky_decompPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_mcholesky_solve(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_mcholesky_solve(
      LDLT,
      p,
      b,
      x,
    );
  }

  late final _gsl_linalg_mcholesky_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_mcholesky_solve');
  late final _gsl_linalg_mcholesky_solve =
      _gsl_linalg_mcholesky_solvePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_mcholesky_svx(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_mcholesky_svx(
      LDLT,
      p,
      x,
    );
  }

  late final _gsl_linalg_mcholesky_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_mcholesky_svx');
  late final _gsl_linalg_mcholesky_svx =
      _gsl_linalg_mcholesky_svxPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_mcholesky_rcond(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_mcholesky_rcond(
      LDLT,
      p,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_mcholesky_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_mcholesky_rcond');
  late final _gsl_linalg_mcholesky_rcond =
      _gsl_linalg_mcholesky_rcondPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_mcholesky_invert(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix> Ainv,
  ) {
    return _gsl_linalg_mcholesky_invert(
      LDLT,
      p,
      Ainv,
    );
  }

  late final _gsl_linalg_mcholesky_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_mcholesky_invert');
  late final _gsl_linalg_mcholesky_invert =
      _gsl_linalg_mcholesky_invertPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_band_decomp(
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_cholesky_band_decomp(
      A,
    );
  }

  late final _gsl_linalg_cholesky_band_decompPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_cholesky_band_decomp');
  late final _gsl_linalg_cholesky_band_decomp =
      _gsl_linalg_cholesky_band_decompPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_band_solve(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_cholesky_band_solve(
      LLT,
      b,
      x,
    );
  }

  late final _gsl_linalg_cholesky_band_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_band_solve');
  late final _gsl_linalg_cholesky_band_solve =
      _gsl_linalg_cholesky_band_solvePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_band_svx(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_cholesky_band_svx(
      LLT,
      x,
    );
  }

  late final _gsl_linalg_cholesky_band_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_band_svx');
  late final _gsl_linalg_cholesky_band_svx =
      _gsl_linalg_cholesky_band_svxPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_band_solvem(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<gsl_matrix> B,
    ffi.Pointer<gsl_matrix> X,
  ) {
    return _gsl_linalg_cholesky_band_solvem(
      LLT,
      B,
      X,
    );
  }

  late final _gsl_linalg_cholesky_band_solvemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_cholesky_band_solvem');
  late final _gsl_linalg_cholesky_band_solvem =
      _gsl_linalg_cholesky_band_solvemPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_band_svxm(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<gsl_matrix> X,
  ) {
    return _gsl_linalg_cholesky_band_svxm(
      LLT,
      X,
    );
  }

  late final _gsl_linalg_cholesky_band_svxmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_cholesky_band_svxm');
  late final _gsl_linalg_cholesky_band_svxm =
      _gsl_linalg_cholesky_band_svxmPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_band_invert(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<gsl_matrix> Ainv,
  ) {
    return _gsl_linalg_cholesky_band_invert(
      LLT,
      Ainv,
    );
  }

  late final _gsl_linalg_cholesky_band_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_cholesky_band_invert');
  late final _gsl_linalg_cholesky_band_invert =
      _gsl_linalg_cholesky_band_invertPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_band_unpack(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<gsl_matrix> L,
  ) {
    return _gsl_linalg_cholesky_band_unpack(
      LLT,
      L,
    );
  }

  late final _gsl_linalg_cholesky_band_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_cholesky_band_unpack');
  late final _gsl_linalg_cholesky_band_unpack =
      _gsl_linalg_cholesky_band_unpackPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_cholesky_band_scale(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> S,
  ) {
    return _gsl_linalg_cholesky_band_scale(
      A,
      S,
    );
  }

  late final _gsl_linalg_cholesky_band_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_band_scale');
  late final _gsl_linalg_cholesky_band_scale =
      _gsl_linalg_cholesky_band_scalePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_band_scale_apply(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> S,
  ) {
    return _gsl_linalg_cholesky_band_scale_apply(
      A,
      S,
    );
  }

  late final _gsl_linalg_cholesky_band_scale_applyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>>(
      'gsl_linalg_cholesky_band_scale_apply');
  late final _gsl_linalg_cholesky_band_scale_apply =
      _gsl_linalg_cholesky_band_scale_applyPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_cholesky_band_rcond(
    ffi.Pointer<gsl_matrix> LLT,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_cholesky_band_rcond(
      LLT,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_cholesky_band_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_cholesky_band_rcond');
  late final _gsl_linalg_cholesky_band_rcond =
      _gsl_linalg_cholesky_band_rcondPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_ldlt_decomp(
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_ldlt_decomp(
      A,
    );
  }

  late final _gsl_linalg_ldlt_decompPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_ldlt_decomp');
  late final _gsl_linalg_ldlt_decomp = _gsl_linalg_ldlt_decompPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_ldlt_solve(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_ldlt_solve(
      LDLT,
      b,
      x,
    );
  }

  late final _gsl_linalg_ldlt_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_ldlt_solve');
  late final _gsl_linalg_ldlt_solve = _gsl_linalg_ldlt_solvePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_ldlt_svx(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_ldlt_svx(
      LDLT,
      x,
    );
  }

  late final _gsl_linalg_ldlt_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_ldlt_svx');
  late final _gsl_linalg_ldlt_svx = _gsl_linalg_ldlt_svxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_ldlt_rcond(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_ldlt_rcond(
      LDLT,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_ldlt_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_ldlt_rcond');
  late final _gsl_linalg_ldlt_rcond = _gsl_linalg_ldlt_rcondPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_ldlt_band_decomp(
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_linalg_ldlt_band_decomp(
      A,
    );
  }

  late final _gsl_linalg_ldlt_band_decompPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_ldlt_band_decomp');
  late final _gsl_linalg_ldlt_band_decomp = _gsl_linalg_ldlt_band_decompPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_ldlt_band_solve(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_ldlt_band_solve(
      LDLT,
      b,
      x,
    );
  }

  late final _gsl_linalg_ldlt_band_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_ldlt_band_solve');
  late final _gsl_linalg_ldlt_band_solve =
      _gsl_linalg_ldlt_band_solvePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_ldlt_band_svx(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_ldlt_band_svx(
      LDLT,
      x,
    );
  }

  late final _gsl_linalg_ldlt_band_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_ldlt_band_svx');
  late final _gsl_linalg_ldlt_band_svx =
      _gsl_linalg_ldlt_band_svxPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_ldlt_band_unpack(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_vector> D,
  ) {
    return _gsl_linalg_ldlt_band_unpack(
      LDLT,
      L,
      D,
    );
  }

  late final _gsl_linalg_ldlt_band_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_ldlt_band_unpack');
  late final _gsl_linalg_ldlt_band_unpack =
      _gsl_linalg_ldlt_band_unpackPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_ldlt_band_rcond(
    ffi.Pointer<gsl_matrix> LDLT,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_ldlt_band_rcond(
      LDLT,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_ldlt_band_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_ldlt_band_rcond');
  late final _gsl_linalg_ldlt_band_rcond =
      _gsl_linalg_ldlt_band_rcondPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_symmtd_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_linalg_symmtd_decomp(
      A,
      tau,
    );
  }

  late final _gsl_linalg_symmtd_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_symmtd_decomp');
  late final _gsl_linalg_symmtd_decomp =
      _gsl_linalg_symmtd_decompPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_symmtd_unpack(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau,
    ffi.Pointer<gsl_matrix> Q,
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> subdiag,
  ) {
    return _gsl_linalg_symmtd_unpack(
      A,
      tau,
      Q,
      diag,
      subdiag,
    );
  }

  late final _gsl_linalg_symmtd_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_symmtd_unpack');
  late final _gsl_linalg_symmtd_unpack =
      _gsl_linalg_symmtd_unpackPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_symmtd_unpack_T(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> subdiag,
  ) {
    return _gsl_linalg_symmtd_unpack_T(
      A,
      diag,
      subdiag,
    );
  }

  late final _gsl_linalg_symmtd_unpack_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_symmtd_unpack_T');
  late final _gsl_linalg_symmtd_unpack_T =
      _gsl_linalg_symmtd_unpack_TPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_hermtd_decomp(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector_complex> tau,
  ) {
    return _gsl_linalg_hermtd_decomp(
      A,
      tau,
    );
  }

  late final _gsl_linalg_hermtd_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_linalg_hermtd_decomp');
  late final _gsl_linalg_hermtd_decomp =
      _gsl_linalg_hermtd_decompPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>)>();

  int gsl_linalg_hermtd_unpack(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector_complex> tau,
    ffi.Pointer<gsl_matrix_complex> U,
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> sudiag,
  ) {
    return _gsl_linalg_hermtd_unpack(
      A,
      tau,
      U,
      diag,
      sudiag,
    );
  }

  late final _gsl_linalg_hermtd_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_hermtd_unpack');
  late final _gsl_linalg_hermtd_unpack =
      _gsl_linalg_hermtd_unpackPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector_complex>,
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_hermtd_unpack_T(
    ffi.Pointer<gsl_matrix_complex> A,
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> subdiag,
  ) {
    return _gsl_linalg_hermtd_unpack_T(
      A,
      diag,
      subdiag,
    );
  }

  late final _gsl_linalg_hermtd_unpack_TPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_hermtd_unpack_T');
  late final _gsl_linalg_hermtd_unpack_T =
      _gsl_linalg_hermtd_unpack_TPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix_complex>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_HH_solve(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_HH_solve(
      A,
      b,
      x,
    );
  }

  late final _gsl_linalg_HH_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_HH_solve');
  late final _gsl_linalg_HH_solve = _gsl_linalg_HH_solvePtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_HH_svx(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_HH_svx(
      A,
      x,
    );
  }

  late final _gsl_linalg_HH_svxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_HH_svx');
  late final _gsl_linalg_HH_svx = _gsl_linalg_HH_svxPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_solve_symm_tridiag(
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> offdiag,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_solve_symm_tridiag(
      diag,
      offdiag,
      b,
      x,
    );
  }

  late final _gsl_linalg_solve_symm_tridiagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_solve_symm_tridiag');
  late final _gsl_linalg_solve_symm_tridiag =
      _gsl_linalg_solve_symm_tridiagPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_solve_tridiag(
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> abovediag,
    ffi.Pointer<gsl_vector> belowdiag,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_solve_tridiag(
      diag,
      abovediag,
      belowdiag,
      b,
      x,
    );
  }

  late final _gsl_linalg_solve_tridiagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_solve_tridiag');
  late final _gsl_linalg_solve_tridiag =
      _gsl_linalg_solve_tridiagPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_solve_symm_cyc_tridiag(
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> offdiag,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_solve_symm_cyc_tridiag(
      diag,
      offdiag,
      b,
      x,
    );
  }

  late final _gsl_linalg_solve_symm_cyc_tridiagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_solve_symm_cyc_tridiag');
  late final _gsl_linalg_solve_symm_cyc_tridiag =
      _gsl_linalg_solve_symm_cyc_tridiagPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_solve_cyc_tridiag(
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> abovediag,
    ffi.Pointer<gsl_vector> belowdiag,
    ffi.Pointer<gsl_vector> b,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_linalg_solve_cyc_tridiag(
      diag,
      abovediag,
      belowdiag,
      b,
      x,
    );
  }

  late final _gsl_linalg_solve_cyc_tridiagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_solve_cyc_tridiag');
  late final _gsl_linalg_solve_cyc_tridiag =
      _gsl_linalg_solve_cyc_tridiagPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_bidiag_decomp(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau_U,
    ffi.Pointer<gsl_vector> tau_V,
  ) {
    return _gsl_linalg_bidiag_decomp(
      A,
      tau_U,
      tau_V,
    );
  }

  late final _gsl_linalg_bidiag_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_bidiag_decomp');
  late final _gsl_linalg_bidiag_decomp =
      _gsl_linalg_bidiag_decompPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_bidiag_unpack(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau_U,
    ffi.Pointer<gsl_matrix> U,
    ffi.Pointer<gsl_vector> tau_V,
    ffi.Pointer<gsl_matrix> V,
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> superdiag,
  ) {
    return _gsl_linalg_bidiag_unpack(
      A,
      tau_U,
      U,
      tau_V,
      V,
      diag,
      superdiag,
    );
  }

  late final _gsl_linalg_bidiag_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_bidiag_unpack');
  late final _gsl_linalg_bidiag_unpack =
      _gsl_linalg_bidiag_unpackPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_bidiag_unpack2(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> tau_U,
    ffi.Pointer<gsl_vector> tau_V,
    ffi.Pointer<gsl_matrix> V,
  ) {
    return _gsl_linalg_bidiag_unpack2(
      A,
      tau_U,
      tau_V,
      V,
    );
  }

  late final _gsl_linalg_bidiag_unpack2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_bidiag_unpack2');
  late final _gsl_linalg_bidiag_unpack2 =
      _gsl_linalg_bidiag_unpack2Ptr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_bidiag_unpack_B(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> diag,
    ffi.Pointer<gsl_vector> superdiag,
  ) {
    return _gsl_linalg_bidiag_unpack_B(
      A,
      diag,
      superdiag,
    );
  }

  late final _gsl_linalg_bidiag_unpack_BPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_bidiag_unpack_B');
  late final _gsl_linalg_bidiag_unpack_B =
      _gsl_linalg_bidiag_unpack_BPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_balance_matrix(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> D,
  ) {
    return _gsl_linalg_balance_matrix(
      A,
      D,
    );
  }

  late final _gsl_linalg_balance_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_balance_matrix');
  late final _gsl_linalg_balance_matrix =
      _gsl_linalg_balance_matrixPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_balance_accum(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> D,
  ) {
    return _gsl_linalg_balance_accum(
      A,
      D,
    );
  }

  late final _gsl_linalg_balance_accumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_balance_accum');
  late final _gsl_linalg_balance_accum =
      _gsl_linalg_balance_accumPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_balance_columns(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<gsl_vector> D,
  ) {
    return _gsl_linalg_balance_columns(
      A,
      D,
    );
  }

  late final _gsl_linalg_balance_columnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_balance_columns');
  late final _gsl_linalg_balance_columns =
      _gsl_linalg_balance_columnsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_tri_rcond(
    int Uplo,
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_tri_rcond(
      Uplo,
      A,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_tri_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_tri_rcond');
  late final _gsl_linalg_tri_rcond = _gsl_linalg_tri_rcondPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_tri_upper_rcond(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_tri_upper_rcond(
      A,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_tri_upper_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_tri_upper_rcond');
  late final _gsl_linalg_tri_upper_rcond =
      _gsl_linalg_tri_upper_rcondPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_tri_lower_rcond(
    ffi.Pointer<gsl_matrix> A,
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_tri_lower_rcond(
      A,
      rcond,
      work,
    );
  }

  late final _gsl_linalg_tri_lower_rcondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_tri_lower_rcond');
  late final _gsl_linalg_tri_lower_rcond =
      _gsl_linalg_tri_lower_rcondPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_invnorm1(
    int N,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Int32, ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>)>>
        Ainvx,
    ffi.Pointer<ffi.Void> params,
    ffi.Pointer<ffi.Double> Ainvnorm,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_linalg_invnorm1(
      N,
      Ainvx,
      params,
      Ainvnorm,
      work,
    );
  }

  late final _gsl_linalg_invnorm1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              size_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int32 Function(ffi.Int32, ffi.Pointer<gsl_vector>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_linalg_invnorm1');
  late final _gsl_linalg_invnorm1 = _gsl_linalg_invnorm1Ptr.asFunction<
      int Function(
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Int32, ffi.Pointer<gsl_vector>,
                      ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_linalg_tri_upper_invert(
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_tri_upper_invert(
      T,
    );
  }

  late final _gsl_linalg_tri_upper_invertPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_tri_upper_invert');
  late final _gsl_linalg_tri_upper_invert = _gsl_linalg_tri_upper_invertPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_tri_lower_invert(
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_tri_lower_invert(
      T,
    );
  }

  late final _gsl_linalg_tri_lower_invertPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_tri_lower_invert');
  late final _gsl_linalg_tri_lower_invert = _gsl_linalg_tri_lower_invertPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_tri_upper_unit_invert(
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_tri_upper_unit_invert(
      T,
    );
  }

  late final _gsl_linalg_tri_upper_unit_invertPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_tri_upper_unit_invert');
  late final _gsl_linalg_tri_upper_unit_invert =
      _gsl_linalg_tri_upper_unit_invertPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_tri_lower_unit_invert(
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_tri_lower_unit_invert(
      T,
    );
  }

  late final _gsl_linalg_tri_lower_unit_invertPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_tri_lower_unit_invert');
  late final _gsl_linalg_tri_lower_unit_invert =
      _gsl_linalg_tri_lower_unit_invertPtr
          .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_tri_invert(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix> T,
  ) {
    return _gsl_linalg_tri_invert(
      Uplo,
      Diag,
      T,
    );
  }

  late final _gsl_linalg_tri_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<gsl_matrix>)>>('gsl_linalg_tri_invert');
  late final _gsl_linalg_tri_invert = _gsl_linalg_tri_invertPtr
      .asFunction<int Function(int, int, ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_complex_tri_invert(
    int Uplo,
    int Diag,
    ffi.Pointer<gsl_matrix_complex> T,
  ) {
    return _gsl_linalg_complex_tri_invert(
      Uplo,
      Diag,
      T,
    );
  }

  late final _gsl_linalg_complex_tri_invertPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32, ffi.Int32, ffi.Pointer<gsl_matrix_complex>)>>(
      'gsl_linalg_complex_tri_invert');
  late final _gsl_linalg_complex_tri_invert = _gsl_linalg_complex_tri_invertPtr
      .asFunction<int Function(int, int, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_tri_LTL(
    ffi.Pointer<gsl_matrix> L,
  ) {
    return _gsl_linalg_tri_LTL(
      L,
    );
  }

  late final _gsl_linalg_tri_LTLPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_tri_LTL');
  late final _gsl_linalg_tri_LTL = _gsl_linalg_tri_LTLPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_tri_UL(
    ffi.Pointer<gsl_matrix> LU,
  ) {
    return _gsl_linalg_tri_UL(
      LU,
    );
  }

  late final _gsl_linalg_tri_ULPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_matrix>)>>(
          'gsl_linalg_tri_UL');
  late final _gsl_linalg_tri_UL =
      _gsl_linalg_tri_ULPtr.asFunction<int Function(ffi.Pointer<gsl_matrix>)>();

  int gsl_linalg_complex_tri_LHL(
    ffi.Pointer<gsl_matrix_complex> L,
  ) {
    return _gsl_linalg_complex_tri_LHL(
      L,
    );
  }

  late final _gsl_linalg_complex_tri_LHLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_linalg_complex_tri_LHL');
  late final _gsl_linalg_complex_tri_LHL = _gsl_linalg_complex_tri_LHLPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_linalg_complex_tri_UL(
    ffi.Pointer<gsl_matrix_complex> LU,
  ) {
    return _gsl_linalg_complex_tri_UL(
      LU,
    );
  }

  late final _gsl_linalg_complex_tri_ULPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_linalg_complex_tri_UL');
  late final _gsl_linalg_complex_tri_UL = _gsl_linalg_complex_tri_ULPtr
      .asFunction<int Function(ffi.Pointer<gsl_matrix_complex>)>();

  void gsl_linalg_givens(
    double a,
    double b,
    ffi.Pointer<ffi.Double> c,
    ffi.Pointer<ffi.Double> s,
  ) {
    return _gsl_linalg_givens(
      a,
      b,
      c,
      s,
    );
  }

  late final _gsl_linalg_givensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Double, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_linalg_givens');
  late final _gsl_linalg_givens = _gsl_linalg_givensPtr.asFunction<
      void Function(
          double, double, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void gsl_linalg_givens_gv(
    ffi.Pointer<gsl_vector> v,
    int i,
    int j,
    double c,
    double s,
  ) {
    return _gsl_linalg_givens_gv(
      v,
      i,
      j,
      c,
      s,
    );
  }

  late final _gsl_linalg_givens_gvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector>, size_t, size_t, ffi.Double,
              ffi.Double)>>('gsl_linalg_givens_gv');
  late final _gsl_linalg_givens_gv = _gsl_linalg_givens_gvPtr.asFunction<
      void Function(ffi.Pointer<gsl_vector>, int, int, double, double)>();

  late final ffi.Pointer<ffi.Pointer<gsl_splinalg_itersolve_type>>
      _gsl_splinalg_itersolve_gmres =
      _lookup<ffi.Pointer<gsl_splinalg_itersolve_type>>(
          'gsl_splinalg_itersolve_gmres');

  ffi.Pointer<gsl_splinalg_itersolve_type> get gsl_splinalg_itersolve_gmres =>
      _gsl_splinalg_itersolve_gmres.value;

  set gsl_splinalg_itersolve_gmres(
          ffi.Pointer<gsl_splinalg_itersolve_type> value) =>
      _gsl_splinalg_itersolve_gmres.value = value;

  ffi.Pointer<gsl_splinalg_itersolve> gsl_splinalg_itersolve_alloc(
    ffi.Pointer<gsl_splinalg_itersolve_type> T,
    int n,
    int m,
  ) {
    return _gsl_splinalg_itersolve_alloc(
      T,
      n,
      m,
    );
  }

  late final _gsl_splinalg_itersolve_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_splinalg_itersolve> Function(
              ffi.Pointer<gsl_splinalg_itersolve_type>,
              size_t,
              size_t)>>('gsl_splinalg_itersolve_alloc');
  late final _gsl_splinalg_itersolve_alloc =
      _gsl_splinalg_itersolve_allocPtr.asFunction<
          ffi.Pointer<gsl_splinalg_itersolve> Function(
              ffi.Pointer<gsl_splinalg_itersolve_type>, int, int)>();

  void gsl_splinalg_itersolve_free(
    ffi.Pointer<gsl_splinalg_itersolve> w,
  ) {
    return _gsl_splinalg_itersolve_free(
      w,
    );
  }

  late final _gsl_splinalg_itersolve_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_splinalg_itersolve>)>>(
      'gsl_splinalg_itersolve_free');
  late final _gsl_splinalg_itersolve_free = _gsl_splinalg_itersolve_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_splinalg_itersolve>)>();

  ffi.Pointer<ffi.Int8> gsl_splinalg_itersolve_name(
    ffi.Pointer<gsl_splinalg_itersolve> w,
  ) {
    return _gsl_splinalg_itersolve_name(
      w,
    );
  }

  late final _gsl_splinalg_itersolve_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_splinalg_itersolve>)>>(
      'gsl_splinalg_itersolve_name');
  late final _gsl_splinalg_itersolve_name =
      _gsl_splinalg_itersolve_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_splinalg_itersolve>)>();

  int gsl_splinalg_itersolve_iterate(
    ffi.Pointer<gsl_spmatrix> A,
    ffi.Pointer<gsl_vector> b,
    double tol,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_splinalg_itersolve> w,
  ) {
    return _gsl_splinalg_itersolve_iterate(
      A,
      b,
      tol,
      x,
      w,
    );
  }

  late final _gsl_splinalg_itersolve_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_spmatrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Double,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_splinalg_itersolve>)>>(
      'gsl_splinalg_itersolve_iterate');
  late final _gsl_splinalg_itersolve_iterate =
      _gsl_splinalg_itersolve_iteratePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_vector>,
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_splinalg_itersolve>)>();

  double gsl_splinalg_itersolve_normr(
    ffi.Pointer<gsl_splinalg_itersolve> w,
  ) {
    return _gsl_splinalg_itersolve_normr(
      w,
    );
  }

  late final _gsl_splinalg_itersolve_normrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<gsl_splinalg_itersolve>)>>(
      'gsl_splinalg_itersolve_normr');
  late final _gsl_splinalg_itersolve_normr = _gsl_splinalg_itersolve_normrPtr
      .asFunction<double Function(ffi.Pointer<gsl_splinalg_itersolve>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>> _gsl_odeiv_step_rk2 =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_rk2');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_rk2 =>
      _gsl_odeiv_step_rk2.value;

  set gsl_odeiv_step_rk2(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_rk2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>> _gsl_odeiv_step_rk4 =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_rk4');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_rk4 =>
      _gsl_odeiv_step_rk4.value;

  set gsl_odeiv_step_rk4(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_rk4.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>>
      _gsl_odeiv_step_rkf45 =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_rkf45');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_rkf45 =>
      _gsl_odeiv_step_rkf45.value;

  set gsl_odeiv_step_rkf45(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_rkf45.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>>
      _gsl_odeiv_step_rkck =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_rkck');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_rkck =>
      _gsl_odeiv_step_rkck.value;

  set gsl_odeiv_step_rkck(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_rkck.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>>
      _gsl_odeiv_step_rk8pd =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_rk8pd');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_rk8pd =>
      _gsl_odeiv_step_rk8pd.value;

  set gsl_odeiv_step_rk8pd(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_rk8pd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>>
      _gsl_odeiv_step_rk2imp =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_rk2imp');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_rk2imp =>
      _gsl_odeiv_step_rk2imp.value;

  set gsl_odeiv_step_rk2imp(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_rk2imp.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>>
      _gsl_odeiv_step_rk2simp =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_rk2simp');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_rk2simp =>
      _gsl_odeiv_step_rk2simp.value;

  set gsl_odeiv_step_rk2simp(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_rk2simp.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>>
      _gsl_odeiv_step_rk4imp =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_rk4imp');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_rk4imp =>
      _gsl_odeiv_step_rk4imp.value;

  set gsl_odeiv_step_rk4imp(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_rk4imp.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>>
      _gsl_odeiv_step_bsimp =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_bsimp');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_bsimp =>
      _gsl_odeiv_step_bsimp.value;

  set gsl_odeiv_step_bsimp(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_bsimp.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>>
      _gsl_odeiv_step_gear1 =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_gear1');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_gear1 =>
      _gsl_odeiv_step_gear1.value;

  set gsl_odeiv_step_gear1(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_gear1.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv_step_type>>
      _gsl_odeiv_step_gear2 =
      _lookup<ffi.Pointer<gsl_odeiv_step_type>>('gsl_odeiv_step_gear2');

  ffi.Pointer<gsl_odeiv_step_type> get gsl_odeiv_step_gear2 =>
      _gsl_odeiv_step_gear2.value;

  set gsl_odeiv_step_gear2(ffi.Pointer<gsl_odeiv_step_type> value) =>
      _gsl_odeiv_step_gear2.value = value;

  ffi.Pointer<gsl_odeiv_step> gsl_odeiv_step_alloc(
    ffi.Pointer<gsl_odeiv_step_type> T,
    int dim,
  ) {
    return _gsl_odeiv_step_alloc(
      T,
      dim,
    );
  }

  late final _gsl_odeiv_step_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv_step> Function(ffi.Pointer<gsl_odeiv_step_type>,
              size_t)>>('gsl_odeiv_step_alloc');
  late final _gsl_odeiv_step_alloc = _gsl_odeiv_step_allocPtr.asFunction<
      ffi.Pointer<gsl_odeiv_step> Function(
          ffi.Pointer<gsl_odeiv_step_type>, int)>();

  int gsl_odeiv_step_reset(
    ffi.Pointer<gsl_odeiv_step> s,
  ) {
    return _gsl_odeiv_step_reset(
      s,
    );
  }

  late final _gsl_odeiv_step_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_odeiv_step>)>>(
      'gsl_odeiv_step_reset');
  late final _gsl_odeiv_step_reset = _gsl_odeiv_step_resetPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv_step>)>();

  void gsl_odeiv_step_free(
    ffi.Pointer<gsl_odeiv_step> s,
  ) {
    return _gsl_odeiv_step_free(
      s,
    );
  }

  late final _gsl_odeiv_step_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_odeiv_step>)>>(
      'gsl_odeiv_step_free');
  late final _gsl_odeiv_step_free = _gsl_odeiv_step_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_odeiv_step>)>();

  ffi.Pointer<ffi.Int8> gsl_odeiv_step_name(
    ffi.Pointer<gsl_odeiv_step> s,
  ) {
    return _gsl_odeiv_step_name(
      s,
    );
  }

  late final _gsl_odeiv_step_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_odeiv_step>)>>('gsl_odeiv_step_name');
  late final _gsl_odeiv_step_name = _gsl_odeiv_step_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_odeiv_step>)>();

  int gsl_odeiv_step_order(
    ffi.Pointer<gsl_odeiv_step> s,
  ) {
    return _gsl_odeiv_step_order(
      s,
    );
  }

  late final _gsl_odeiv_step_orderPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gsl_odeiv_step>)>>(
      'gsl_odeiv_step_order');
  late final _gsl_odeiv_step_order = _gsl_odeiv_step_orderPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv_step>)>();

  int gsl_odeiv_step_apply(
    ffi.Pointer<gsl_odeiv_step> s,
    double t,
    double h,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> yerr,
    ffi.Pointer<ffi.Double> dydt_in,
    ffi.Pointer<ffi.Double> dydt_out,
    ffi.Pointer<gsl_odeiv_system> dydt,
  ) {
    return _gsl_odeiv_step_apply(
      s,
      t,
      h,
      y,
      yerr,
      dydt_in,
      dydt_out,
      dydt,
    );
  }

  late final _gsl_odeiv_step_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv_step>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_odeiv_system>)>>('gsl_odeiv_step_apply');
  late final _gsl_odeiv_step_apply = _gsl_odeiv_step_applyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_odeiv_step>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_odeiv_system>)>();

  ffi.Pointer<gsl_odeiv_control> gsl_odeiv_control_alloc(
    ffi.Pointer<gsl_odeiv_control_type> T,
  ) {
    return _gsl_odeiv_control_alloc(
      T,
    );
  }

  late final _gsl_odeiv_control_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv_control> Function(
              ffi.Pointer<gsl_odeiv_control_type>)>>('gsl_odeiv_control_alloc');
  late final _gsl_odeiv_control_alloc = _gsl_odeiv_control_allocPtr.asFunction<
      ffi.Pointer<gsl_odeiv_control> Function(
          ffi.Pointer<gsl_odeiv_control_type>)>();

  int gsl_odeiv_control_init(
    ffi.Pointer<gsl_odeiv_control> c,
    double eps_abs,
    double eps_rel,
    double a_y,
    double a_dydt,
  ) {
    return _gsl_odeiv_control_init(
      c,
      eps_abs,
      eps_rel,
      a_y,
      a_dydt,
    );
  }

  late final _gsl_odeiv_control_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_odeiv_control>, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_odeiv_control_init');
  late final _gsl_odeiv_control_init = _gsl_odeiv_control_initPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_odeiv_control>, double, double, double, double)>();

  void gsl_odeiv_control_free(
    ffi.Pointer<gsl_odeiv_control> c,
  ) {
    return _gsl_odeiv_control_free(
      c,
    );
  }

  late final _gsl_odeiv_control_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_odeiv_control>)>>('gsl_odeiv_control_free');
  late final _gsl_odeiv_control_free = _gsl_odeiv_control_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_odeiv_control>)>();

  int gsl_odeiv_control_hadjust(
    ffi.Pointer<gsl_odeiv_control> c,
    ffi.Pointer<gsl_odeiv_step> s,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> yerr,
    ffi.Pointer<ffi.Double> dydt,
    ffi.Pointer<ffi.Double> h,
  ) {
    return _gsl_odeiv_control_hadjust(
      c,
      s,
      y,
      yerr,
      dydt,
      h,
    );
  }

  late final _gsl_odeiv_control_hadjustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv_control>,
              ffi.Pointer<gsl_odeiv_step>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_odeiv_control_hadjust');
  late final _gsl_odeiv_control_hadjust =
      _gsl_odeiv_control_hadjustPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_odeiv_control>,
              ffi.Pointer<gsl_odeiv_step>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<ffi.Int8> gsl_odeiv_control_name(
    ffi.Pointer<gsl_odeiv_control> c,
  ) {
    return _gsl_odeiv_control_name(
      c,
    );
  }

  late final _gsl_odeiv_control_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_odeiv_control>)>>('gsl_odeiv_control_name');
  late final _gsl_odeiv_control_name = _gsl_odeiv_control_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_odeiv_control>)>();

  ffi.Pointer<gsl_odeiv_control> gsl_odeiv_control_standard_new(
    double eps_abs,
    double eps_rel,
    double a_y,
    double a_dydt,
  ) {
    return _gsl_odeiv_control_standard_new(
      eps_abs,
      eps_rel,
      a_y,
      a_dydt,
    );
  }

  late final _gsl_odeiv_control_standard_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv_control> Function(ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('gsl_odeiv_control_standard_new');
  late final _gsl_odeiv_control_standard_new =
      _gsl_odeiv_control_standard_newPtr.asFunction<
          ffi.Pointer<gsl_odeiv_control> Function(
              double, double, double, double)>();

  ffi.Pointer<gsl_odeiv_control> gsl_odeiv_control_y_new(
    double eps_abs,
    double eps_rel,
  ) {
    return _gsl_odeiv_control_y_new(
      eps_abs,
      eps_rel,
    );
  }

  late final _gsl_odeiv_control_y_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv_control> Function(
              ffi.Double, ffi.Double)>>('gsl_odeiv_control_y_new');
  late final _gsl_odeiv_control_y_new = _gsl_odeiv_control_y_newPtr
      .asFunction<ffi.Pointer<gsl_odeiv_control> Function(double, double)>();

  ffi.Pointer<gsl_odeiv_control> gsl_odeiv_control_yp_new(
    double eps_abs,
    double eps_rel,
  ) {
    return _gsl_odeiv_control_yp_new(
      eps_abs,
      eps_rel,
    );
  }

  late final _gsl_odeiv_control_yp_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv_control> Function(
              ffi.Double, ffi.Double)>>('gsl_odeiv_control_yp_new');
  late final _gsl_odeiv_control_yp_new = _gsl_odeiv_control_yp_newPtr
      .asFunction<ffi.Pointer<gsl_odeiv_control> Function(double, double)>();

  ffi.Pointer<gsl_odeiv_control> gsl_odeiv_control_scaled_new(
    double eps_abs,
    double eps_rel,
    double a_y,
    double a_dydt,
    ffi.Pointer<ffi.Double> scale_abs,
    int dim,
  ) {
    return _gsl_odeiv_control_scaled_new(
      eps_abs,
      eps_rel,
      a_y,
      a_dydt,
      scale_abs,
      dim,
    );
  }

  late final _gsl_odeiv_control_scaled_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv_control> Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              size_t)>>('gsl_odeiv_control_scaled_new');
  late final _gsl_odeiv_control_scaled_new =
      _gsl_odeiv_control_scaled_newPtr.asFunction<
          ffi.Pointer<gsl_odeiv_control> Function(
              double, double, double, double, ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<gsl_odeiv_evolve> gsl_odeiv_evolve_alloc(
    int dim,
  ) {
    return _gsl_odeiv_evolve_alloc(
      dim,
    );
  }

  late final _gsl_odeiv_evolve_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_odeiv_evolve> Function(size_t)>>(
      'gsl_odeiv_evolve_alloc');
  late final _gsl_odeiv_evolve_alloc = _gsl_odeiv_evolve_allocPtr
      .asFunction<ffi.Pointer<gsl_odeiv_evolve> Function(int)>();

  int gsl_odeiv_evolve_apply(
    ffi.Pointer<gsl_odeiv_evolve> e,
    ffi.Pointer<gsl_odeiv_control> con,
    ffi.Pointer<gsl_odeiv_step> step,
    ffi.Pointer<gsl_odeiv_system> dydt,
    ffi.Pointer<ffi.Double> t,
    double t1,
    ffi.Pointer<ffi.Double> h,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_odeiv_evolve_apply(
      e,
      con,
      step,
      dydt,
      t,
      t1,
      h,
      y,
    );
  }

  late final _gsl_odeiv_evolve_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv_evolve>,
              ffi.Pointer<gsl_odeiv_control>,
              ffi.Pointer<gsl_odeiv_step>,
              ffi.Pointer<gsl_odeiv_system>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_odeiv_evolve_apply');
  late final _gsl_odeiv_evolve_apply = _gsl_odeiv_evolve_applyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_odeiv_evolve>,
          ffi.Pointer<gsl_odeiv_control>,
          ffi.Pointer<gsl_odeiv_step>,
          ffi.Pointer<gsl_odeiv_system>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_odeiv_evolve_reset(
    ffi.Pointer<gsl_odeiv_evolve> e,
  ) {
    return _gsl_odeiv_evolve_reset(
      e,
    );
  }

  late final _gsl_odeiv_evolve_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv_evolve>)>>('gsl_odeiv_evolve_reset');
  late final _gsl_odeiv_evolve_reset = _gsl_odeiv_evolve_resetPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv_evolve>)>();

  void gsl_odeiv_evolve_free(
    ffi.Pointer<gsl_odeiv_evolve> e,
  ) {
    return _gsl_odeiv_evolve_free(
      e,
    );
  }

  late final _gsl_odeiv_evolve_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_odeiv_evolve>)>>(
      'gsl_odeiv_evolve_free');
  late final _gsl_odeiv_evolve_free = _gsl_odeiv_evolve_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_odeiv_evolve>)>();

  void gsl_sort_vector_long_double(
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_sort_vector_long_double(
      v,
    );
  }

  late final _gsl_sort_vector_long_doublePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_sort_vector_long_double');
  late final _gsl_sort_vector_long_double = _gsl_sort_vector_long_doublePtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_long_double>)>();

  void gsl_sort_vector2_long_double(
    ffi.Pointer<gsl_vector_long_double> v1,
    ffi.Pointer<gsl_vector_long_double> v2,
  ) {
    return _gsl_sort_vector2_long_double(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_long_doublePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_vector_long_double>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_sort_vector2_long_double');
  late final _gsl_sort_vector2_long_double =
      _gsl_sort_vector2_long_doublePtr.asFunction<
          void Function(ffi.Pointer<gsl_vector_long_double>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_sort_vector_long_double_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_sort_vector_long_double_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_long_double_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_sort_vector_long_double_index');
  late final _gsl_sort_vector_long_double_index =
      _gsl_sort_vector_long_double_indexPtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_sort_vector_long_double_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_sort_vector_long_double_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_long_double_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<size_t>, size_t,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_sort_vector_long_double_smallest_index');
  late final _gsl_sort_vector_long_double_smallest_index =
      _gsl_sort_vector_long_double_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_sort_vector_long_double_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_sort_vector_long_double_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_long_double_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<size_t>, size_t,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_sort_vector_long_double_largest_index');
  late final _gsl_sort_vector_long_double_largest_index =
      _gsl_sort_vector_long_double_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_long_double>)>();

  void gsl_sort_vector(
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_sort_vector(
      v,
    );
  }

  late final _gsl_sort_vectorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector>)>>(
          'gsl_sort_vector');
  late final _gsl_sort_vector =
      _gsl_sort_vectorPtr.asFunction<void Function(ffi.Pointer<gsl_vector>)>();

  void gsl_sort_vector2(
    ffi.Pointer<gsl_vector> v1,
    ffi.Pointer<gsl_vector> v2,
  ) {
    return _gsl_sort_vector2(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_sort_vector2');
  late final _gsl_sort_vector2 = _gsl_sort_vector2Ptr.asFunction<
      void Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_sort_vector_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_sort_vector_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_sort_vector_index');
  late final _gsl_sort_vector_index = _gsl_sort_vector_indexPtr.asFunction<
      int Function(ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector>)>();

  int gsl_sort_vector_smallest(
    ffi.Pointer<ffi.Double> dest,
    int k,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_sort_vector_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<gsl_vector>)>>('gsl_sort_vector_smallest');
  late final _gsl_sort_vector_smallest =
      _gsl_sort_vector_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>, int, ffi.Pointer<gsl_vector>)>();

  int gsl_sort_vector_largest(
    ffi.Pointer<ffi.Double> dest,
    int k,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_sort_vector_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<gsl_vector>)>>('gsl_sort_vector_largest');
  late final _gsl_sort_vector_largest = _gsl_sort_vector_largestPtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<gsl_vector>)>();

  int gsl_sort_vector_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_sort_vector_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, size_t,
              ffi.Pointer<gsl_vector>)>>('gsl_sort_vector_smallest_index');
  late final _gsl_sort_vector_smallest_index =
      _gsl_sort_vector_smallest_indexPtr.asFunction<
          int Function(ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector>)>();

  int gsl_sort_vector_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_sort_vector_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, size_t,
              ffi.Pointer<gsl_vector>)>>('gsl_sort_vector_largest_index');
  late final _gsl_sort_vector_largest_index =
      _gsl_sort_vector_largest_indexPtr.asFunction<
          int Function(ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector>)>();

  void gsl_sort_vector_float(
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_sort_vector_float(
      v,
    );
  }

  late final _gsl_sort_vector_floatPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_float>)>>(
      'gsl_sort_vector_float');
  late final _gsl_sort_vector_float = _gsl_sort_vector_floatPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_float>)>();

  void gsl_sort_vector2_float(
    ffi.Pointer<gsl_vector_float> v1,
    ffi.Pointer<gsl_vector_float> v2,
  ) {
    return _gsl_sort_vector2_float(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_float>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_sort_vector2_float');
  late final _gsl_sort_vector2_float = _gsl_sort_vector2_floatPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector_float>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_sort_vector_float_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_sort_vector_float_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_float_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_sort_vector_float_index');
  late final _gsl_sort_vector_float_index =
      _gsl_sort_vector_float_indexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_sort_vector_float_smallest(
    ffi.Pointer<ffi.Float> dest,
    int k,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_sort_vector_float_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_float_smallestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Float>, size_t,
                  ffi.Pointer<gsl_vector_float>)>>(
      'gsl_sort_vector_float_smallest');
  late final _gsl_sort_vector_float_smallest =
      _gsl_sort_vector_float_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>, int, ffi.Pointer<gsl_vector_float>)>();

  int gsl_sort_vector_float_largest(
    ffi.Pointer<ffi.Float> dest,
    int k,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_sort_vector_float_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_float_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, size_t,
              ffi.Pointer<gsl_vector_float>)>>('gsl_sort_vector_float_largest');
  late final _gsl_sort_vector_float_largest =
      _gsl_sort_vector_float_largestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>, int, ffi.Pointer<gsl_vector_float>)>();

  int gsl_sort_vector_float_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_sort_vector_float_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_float_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_float>)>>(
      'gsl_sort_vector_float_smallest_index');
  late final _gsl_sort_vector_float_smallest_index =
      _gsl_sort_vector_float_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_float>)>();

  int gsl_sort_vector_float_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_sort_vector_float_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_float_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_float>)>>(
      'gsl_sort_vector_float_largest_index');
  late final _gsl_sort_vector_float_largest_index =
      _gsl_sort_vector_float_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_float>)>();

  void gsl_sort_vector_ulong(
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_sort_vector_ulong(
      v,
    );
  }

  late final _gsl_sort_vector_ulongPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_sort_vector_ulong');
  late final _gsl_sort_vector_ulong = _gsl_sort_vector_ulongPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ulong>)>();

  void gsl_sort_vector2_ulong(
    ffi.Pointer<gsl_vector_ulong> v1,
    ffi.Pointer<gsl_vector_ulong> v2,
  ) {
    return _gsl_sort_vector2_ulong(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_ulong>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_sort_vector2_ulong');
  late final _gsl_sort_vector2_ulong = _gsl_sort_vector2_ulongPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector_ulong>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_sort_vector_ulong_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_sort_vector_ulong_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_ulong_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_sort_vector_ulong_index');
  late final _gsl_sort_vector_ulong_index =
      _gsl_sort_vector_ulong_indexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_sort_vector_ulong_smallest(
    ffi.Pointer<ffi.Uint64> dest,
    int k,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_sort_vector_ulong_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_ulong_smallestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, size_t,
                  ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_sort_vector_ulong_smallest');
  late final _gsl_sort_vector_ulong_smallest =
      _gsl_sort_vector_ulong_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_sort_vector_ulong_largest(
    ffi.Pointer<ffi.Uint64> dest,
    int k,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_sort_vector_ulong_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_ulong_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint64>, size_t,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_sort_vector_ulong_largest');
  late final _gsl_sort_vector_ulong_largest =
      _gsl_sort_vector_ulong_largestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_sort_vector_ulong_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_sort_vector_ulong_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_ulong_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_sort_vector_ulong_smallest_index');
  late final _gsl_sort_vector_ulong_smallest_index =
      _gsl_sort_vector_ulong_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_sort_vector_ulong_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_sort_vector_ulong_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_ulong_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_sort_vector_ulong_largest_index');
  late final _gsl_sort_vector_ulong_largest_index =
      _gsl_sort_vector_ulong_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_ulong>)>();

  void gsl_sort_vector_long(
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_sort_vector_long(
      v,
    );
  }

  late final _gsl_sort_vector_longPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_long>)>>(
      'gsl_sort_vector_long');
  late final _gsl_sort_vector_long = _gsl_sort_vector_longPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_long>)>();

  void gsl_sort_vector2_long(
    ffi.Pointer<gsl_vector_long> v1,
    ffi.Pointer<gsl_vector_long> v2,
  ) {
    return _gsl_sort_vector2_long(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_long>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_sort_vector2_long');
  late final _gsl_sort_vector2_long = _gsl_sort_vector2_longPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector_long>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_sort_vector_long_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_sort_vector_long_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_long_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_sort_vector_long_index');
  late final _gsl_sort_vector_long_index =
      _gsl_sort_vector_long_indexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_sort_vector_long_smallest(
    ffi.Pointer<ffi.Int64> dest,
    int k,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_sort_vector_long_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_long_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int64>, size_t,
              ffi.Pointer<gsl_vector_long>)>>('gsl_sort_vector_long_smallest');
  late final _gsl_sort_vector_long_smallest =
      _gsl_sort_vector_long_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int64>, int, ffi.Pointer<gsl_vector_long>)>();

  int gsl_sort_vector_long_largest(
    ffi.Pointer<ffi.Int64> dest,
    int k,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_sort_vector_long_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_long_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int64>, size_t,
              ffi.Pointer<gsl_vector_long>)>>('gsl_sort_vector_long_largest');
  late final _gsl_sort_vector_long_largest =
      _gsl_sort_vector_long_largestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int64>, int, ffi.Pointer<gsl_vector_long>)>();

  int gsl_sort_vector_long_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_sort_vector_long_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_long_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_long>)>>(
      'gsl_sort_vector_long_smallest_index');
  late final _gsl_sort_vector_long_smallest_index =
      _gsl_sort_vector_long_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_long>)>();

  int gsl_sort_vector_long_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_sort_vector_long_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_long_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_long>)>>(
      'gsl_sort_vector_long_largest_index');
  late final _gsl_sort_vector_long_largest_index =
      _gsl_sort_vector_long_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_long>)>();

  void gsl_sort_vector_uint(
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_sort_vector_uint(
      v,
    );
  }

  late final _gsl_sort_vector_uintPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_sort_vector_uint');
  late final _gsl_sort_vector_uint = _gsl_sort_vector_uintPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uint>)>();

  void gsl_sort_vector2_uint(
    ffi.Pointer<gsl_vector_uint> v1,
    ffi.Pointer<gsl_vector_uint> v2,
  ) {
    return _gsl_sort_vector2_uint(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_uint>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_sort_vector2_uint');
  late final _gsl_sort_vector2_uint = _gsl_sort_vector2_uintPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector_uint>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_sort_vector_uint_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_sort_vector_uint_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_uint_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_sort_vector_uint_index');
  late final _gsl_sort_vector_uint_index =
      _gsl_sort_vector_uint_indexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_sort_vector_uint_smallest(
    ffi.Pointer<ffi.Uint32> dest,
    int k,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_sort_vector_uint_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_uint_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, size_t,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_sort_vector_uint_smallest');
  late final _gsl_sort_vector_uint_smallest =
      _gsl_sort_vector_uint_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_sort_vector_uint_largest(
    ffi.Pointer<ffi.Uint32> dest,
    int k,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_sort_vector_uint_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_uint_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint32>, size_t,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_sort_vector_uint_largest');
  late final _gsl_sort_vector_uint_largest =
      _gsl_sort_vector_uint_largestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_sort_vector_uint_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_sort_vector_uint_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_uint_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_sort_vector_uint_smallest_index');
  late final _gsl_sort_vector_uint_smallest_index =
      _gsl_sort_vector_uint_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_sort_vector_uint_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_sort_vector_uint_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_uint_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_sort_vector_uint_largest_index');
  late final _gsl_sort_vector_uint_largest_index =
      _gsl_sort_vector_uint_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_uint>)>();

  void gsl_sort_vector_int(
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_sort_vector_int(
      v,
    );
  }

  late final _gsl_sort_vector_intPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_int>)>>(
      'gsl_sort_vector_int');
  late final _gsl_sort_vector_int = _gsl_sort_vector_intPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_int>)>();

  void gsl_sort_vector2_int(
    ffi.Pointer<gsl_vector_int> v1,
    ffi.Pointer<gsl_vector_int> v2,
  ) {
    return _gsl_sort_vector2_int(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_int>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_sort_vector2_int');
  late final _gsl_sort_vector2_int = _gsl_sort_vector2_intPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector_int>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_sort_vector_int_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_sort_vector_int_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_int_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_sort_vector_int_index');
  late final _gsl_sort_vector_int_index =
      _gsl_sort_vector_int_indexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_sort_vector_int_smallest(
    ffi.Pointer<ffi.Int32> dest,
    int k,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_sort_vector_int_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_int_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, size_t,
              ffi.Pointer<gsl_vector_int>)>>('gsl_sort_vector_int_smallest');
  late final _gsl_sort_vector_int_smallest =
      _gsl_sort_vector_int_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int32>, int, ffi.Pointer<gsl_vector_int>)>();

  int gsl_sort_vector_int_largest(
    ffi.Pointer<ffi.Int32> dest,
    int k,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_sort_vector_int_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_int_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, size_t,
              ffi.Pointer<gsl_vector_int>)>>('gsl_sort_vector_int_largest');
  late final _gsl_sort_vector_int_largest =
      _gsl_sort_vector_int_largestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int32>, int, ffi.Pointer<gsl_vector_int>)>();

  int gsl_sort_vector_int_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_sort_vector_int_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_int_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_int>)>>(
      'gsl_sort_vector_int_smallest_index');
  late final _gsl_sort_vector_int_smallest_index =
      _gsl_sort_vector_int_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_int>)>();

  int gsl_sort_vector_int_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_sort_vector_int_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_int_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_int>)>>(
      'gsl_sort_vector_int_largest_index');
  late final _gsl_sort_vector_int_largest_index =
      _gsl_sort_vector_int_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_int>)>();

  void gsl_sort_vector_ushort(
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_sort_vector_ushort(
      v,
    );
  }

  late final _gsl_sort_vector_ushortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_sort_vector_ushort');
  late final _gsl_sort_vector_ushort = _gsl_sort_vector_ushortPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_ushort>)>();

  void gsl_sort_vector2_ushort(
    ffi.Pointer<gsl_vector_ushort> v1,
    ffi.Pointer<gsl_vector_ushort> v2,
  ) {
    return _gsl_sort_vector2_ushort(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_ushortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_ushort>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_sort_vector2_ushort');
  late final _gsl_sort_vector2_ushort = _gsl_sort_vector2_ushortPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector_ushort>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_sort_vector_ushort_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_sort_vector_ushort_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_ushort_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_sort_vector_ushort_index');
  late final _gsl_sort_vector_ushort_index =
      _gsl_sort_vector_ushort_indexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_sort_vector_ushort_smallest(
    ffi.Pointer<ffi.Uint16> dest,
    int k,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_sort_vector_ushort_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_ushort_smallestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, size_t,
                  ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_sort_vector_ushort_smallest');
  late final _gsl_sort_vector_ushort_smallest =
      _gsl_sort_vector_ushort_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_sort_vector_ushort_largest(
    ffi.Pointer<ffi.Uint16> dest,
    int k,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_sort_vector_ushort_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_ushort_largestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, size_t,
                  ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_sort_vector_ushort_largest');
  late final _gsl_sort_vector_ushort_largest =
      _gsl_sort_vector_ushort_largestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_sort_vector_ushort_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_sort_vector_ushort_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_ushort_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<size_t>, size_t,
                  ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_sort_vector_ushort_smallest_index');
  late final _gsl_sort_vector_ushort_smallest_index =
      _gsl_sort_vector_ushort_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_sort_vector_ushort_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_sort_vector_ushort_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_ushort_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<size_t>, size_t,
                  ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_sort_vector_ushort_largest_index');
  late final _gsl_sort_vector_ushort_largest_index =
      _gsl_sort_vector_ushort_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_ushort>)>();

  void gsl_sort_vector_short(
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_sort_vector_short(
      v,
    );
  }

  late final _gsl_sort_vector_shortPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_short>)>>(
      'gsl_sort_vector_short');
  late final _gsl_sort_vector_short = _gsl_sort_vector_shortPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_short>)>();

  void gsl_sort_vector2_short(
    ffi.Pointer<gsl_vector_short> v1,
    ffi.Pointer<gsl_vector_short> v2,
  ) {
    return _gsl_sort_vector2_short(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_shortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_short>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_sort_vector2_short');
  late final _gsl_sort_vector2_short = _gsl_sort_vector2_shortPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector_short>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_sort_vector_short_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_sort_vector_short_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_short_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_sort_vector_short_index');
  late final _gsl_sort_vector_short_index =
      _gsl_sort_vector_short_indexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_sort_vector_short_smallest(
    ffi.Pointer<ffi.Int16> dest,
    int k,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_sort_vector_short_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_short_smallestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Int16>, size_t,
                  ffi.Pointer<gsl_vector_short>)>>(
      'gsl_sort_vector_short_smallest');
  late final _gsl_sort_vector_short_smallest =
      _gsl_sort_vector_short_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int16>, int, ffi.Pointer<gsl_vector_short>)>();

  int gsl_sort_vector_short_largest(
    ffi.Pointer<ffi.Int16> dest,
    int k,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_sort_vector_short_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_short_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int16>, size_t,
              ffi.Pointer<gsl_vector_short>)>>('gsl_sort_vector_short_largest');
  late final _gsl_sort_vector_short_largest =
      _gsl_sort_vector_short_largestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int16>, int, ffi.Pointer<gsl_vector_short>)>();

  int gsl_sort_vector_short_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_sort_vector_short_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_short_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_short>)>>(
      'gsl_sort_vector_short_smallest_index');
  late final _gsl_sort_vector_short_smallest_index =
      _gsl_sort_vector_short_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_short>)>();

  int gsl_sort_vector_short_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_sort_vector_short_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_short_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_short>)>>(
      'gsl_sort_vector_short_largest_index');
  late final _gsl_sort_vector_short_largest_index =
      _gsl_sort_vector_short_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_short>)>();

  void gsl_sort_vector_uchar(
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_sort_vector_uchar(
      v,
    );
  }

  late final _gsl_sort_vector_ucharPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_sort_vector_uchar');
  late final _gsl_sort_vector_uchar = _gsl_sort_vector_ucharPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_uchar>)>();

  void gsl_sort_vector2_uchar(
    ffi.Pointer<gsl_vector_uchar> v1,
    ffi.Pointer<gsl_vector_uchar> v2,
  ) {
    return _gsl_sort_vector2_uchar(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_ucharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_uchar>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_sort_vector2_uchar');
  late final _gsl_sort_vector2_uchar = _gsl_sort_vector2_ucharPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector_uchar>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_sort_vector_uchar_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_sort_vector_uchar_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_uchar_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_sort_vector_uchar_index');
  late final _gsl_sort_vector_uchar_index =
      _gsl_sort_vector_uchar_indexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_sort_vector_uchar_smallest(
    ffi.Pointer<ffi.Uint8> dest,
    int k,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_sort_vector_uchar_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_uchar_smallestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, size_t,
                  ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_sort_vector_uchar_smallest');
  late final _gsl_sort_vector_uchar_smallest =
      _gsl_sort_vector_uchar_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_sort_vector_uchar_largest(
    ffi.Pointer<ffi.Uint8> dest,
    int k,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_sort_vector_uchar_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_uchar_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, size_t,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_sort_vector_uchar_largest');
  late final _gsl_sort_vector_uchar_largest =
      _gsl_sort_vector_uchar_largestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_sort_vector_uchar_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_sort_vector_uchar_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_uchar_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_sort_vector_uchar_smallest_index');
  late final _gsl_sort_vector_uchar_smallest_index =
      _gsl_sort_vector_uchar_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_sort_vector_uchar_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_sort_vector_uchar_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_uchar_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_sort_vector_uchar_largest_index');
  late final _gsl_sort_vector_uchar_largest_index =
      _gsl_sort_vector_uchar_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_uchar>)>();

  void gsl_sort_vector_char(
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_sort_vector_char(
      v,
    );
  }

  late final _gsl_sort_vector_charPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_vector_char>)>>(
      'gsl_sort_vector_char');
  late final _gsl_sort_vector_char = _gsl_sort_vector_charPtr
      .asFunction<void Function(ffi.Pointer<gsl_vector_char>)>();

  void gsl_sort_vector2_char(
    ffi.Pointer<gsl_vector_char> v1,
    ffi.Pointer<gsl_vector_char> v2,
  ) {
    return _gsl_sort_vector2_char(
      v1,
      v2,
    );
  }

  late final _gsl_sort_vector2_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector_char>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_sort_vector2_char');
  late final _gsl_sort_vector2_char = _gsl_sort_vector2_charPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_vector_char>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_sort_vector_char_index(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_sort_vector_char_index(
      p,
      v,
    );
  }

  late final _gsl_sort_vector_char_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_sort_vector_char_index');
  late final _gsl_sort_vector_char_index =
      _gsl_sort_vector_char_indexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_sort_vector_char_smallest(
    ffi.Pointer<ffi.Int8> dest,
    int k,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_sort_vector_char_smallest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_char_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<gsl_vector_char>)>>('gsl_sort_vector_char_smallest');
  late final _gsl_sort_vector_char_smallest =
      _gsl_sort_vector_char_smallestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int8>, int, ffi.Pointer<gsl_vector_char>)>();

  int gsl_sort_vector_char_largest(
    ffi.Pointer<ffi.Int8> dest,
    int k,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_sort_vector_char_largest(
      dest,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_char_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<gsl_vector_char>)>>('gsl_sort_vector_char_largest');
  late final _gsl_sort_vector_char_largest =
      _gsl_sort_vector_char_largestPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int8>, int, ffi.Pointer<gsl_vector_char>)>();

  int gsl_sort_vector_char_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_sort_vector_char_smallest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_char_smallest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_char>)>>(
      'gsl_sort_vector_char_smallest_index');
  late final _gsl_sort_vector_char_smallest_index =
      _gsl_sort_vector_char_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_char>)>();

  int gsl_sort_vector_char_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_sort_vector_char_largest_index(
      p,
      k,
      v,
    );
  }

  late final _gsl_sort_vector_char_largest_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<size_t>, size_t, ffi.Pointer<gsl_vector_char>)>>(
      'gsl_sort_vector_char_largest_index');
  late final _gsl_sort_vector_char_largest_index =
      _gsl_sort_vector_char_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<gsl_vector_char>)>();

  int gsl_permute_vector_uchar(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_permute_vector_uchar(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_ucharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_uchar>)>>('gsl_permute_vector_uchar');
  late final _gsl_permute_vector_uchar =
      _gsl_permute_vector_ucharPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_uchar>)>();

  int gsl_permute_vector_uchar_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_uchar> v,
  ) {
    return _gsl_permute_vector_uchar_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_uchar_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_uchar>)>>(
      'gsl_permute_vector_uchar_inverse');
  late final _gsl_permute_vector_uchar_inverse =
      _gsl_permute_vector_uchar_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_uchar>)>();

  void gsl_ieee_printf_float(
    ffi.Pointer<ffi.Float> x,
  ) {
    return _gsl_ieee_printf_float(
      x,
    );
  }

  late final _gsl_ieee_printf_floatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Float>)>>(
          'gsl_ieee_printf_float');
  late final _gsl_ieee_printf_float = _gsl_ieee_printf_floatPtr
      .asFunction<void Function(ffi.Pointer<ffi.Float>)>();

  void gsl_ieee_printf_double(
    ffi.Pointer<ffi.Double> x,
  ) {
    return _gsl_ieee_printf_double(
      x,
    );
  }

  late final _gsl_ieee_printf_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Double>)>>(
          'gsl_ieee_printf_double');
  late final _gsl_ieee_printf_double = _gsl_ieee_printf_doublePtr
      .asFunction<void Function(ffi.Pointer<ffi.Double>)>();

  void gsl_ieee_fprintf_float(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Float> x,
  ) {
    return _gsl_ieee_fprintf_float(
      stream,
      x,
    );
  }

  late final _gsl_ieee_fprintf_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Float>)>>('gsl_ieee_fprintf_float');
  late final _gsl_ieee_fprintf_float = _gsl_ieee_fprintf_floatPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Float>)>();

  void gsl_ieee_fprintf_double(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<ffi.Double> x,
  ) {
    return _gsl_ieee_fprintf_double(
      stream,
      x,
    );
  }

  late final _gsl_ieee_fprintf_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Double>)>>('gsl_ieee_fprintf_double');
  late final _gsl_ieee_fprintf_double = _gsl_ieee_fprintf_doublePtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Double>)>();

  void gsl_ieee_float_to_rep(
    ffi.Pointer<ffi.Float> x,
    ffi.Pointer<gsl_ieee_float_rep> r,
  ) {
    return _gsl_ieee_float_to_rep(
      x,
      r,
    );
  }

  late final _gsl_ieee_float_to_repPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>,
              ffi.Pointer<gsl_ieee_float_rep>)>>('gsl_ieee_float_to_rep');
  late final _gsl_ieee_float_to_rep = _gsl_ieee_float_to_repPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<gsl_ieee_float_rep>)>();

  void gsl_ieee_double_to_rep(
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<gsl_ieee_double_rep> r,
  ) {
    return _gsl_ieee_double_to_rep(
      x,
      r,
    );
  }

  late final _gsl_ieee_double_to_repPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_ieee_double_rep>)>>('gsl_ieee_double_to_rep');
  late final _gsl_ieee_double_to_rep = _gsl_ieee_double_to_repPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Double>, ffi.Pointer<gsl_ieee_double_rep>)>();

  void gsl_ieee_env_setup() {
    return _gsl_ieee_env_setup();
  }

  late final _gsl_ieee_env_setupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('gsl_ieee_env_setup');
  late final _gsl_ieee_env_setup =
      _gsl_ieee_env_setupPtr.asFunction<void Function()>();

  int gsl_ieee_read_mode_string(
    ffi.Pointer<ffi.Int8> description,
    ffi.Pointer<ffi.Int32> precision,
    ffi.Pointer<ffi.Int32> rounding,
    ffi.Pointer<ffi.Int32> exception_mask,
  ) {
    return _gsl_ieee_read_mode_string(
      description,
      precision,
      rounding,
      exception_mask,
    );
  }

  late final _gsl_ieee_read_mode_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('gsl_ieee_read_mode_string');
  late final _gsl_ieee_read_mode_string =
      _gsl_ieee_read_mode_stringPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  int gsl_ieee_set_mode(
    int precision,
    int rounding,
    int exception_mask,
  ) {
    return _gsl_ieee_set_mode(
      precision,
      rounding,
      exception_mask,
    );
  }

  late final _gsl_ieee_set_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Int32, ffi.Int32)>>('gsl_ieee_set_mode');
  late final _gsl_ieee_set_mode =
      _gsl_ieee_set_modePtr.asFunction<int Function(int, int, int)>();

  void gsl_sort_short(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_short(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_shortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int16>, size_t, size_t)>>('gsl_sort_short');
  late final _gsl_sort_short = _gsl_sort_shortPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int16>, int, int)>();

  void gsl_sort2_short(
    ffi.Pointer<ffi.Int16> data1,
    int stride1,
    ffi.Pointer<ffi.Int16> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2_short(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2_shortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int16>, size_t,
              ffi.Pointer<ffi.Int16>, size_t, size_t)>>('gsl_sort2_short');
  late final _gsl_sort2_short = _gsl_sort2_shortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int16>, int, ffi.Pointer<ffi.Int16>, int, int)>();

  void gsl_sort_short_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_short_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_short_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_sort_short_index');
  late final _gsl_sort_short_index = _gsl_sort_short_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_sort_short_smallest(
    ffi.Pointer<ffi.Int16> dest,
    int k,
    ffi.Pointer<ffi.Int16> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_short_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_short_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_sort_short_smallest');
  late final _gsl_sort_short_smallest = _gsl_sort_short_smallestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int16>, int, ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_sort_short_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Int16> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_short_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_short_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_sort_short_smallest_index');
  late final _gsl_sort_short_smallest_index =
      _gsl_sort_short_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_sort_short_largest(
    ffi.Pointer<ffi.Int16> dest,
    int k,
    ffi.Pointer<ffi.Int16> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_short_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_short_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_sort_short_largest');
  late final _gsl_sort_short_largest = _gsl_sort_short_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int16>, int, ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_sort_short_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Int16> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_short_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_short_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_sort_short_largest_index');
  late final _gsl_sort_short_largest_index =
      _gsl_sort_short_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Int16>, int, int)>();

  late final ffi.Pointer<ffi.Pointer<gsl_interp_type>> _gsl_interp_linear =
      _lookup<ffi.Pointer<gsl_interp_type>>('gsl_interp_linear');

  ffi.Pointer<gsl_interp_type> get gsl_interp_linear =>
      _gsl_interp_linear.value;

  set gsl_interp_linear(ffi.Pointer<gsl_interp_type> value) =>
      _gsl_interp_linear.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_interp_type>> _gsl_interp_polynomial =
      _lookup<ffi.Pointer<gsl_interp_type>>('gsl_interp_polynomial');

  ffi.Pointer<gsl_interp_type> get gsl_interp_polynomial =>
      _gsl_interp_polynomial.value;

  set gsl_interp_polynomial(ffi.Pointer<gsl_interp_type> value) =>
      _gsl_interp_polynomial.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_interp_type>> _gsl_interp_cspline =
      _lookup<ffi.Pointer<gsl_interp_type>>('gsl_interp_cspline');

  ffi.Pointer<gsl_interp_type> get gsl_interp_cspline =>
      _gsl_interp_cspline.value;

  set gsl_interp_cspline(ffi.Pointer<gsl_interp_type> value) =>
      _gsl_interp_cspline.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_interp_type>>
      _gsl_interp_cspline_periodic =
      _lookup<ffi.Pointer<gsl_interp_type>>('gsl_interp_cspline_periodic');

  ffi.Pointer<gsl_interp_type> get gsl_interp_cspline_periodic =>
      _gsl_interp_cspline_periodic.value;

  set gsl_interp_cspline_periodic(ffi.Pointer<gsl_interp_type> value) =>
      _gsl_interp_cspline_periodic.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_interp_type>> _gsl_interp_akima =
      _lookup<ffi.Pointer<gsl_interp_type>>('gsl_interp_akima');

  ffi.Pointer<gsl_interp_type> get gsl_interp_akima => _gsl_interp_akima.value;

  set gsl_interp_akima(ffi.Pointer<gsl_interp_type> value) =>
      _gsl_interp_akima.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_interp_type>>
      _gsl_interp_akima_periodic =
      _lookup<ffi.Pointer<gsl_interp_type>>('gsl_interp_akima_periodic');

  ffi.Pointer<gsl_interp_type> get gsl_interp_akima_periodic =>
      _gsl_interp_akima_periodic.value;

  set gsl_interp_akima_periodic(ffi.Pointer<gsl_interp_type> value) =>
      _gsl_interp_akima_periodic.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_interp_type>> _gsl_interp_steffen =
      _lookup<ffi.Pointer<gsl_interp_type>>('gsl_interp_steffen');

  ffi.Pointer<gsl_interp_type> get gsl_interp_steffen =>
      _gsl_interp_steffen.value;

  set gsl_interp_steffen(ffi.Pointer<gsl_interp_type> value) =>
      _gsl_interp_steffen.value = value;

  ffi.Pointer<gsl_interp_accel> gsl_interp_accel_alloc() {
    return _gsl_interp_accel_alloc();
  }

  late final _gsl_interp_accel_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_interp_accel> Function()>>(
          'gsl_interp_accel_alloc');
  late final _gsl_interp_accel_alloc = _gsl_interp_accel_allocPtr
      .asFunction<ffi.Pointer<gsl_interp_accel> Function()>();

  int gsl_interp_accel_reset(
    ffi.Pointer<gsl_interp_accel> a,
  ) {
    return _gsl_interp_accel_reset(
      a,
    );
  }

  late final _gsl_interp_accel_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp_accel_reset');
  late final _gsl_interp_accel_reset = _gsl_interp_accel_resetPtr
      .asFunction<int Function(ffi.Pointer<gsl_interp_accel>)>();

  void gsl_interp_accel_free(
    ffi.Pointer<gsl_interp_accel> a,
  ) {
    return _gsl_interp_accel_free(
      a,
    );
  }

  late final _gsl_interp_accel_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_interp_accel>)>>(
      'gsl_interp_accel_free');
  late final _gsl_interp_accel_free = _gsl_interp_accel_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_interp_accel>)>();

  ffi.Pointer<gsl_interp> gsl_interp_alloc(
    ffi.Pointer<gsl_interp_type> T,
    int n,
  ) {
    return _gsl_interp_alloc(
      T,
      n,
    );
  }

  late final _gsl_interp_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_interp> Function(
              ffi.Pointer<gsl_interp_type>, size_t)>>('gsl_interp_alloc');
  late final _gsl_interp_alloc = _gsl_interp_allocPtr.asFunction<
      ffi.Pointer<gsl_interp> Function(ffi.Pointer<gsl_interp_type>, int)>();

  int gsl_interp_init(
    ffi.Pointer<gsl_interp> obj,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    int size,
  ) {
    return _gsl_interp_init(
      obj,
      xa,
      ya,
      size,
    );
  }

  late final _gsl_interp_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_interp>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, size_t)>>('gsl_interp_init');
  late final _gsl_interp_init = _gsl_interp_initPtr.asFunction<
      int Function(ffi.Pointer<gsl_interp>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Int8> gsl_interp_name(
    ffi.Pointer<gsl_interp> interp,
  ) {
    return _gsl_interp_name(
      interp,
    );
  }

  late final _gsl_interp_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_interp>)>>('gsl_interp_name');
  late final _gsl_interp_name = _gsl_interp_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_interp>)>();

  int gsl_interp_min_size(
    ffi.Pointer<gsl_interp> interp,
  ) {
    return _gsl_interp_min_size(
      interp,
    );
  }

  late final _gsl_interp_min_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gsl_interp>)>>(
          'gsl_interp_min_size');
  late final _gsl_interp_min_size = _gsl_interp_min_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_interp>)>();

  int gsl_interp_type_min_size(
    ffi.Pointer<gsl_interp_type> T,
  ) {
    return _gsl_interp_type_min_size(
      T,
    );
  }

  late final _gsl_interp_type_min_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_interp_type>)>>('gsl_interp_type_min_size');
  late final _gsl_interp_type_min_size = _gsl_interp_type_min_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_interp_type>)>();

  int gsl_interp_eval_e(
    ffi.Pointer<gsl_interp> obj,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_interp_eval_e(
      obj,
      xa,
      ya,
      x,
      a,
      y,
    );
  }

  late final _gsl_interp_eval_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp_eval_e');
  late final _gsl_interp_eval_e = _gsl_interp_eval_ePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_interp>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<gsl_interp_accel>,
          ffi.Pointer<ffi.Double>)>();

  double gsl_interp_eval(
    ffi.Pointer<gsl_interp> obj,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
  ) {
    return _gsl_interp_eval(
      obj,
      xa,
      ya,
      x,
      a,
    );
  }

  late final _gsl_interp_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp_eval');
  late final _gsl_interp_eval = _gsl_interp_evalPtr.asFunction<
      double Function(ffi.Pointer<gsl_interp>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, double, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_interp_eval_deriv_e(
    ffi.Pointer<gsl_interp> obj,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
    ffi.Pointer<ffi.Double> d,
  ) {
    return _gsl_interp_eval_deriv_e(
      obj,
      xa,
      ya,
      x,
      a,
      d,
    );
  }

  late final _gsl_interp_eval_deriv_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp_eval_deriv_e');
  late final _gsl_interp_eval_deriv_e = _gsl_interp_eval_deriv_ePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_interp>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<gsl_interp_accel>,
          ffi.Pointer<ffi.Double>)>();

  double gsl_interp_eval_deriv(
    ffi.Pointer<gsl_interp> obj,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
  ) {
    return _gsl_interp_eval_deriv(
      obj,
      xa,
      ya,
      x,
      a,
    );
  }

  late final _gsl_interp_eval_derivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp_eval_deriv');
  late final _gsl_interp_eval_deriv = _gsl_interp_eval_derivPtr.asFunction<
      double Function(ffi.Pointer<gsl_interp>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, double, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_interp_eval_deriv2_e(
    ffi.Pointer<gsl_interp> obj,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
    ffi.Pointer<ffi.Double> d2,
  ) {
    return _gsl_interp_eval_deriv2_e(
      obj,
      xa,
      ya,
      x,
      a,
      d2,
    );
  }

  late final _gsl_interp_eval_deriv2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp_eval_deriv2_e');
  late final _gsl_interp_eval_deriv2_e =
      _gsl_interp_eval_deriv2_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_interp>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_interp_eval_deriv2(
    ffi.Pointer<gsl_interp> obj,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
  ) {
    return _gsl_interp_eval_deriv2(
      obj,
      xa,
      ya,
      x,
      a,
    );
  }

  late final _gsl_interp_eval_deriv2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp_eval_deriv2');
  late final _gsl_interp_eval_deriv2 = _gsl_interp_eval_deriv2Ptr.asFunction<
      double Function(ffi.Pointer<gsl_interp>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, double, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_interp_eval_integ_e(
    ffi.Pointer<gsl_interp> obj,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    double a,
    double b,
    ffi.Pointer<gsl_interp_accel> acc,
    ffi.Pointer<ffi.Double> result,
  ) {
    return _gsl_interp_eval_integ_e(
      obj,
      xa,
      ya,
      a,
      b,
      acc,
      result,
    );
  }

  late final _gsl_interp_eval_integ_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp_eval_integ_e');
  late final _gsl_interp_eval_integ_e = _gsl_interp_eval_integ_ePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_interp>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          ffi.Pointer<gsl_interp_accel>,
          ffi.Pointer<ffi.Double>)>();

  double gsl_interp_eval_integ(
    ffi.Pointer<gsl_interp> obj,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    double a,
    double b,
    ffi.Pointer<gsl_interp_accel> acc,
  ) {
    return _gsl_interp_eval_integ(
      obj,
      xa,
      ya,
      a,
      b,
      acc,
    );
  }

  late final _gsl_interp_eval_integPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp_eval_integ');
  late final _gsl_interp_eval_integ = _gsl_interp_eval_integPtr.asFunction<
      double Function(
          ffi.Pointer<gsl_interp>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          ffi.Pointer<gsl_interp_accel>)>();

  void gsl_interp_free(
    ffi.Pointer<gsl_interp> interp,
  ) {
    return _gsl_interp_free(
      interp,
    );
  }

  late final _gsl_interp_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_interp>)>>(
          'gsl_interp_free');
  late final _gsl_interp_free =
      _gsl_interp_freePtr.asFunction<void Function(ffi.Pointer<gsl_interp>)>();

  int gsl_interp_bsearch(
    ffi.Pointer<ffi.Double> x_array,
    double x,
    int index_lo,
    int index_hi,
  ) {
    return _gsl_interp_bsearch(
      x_array,
      x,
      index_lo,
      index_hi,
    );
  }

  late final _gsl_interp_bsearchPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Double>, ffi.Double, size_t,
              size_t)>>('gsl_interp_bsearch');
  late final _gsl_interp_bsearch = _gsl_interp_bsearchPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, double, int, int)>();

  int gsl_interp_accel_find(
    ffi.Pointer<gsl_interp_accel> a,
    ffi.Pointer<ffi.Double> x_array,
    int size,
    double x,
  ) {
    return _gsl_interp_accel_find(
      a,
      x_array,
      size,
      x,
    );
  }

  late final _gsl_interp_accel_findPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Double)>>('gsl_interp_accel_find');
  late final _gsl_interp_accel_find = _gsl_interp_accel_findPtr.asFunction<
      int Function(ffi.Pointer<gsl_interp_accel>, ffi.Pointer<ffi.Double>, int,
          double)>();

  ffi.Pointer<gsl_spline> gsl_spline_alloc(
    ffi.Pointer<gsl_interp_type> T,
    int size,
  ) {
    return _gsl_spline_alloc(
      T,
      size,
    );
  }

  late final _gsl_spline_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spline> Function(
              ffi.Pointer<gsl_interp_type>, size_t)>>('gsl_spline_alloc');
  late final _gsl_spline_alloc = _gsl_spline_allocPtr.asFunction<
      ffi.Pointer<gsl_spline> Function(ffi.Pointer<gsl_interp_type>, int)>();

  int gsl_spline_init(
    ffi.Pointer<gsl_spline> spline,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    int size,
  ) {
    return _gsl_spline_init(
      spline,
      xa,
      ya,
      size,
    );
  }

  late final _gsl_spline_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spline>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, size_t)>>('gsl_spline_init');
  late final _gsl_spline_init = _gsl_spline_initPtr.asFunction<
      int Function(ffi.Pointer<gsl_spline>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<ffi.Int8> gsl_spline_name(
    ffi.Pointer<gsl_spline> spline,
  ) {
    return _gsl_spline_name(
      spline,
    );
  }

  late final _gsl_spline_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spline>)>>('gsl_spline_name');
  late final _gsl_spline_name = _gsl_spline_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spline>)>();

  int gsl_spline_min_size(
    ffi.Pointer<gsl_spline> spline,
  ) {
    return _gsl_spline_min_size(
      spline,
    );
  }

  late final _gsl_spline_min_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<gsl_spline>)>>(
          'gsl_spline_min_size');
  late final _gsl_spline_min_size = _gsl_spline_min_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_spline>)>();

  int gsl_spline_eval_e(
    ffi.Pointer<gsl_spline> spline,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_spline_eval_e(
      spline,
      x,
      a,
      y,
    );
  }

  late final _gsl_spline_eval_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline>,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline_eval_e');
  late final _gsl_spline_eval_e = _gsl_spline_eval_ePtr.asFunction<
      int Function(ffi.Pointer<gsl_spline>, double,
          ffi.Pointer<gsl_interp_accel>, ffi.Pointer<ffi.Double>)>();

  double gsl_spline_eval(
    ffi.Pointer<gsl_spline> spline,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
  ) {
    return _gsl_spline_eval(
      spline,
      x,
      a,
    );
  }

  late final _gsl_spline_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_spline>, ffi.Double,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline_eval');
  late final _gsl_spline_eval = _gsl_spline_evalPtr.asFunction<
      double Function(
          ffi.Pointer<gsl_spline>, double, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline_eval_deriv_e(
    ffi.Pointer<gsl_spline> spline,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_spline_eval_deriv_e(
      spline,
      x,
      a,
      y,
    );
  }

  late final _gsl_spline_eval_deriv_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline>,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline_eval_deriv_e');
  late final _gsl_spline_eval_deriv_e = _gsl_spline_eval_deriv_ePtr.asFunction<
      int Function(ffi.Pointer<gsl_spline>, double,
          ffi.Pointer<gsl_interp_accel>, ffi.Pointer<ffi.Double>)>();

  double gsl_spline_eval_deriv(
    ffi.Pointer<gsl_spline> spline,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
  ) {
    return _gsl_spline_eval_deriv(
      spline,
      x,
      a,
    );
  }

  late final _gsl_spline_eval_derivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_spline>, ffi.Double,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline_eval_deriv');
  late final _gsl_spline_eval_deriv = _gsl_spline_eval_derivPtr.asFunction<
      double Function(
          ffi.Pointer<gsl_spline>, double, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline_eval_deriv2_e(
    ffi.Pointer<gsl_spline> spline,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_spline_eval_deriv2_e(
      spline,
      x,
      a,
      y,
    );
  }

  late final _gsl_spline_eval_deriv2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline>,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline_eval_deriv2_e');
  late final _gsl_spline_eval_deriv2_e =
      _gsl_spline_eval_deriv2_ePtr.asFunction<
          int Function(ffi.Pointer<gsl_spline>, double,
              ffi.Pointer<gsl_interp_accel>, ffi.Pointer<ffi.Double>)>();

  double gsl_spline_eval_deriv2(
    ffi.Pointer<gsl_spline> spline,
    double x,
    ffi.Pointer<gsl_interp_accel> a,
  ) {
    return _gsl_spline_eval_deriv2(
      spline,
      x,
      a,
    );
  }

  late final _gsl_spline_eval_deriv2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_spline>, ffi.Double,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline_eval_deriv2');
  late final _gsl_spline_eval_deriv2 = _gsl_spline_eval_deriv2Ptr.asFunction<
      double Function(
          ffi.Pointer<gsl_spline>, double, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline_eval_integ_e(
    ffi.Pointer<gsl_spline> spline,
    double a,
    double b,
    ffi.Pointer<gsl_interp_accel> acc,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_spline_eval_integ_e(
      spline,
      a,
      b,
      acc,
      y,
    );
  }

  late final _gsl_spline_eval_integ_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline_eval_integ_e');
  late final _gsl_spline_eval_integ_e = _gsl_spline_eval_integ_ePtr.asFunction<
      int Function(ffi.Pointer<gsl_spline>, double, double,
          ffi.Pointer<gsl_interp_accel>, ffi.Pointer<ffi.Double>)>();

  double gsl_spline_eval_integ(
    ffi.Pointer<gsl_spline> spline,
    double a,
    double b,
    ffi.Pointer<gsl_interp_accel> acc,
  ) {
    return _gsl_spline_eval_integ(
      spline,
      a,
      b,
      acc,
    );
  }

  late final _gsl_spline_eval_integPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_spline>, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline_eval_integ');
  late final _gsl_spline_eval_integ = _gsl_spline_eval_integPtr.asFunction<
      double Function(ffi.Pointer<gsl_spline>, double, double,
          ffi.Pointer<gsl_interp_accel>)>();

  void gsl_spline_free(
    ffi.Pointer<gsl_spline> spline,
  ) {
    return _gsl_spline_free(
      spline,
    );
  }

  late final _gsl_spline_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_spline>)>>(
          'gsl_spline_free');
  late final _gsl_spline_free =
      _gsl_spline_freePtr.asFunction<void Function(ffi.Pointer<gsl_spline>)>();

  int gsl_fit_linear(
    ffi.Pointer<ffi.Double> x,
    int xstride,
    ffi.Pointer<ffi.Double> y,
    int ystride,
    int n,
    ffi.Pointer<ffi.Double> c0,
    ffi.Pointer<ffi.Double> c1,
    ffi.Pointer<ffi.Double> cov00,
    ffi.Pointer<ffi.Double> cov01,
    ffi.Pointer<ffi.Double> cov11,
    ffi.Pointer<ffi.Double> sumsq,
  ) {
    return _gsl_fit_linear(
      x,
      xstride,
      y,
      ystride,
      n,
      c0,
      c1,
      cov00,
      cov01,
      cov11,
      sumsq,
    );
  }

  late final _gsl_fit_linearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_fit_linear');
  late final _gsl_fit_linear = _gsl_fit_linearPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_fit_wlinear(
    ffi.Pointer<ffi.Double> x,
    int xstride,
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> y,
    int ystride,
    int n,
    ffi.Pointer<ffi.Double> c0,
    ffi.Pointer<ffi.Double> c1,
    ffi.Pointer<ffi.Double> cov00,
    ffi.Pointer<ffi.Double> cov01,
    ffi.Pointer<ffi.Double> cov11,
    ffi.Pointer<ffi.Double> chisq,
  ) {
    return _gsl_fit_wlinear(
      x,
      xstride,
      w,
      wstride,
      y,
      ystride,
      n,
      c0,
      c1,
      cov00,
      cov01,
      cov11,
      chisq,
    );
  }

  late final _gsl_fit_wlinearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_fit_wlinear');
  late final _gsl_fit_wlinear = _gsl_fit_wlinearPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_fit_linear_est(
    double x,
    double c0,
    double c1,
    double cov00,
    double cov01,
    double cov11,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> y_err,
  ) {
    return _gsl_fit_linear_est(
      x,
      c0,
      c1,
      cov00,
      cov01,
      cov11,
      y,
      y_err,
    );
  }

  late final _gsl_fit_linear_estPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_fit_linear_est');
  late final _gsl_fit_linear_est = _gsl_fit_linear_estPtr.asFunction<
      int Function(double, double, double, double, double, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_fit_mul(
    ffi.Pointer<ffi.Double> x,
    int xstride,
    ffi.Pointer<ffi.Double> y,
    int ystride,
    int n,
    ffi.Pointer<ffi.Double> c1,
    ffi.Pointer<ffi.Double> cov11,
    ffi.Pointer<ffi.Double> sumsq,
  ) {
    return _gsl_fit_mul(
      x,
      xstride,
      y,
      ystride,
      n,
      c1,
      cov11,
      sumsq,
    );
  }

  late final _gsl_fit_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_fit_mul');
  late final _gsl_fit_mul = _gsl_fit_mulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_fit_wmul(
    ffi.Pointer<ffi.Double> x,
    int xstride,
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> y,
    int ystride,
    int n,
    ffi.Pointer<ffi.Double> c1,
    ffi.Pointer<ffi.Double> cov11,
    ffi.Pointer<ffi.Double> sumsq,
  ) {
    return _gsl_fit_wmul(
      x,
      xstride,
      w,
      wstride,
      y,
      ystride,
      n,
      c1,
      cov11,
      sumsq,
    );
  }

  late final _gsl_fit_wmulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_fit_wmul');
  late final _gsl_fit_wmul = _gsl_fit_wmulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<ffi.Double>,
          int,
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_fit_mul_est(
    double x,
    double c1,
    double cov11,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> y_err,
  ) {
    return _gsl_fit_mul_est(
      x,
      c1,
      cov11,
      y,
      y_err,
    );
  }

  late final _gsl_fit_mul_estPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_fit_mul_est');
  late final _gsl_fit_mul_est = _gsl_fit_mul_estPtr.asFunction<
      int Function(double, double, double, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_Pl_e(
    int l,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_Pl_e(
      l,
      x,
      result,
    );
  }

  late final _gsl_sf_legendre_Pl_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_Pl_e');
  late final _gsl_sf_legendre_Pl_e = _gsl_sf_legendre_Pl_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_Pl(
    int l,
    double x,
  ) {
    return _gsl_sf_legendre_Pl(
      l,
      x,
    );
  }

  late final _gsl_sf_legendre_PlPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_legendre_Pl');
  late final _gsl_sf_legendre_Pl =
      _gsl_sf_legendre_PlPtr.asFunction<double Function(int, double)>();

  int gsl_sf_legendre_Pl_array(
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_legendre_Pl_array(
      lmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_legendre_Pl_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_Pl_array');
  late final _gsl_sf_legendre_Pl_array = _gsl_sf_legendre_Pl_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_Pl_deriv_array(
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
  ) {
    return _gsl_sf_legendre_Pl_deriv_array(
      lmax,
      x,
      result_array,
      result_deriv_array,
    );
  }

  late final _gsl_sf_legendre_Pl_deriv_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_Pl_deriv_array');
  late final _gsl_sf_legendre_Pl_deriv_array =
      _gsl_sf_legendre_Pl_deriv_arrayPtr.asFunction<
          int Function(
              int, double, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_P1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_P1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_legendre_P1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_P1_e');
  late final _gsl_sf_legendre_P1_e = _gsl_sf_legendre_P1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_legendre_P2_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_P2_e(
      x,
      result,
    );
  }

  late final _gsl_sf_legendre_P2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_P2_e');
  late final _gsl_sf_legendre_P2_e = _gsl_sf_legendre_P2_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_legendre_P3_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_P3_e(
      x,
      result,
    );
  }

  late final _gsl_sf_legendre_P3_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_P3_e');
  late final _gsl_sf_legendre_P3_e = _gsl_sf_legendre_P3_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_P1(
    double x,
  ) {
    return _gsl_sf_legendre_P1(
      x,
    );
  }

  late final _gsl_sf_legendre_P1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_legendre_P1');
  late final _gsl_sf_legendre_P1 =
      _gsl_sf_legendre_P1Ptr.asFunction<double Function(double)>();

  double gsl_sf_legendre_P2(
    double x,
  ) {
    return _gsl_sf_legendre_P2(
      x,
    );
  }

  late final _gsl_sf_legendre_P2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_legendre_P2');
  late final _gsl_sf_legendre_P2 =
      _gsl_sf_legendre_P2Ptr.asFunction<double Function(double)>();

  double gsl_sf_legendre_P3(
    double x,
  ) {
    return _gsl_sf_legendre_P3(
      x,
    );
  }

  late final _gsl_sf_legendre_P3Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_legendre_P3');
  late final _gsl_sf_legendre_P3 =
      _gsl_sf_legendre_P3Ptr.asFunction<double Function(double)>();

  int gsl_sf_legendre_Q0_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_Q0_e(
      x,
      result,
    );
  }

  late final _gsl_sf_legendre_Q0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_Q0_e');
  late final _gsl_sf_legendre_Q0_e = _gsl_sf_legendre_Q0_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_Q0(
    double x,
  ) {
    return _gsl_sf_legendre_Q0(
      x,
    );
  }

  late final _gsl_sf_legendre_Q0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_legendre_Q0');
  late final _gsl_sf_legendre_Q0 =
      _gsl_sf_legendre_Q0Ptr.asFunction<double Function(double)>();

  int gsl_sf_legendre_Q1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_Q1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_legendre_Q1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_Q1_e');
  late final _gsl_sf_legendre_Q1_e = _gsl_sf_legendre_Q1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_Q1(
    double x,
  ) {
    return _gsl_sf_legendre_Q1(
      x,
    );
  }

  late final _gsl_sf_legendre_Q1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_legendre_Q1');
  late final _gsl_sf_legendre_Q1 =
      _gsl_sf_legendre_Q1Ptr.asFunction<double Function(double)>();

  int gsl_sf_legendre_Ql_e(
    int l,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_Ql_e(
      l,
      x,
      result,
    );
  }

  late final _gsl_sf_legendre_Ql_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_Ql_e');
  late final _gsl_sf_legendre_Ql_e = _gsl_sf_legendre_Ql_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_Ql(
    int l,
    double x,
  ) {
    return _gsl_sf_legendre_Ql(
      l,
      x,
    );
  }

  late final _gsl_sf_legendre_QlPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_legendre_Ql');
  late final _gsl_sf_legendre_Ql =
      _gsl_sf_legendre_QlPtr.asFunction<double Function(int, double)>();

  int gsl_sf_legendre_Plm_e(
    int l,
    int m,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_Plm_e(
      l,
      m,
      x,
      result,
    );
  }

  late final _gsl_sf_legendre_Plm_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_Plm_e');
  late final _gsl_sf_legendre_Plm_e = _gsl_sf_legendre_Plm_ePtr
      .asFunction<int Function(int, int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_Plm(
    int l,
    int m,
    double x,
  ) {
    return _gsl_sf_legendre_Plm(
      l,
      m,
      x,
    );
  }

  late final _gsl_sf_legendre_PlmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Int32, ffi.Double)>>('gsl_sf_legendre_Plm');
  late final _gsl_sf_legendre_Plm =
      _gsl_sf_legendre_PlmPtr.asFunction<double Function(int, int, double)>();

  int gsl_sf_legendre_Plm_array(
    int lmax,
    int m,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_legendre_Plm_array(
      lmax,
      m,
      x,
      result_array,
    );
  }

  late final _gsl_sf_legendre_Plm_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_Plm_array');
  late final _gsl_sf_legendre_Plm_array = _gsl_sf_legendre_Plm_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_Plm_deriv_array(
    int lmax,
    int m,
    double x,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
  ) {
    return _gsl_sf_legendre_Plm_deriv_array(
      lmax,
      m,
      x,
      result_array,
      result_deriv_array,
    );
  }

  late final _gsl_sf_legendre_Plm_deriv_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_Plm_deriv_array');
  late final _gsl_sf_legendre_Plm_deriv_array =
      _gsl_sf_legendre_Plm_deriv_arrayPtr.asFunction<
          int Function(int, int, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_sphPlm_e(
    int l,
    int m,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_sphPlm_e(
      l,
      m,
      x,
      result,
    );
  }

  late final _gsl_sf_legendre_sphPlm_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_sphPlm_e');
  late final _gsl_sf_legendre_sphPlm_e = _gsl_sf_legendre_sphPlm_ePtr
      .asFunction<int Function(int, int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_sphPlm(
    int l,
    int m,
    double x,
  ) {
    return _gsl_sf_legendre_sphPlm(
      l,
      m,
      x,
    );
  }

  late final _gsl_sf_legendre_sphPlmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Int32, ffi.Double)>>('gsl_sf_legendre_sphPlm');
  late final _gsl_sf_legendre_sphPlm = _gsl_sf_legendre_sphPlmPtr
      .asFunction<double Function(int, int, double)>();

  int gsl_sf_legendre_sphPlm_array(
    int lmax,
    int m,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_legendre_sphPlm_array(
      lmax,
      m,
      x,
      result_array,
    );
  }

  late final _gsl_sf_legendre_sphPlm_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_sphPlm_array');
  late final _gsl_sf_legendre_sphPlm_array = _gsl_sf_legendre_sphPlm_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_sphPlm_deriv_array(
    int lmax,
    int m,
    double x,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
  ) {
    return _gsl_sf_legendre_sphPlm_deriv_array(
      lmax,
      m,
      x,
      result_array,
      result_deriv_array,
    );
  }

  late final _gsl_sf_legendre_sphPlm_deriv_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_sphPlm_deriv_array');
  late final _gsl_sf_legendre_sphPlm_deriv_array =
      _gsl_sf_legendre_sphPlm_deriv_arrayPtr.asFunction<
          int Function(int, int, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_array_size(
    int lmax,
    int m,
  ) {
    return _gsl_sf_legendre_array_size(
      lmax,
      m,
    );
  }

  late final _gsl_sf_legendre_array_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'gsl_sf_legendre_array_size');
  late final _gsl_sf_legendre_array_size =
      _gsl_sf_legendre_array_sizePtr.asFunction<int Function(int, int)>();

  int gsl_sf_conicalP_half_e(
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_conicalP_half_e(
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_conicalP_half_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_conicalP_half_e');
  late final _gsl_sf_conicalP_half_e = _gsl_sf_conicalP_half_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_conicalP_half(
    double lambda,
    double x,
  ) {
    return _gsl_sf_conicalP_half(
      lambda,
      x,
    );
  }

  late final _gsl_sf_conicalP_halfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_conicalP_half');
  late final _gsl_sf_conicalP_half =
      _gsl_sf_conicalP_halfPtr.asFunction<double Function(double, double)>();

  int gsl_sf_conicalP_mhalf_e(
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_conicalP_mhalf_e(
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_conicalP_mhalf_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_conicalP_mhalf_e');
  late final _gsl_sf_conicalP_mhalf_e = _gsl_sf_conicalP_mhalf_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_conicalP_mhalf(
    double lambda,
    double x,
  ) {
    return _gsl_sf_conicalP_mhalf(
      lambda,
      x,
    );
  }

  late final _gsl_sf_conicalP_mhalfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_conicalP_mhalf');
  late final _gsl_sf_conicalP_mhalf =
      _gsl_sf_conicalP_mhalfPtr.asFunction<double Function(double, double)>();

  int gsl_sf_conicalP_0_e(
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_conicalP_0_e(
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_conicalP_0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_conicalP_0_e');
  late final _gsl_sf_conicalP_0_e = _gsl_sf_conicalP_0_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_conicalP_0(
    double lambda,
    double x,
  ) {
    return _gsl_sf_conicalP_0(
      lambda,
      x,
    );
  }

  late final _gsl_sf_conicalP_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_conicalP_0');
  late final _gsl_sf_conicalP_0 =
      _gsl_sf_conicalP_0Ptr.asFunction<double Function(double, double)>();

  int gsl_sf_conicalP_1_e(
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_conicalP_1_e(
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_conicalP_1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_conicalP_1_e');
  late final _gsl_sf_conicalP_1_e = _gsl_sf_conicalP_1_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_conicalP_1(
    double lambda,
    double x,
  ) {
    return _gsl_sf_conicalP_1(
      lambda,
      x,
    );
  }

  late final _gsl_sf_conicalP_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_conicalP_1');
  late final _gsl_sf_conicalP_1 =
      _gsl_sf_conicalP_1Ptr.asFunction<double Function(double, double)>();

  int gsl_sf_conicalP_sph_reg_e(
    int l,
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_conicalP_sph_reg_e(
      l,
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_conicalP_sph_reg_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_conicalP_sph_reg_e');
  late final _gsl_sf_conicalP_sph_reg_e =
      _gsl_sf_conicalP_sph_reg_ePtr.asFunction<
          int Function(int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_conicalP_sph_reg(
    int l,
    double lambda,
    double x,
  ) {
    return _gsl_sf_conicalP_sph_reg(
      l,
      lambda,
      x,
    );
  }

  late final _gsl_sf_conicalP_sph_regPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Double, ffi.Double)>>('gsl_sf_conicalP_sph_reg');
  late final _gsl_sf_conicalP_sph_reg = _gsl_sf_conicalP_sph_regPtr
      .asFunction<double Function(int, double, double)>();

  int gsl_sf_conicalP_cyl_reg_e(
    int m,
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_conicalP_cyl_reg_e(
      m,
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_conicalP_cyl_reg_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_conicalP_cyl_reg_e');
  late final _gsl_sf_conicalP_cyl_reg_e =
      _gsl_sf_conicalP_cyl_reg_ePtr.asFunction<
          int Function(int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_conicalP_cyl_reg(
    int m,
    double lambda,
    double x,
  ) {
    return _gsl_sf_conicalP_cyl_reg(
      m,
      lambda,
      x,
    );
  }

  late final _gsl_sf_conicalP_cyl_regPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Double, ffi.Double)>>('gsl_sf_conicalP_cyl_reg');
  late final _gsl_sf_conicalP_cyl_reg = _gsl_sf_conicalP_cyl_regPtr
      .asFunction<double Function(int, double, double)>();

  int gsl_sf_legendre_H3d_0_e(
    double lambda,
    double eta,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_H3d_0_e(
      lambda,
      eta,
      result,
    );
  }

  late final _gsl_sf_legendre_H3d_0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_H3d_0_e');
  late final _gsl_sf_legendre_H3d_0_e = _gsl_sf_legendre_H3d_0_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_H3d_0(
    double lambda,
    double eta,
  ) {
    return _gsl_sf_legendre_H3d_0(
      lambda,
      eta,
    );
  }

  late final _gsl_sf_legendre_H3d_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_legendre_H3d_0');
  late final _gsl_sf_legendre_H3d_0 =
      _gsl_sf_legendre_H3d_0Ptr.asFunction<double Function(double, double)>();

  int gsl_sf_legendre_H3d_1_e(
    double lambda,
    double eta,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_H3d_1_e(
      lambda,
      eta,
      result,
    );
  }

  late final _gsl_sf_legendre_H3d_1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_H3d_1_e');
  late final _gsl_sf_legendre_H3d_1_e = _gsl_sf_legendre_H3d_1_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_H3d_1(
    double lambda,
    double eta,
  ) {
    return _gsl_sf_legendre_H3d_1(
      lambda,
      eta,
    );
  }

  late final _gsl_sf_legendre_H3d_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_legendre_H3d_1');
  late final _gsl_sf_legendre_H3d_1 =
      _gsl_sf_legendre_H3d_1Ptr.asFunction<double Function(double, double)>();

  int gsl_sf_legendre_H3d_e(
    int l,
    double lambda,
    double eta,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_legendre_H3d_e(
      l,
      lambda,
      eta,
      result,
    );
  }

  late final _gsl_sf_legendre_H3d_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_legendre_H3d_e');
  late final _gsl_sf_legendre_H3d_e = _gsl_sf_legendre_H3d_ePtr.asFunction<
      int Function(int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_legendre_H3d(
    int l,
    double lambda,
    double eta,
  ) {
    return _gsl_sf_legendre_H3d(
      l,
      lambda,
      eta,
    );
  }

  late final _gsl_sf_legendre_H3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Double, ffi.Double)>>('gsl_sf_legendre_H3d');
  late final _gsl_sf_legendre_H3d = _gsl_sf_legendre_H3dPtr
      .asFunction<double Function(int, double, double)>();

  int gsl_sf_legendre_H3d_array(
    int lmax,
    double lambda,
    double eta,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_legendre_H3d_array(
      lmax,
      lambda,
      eta,
      result_array,
    );
  }

  late final _gsl_sf_legendre_H3d_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_H3d_array');
  late final _gsl_sf_legendre_H3d_array = _gsl_sf_legendre_H3d_arrayPtr
      .asFunction<int Function(int, double, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_array(
    int norm,
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_legendre_array(
      norm,
      lmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_legendre_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, size_t, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_array');
  late final _gsl_sf_legendre_array = _gsl_sf_legendre_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_array_e(
    int norm,
    int lmax,
    double x,
    double csphase,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_legendre_array_e(
      norm,
      lmax,
      x,
      csphase,
      result_array,
    );
  }

  late final _gsl_sf_legendre_array_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, size_t, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_array_e');
  late final _gsl_sf_legendre_array_e = _gsl_sf_legendre_array_ePtr.asFunction<
      int Function(int, int, double, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_deriv_array(
    int norm,
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
  ) {
    return _gsl_sf_legendre_deriv_array(
      norm,
      lmax,
      x,
      result_array,
      result_deriv_array,
    );
  }

  late final _gsl_sf_legendre_deriv_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              size_t,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_deriv_array');
  late final _gsl_sf_legendre_deriv_array =
      _gsl_sf_legendre_deriv_arrayPtr.asFunction<
          int Function(int, int, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_deriv_array_e(
    int norm,
    int lmax,
    double x,
    double csphase,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
  ) {
    return _gsl_sf_legendre_deriv_array_e(
      norm,
      lmax,
      x,
      csphase,
      result_array,
      result_deriv_array,
    );
  }

  late final _gsl_sf_legendre_deriv_array_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_deriv_array_e');
  late final _gsl_sf_legendre_deriv_array_e =
      _gsl_sf_legendre_deriv_array_ePtr.asFunction<
          int Function(int, int, double, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_deriv_alt_array(
    int norm,
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
  ) {
    return _gsl_sf_legendre_deriv_alt_array(
      norm,
      lmax,
      x,
      result_array,
      result_deriv_array,
    );
  }

  late final _gsl_sf_legendre_deriv_alt_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              size_t,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_deriv_alt_array');
  late final _gsl_sf_legendre_deriv_alt_array =
      _gsl_sf_legendre_deriv_alt_arrayPtr.asFunction<
          int Function(int, int, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_deriv_alt_array_e(
    int norm,
    int lmax,
    double x,
    double csphase,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
  ) {
    return _gsl_sf_legendre_deriv_alt_array_e(
      norm,
      lmax,
      x,
      csphase,
      result_array,
      result_deriv_array,
    );
  }

  late final _gsl_sf_legendre_deriv_alt_array_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_deriv_alt_array_e');
  late final _gsl_sf_legendre_deriv_alt_array_e =
      _gsl_sf_legendre_deriv_alt_array_ePtr.asFunction<
          int Function(int, int, double, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_deriv2_array(
    int norm,
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
    ffi.Pointer<ffi.Double> result_deriv2_array,
  ) {
    return _gsl_sf_legendre_deriv2_array(
      norm,
      lmax,
      x,
      result_array,
      result_deriv_array,
      result_deriv2_array,
    );
  }

  late final _gsl_sf_legendre_deriv2_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              size_t,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_deriv2_array');
  late final _gsl_sf_legendre_deriv2_array =
      _gsl_sf_legendre_deriv2_arrayPtr.asFunction<
          int Function(int, int, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_deriv2_array_e(
    int norm,
    int lmax,
    double x,
    double csphase,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
    ffi.Pointer<ffi.Double> result_deriv2_array,
  ) {
    return _gsl_sf_legendre_deriv2_array_e(
      norm,
      lmax,
      x,
      csphase,
      result_array,
      result_deriv_array,
      result_deriv2_array,
    );
  }

  late final _gsl_sf_legendre_deriv2_array_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_deriv2_array_e');
  late final _gsl_sf_legendre_deriv2_array_e =
      _gsl_sf_legendre_deriv2_array_ePtr.asFunction<
          int Function(int, int, double, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_deriv2_alt_array(
    int norm,
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
    ffi.Pointer<ffi.Double> result_deriv2_array,
  ) {
    return _gsl_sf_legendre_deriv2_alt_array(
      norm,
      lmax,
      x,
      result_array,
      result_deriv_array,
      result_deriv2_array,
    );
  }

  late final _gsl_sf_legendre_deriv2_alt_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              size_t,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_deriv2_alt_array');
  late final _gsl_sf_legendre_deriv2_alt_array =
      _gsl_sf_legendre_deriv2_alt_arrayPtr.asFunction<
          int Function(int, int, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_deriv2_alt_array_e(
    int norm,
    int lmax,
    double x,
    double csphase,
    ffi.Pointer<ffi.Double> result_array,
    ffi.Pointer<ffi.Double> result_deriv_array,
    ffi.Pointer<ffi.Double> result_deriv2_array,
  ) {
    return _gsl_sf_legendre_deriv2_alt_array_e(
      norm,
      lmax,
      x,
      csphase,
      result_array,
      result_deriv_array,
      result_deriv2_array,
    );
  }

  late final _gsl_sf_legendre_deriv2_alt_array_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_legendre_deriv2_alt_array_e');
  late final _gsl_sf_legendre_deriv2_alt_array_e =
      _gsl_sf_legendre_deriv2_alt_array_ePtr.asFunction<
          int Function(int, int, double, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_legendre_array_n(
    int lmax,
  ) {
    return _gsl_sf_legendre_array_n(
      lmax,
    );
  }

  late final _gsl_sf_legendre_array_nPtr =
      _lookup<ffi.NativeFunction<size_t Function(size_t)>>(
          'gsl_sf_legendre_array_n');
  late final _gsl_sf_legendre_array_n =
      _gsl_sf_legendre_array_nPtr.asFunction<int Function(int)>();

  int gsl_sf_legendre_nlm(
    int lmax,
  ) {
    return _gsl_sf_legendre_nlm(
      lmax,
    );
  }

  late final _gsl_sf_legendre_nlmPtr =
      _lookup<ffi.NativeFunction<size_t Function(size_t)>>(
          'gsl_sf_legendre_nlm');
  late final _gsl_sf_legendre_nlm =
      _gsl_sf_legendre_nlmPtr.asFunction<int Function(int)>();

  int gsl_sf_legendre_array_index(
    int l,
    int m,
  ) {
    return _gsl_sf_legendre_array_index(
      l,
      m,
    );
  }

  late final _gsl_sf_legendre_array_indexPtr =
      _lookup<ffi.NativeFunction<size_t Function(size_t, size_t)>>(
          'gsl_sf_legendre_array_index');
  late final _gsl_sf_legendre_array_index =
      _gsl_sf_legendre_array_indexPtr.asFunction<int Function(int, int)>();

  int gsl_multifit_gradient(
    ffi.Pointer<gsl_matrix> J,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_vector> g,
  ) {
    return _gsl_multifit_gradient(
      J,
      f,
      g,
    );
  }

  late final _gsl_multifit_gradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_gradient');
  late final _gsl_multifit_gradient = _gsl_multifit_gradientPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_covar(
    ffi.Pointer<gsl_matrix> J,
    double epsrel,
    ffi.Pointer<gsl_matrix> covar,
  ) {
    return _gsl_multifit_covar(
      J,
      epsrel,
      covar,
    );
  }

  late final _gsl_multifit_covarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Double,
              ffi.Pointer<gsl_matrix>)>>('gsl_multifit_covar');
  late final _gsl_multifit_covar = _gsl_multifit_covarPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, double, ffi.Pointer<gsl_matrix>)>();

  int gsl_multifit_covar_QRPT(
    ffi.Pointer<gsl_matrix> r,
    ffi.Pointer<gsl_permutation> perm,
    double epsrel,
    ffi.Pointer<gsl_matrix> covar,
  ) {
    return _gsl_multifit_covar_QRPT(
      r,
      perm,
      epsrel,
      covar,
    );
  }

  late final _gsl_multifit_covar_QRPTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_permutation>,
              ffi.Double,
              ffi.Pointer<gsl_matrix>)>>('gsl_multifit_covar_QRPT');
  late final _gsl_multifit_covar_QRPT = _gsl_multifit_covar_QRPTPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_permutation>,
          double, ffi.Pointer<gsl_matrix>)>();

  ffi.Pointer<gsl_multifit_fsolver> gsl_multifit_fsolver_alloc(
    ffi.Pointer<gsl_multifit_fsolver_type> T,
    int n,
    int p,
  ) {
    return _gsl_multifit_fsolver_alloc(
      T,
      n,
      p,
    );
  }

  late final _gsl_multifit_fsolver_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multifit_fsolver> Function(
              ffi.Pointer<gsl_multifit_fsolver_type>,
              size_t,
              size_t)>>('gsl_multifit_fsolver_alloc');
  late final _gsl_multifit_fsolver_alloc =
      _gsl_multifit_fsolver_allocPtr.asFunction<
          ffi.Pointer<gsl_multifit_fsolver> Function(
              ffi.Pointer<gsl_multifit_fsolver_type>, int, int)>();

  void gsl_multifit_fsolver_free(
    ffi.Pointer<gsl_multifit_fsolver> s,
  ) {
    return _gsl_multifit_fsolver_free(
      s,
    );
  }

  late final _gsl_multifit_fsolver_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_multifit_fsolver>)>>('gsl_multifit_fsolver_free');
  late final _gsl_multifit_fsolver_free = _gsl_multifit_fsolver_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multifit_fsolver>)>();

  int gsl_multifit_fsolver_set(
    ffi.Pointer<gsl_multifit_fsolver> s,
    ffi.Pointer<gsl_multifit_function> f,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_multifit_fsolver_set(
      s,
      f,
      x,
    );
  }

  late final _gsl_multifit_fsolver_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fsolver>,
              ffi.Pointer<gsl_multifit_function>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_fsolver_set');
  late final _gsl_multifit_fsolver_set =
      _gsl_multifit_fsolver_setPtr.asFunction<
          int Function(ffi.Pointer<gsl_multifit_fsolver>,
              ffi.Pointer<gsl_multifit_function>, ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_fsolver_iterate(
    ffi.Pointer<gsl_multifit_fsolver> s,
  ) {
    return _gsl_multifit_fsolver_iterate(
      s,
    );
  }

  late final _gsl_multifit_fsolver_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_multifit_fsolver>)>>(
      'gsl_multifit_fsolver_iterate');
  late final _gsl_multifit_fsolver_iterate = _gsl_multifit_fsolver_iteratePtr
      .asFunction<int Function(ffi.Pointer<gsl_multifit_fsolver>)>();

  int gsl_multifit_fsolver_driver(
    ffi.Pointer<gsl_multifit_fsolver> s,
    int maxiter,
    double epsabs,
    double epsrel,
  ) {
    return _gsl_multifit_fsolver_driver(
      s,
      maxiter,
      epsabs,
      epsrel,
    );
  }

  late final _gsl_multifit_fsolver_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_multifit_fsolver>, size_t,
              ffi.Double, ffi.Double)>>('gsl_multifit_fsolver_driver');
  late final _gsl_multifit_fsolver_driver =
      _gsl_multifit_fsolver_driverPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fsolver>, int, double, double)>();

  ffi.Pointer<ffi.Int8> gsl_multifit_fsolver_name(
    ffi.Pointer<gsl_multifit_fsolver> s,
  ) {
    return _gsl_multifit_fsolver_name(
      s,
    );
  }

  late final _gsl_multifit_fsolver_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multifit_fsolver>)>>('gsl_multifit_fsolver_name');
  late final _gsl_multifit_fsolver_name =
      _gsl_multifit_fsolver_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_multifit_fsolver>)>();

  ffi.Pointer<gsl_vector> gsl_multifit_fsolver_position(
    ffi.Pointer<gsl_multifit_fsolver> s,
  ) {
    return _gsl_multifit_fsolver_position(
      s,
    );
  }

  late final _gsl_multifit_fsolver_positionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multifit_fsolver>)>>(
      'gsl_multifit_fsolver_position');
  late final _gsl_multifit_fsolver_position =
      _gsl_multifit_fsolver_positionPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multifit_fsolver>)>();

  ffi.Pointer<gsl_multifit_fdfsolver> gsl_multifit_fdfsolver_alloc(
    ffi.Pointer<gsl_multifit_fdfsolver_type> T,
    int n,
    int p,
  ) {
    return _gsl_multifit_fdfsolver_alloc(
      T,
      n,
      p,
    );
  }

  late final _gsl_multifit_fdfsolver_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multifit_fdfsolver> Function(
              ffi.Pointer<gsl_multifit_fdfsolver_type>,
              size_t,
              size_t)>>('gsl_multifit_fdfsolver_alloc');
  late final _gsl_multifit_fdfsolver_alloc =
      _gsl_multifit_fdfsolver_allocPtr.asFunction<
          ffi.Pointer<gsl_multifit_fdfsolver> Function(
              ffi.Pointer<gsl_multifit_fdfsolver_type>, int, int)>();

  int gsl_multifit_fdfsolver_set(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
    ffi.Pointer<gsl_multifit_function_fdf> fdf,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_multifit_fdfsolver_set(
      s,
      fdf,
      x,
    );
  }

  late final _gsl_multifit_fdfsolver_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfsolver>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_fdfsolver_set');
  late final _gsl_multifit_fdfsolver_set =
      _gsl_multifit_fdfsolver_setPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fdfsolver>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_fdfsolver_wset(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
    ffi.Pointer<gsl_multifit_function_fdf> f,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> wts,
  ) {
    return _gsl_multifit_fdfsolver_wset(
      s,
      f,
      x,
      wts,
    );
  }

  late final _gsl_multifit_fdfsolver_wsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfsolver>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_fdfsolver_wset');
  late final _gsl_multifit_fdfsolver_wset =
      _gsl_multifit_fdfsolver_wsetPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fdfsolver>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_fdfsolver_iterate(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
  ) {
    return _gsl_multifit_fdfsolver_iterate(
      s,
    );
  }

  late final _gsl_multifit_fdfsolver_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_multifit_fdfsolver>)>>(
      'gsl_multifit_fdfsolver_iterate');
  late final _gsl_multifit_fdfsolver_iterate =
      _gsl_multifit_fdfsolver_iteratePtr
          .asFunction<int Function(ffi.Pointer<gsl_multifit_fdfsolver>)>();

  int gsl_multifit_fdfsolver_driver(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
    int maxiter,
    double xtol,
    double gtol,
    double ftol,
    ffi.Pointer<ffi.Int32> info,
  ) {
    return _gsl_multifit_fdfsolver_driver(
      s,
      maxiter,
      xtol,
      gtol,
      ftol,
      info,
    );
  }

  late final _gsl_multifit_fdfsolver_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfsolver>,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int32>)>>('gsl_multifit_fdfsolver_driver');
  late final _gsl_multifit_fdfsolver_driver =
      _gsl_multifit_fdfsolver_driverPtr.asFunction<
          int Function(ffi.Pointer<gsl_multifit_fdfsolver>, int, double, double,
              double, ffi.Pointer<ffi.Int32>)>();

  int gsl_multifit_fdfsolver_jac(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
    ffi.Pointer<gsl_matrix> J,
  ) {
    return _gsl_multifit_fdfsolver_jac(
      s,
      J,
    );
  }

  late final _gsl_multifit_fdfsolver_jacPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_multifit_fdfsolver>,
              ffi.Pointer<gsl_matrix>)>>('gsl_multifit_fdfsolver_jac');
  late final _gsl_multifit_fdfsolver_jac =
      _gsl_multifit_fdfsolver_jacPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fdfsolver>, ffi.Pointer<gsl_matrix>)>();

  void gsl_multifit_fdfsolver_free(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
  ) {
    return _gsl_multifit_fdfsolver_free(
      s,
    );
  }

  late final _gsl_multifit_fdfsolver_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multifit_fdfsolver>)>>(
      'gsl_multifit_fdfsolver_free');
  late final _gsl_multifit_fdfsolver_free = _gsl_multifit_fdfsolver_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multifit_fdfsolver>)>();

  ffi.Pointer<ffi.Int8> gsl_multifit_fdfsolver_name(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
  ) {
    return _gsl_multifit_fdfsolver_name(
      s,
    );
  }

  late final _gsl_multifit_fdfsolver_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multifit_fdfsolver>)>>(
      'gsl_multifit_fdfsolver_name');
  late final _gsl_multifit_fdfsolver_name =
      _gsl_multifit_fdfsolver_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multifit_fdfsolver>)>();

  ffi.Pointer<gsl_vector> gsl_multifit_fdfsolver_position(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
  ) {
    return _gsl_multifit_fdfsolver_position(
      s,
    );
  }

  late final _gsl_multifit_fdfsolver_positionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multifit_fdfsolver>)>>(
      'gsl_multifit_fdfsolver_position');
  late final _gsl_multifit_fdfsolver_position =
      _gsl_multifit_fdfsolver_positionPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multifit_fdfsolver>)>();

  ffi.Pointer<gsl_vector> gsl_multifit_fdfsolver_residual(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
  ) {
    return _gsl_multifit_fdfsolver_residual(
      s,
    );
  }

  late final _gsl_multifit_fdfsolver_residualPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multifit_fdfsolver>)>>(
      'gsl_multifit_fdfsolver_residual');
  late final _gsl_multifit_fdfsolver_residual =
      _gsl_multifit_fdfsolver_residualPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multifit_fdfsolver>)>();

  int gsl_multifit_fdfsolver_niter(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
  ) {
    return _gsl_multifit_fdfsolver_niter(
      s,
    );
  }

  late final _gsl_multifit_fdfsolver_niterPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_multifit_fdfsolver>)>>(
      'gsl_multifit_fdfsolver_niter');
  late final _gsl_multifit_fdfsolver_niter = _gsl_multifit_fdfsolver_niterPtr
      .asFunction<int Function(ffi.Pointer<gsl_multifit_fdfsolver>)>();

  int gsl_multifit_eval_wf(
    ffi.Pointer<gsl_multifit_function_fdf> fdf,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> wts,
    ffi.Pointer<gsl_vector> y,
  ) {
    return _gsl_multifit_eval_wf(
      fdf,
      x,
      wts,
      y,
    );
  }

  late final _gsl_multifit_eval_wfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_eval_wf');
  late final _gsl_multifit_eval_wf = _gsl_multifit_eval_wfPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_multifit_function_fdf>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_eval_wdf(
    ffi.Pointer<gsl_multifit_function_fdf> fdf,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> wts,
    ffi.Pointer<gsl_matrix> dy,
  ) {
    return _gsl_multifit_eval_wdf(
      fdf,
      x,
      wts,
      dy,
    );
  }

  late final _gsl_multifit_eval_wdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_multifit_eval_wdf');
  late final _gsl_multifit_eval_wdf = _gsl_multifit_eval_wdfPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_multifit_function_fdf>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_multifit_fdfsolver_test(
    ffi.Pointer<gsl_multifit_fdfsolver> s,
    double xtol,
    double gtol,
    double ftol,
    ffi.Pointer<ffi.Int32> info,
  ) {
    return _gsl_multifit_fdfsolver_test(
      s,
      xtol,
      gtol,
      ftol,
      info,
    );
  }

  late final _gsl_multifit_fdfsolver_testPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfsolver>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int32>)>>('gsl_multifit_fdfsolver_test');
  late final _gsl_multifit_fdfsolver_test =
      _gsl_multifit_fdfsolver_testPtr.asFunction<
          int Function(ffi.Pointer<gsl_multifit_fdfsolver>, double, double,
              double, ffi.Pointer<ffi.Int32>)>();

  int gsl_multifit_test_delta(
    ffi.Pointer<gsl_vector> dx,
    ffi.Pointer<gsl_vector> x,
    double epsabs,
    double epsrel,
  ) {
    return _gsl_multifit_test_delta(
      dx,
      x,
      epsabs,
      epsrel,
    );
  }

  late final _gsl_multifit_test_deltaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Double, ffi.Double)>>('gsl_multifit_test_delta');
  late final _gsl_multifit_test_delta = _gsl_multifit_test_deltaPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>, double, double)>();

  int gsl_multifit_test_gradient(
    ffi.Pointer<gsl_vector> g,
    double epsabs,
  ) {
    return _gsl_multifit_test_gradient(
      g,
      epsabs,
    );
  }

  late final _gsl_multifit_test_gradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Double)>>('gsl_multifit_test_gradient');
  late final _gsl_multifit_test_gradient = _gsl_multifit_test_gradientPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>, double)>();

  int gsl_multifit_fdfsolver_dif_df(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> wts,
    ffi.Pointer<gsl_multifit_function_fdf> fdf,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_matrix> J,
  ) {
    return _gsl_multifit_fdfsolver_dif_df(
      x,
      wts,
      fdf,
      f,
      J,
    );
  }

  late final _gsl_multifit_fdfsolver_dif_dfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_multifit_fdfsolver_dif_df');
  late final _gsl_multifit_fdfsolver_dif_df =
      _gsl_multifit_fdfsolver_dif_dfPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_multifit_fdfsolver_dif_fdf(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_multifit_function_fdf> fdf,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_matrix> J,
  ) {
    return _gsl_multifit_fdfsolver_dif_fdf(
      x,
      fdf,
      f,
      J,
    );
  }

  late final _gsl_multifit_fdfsolver_dif_fdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_multifit_fdfsolver_dif_fdf');
  late final _gsl_multifit_fdfsolver_dif_fdf =
      _gsl_multifit_fdfsolver_dif_fdfPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>();

  ffi.Pointer<gsl_multifit_fdfridge> gsl_multifit_fdfridge_alloc(
    ffi.Pointer<gsl_multifit_fdfsolver_type> T,
    int n,
    int p,
  ) {
    return _gsl_multifit_fdfridge_alloc(
      T,
      n,
      p,
    );
  }

  late final _gsl_multifit_fdfridge_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multifit_fdfridge> Function(
              ffi.Pointer<gsl_multifit_fdfsolver_type>,
              size_t,
              size_t)>>('gsl_multifit_fdfridge_alloc');
  late final _gsl_multifit_fdfridge_alloc =
      _gsl_multifit_fdfridge_allocPtr.asFunction<
          ffi.Pointer<gsl_multifit_fdfridge> Function(
              ffi.Pointer<gsl_multifit_fdfsolver_type>, int, int)>();

  void gsl_multifit_fdfridge_free(
    ffi.Pointer<gsl_multifit_fdfridge> work,
  ) {
    return _gsl_multifit_fdfridge_free(
      work,
    );
  }

  late final _gsl_multifit_fdfridge_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multifit_fdfridge>)>>(
      'gsl_multifit_fdfridge_free');
  late final _gsl_multifit_fdfridge_free = _gsl_multifit_fdfridge_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multifit_fdfridge>)>();

  ffi.Pointer<ffi.Int8> gsl_multifit_fdfridge_name(
    ffi.Pointer<gsl_multifit_fdfridge> w,
  ) {
    return _gsl_multifit_fdfridge_name(
      w,
    );
  }

  late final _gsl_multifit_fdfridge_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multifit_fdfridge>)>>(
      'gsl_multifit_fdfridge_name');
  late final _gsl_multifit_fdfridge_name =
      _gsl_multifit_fdfridge_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_multifit_fdfridge>)>();

  ffi.Pointer<gsl_vector> gsl_multifit_fdfridge_position(
    ffi.Pointer<gsl_multifit_fdfridge> w,
  ) {
    return _gsl_multifit_fdfridge_position(
      w,
    );
  }

  late final _gsl_multifit_fdfridge_positionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multifit_fdfridge>)>>(
      'gsl_multifit_fdfridge_position');
  late final _gsl_multifit_fdfridge_position =
      _gsl_multifit_fdfridge_positionPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multifit_fdfridge>)>();

  ffi.Pointer<gsl_vector> gsl_multifit_fdfridge_residual(
    ffi.Pointer<gsl_multifit_fdfridge> w,
  ) {
    return _gsl_multifit_fdfridge_residual(
      w,
    );
  }

  late final _gsl_multifit_fdfridge_residualPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multifit_fdfridge>)>>(
      'gsl_multifit_fdfridge_residual');
  late final _gsl_multifit_fdfridge_residual =
      _gsl_multifit_fdfridge_residualPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multifit_fdfridge>)>();

  int gsl_multifit_fdfridge_niter(
    ffi.Pointer<gsl_multifit_fdfridge> w,
  ) {
    return _gsl_multifit_fdfridge_niter(
      w,
    );
  }

  late final _gsl_multifit_fdfridge_niterPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_multifit_fdfridge>)>>(
      'gsl_multifit_fdfridge_niter');
  late final _gsl_multifit_fdfridge_niter = _gsl_multifit_fdfridge_niterPtr
      .asFunction<int Function(ffi.Pointer<gsl_multifit_fdfridge>)>();

  int gsl_multifit_fdfridge_set(
    ffi.Pointer<gsl_multifit_fdfridge> w,
    ffi.Pointer<gsl_multifit_function_fdf> f,
    ffi.Pointer<gsl_vector> x,
    double lambda,
  ) {
    return _gsl_multifit_fdfridge_set(
      w,
      f,
      x,
      lambda,
    );
  }

  late final _gsl_multifit_fdfridge_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Double)>>('gsl_multifit_fdfridge_set');
  late final _gsl_multifit_fdfridge_set =
      _gsl_multifit_fdfridge_setPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              double)>();

  int gsl_multifit_fdfridge_wset(
    ffi.Pointer<gsl_multifit_fdfridge> w,
    ffi.Pointer<gsl_multifit_function_fdf> f,
    ffi.Pointer<gsl_vector> x,
    double lambda,
    ffi.Pointer<gsl_vector> wts,
  ) {
    return _gsl_multifit_fdfridge_wset(
      w,
      f,
      x,
      lambda,
      wts,
    );
  }

  late final _gsl_multifit_fdfridge_wsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_fdfridge_wset');
  late final _gsl_multifit_fdfridge_wset =
      _gsl_multifit_fdfridge_wsetPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              double,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_fdfridge_set2(
    ffi.Pointer<gsl_multifit_fdfridge> w,
    ffi.Pointer<gsl_multifit_function_fdf> f,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> lambda,
  ) {
    return _gsl_multifit_fdfridge_set2(
      w,
      f,
      x,
      lambda,
    );
  }

  late final _gsl_multifit_fdfridge_set2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_fdfridge_set2');
  late final _gsl_multifit_fdfridge_set2 =
      _gsl_multifit_fdfridge_set2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_fdfridge_wset2(
    ffi.Pointer<gsl_multifit_fdfridge> w,
    ffi.Pointer<gsl_multifit_function_fdf> f,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> lambda,
    ffi.Pointer<gsl_vector> wts,
  ) {
    return _gsl_multifit_fdfridge_wset2(
      w,
      f,
      x,
      lambda,
      wts,
    );
  }

  late final _gsl_multifit_fdfridge_wset2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_fdfridge_wset2');
  late final _gsl_multifit_fdfridge_wset2 =
      _gsl_multifit_fdfridge_wset2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_fdfridge_set3(
    ffi.Pointer<gsl_multifit_fdfridge> w,
    ffi.Pointer<gsl_multifit_function_fdf> f,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_matrix> L,
  ) {
    return _gsl_multifit_fdfridge_set3(
      w,
      f,
      x,
      L,
    );
  }

  late final _gsl_multifit_fdfridge_set3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>>('gsl_multifit_fdfridge_set3');
  late final _gsl_multifit_fdfridge_set3 =
      _gsl_multifit_fdfridge_set3Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>();

  int gsl_multifit_fdfridge_wset3(
    ffi.Pointer<gsl_multifit_fdfridge> w,
    ffi.Pointer<gsl_multifit_function_fdf> f,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_vector> wts,
  ) {
    return _gsl_multifit_fdfridge_wset3(
      w,
      f,
      x,
      L,
      wts,
    );
  }

  late final _gsl_multifit_fdfridge_wset3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_fdfridge_wset3');
  late final _gsl_multifit_fdfridge_wset3 =
      _gsl_multifit_fdfridge_wset3Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_fdfridge_iterate(
    ffi.Pointer<gsl_multifit_fdfridge> w,
  ) {
    return _gsl_multifit_fdfridge_iterate(
      w,
    );
  }

  late final _gsl_multifit_fdfridge_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_multifit_fdfridge>)>>(
      'gsl_multifit_fdfridge_iterate');
  late final _gsl_multifit_fdfridge_iterate = _gsl_multifit_fdfridge_iteratePtr
      .asFunction<int Function(ffi.Pointer<gsl_multifit_fdfridge>)>();

  int gsl_multifit_fdfridge_driver(
    ffi.Pointer<gsl_multifit_fdfridge> w,
    int maxiter,
    double xtol,
    double gtol,
    double ftol,
    ffi.Pointer<ffi.Int32> info,
  ) {
    return _gsl_multifit_fdfridge_driver(
      w,
      maxiter,
      xtol,
      gtol,
      ftol,
      info,
    );
  }

  late final _gsl_multifit_fdfridge_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_fdfridge>,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Int32>)>>('gsl_multifit_fdfridge_driver');
  late final _gsl_multifit_fdfridge_driver =
      _gsl_multifit_fdfridge_driverPtr.asFunction<
          int Function(ffi.Pointer<gsl_multifit_fdfridge>, int, double, double,
              double, ffi.Pointer<ffi.Int32>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_fdfsolver_type>>
      _gsl_multifit_fdfsolver_lmsder =
      _lookup<ffi.Pointer<gsl_multifit_fdfsolver_type>>(
          'gsl_multifit_fdfsolver_lmsder');

  ffi.Pointer<gsl_multifit_fdfsolver_type> get gsl_multifit_fdfsolver_lmsder =>
      _gsl_multifit_fdfsolver_lmsder.value;

  set gsl_multifit_fdfsolver_lmsder(
          ffi.Pointer<gsl_multifit_fdfsolver_type> value) =>
      _gsl_multifit_fdfsolver_lmsder.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_fdfsolver_type>>
      _gsl_multifit_fdfsolver_lmder =
      _lookup<ffi.Pointer<gsl_multifit_fdfsolver_type>>(
          'gsl_multifit_fdfsolver_lmder');

  ffi.Pointer<gsl_multifit_fdfsolver_type> get gsl_multifit_fdfsolver_lmder =>
      _gsl_multifit_fdfsolver_lmder.value;

  set gsl_multifit_fdfsolver_lmder(
          ffi.Pointer<gsl_multifit_fdfsolver_type> value) =>
      _gsl_multifit_fdfsolver_lmder.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_fdfsolver_type>>
      _gsl_multifit_fdfsolver_lmniel =
      _lookup<ffi.Pointer<gsl_multifit_fdfsolver_type>>(
          'gsl_multifit_fdfsolver_lmniel');

  ffi.Pointer<gsl_multifit_fdfsolver_type> get gsl_multifit_fdfsolver_lmniel =>
      _gsl_multifit_fdfsolver_lmniel.value;

  set gsl_multifit_fdfsolver_lmniel(
          ffi.Pointer<gsl_multifit_fdfsolver_type> value) =>
      _gsl_multifit_fdfsolver_lmniel.value = value;

  int gsl_permute_matrix_float(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_float> A,
  ) {
    return _gsl_permute_matrix_float(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_float>)>>('gsl_permute_matrix_float');
  late final _gsl_permute_matrix_float =
      _gsl_permute_matrix_floatPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_float>)>();

  double gsl_stats_uint_mean(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>, size_t, size_t)>>('gsl_stats_uint_mean');
  late final _gsl_stats_uint_mean = _gsl_stats_uint_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_variance(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_variance');
  late final _gsl_stats_uint_variance = _gsl_stats_uint_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_sd(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>, size_t, size_t)>>('gsl_stats_uint_sd');
  late final _gsl_stats_uint_sd = _gsl_stats_uint_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_variance_with_fixed_mean(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uint_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uint_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uint_variance_with_fixed_mean');
  late final _gsl_stats_uint_variance_with_fixed_mean =
      _gsl_stats_uint_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, int, double)>();

  double gsl_stats_uint_sd_with_fixed_mean(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uint_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uint_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uint_sd_with_fixed_mean');
  late final _gsl_stats_uint_sd_with_fixed_mean =
      _gsl_stats_uint_sd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, int, double)>();

  double gsl_stats_uint_tss(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>, size_t, size_t)>>('gsl_stats_uint_tss');
  late final _gsl_stats_uint_tss = _gsl_stats_uint_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_tss_m(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uint_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uint_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uint_tss_m');
  late final _gsl_stats_uint_tss_m = _gsl_stats_uint_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int, double)>();

  double gsl_stats_uint_absdev(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_absdev');
  late final _gsl_stats_uint_absdev = _gsl_stats_uint_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_skew(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>, size_t, size_t)>>('gsl_stats_uint_skew');
  late final _gsl_stats_uint_skew = _gsl_stats_uint_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_kurtosis(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_kurtosis');
  late final _gsl_stats_uint_kurtosis = _gsl_stats_uint_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_lag1_autocorrelation(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_lag1_autocorrelation');
  late final _gsl_stats_uint_lag1_autocorrelation =
      _gsl_stats_uint_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_covariance(
    ffi.Pointer<ffi.Uint32> data1,
    int stride1,
    ffi.Pointer<ffi.Uint32> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_uint_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_uint_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_stats_uint_covariance');
  late final _gsl_stats_uint_covariance =
      _gsl_stats_uint_covariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<ffi.Uint32>,
              int, int)>();

  double gsl_stats_uint_correlation(
    ffi.Pointer<ffi.Uint32> data1,
    int stride1,
    ffi.Pointer<ffi.Uint32> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_uint_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_uint_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_stats_uint_correlation');
  late final _gsl_stats_uint_correlation =
      _gsl_stats_uint_correlationPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<ffi.Uint32>,
              int, int)>();

  double gsl_stats_uint_spearman(
    ffi.Pointer<ffi.Uint32> data1,
    int stride1,
    ffi.Pointer<ffi.Uint32> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_uint_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_uint_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_uint_spearman');
  late final _gsl_stats_uint_spearman = _gsl_stats_uint_spearmanPtr.asFunction<
      double Function(ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<ffi.Uint32>,
          int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_uint_variance_m(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uint_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uint_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uint_variance_m');
  late final _gsl_stats_uint_variance_m = _gsl_stats_uint_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int, double)>();

  double gsl_stats_uint_sd_m(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uint_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uint_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uint_sd_m');
  late final _gsl_stats_uint_sd_m = _gsl_stats_uint_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int, double)>();

  double gsl_stats_uint_absdev_m(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uint_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uint_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uint_absdev_m');
  late final _gsl_stats_uint_absdev_m = _gsl_stats_uint_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int, double)>();

  double gsl_stats_uint_skew_m_sd(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_uint_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_uint_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_uint_skew_m_sd');
  late final _gsl_stats_uint_skew_m_sd =
      _gsl_stats_uint_skew_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, int, double, double)>();

  double gsl_stats_uint_kurtosis_m_sd(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_uint_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_uint_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_uint_kurtosis_m_sd');
  late final _gsl_stats_uint_kurtosis_m_sd =
      _gsl_stats_uint_kurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, int, double, double)>();

  double gsl_stats_uint_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uint_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uint_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uint_lag1_autocorrelation_m');
  late final _gsl_stats_uint_lag1_autocorrelation_m =
      _gsl_stats_uint_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, int, double)>();

  double gsl_stats_uint_covariance_m(
    ffi.Pointer<ffi.Uint32> data1,
    int stride1,
    ffi.Pointer<ffi.Uint32> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_uint_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_uint_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_uint_covariance_m');
  late final _gsl_stats_uint_covariance_m =
      _gsl_stats_uint_covariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<ffi.Uint32>,
              int, int, double, double)>();

  double gsl_stats_uint_pvariance(
    ffi.Pointer<ffi.Uint32> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Uint32> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_uint_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_uint_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_stats_uint_pvariance');
  late final _gsl_stats_uint_pvariance =
      _gsl_stats_uint_pvariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, int,
              ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_ttest(
    ffi.Pointer<ffi.Uint32> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Uint32> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_uint_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_uint_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_stats_uint_ttest');
  late final _gsl_stats_uint_ttest = _gsl_stats_uint_ttestPtr.asFunction<
      double Function(ffi.Pointer<ffi.Uint32>, int, int,
          ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_stats_uint_max(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint32>, size_t, size_t)>>('gsl_stats_uint_max');
  late final _gsl_stats_uint_max = _gsl_stats_uint_maxPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_stats_uint_min(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint32>, size_t, size_t)>>('gsl_stats_uint_min');
  late final _gsl_stats_uint_min = _gsl_stats_uint_minPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  void gsl_stats_uint_minmax(
    ffi.Pointer<ffi.Uint32> min,
    ffi.Pointer<ffi.Uint32> max,
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_stats_uint_minmax');
  late final _gsl_stats_uint_minmax = _gsl_stats_uint_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_stats_uint_max_index(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_max_index');
  late final _gsl_stats_uint_max_index = _gsl_stats_uint_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_stats_uint_min_index(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_min_index');
  late final _gsl_stats_uint_min_index = _gsl_stats_uint_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  void gsl_stats_uint_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_stats_uint_minmax_index');
  late final _gsl_stats_uint_minmax_index =
      _gsl_stats_uint_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_stats_uint_select(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_uint_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_uint_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              size_t)>>('gsl_stats_uint_select');
  late final _gsl_stats_uint_select = _gsl_stats_uint_selectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint32>, int, int, int)>();

  double gsl_stats_uint_median_from_sorted_data(
    ffi.Pointer<ffi.Uint32> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_median_from_sorted_data');
  late final _gsl_stats_uint_median_from_sorted_data =
      _gsl_stats_uint_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_median(
    ffi.Pointer<ffi.Uint32> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_median');
  late final _gsl_stats_uint_median = _gsl_stats_uint_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_quantile_from_sorted_data(
    ffi.Pointer<ffi.Uint32> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_uint_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_uint_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uint_quantile_from_sorted_data');
  late final _gsl_stats_uint_quantile_from_sorted_data =
      _gsl_stats_uint_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, int, double)>();

  double gsl_stats_uint_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Uint32> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_trmean_from_sorted_data');
  late final _gsl_stats_uint_trmean_from_sorted_data =
      _gsl_stats_uint_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Uint32> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uint_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uint_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t,
              size_t)>>('gsl_stats_uint_gastwirth_from_sorted_data');
  late final _gsl_stats_uint_gastwirth_from_sorted_data =
      _gsl_stats_uint_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  double gsl_stats_uint_mad0(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_uint_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_uint_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_uint_mad0');
  late final _gsl_stats_uint_mad0 = _gsl_stats_uint_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint32>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_uint_mad(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_uint_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_uint_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_uint_mad');
  late final _gsl_stats_uint_mad = _gsl_stats_uint_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint32>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_stats_uint_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Uint32> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint32> work,
  ) {
    return _gsl_stats_uint_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_uint_Sn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Pointer<ffi.Uint32>)>>('gsl_stats_uint_Sn0_from_sorted_data');
  late final _gsl_stats_uint_Sn0_from_sorted_data =
      _gsl_stats_uint_Sn0_from_sorted_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint32>, int, int, ffi.Pointer<ffi.Uint32>)>();

  double gsl_stats_uint_Sn_from_sorted_data(
    ffi.Pointer<ffi.Uint32> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint32> work,
  ) {
    return _gsl_stats_uint_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_uint_Sn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint32>, size_t, size_t,
              ffi.Pointer<ffi.Uint32>)>>('gsl_stats_uint_Sn_from_sorted_data');
  late final _gsl_stats_uint_Sn_from_sorted_data =
      _gsl_stats_uint_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Uint32>, int, int, ffi.Pointer<ffi.Uint32>)>();

  int gsl_stats_uint_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Uint32> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint32> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_uint_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_uint_Qn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_uint_Qn0_from_sorted_data');
  late final _gsl_stats_uint_Qn0_from_sorted_data =
      _gsl_stats_uint_Qn0_from_sorted_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint32>, int, int,
              ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_uint_Qn_from_sorted_data(
    ffi.Pointer<ffi.Uint32> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint32> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_uint_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_uint_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_uint_Qn_from_sorted_data');
  late final _gsl_stats_uint_Qn_from_sorted_data =
      _gsl_stats_uint_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint32>, int, int,
              ffi.Pointer<ffi.Uint32>, ffi.Pointer<ffi.Int32>)>();

  int gsl_permute_int(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_int(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int32>,
              size_t, size_t)>>('gsl_permute_int');
  late final _gsl_permute_int = _gsl_permute_intPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_permute_int_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_int_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_int_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int32>,
              size_t, size_t)>>('gsl_permute_int_inverse');
  late final _gsl_permute_int_inverse = _gsl_permute_int_inversePtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_sf_bessel_J0_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_J0_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_J0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_J0_e');
  late final _gsl_sf_bessel_J0_e = _gsl_sf_bessel_J0_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_J0(
    double x,
  ) {
    return _gsl_sf_bessel_J0(
      x,
    );
  }

  late final _gsl_sf_bessel_J0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_J0');
  late final _gsl_sf_bessel_J0 =
      _gsl_sf_bessel_J0Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_J1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_J1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_J1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_J1_e');
  late final _gsl_sf_bessel_J1_e = _gsl_sf_bessel_J1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_J1(
    double x,
  ) {
    return _gsl_sf_bessel_J1(
      x,
    );
  }

  late final _gsl_sf_bessel_J1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_J1');
  late final _gsl_sf_bessel_J1 =
      _gsl_sf_bessel_J1Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_Jn_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Jn_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Jn_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Jn_e');
  late final _gsl_sf_bessel_Jn_e = _gsl_sf_bessel_Jn_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Jn(
    int n,
    double x,
  ) {
    return _gsl_sf_bessel_Jn(
      n,
      x,
    );
  }

  late final _gsl_sf_bessel_JnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_Jn');
  late final _gsl_sf_bessel_Jn =
      _gsl_sf_bessel_JnPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_Jn_array(
    int nmin,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_Jn_array(
      nmin,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_Jn_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_Jn_array');
  late final _gsl_sf_bessel_Jn_array = _gsl_sf_bessel_Jn_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_Y0_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Y0_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Y0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Y0_e');
  late final _gsl_sf_bessel_Y0_e = _gsl_sf_bessel_Y0_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Y0(
    double x,
  ) {
    return _gsl_sf_bessel_Y0(
      x,
    );
  }

  late final _gsl_sf_bessel_Y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_Y0');
  late final _gsl_sf_bessel_Y0 =
      _gsl_sf_bessel_Y0Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_Y1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Y1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Y1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Y1_e');
  late final _gsl_sf_bessel_Y1_e = _gsl_sf_bessel_Y1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Y1(
    double x,
  ) {
    return _gsl_sf_bessel_Y1(
      x,
    );
  }

  late final _gsl_sf_bessel_Y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_Y1');
  late final _gsl_sf_bessel_Y1 =
      _gsl_sf_bessel_Y1Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_Yn_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Yn_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Yn_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Yn_e');
  late final _gsl_sf_bessel_Yn_e = _gsl_sf_bessel_Yn_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Yn(
    int n,
    double x,
  ) {
    return _gsl_sf_bessel_Yn(
      n,
      x,
    );
  }

  late final _gsl_sf_bessel_YnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_Yn');
  late final _gsl_sf_bessel_Yn =
      _gsl_sf_bessel_YnPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_Yn_array(
    int nmin,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_Yn_array(
      nmin,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_Yn_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_Yn_array');
  late final _gsl_sf_bessel_Yn_array = _gsl_sf_bessel_Yn_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_I0_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_I0_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_I0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_I0_e');
  late final _gsl_sf_bessel_I0_e = _gsl_sf_bessel_I0_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_I0(
    double x,
  ) {
    return _gsl_sf_bessel_I0(
      x,
    );
  }

  late final _gsl_sf_bessel_I0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_I0');
  late final _gsl_sf_bessel_I0 =
      _gsl_sf_bessel_I0Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_I1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_I1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_I1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_I1_e');
  late final _gsl_sf_bessel_I1_e = _gsl_sf_bessel_I1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_I1(
    double x,
  ) {
    return _gsl_sf_bessel_I1(
      x,
    );
  }

  late final _gsl_sf_bessel_I1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_I1');
  late final _gsl_sf_bessel_I1 =
      _gsl_sf_bessel_I1Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_In_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_In_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_In_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_In_e');
  late final _gsl_sf_bessel_In_e = _gsl_sf_bessel_In_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_In(
    int n,
    double x,
  ) {
    return _gsl_sf_bessel_In(
      n,
      x,
    );
  }

  late final _gsl_sf_bessel_InPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_In');
  late final _gsl_sf_bessel_In =
      _gsl_sf_bessel_InPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_In_array(
    int nmin,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_In_array(
      nmin,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_In_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_In_array');
  late final _gsl_sf_bessel_In_array = _gsl_sf_bessel_In_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_I0_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_I0_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_I0_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_I0_scaled_e');
  late final _gsl_sf_bessel_I0_scaled_e = _gsl_sf_bessel_I0_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_I0_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_I0_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_I0_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_I0_scaled');
  late final _gsl_sf_bessel_I0_scaled =
      _gsl_sf_bessel_I0_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_I1_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_I1_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_I1_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_I1_scaled_e');
  late final _gsl_sf_bessel_I1_scaled_e = _gsl_sf_bessel_I1_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_I1_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_I1_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_I1_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_I1_scaled');
  late final _gsl_sf_bessel_I1_scaled =
      _gsl_sf_bessel_I1_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_In_scaled_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_In_scaled_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_In_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_In_scaled_e');
  late final _gsl_sf_bessel_In_scaled_e = _gsl_sf_bessel_In_scaled_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_In_scaled(
    int n,
    double x,
  ) {
    return _gsl_sf_bessel_In_scaled(
      n,
      x,
    );
  }

  late final _gsl_sf_bessel_In_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_In_scaled');
  late final _gsl_sf_bessel_In_scaled =
      _gsl_sf_bessel_In_scaledPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_In_scaled_array(
    int nmin,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_In_scaled_array(
      nmin,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_In_scaled_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_In_scaled_array');
  late final _gsl_sf_bessel_In_scaled_array = _gsl_sf_bessel_In_scaled_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_K0_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_K0_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_K0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_K0_e');
  late final _gsl_sf_bessel_K0_e = _gsl_sf_bessel_K0_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_K0(
    double x,
  ) {
    return _gsl_sf_bessel_K0(
      x,
    );
  }

  late final _gsl_sf_bessel_K0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_K0');
  late final _gsl_sf_bessel_K0 =
      _gsl_sf_bessel_K0Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_K1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_K1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_K1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_K1_e');
  late final _gsl_sf_bessel_K1_e = _gsl_sf_bessel_K1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_K1(
    double x,
  ) {
    return _gsl_sf_bessel_K1(
      x,
    );
  }

  late final _gsl_sf_bessel_K1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_K1');
  late final _gsl_sf_bessel_K1 =
      _gsl_sf_bessel_K1Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_Kn_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Kn_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Kn_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Kn_e');
  late final _gsl_sf_bessel_Kn_e = _gsl_sf_bessel_Kn_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Kn(
    int n,
    double x,
  ) {
    return _gsl_sf_bessel_Kn(
      n,
      x,
    );
  }

  late final _gsl_sf_bessel_KnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_Kn');
  late final _gsl_sf_bessel_Kn =
      _gsl_sf_bessel_KnPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_Kn_array(
    int nmin,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_Kn_array(
      nmin,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_Kn_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_Kn_array');
  late final _gsl_sf_bessel_Kn_array = _gsl_sf_bessel_Kn_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_K0_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_K0_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_K0_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_K0_scaled_e');
  late final _gsl_sf_bessel_K0_scaled_e = _gsl_sf_bessel_K0_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_K0_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_K0_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_K0_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_K0_scaled');
  late final _gsl_sf_bessel_K0_scaled =
      _gsl_sf_bessel_K0_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_K1_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_K1_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_K1_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_K1_scaled_e');
  late final _gsl_sf_bessel_K1_scaled_e = _gsl_sf_bessel_K1_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_K1_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_K1_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_K1_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_K1_scaled');
  late final _gsl_sf_bessel_K1_scaled =
      _gsl_sf_bessel_K1_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_Kn_scaled_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Kn_scaled_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Kn_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Kn_scaled_e');
  late final _gsl_sf_bessel_Kn_scaled_e = _gsl_sf_bessel_Kn_scaled_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Kn_scaled(
    int n,
    double x,
  ) {
    return _gsl_sf_bessel_Kn_scaled(
      n,
      x,
    );
  }

  late final _gsl_sf_bessel_Kn_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_Kn_scaled');
  late final _gsl_sf_bessel_Kn_scaled =
      _gsl_sf_bessel_Kn_scaledPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_Kn_scaled_array(
    int nmin,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_Kn_scaled_array(
      nmin,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_Kn_scaled_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_Kn_scaled_array');
  late final _gsl_sf_bessel_Kn_scaled_array = _gsl_sf_bessel_Kn_scaled_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_j0_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_j0_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_j0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_j0_e');
  late final _gsl_sf_bessel_j0_e = _gsl_sf_bessel_j0_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_j0(
    double x,
  ) {
    return _gsl_sf_bessel_j0(
      x,
    );
  }

  late final _gsl_sf_bessel_j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_j0');
  late final _gsl_sf_bessel_j0 =
      _gsl_sf_bessel_j0Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_j1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_j1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_j1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_j1_e');
  late final _gsl_sf_bessel_j1_e = _gsl_sf_bessel_j1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_j1(
    double x,
  ) {
    return _gsl_sf_bessel_j1(
      x,
    );
  }

  late final _gsl_sf_bessel_j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_j1');
  late final _gsl_sf_bessel_j1 =
      _gsl_sf_bessel_j1Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_j2_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_j2_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_j2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_j2_e');
  late final _gsl_sf_bessel_j2_e = _gsl_sf_bessel_j2_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_j2(
    double x,
  ) {
    return _gsl_sf_bessel_j2(
      x,
    );
  }

  late final _gsl_sf_bessel_j2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_j2');
  late final _gsl_sf_bessel_j2 =
      _gsl_sf_bessel_j2Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_jl_e(
    int l,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_jl_e(
      l,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_jl_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_jl_e');
  late final _gsl_sf_bessel_jl_e = _gsl_sf_bessel_jl_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_jl(
    int l,
    double x,
  ) {
    return _gsl_sf_bessel_jl(
      l,
      x,
    );
  }

  late final _gsl_sf_bessel_jlPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_jl');
  late final _gsl_sf_bessel_jl =
      _gsl_sf_bessel_jlPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_jl_array(
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_jl_array(
      lmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_jl_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_jl_array');
  late final _gsl_sf_bessel_jl_array = _gsl_sf_bessel_jl_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_jl_steed_array(
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> jl_x_array,
  ) {
    return _gsl_sf_bessel_jl_steed_array(
      lmax,
      x,
      jl_x_array,
    );
  }

  late final _gsl_sf_bessel_jl_steed_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_jl_steed_array');
  late final _gsl_sf_bessel_jl_steed_array = _gsl_sf_bessel_jl_steed_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_y0_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_y0_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_y0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_y0_e');
  late final _gsl_sf_bessel_y0_e = _gsl_sf_bessel_y0_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_y0(
    double x,
  ) {
    return _gsl_sf_bessel_y0(
      x,
    );
  }

  late final _gsl_sf_bessel_y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_y0');
  late final _gsl_sf_bessel_y0 =
      _gsl_sf_bessel_y0Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_y1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_y1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_y1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_y1_e');
  late final _gsl_sf_bessel_y1_e = _gsl_sf_bessel_y1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_y1(
    double x,
  ) {
    return _gsl_sf_bessel_y1(
      x,
    );
  }

  late final _gsl_sf_bessel_y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_y1');
  late final _gsl_sf_bessel_y1 =
      _gsl_sf_bessel_y1Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_y2_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_y2_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_y2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_y2_e');
  late final _gsl_sf_bessel_y2_e = _gsl_sf_bessel_y2_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_y2(
    double x,
  ) {
    return _gsl_sf_bessel_y2(
      x,
    );
  }

  late final _gsl_sf_bessel_y2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_y2');
  late final _gsl_sf_bessel_y2 =
      _gsl_sf_bessel_y2Ptr.asFunction<double Function(double)>();

  int gsl_sf_bessel_yl_e(
    int l,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_yl_e(
      l,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_yl_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_yl_e');
  late final _gsl_sf_bessel_yl_e = _gsl_sf_bessel_yl_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_yl(
    int l,
    double x,
  ) {
    return _gsl_sf_bessel_yl(
      l,
      x,
    );
  }

  late final _gsl_sf_bessel_ylPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_yl');
  late final _gsl_sf_bessel_yl =
      _gsl_sf_bessel_ylPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_yl_array(
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_yl_array(
      lmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_yl_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_yl_array');
  late final _gsl_sf_bessel_yl_array = _gsl_sf_bessel_yl_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_i0_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_i0_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_i0_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_i0_scaled_e');
  late final _gsl_sf_bessel_i0_scaled_e = _gsl_sf_bessel_i0_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_i0_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_i0_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_i0_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_i0_scaled');
  late final _gsl_sf_bessel_i0_scaled =
      _gsl_sf_bessel_i0_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_i1_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_i1_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_i1_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_i1_scaled_e');
  late final _gsl_sf_bessel_i1_scaled_e = _gsl_sf_bessel_i1_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_i1_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_i1_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_i1_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_i1_scaled');
  late final _gsl_sf_bessel_i1_scaled =
      _gsl_sf_bessel_i1_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_i2_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_i2_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_i2_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_i2_scaled_e');
  late final _gsl_sf_bessel_i2_scaled_e = _gsl_sf_bessel_i2_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_i2_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_i2_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_i2_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_i2_scaled');
  late final _gsl_sf_bessel_i2_scaled =
      _gsl_sf_bessel_i2_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_il_scaled_e(
    int l,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_il_scaled_e(
      l,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_il_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_il_scaled_e');
  late final _gsl_sf_bessel_il_scaled_e = _gsl_sf_bessel_il_scaled_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_il_scaled(
    int l,
    double x,
  ) {
    return _gsl_sf_bessel_il_scaled(
      l,
      x,
    );
  }

  late final _gsl_sf_bessel_il_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_il_scaled');
  late final _gsl_sf_bessel_il_scaled =
      _gsl_sf_bessel_il_scaledPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_il_scaled_array(
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_il_scaled_array(
      lmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_il_scaled_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_il_scaled_array');
  late final _gsl_sf_bessel_il_scaled_array = _gsl_sf_bessel_il_scaled_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_k0_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_k0_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_k0_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_k0_scaled_e');
  late final _gsl_sf_bessel_k0_scaled_e = _gsl_sf_bessel_k0_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_k0_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_k0_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_k0_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_k0_scaled');
  late final _gsl_sf_bessel_k0_scaled =
      _gsl_sf_bessel_k0_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_k1_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_k1_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_k1_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_k1_scaled_e');
  late final _gsl_sf_bessel_k1_scaled_e = _gsl_sf_bessel_k1_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_k1_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_k1_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_k1_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_k1_scaled');
  late final _gsl_sf_bessel_k1_scaled =
      _gsl_sf_bessel_k1_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_k2_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_k2_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_k2_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_k2_scaled_e');
  late final _gsl_sf_bessel_k2_scaled_e = _gsl_sf_bessel_k2_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_k2_scaled(
    double x,
  ) {
    return _gsl_sf_bessel_k2_scaled(
      x,
    );
  }

  late final _gsl_sf_bessel_k2_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_bessel_k2_scaled');
  late final _gsl_sf_bessel_k2_scaled =
      _gsl_sf_bessel_k2_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_bessel_kl_scaled_e(
    int l,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_kl_scaled_e(
      l,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_kl_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_kl_scaled_e');
  late final _gsl_sf_bessel_kl_scaled_e = _gsl_sf_bessel_kl_scaled_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_kl_scaled(
    int l,
    double x,
  ) {
    return _gsl_sf_bessel_kl_scaled(
      l,
      x,
    );
  }

  late final _gsl_sf_bessel_kl_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_bessel_kl_scaled');
  late final _gsl_sf_bessel_kl_scaled =
      _gsl_sf_bessel_kl_scaledPtr.asFunction<double Function(int, double)>();

  int gsl_sf_bessel_kl_scaled_array(
    int lmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_bessel_kl_scaled_array(
      lmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_bessel_kl_scaled_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_kl_scaled_array');
  late final _gsl_sf_bessel_kl_scaled_array = _gsl_sf_bessel_kl_scaled_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_Jnu_e(
    double nu,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Jnu_e(
      nu,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Jnu_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Jnu_e');
  late final _gsl_sf_bessel_Jnu_e = _gsl_sf_bessel_Jnu_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Jnu(
    double nu,
    double x,
  ) {
    return _gsl_sf_bessel_Jnu(
      nu,
      x,
    );
  }

  late final _gsl_sf_bessel_JnuPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_bessel_Jnu');
  late final _gsl_sf_bessel_Jnu =
      _gsl_sf_bessel_JnuPtr.asFunction<double Function(double, double)>();

  int gsl_sf_bessel_Ynu_e(
    double nu,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Ynu_e(
      nu,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Ynu_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Ynu_e');
  late final _gsl_sf_bessel_Ynu_e = _gsl_sf_bessel_Ynu_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Ynu(
    double nu,
    double x,
  ) {
    return _gsl_sf_bessel_Ynu(
      nu,
      x,
    );
  }

  late final _gsl_sf_bessel_YnuPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_bessel_Ynu');
  late final _gsl_sf_bessel_Ynu =
      _gsl_sf_bessel_YnuPtr.asFunction<double Function(double, double)>();

  int gsl_sf_bessel_sequence_Jnu_e(
    double nu,
    int mode,
    int size,
    ffi.Pointer<ffi.Double> v,
  ) {
    return _gsl_sf_bessel_sequence_Jnu_e(
      nu,
      mode,
      size,
      v,
    );
  }

  late final _gsl_sf_bessel_sequence_Jnu_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_bessel_sequence_Jnu_e');
  late final _gsl_sf_bessel_sequence_Jnu_e = _gsl_sf_bessel_sequence_Jnu_ePtr
      .asFunction<int Function(double, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_bessel_Inu_scaled_e(
    double nu,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Inu_scaled_e(
      nu,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Inu_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Inu_scaled_e');
  late final _gsl_sf_bessel_Inu_scaled_e = _gsl_sf_bessel_Inu_scaled_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Inu_scaled(
    double nu,
    double x,
  ) {
    return _gsl_sf_bessel_Inu_scaled(
      nu,
      x,
    );
  }

  late final _gsl_sf_bessel_Inu_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_bessel_Inu_scaled');
  late final _gsl_sf_bessel_Inu_scaled = _gsl_sf_bessel_Inu_scaledPtr
      .asFunction<double Function(double, double)>();

  int gsl_sf_bessel_Inu_e(
    double nu,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Inu_e(
      nu,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Inu_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Inu_e');
  late final _gsl_sf_bessel_Inu_e = _gsl_sf_bessel_Inu_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Inu(
    double nu,
    double x,
  ) {
    return _gsl_sf_bessel_Inu(
      nu,
      x,
    );
  }

  late final _gsl_sf_bessel_InuPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_bessel_Inu');
  late final _gsl_sf_bessel_Inu =
      _gsl_sf_bessel_InuPtr.asFunction<double Function(double, double)>();

  int gsl_sf_bessel_Knu_scaled_e(
    double nu,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Knu_scaled_e(
      nu,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Knu_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Knu_scaled_e');
  late final _gsl_sf_bessel_Knu_scaled_e = _gsl_sf_bessel_Knu_scaled_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Knu_scaled(
    double nu,
    double x,
  ) {
    return _gsl_sf_bessel_Knu_scaled(
      nu,
      x,
    );
  }

  late final _gsl_sf_bessel_Knu_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_bessel_Knu_scaled');
  late final _gsl_sf_bessel_Knu_scaled = _gsl_sf_bessel_Knu_scaledPtr
      .asFunction<double Function(double, double)>();

  int gsl_sf_bessel_Knu_scaled_e10_e(
    double nu,
    double x,
    ffi.Pointer<gsl_sf_result_e10> result,
  ) {
    return _gsl_sf_bessel_Knu_scaled_e10_e(
      nu,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Knu_scaled_e10_ePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result_e10>)>>(
      'gsl_sf_bessel_Knu_scaled_e10_e');
  late final _gsl_sf_bessel_Knu_scaled_e10_e =
      _gsl_sf_bessel_Knu_scaled_e10_ePtr.asFunction<
          int Function(double, double, ffi.Pointer<gsl_sf_result_e10>)>();

  int gsl_sf_bessel_Knu_e(
    double nu,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_Knu_e(
      nu,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_Knu_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_Knu_e');
  late final _gsl_sf_bessel_Knu_e = _gsl_sf_bessel_Knu_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_Knu(
    double nu,
    double x,
  ) {
    return _gsl_sf_bessel_Knu(
      nu,
      x,
    );
  }

  late final _gsl_sf_bessel_KnuPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_bessel_Knu');
  late final _gsl_sf_bessel_Knu =
      _gsl_sf_bessel_KnuPtr.asFunction<double Function(double, double)>();

  int gsl_sf_bessel_lnKnu_e(
    double nu,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_lnKnu_e(
      nu,
      x,
      result,
    );
  }

  late final _gsl_sf_bessel_lnKnu_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_lnKnu_e');
  late final _gsl_sf_bessel_lnKnu_e = _gsl_sf_bessel_lnKnu_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_lnKnu(
    double nu,
    double x,
  ) {
    return _gsl_sf_bessel_lnKnu(
      nu,
      x,
    );
  }

  late final _gsl_sf_bessel_lnKnuPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_bessel_lnKnu');
  late final _gsl_sf_bessel_lnKnu =
      _gsl_sf_bessel_lnKnuPtr.asFunction<double Function(double, double)>();

  int gsl_sf_bessel_zero_J0_e(
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_zero_J0_e(
      s,
      result,
    );
  }

  late final _gsl_sf_bessel_zero_J0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_zero_J0_e');
  late final _gsl_sf_bessel_zero_J0_e = _gsl_sf_bessel_zero_J0_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_zero_J0(
    int s,
  ) {
    return _gsl_sf_bessel_zero_J0(
      s,
    );
  }

  late final _gsl_sf_bessel_zero_J0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_bessel_zero_J0');
  late final _gsl_sf_bessel_zero_J0 =
      _gsl_sf_bessel_zero_J0Ptr.asFunction<double Function(int)>();

  int gsl_sf_bessel_zero_J1_e(
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_zero_J1_e(
      s,
      result,
    );
  }

  late final _gsl_sf_bessel_zero_J1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_zero_J1_e');
  late final _gsl_sf_bessel_zero_J1_e = _gsl_sf_bessel_zero_J1_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_zero_J1(
    int s,
  ) {
    return _gsl_sf_bessel_zero_J1(
      s,
    );
  }

  late final _gsl_sf_bessel_zero_J1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_bessel_zero_J1');
  late final _gsl_sf_bessel_zero_J1 =
      _gsl_sf_bessel_zero_J1Ptr.asFunction<double Function(int)>();

  int gsl_sf_bessel_zero_Jnu_e(
    double nu,
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_bessel_zero_Jnu_e(
      nu,
      s,
      result,
    );
  }

  late final _gsl_sf_bessel_zero_Jnu_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_bessel_zero_Jnu_e');
  late final _gsl_sf_bessel_zero_Jnu_e = _gsl_sf_bessel_zero_Jnu_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_bessel_zero_Jnu(
    double nu,
    int s,
  ) {
    return _gsl_sf_bessel_zero_Jnu(
      nu,
      s,
    );
  }

  late final _gsl_sf_bessel_zero_JnuPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Uint32)>>(
          'gsl_sf_bessel_zero_Jnu');
  late final _gsl_sf_bessel_zero_Jnu =
      _gsl_sf_bessel_zero_JnuPtr.asFunction<double Function(double, int)>();

  int gsl_sf_transport_2_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_transport_2_e(
      x,
      result,
    );
  }

  late final _gsl_sf_transport_2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_transport_2_e');
  late final _gsl_sf_transport_2_e = _gsl_sf_transport_2_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_transport_2(
    double x,
  ) {
    return _gsl_sf_transport_2(
      x,
    );
  }

  late final _gsl_sf_transport_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_transport_2');
  late final _gsl_sf_transport_2 =
      _gsl_sf_transport_2Ptr.asFunction<double Function(double)>();

  int gsl_sf_transport_3_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_transport_3_e(
      x,
      result,
    );
  }

  late final _gsl_sf_transport_3_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_transport_3_e');
  late final _gsl_sf_transport_3_e = _gsl_sf_transport_3_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_transport_3(
    double x,
  ) {
    return _gsl_sf_transport_3(
      x,
    );
  }

  late final _gsl_sf_transport_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_transport_3');
  late final _gsl_sf_transport_3 =
      _gsl_sf_transport_3Ptr.asFunction<double Function(double)>();

  int gsl_sf_transport_4_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_transport_4_e(
      x,
      result,
    );
  }

  late final _gsl_sf_transport_4_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_transport_4_e');
  late final _gsl_sf_transport_4_e = _gsl_sf_transport_4_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_transport_4(
    double x,
  ) {
    return _gsl_sf_transport_4(
      x,
    );
  }

  late final _gsl_sf_transport_4Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_transport_4');
  late final _gsl_sf_transport_4 =
      _gsl_sf_transport_4Ptr.asFunction<double Function(double)>();

  int gsl_sf_transport_5_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_transport_5_e(
      x,
      result,
    );
  }

  late final _gsl_sf_transport_5_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_transport_5_e');
  late final _gsl_sf_transport_5_e = _gsl_sf_transport_5_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_transport_5(
    double x,
  ) {
    return _gsl_sf_transport_5(
      x,
    );
  }

  late final _gsl_sf_transport_5Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_transport_5');
  late final _gsl_sf_transport_5 =
      _gsl_sf_transport_5Ptr.asFunction<double Function(double)>();

  int gsl_permute_vector_long(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_permute_vector_long(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_long>)>>('gsl_permute_vector_long');
  late final _gsl_permute_vector_long = _gsl_permute_vector_longPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_permute_vector_long_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_long> v,
  ) {
    return _gsl_permute_vector_long_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_long_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_long>)>>(
      'gsl_permute_vector_long_inverse');
  late final _gsl_permute_vector_long_inverse =
      _gsl_permute_vector_long_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_long>)>();

  int gsl_permute_complex(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_complex(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_complexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>,
              size_t, size_t)>>('gsl_permute_complex');
  late final _gsl_permute_complex = _gsl_permute_complexPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_permute_complex_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_complex_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_complex_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>,
              size_t, size_t)>>('gsl_permute_complex_inverse');
  late final _gsl_permute_complex_inverse =
      _gsl_permute_complex_inversePtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_multiroot_fdjacobian(
    ffi.Pointer<gsl_multiroot_function> F,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> f,
    double epsrel,
    ffi.Pointer<gsl_matrix> jacobian,
  ) {
    return _gsl_multiroot_fdjacobian(
      F,
      x,
      f,
      epsrel,
      jacobian,
    );
  }

  late final _gsl_multiroot_fdjacobianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multiroot_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Pointer<gsl_matrix>)>>('gsl_multiroot_fdjacobian');
  late final _gsl_multiroot_fdjacobian =
      _gsl_multiroot_fdjacobianPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multiroot_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              double,
              ffi.Pointer<gsl_matrix>)>();

  ffi.Pointer<gsl_multiroot_fsolver> gsl_multiroot_fsolver_alloc(
    ffi.Pointer<gsl_multiroot_fsolver_type> T,
    int n,
  ) {
    return _gsl_multiroot_fsolver_alloc(
      T,
      n,
    );
  }

  late final _gsl_multiroot_fsolver_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multiroot_fsolver> Function(
              ffi.Pointer<gsl_multiroot_fsolver_type>,
              size_t)>>('gsl_multiroot_fsolver_alloc');
  late final _gsl_multiroot_fsolver_alloc =
      _gsl_multiroot_fsolver_allocPtr.asFunction<
          ffi.Pointer<gsl_multiroot_fsolver> Function(
              ffi.Pointer<gsl_multiroot_fsolver_type>, int)>();

  void gsl_multiroot_fsolver_free(
    ffi.Pointer<gsl_multiroot_fsolver> s,
  ) {
    return _gsl_multiroot_fsolver_free(
      s,
    );
  }

  late final _gsl_multiroot_fsolver_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multiroot_fsolver>)>>(
      'gsl_multiroot_fsolver_free');
  late final _gsl_multiroot_fsolver_free = _gsl_multiroot_fsolver_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multiroot_fsolver>)>();

  int gsl_multiroot_fsolver_set(
    ffi.Pointer<gsl_multiroot_fsolver> s,
    ffi.Pointer<gsl_multiroot_function> f,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_multiroot_fsolver_set(
      s,
      f,
      x,
    );
  }

  late final _gsl_multiroot_fsolver_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multiroot_fsolver>,
              ffi.Pointer<gsl_multiroot_function>,
              ffi.Pointer<gsl_vector>)>>('gsl_multiroot_fsolver_set');
  late final _gsl_multiroot_fsolver_set =
      _gsl_multiroot_fsolver_setPtr.asFunction<
          int Function(ffi.Pointer<gsl_multiroot_fsolver>,
              ffi.Pointer<gsl_multiroot_function>, ffi.Pointer<gsl_vector>)>();

  int gsl_multiroot_fsolver_iterate(
    ffi.Pointer<gsl_multiroot_fsolver> s,
  ) {
    return _gsl_multiroot_fsolver_iterate(
      s,
    );
  }

  late final _gsl_multiroot_fsolver_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_multiroot_fsolver>)>>(
      'gsl_multiroot_fsolver_iterate');
  late final _gsl_multiroot_fsolver_iterate = _gsl_multiroot_fsolver_iteratePtr
      .asFunction<int Function(ffi.Pointer<gsl_multiroot_fsolver>)>();

  ffi.Pointer<ffi.Int8> gsl_multiroot_fsolver_name(
    ffi.Pointer<gsl_multiroot_fsolver> s,
  ) {
    return _gsl_multiroot_fsolver_name(
      s,
    );
  }

  late final _gsl_multiroot_fsolver_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multiroot_fsolver>)>>(
      'gsl_multiroot_fsolver_name');
  late final _gsl_multiroot_fsolver_name =
      _gsl_multiroot_fsolver_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_multiroot_fsolver>)>();

  ffi.Pointer<gsl_vector> gsl_multiroot_fsolver_root(
    ffi.Pointer<gsl_multiroot_fsolver> s,
  ) {
    return _gsl_multiroot_fsolver_root(
      s,
    );
  }

  late final _gsl_multiroot_fsolver_rootPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multiroot_fsolver>)>>(
      'gsl_multiroot_fsolver_root');
  late final _gsl_multiroot_fsolver_root =
      _gsl_multiroot_fsolver_rootPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multiroot_fsolver>)>();

  ffi.Pointer<gsl_vector> gsl_multiroot_fsolver_dx(
    ffi.Pointer<gsl_multiroot_fsolver> s,
  ) {
    return _gsl_multiroot_fsolver_dx(
      s,
    );
  }

  late final _gsl_multiroot_fsolver_dxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multiroot_fsolver>)>>('gsl_multiroot_fsolver_dx');
  late final _gsl_multiroot_fsolver_dx =
      _gsl_multiroot_fsolver_dxPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multiroot_fsolver>)>();

  ffi.Pointer<gsl_vector> gsl_multiroot_fsolver_f(
    ffi.Pointer<gsl_multiroot_fsolver> s,
  ) {
    return _gsl_multiroot_fsolver_f(
      s,
    );
  }

  late final _gsl_multiroot_fsolver_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multiroot_fsolver>)>>('gsl_multiroot_fsolver_f');
  late final _gsl_multiroot_fsolver_f = _gsl_multiroot_fsolver_fPtr.asFunction<
      ffi.Pointer<gsl_vector> Function(ffi.Pointer<gsl_multiroot_fsolver>)>();

  ffi.Pointer<gsl_multiroot_fdfsolver> gsl_multiroot_fdfsolver_alloc(
    ffi.Pointer<gsl_multiroot_fdfsolver_type> T,
    int n,
  ) {
    return _gsl_multiroot_fdfsolver_alloc(
      T,
      n,
    );
  }

  late final _gsl_multiroot_fdfsolver_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multiroot_fdfsolver> Function(
              ffi.Pointer<gsl_multiroot_fdfsolver_type>,
              size_t)>>('gsl_multiroot_fdfsolver_alloc');
  late final _gsl_multiroot_fdfsolver_alloc =
      _gsl_multiroot_fdfsolver_allocPtr.asFunction<
          ffi.Pointer<gsl_multiroot_fdfsolver> Function(
              ffi.Pointer<gsl_multiroot_fdfsolver_type>, int)>();

  int gsl_multiroot_fdfsolver_set(
    ffi.Pointer<gsl_multiroot_fdfsolver> s,
    ffi.Pointer<gsl_multiroot_function_fdf> fdf,
    ffi.Pointer<gsl_vector> x,
  ) {
    return _gsl_multiroot_fdfsolver_set(
      s,
      fdf,
      x,
    );
  }

  late final _gsl_multiroot_fdfsolver_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multiroot_fdfsolver>,
              ffi.Pointer<gsl_multiroot_function_fdf>,
              ffi.Pointer<gsl_vector>)>>('gsl_multiroot_fdfsolver_set');
  late final _gsl_multiroot_fdfsolver_set =
      _gsl_multiroot_fdfsolver_setPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multiroot_fdfsolver>,
              ffi.Pointer<gsl_multiroot_function_fdf>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multiroot_fdfsolver_iterate(
    ffi.Pointer<gsl_multiroot_fdfsolver> s,
  ) {
    return _gsl_multiroot_fdfsolver_iterate(
      s,
    );
  }

  late final _gsl_multiroot_fdfsolver_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_multiroot_fdfsolver>)>>(
      'gsl_multiroot_fdfsolver_iterate');
  late final _gsl_multiroot_fdfsolver_iterate =
      _gsl_multiroot_fdfsolver_iteratePtr
          .asFunction<int Function(ffi.Pointer<gsl_multiroot_fdfsolver>)>();

  void gsl_multiroot_fdfsolver_free(
    ffi.Pointer<gsl_multiroot_fdfsolver> s,
  ) {
    return _gsl_multiroot_fdfsolver_free(
      s,
    );
  }

  late final _gsl_multiroot_fdfsolver_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multiroot_fdfsolver>)>>(
      'gsl_multiroot_fdfsolver_free');
  late final _gsl_multiroot_fdfsolver_free = _gsl_multiroot_fdfsolver_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multiroot_fdfsolver>)>();

  ffi.Pointer<ffi.Int8> gsl_multiroot_fdfsolver_name(
    ffi.Pointer<gsl_multiroot_fdfsolver> s,
  ) {
    return _gsl_multiroot_fdfsolver_name(
      s,
    );
  }

  late final _gsl_multiroot_fdfsolver_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multiroot_fdfsolver>)>>(
      'gsl_multiroot_fdfsolver_name');
  late final _gsl_multiroot_fdfsolver_name =
      _gsl_multiroot_fdfsolver_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multiroot_fdfsolver>)>();

  ffi.Pointer<gsl_vector> gsl_multiroot_fdfsolver_root(
    ffi.Pointer<gsl_multiroot_fdfsolver> s,
  ) {
    return _gsl_multiroot_fdfsolver_root(
      s,
    );
  }

  late final _gsl_multiroot_fdfsolver_rootPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multiroot_fdfsolver>)>>(
      'gsl_multiroot_fdfsolver_root');
  late final _gsl_multiroot_fdfsolver_root =
      _gsl_multiroot_fdfsolver_rootPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multiroot_fdfsolver>)>();

  ffi.Pointer<gsl_vector> gsl_multiroot_fdfsolver_dx(
    ffi.Pointer<gsl_multiroot_fdfsolver> s,
  ) {
    return _gsl_multiroot_fdfsolver_dx(
      s,
    );
  }

  late final _gsl_multiroot_fdfsolver_dxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multiroot_fdfsolver>)>>(
      'gsl_multiroot_fdfsolver_dx');
  late final _gsl_multiroot_fdfsolver_dx =
      _gsl_multiroot_fdfsolver_dxPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multiroot_fdfsolver>)>();

  ffi.Pointer<gsl_vector> gsl_multiroot_fdfsolver_f(
    ffi.Pointer<gsl_multiroot_fdfsolver> s,
  ) {
    return _gsl_multiroot_fdfsolver_f(
      s,
    );
  }

  late final _gsl_multiroot_fdfsolver_fPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multiroot_fdfsolver>)>>(
      'gsl_multiroot_fdfsolver_f');
  late final _gsl_multiroot_fdfsolver_f =
      _gsl_multiroot_fdfsolver_fPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multiroot_fdfsolver>)>();

  int gsl_multiroot_test_delta(
    ffi.Pointer<gsl_vector> dx,
    ffi.Pointer<gsl_vector> x,
    double epsabs,
    double epsrel,
  ) {
    return _gsl_multiroot_test_delta(
      dx,
      x,
      epsabs,
      epsrel,
    );
  }

  late final _gsl_multiroot_test_deltaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Double, ffi.Double)>>('gsl_multiroot_test_delta');
  late final _gsl_multiroot_test_delta =
      _gsl_multiroot_test_deltaPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>, double,
              double)>();

  int gsl_multiroot_test_residual(
    ffi.Pointer<gsl_vector> f,
    double epsabs,
  ) {
    return _gsl_multiroot_test_residual(
      f,
      epsabs,
    );
  }

  late final _gsl_multiroot_test_residualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Double)>>('gsl_multiroot_test_residual');
  late final _gsl_multiroot_test_residual = _gsl_multiroot_test_residualPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>, double)>();

  late final ffi.Pointer<ffi.Pointer<gsl_multiroot_fsolver_type>>
      _gsl_multiroot_fsolver_dnewton =
      _lookup<ffi.Pointer<gsl_multiroot_fsolver_type>>(
          'gsl_multiroot_fsolver_dnewton');

  ffi.Pointer<gsl_multiroot_fsolver_type> get gsl_multiroot_fsolver_dnewton =>
      _gsl_multiroot_fsolver_dnewton.value;

  set gsl_multiroot_fsolver_dnewton(
          ffi.Pointer<gsl_multiroot_fsolver_type> value) =>
      _gsl_multiroot_fsolver_dnewton.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multiroot_fsolver_type>>
      _gsl_multiroot_fsolver_broyden =
      _lookup<ffi.Pointer<gsl_multiroot_fsolver_type>>(
          'gsl_multiroot_fsolver_broyden');

  ffi.Pointer<gsl_multiroot_fsolver_type> get gsl_multiroot_fsolver_broyden =>
      _gsl_multiroot_fsolver_broyden.value;

  set gsl_multiroot_fsolver_broyden(
          ffi.Pointer<gsl_multiroot_fsolver_type> value) =>
      _gsl_multiroot_fsolver_broyden.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multiroot_fsolver_type>>
      _gsl_multiroot_fsolver_hybrid =
      _lookup<ffi.Pointer<gsl_multiroot_fsolver_type>>(
          'gsl_multiroot_fsolver_hybrid');

  ffi.Pointer<gsl_multiroot_fsolver_type> get gsl_multiroot_fsolver_hybrid =>
      _gsl_multiroot_fsolver_hybrid.value;

  set gsl_multiroot_fsolver_hybrid(
          ffi.Pointer<gsl_multiroot_fsolver_type> value) =>
      _gsl_multiroot_fsolver_hybrid.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multiroot_fsolver_type>>
      _gsl_multiroot_fsolver_hybrids =
      _lookup<ffi.Pointer<gsl_multiroot_fsolver_type>>(
          'gsl_multiroot_fsolver_hybrids');

  ffi.Pointer<gsl_multiroot_fsolver_type> get gsl_multiroot_fsolver_hybrids =>
      _gsl_multiroot_fsolver_hybrids.value;

  set gsl_multiroot_fsolver_hybrids(
          ffi.Pointer<gsl_multiroot_fsolver_type> value) =>
      _gsl_multiroot_fsolver_hybrids.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multiroot_fdfsolver_type>>
      _gsl_multiroot_fdfsolver_newton =
      _lookup<ffi.Pointer<gsl_multiroot_fdfsolver_type>>(
          'gsl_multiroot_fdfsolver_newton');

  ffi.Pointer<gsl_multiroot_fdfsolver_type>
      get gsl_multiroot_fdfsolver_newton =>
          _gsl_multiroot_fdfsolver_newton.value;

  set gsl_multiroot_fdfsolver_newton(
          ffi.Pointer<gsl_multiroot_fdfsolver_type> value) =>
      _gsl_multiroot_fdfsolver_newton.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multiroot_fdfsolver_type>>
      _gsl_multiroot_fdfsolver_gnewton =
      _lookup<ffi.Pointer<gsl_multiroot_fdfsolver_type>>(
          'gsl_multiroot_fdfsolver_gnewton');

  ffi.Pointer<gsl_multiroot_fdfsolver_type>
      get gsl_multiroot_fdfsolver_gnewton =>
          _gsl_multiroot_fdfsolver_gnewton.value;

  set gsl_multiroot_fdfsolver_gnewton(
          ffi.Pointer<gsl_multiroot_fdfsolver_type> value) =>
      _gsl_multiroot_fdfsolver_gnewton.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multiroot_fdfsolver_type>>
      _gsl_multiroot_fdfsolver_hybridj =
      _lookup<ffi.Pointer<gsl_multiroot_fdfsolver_type>>(
          'gsl_multiroot_fdfsolver_hybridj');

  ffi.Pointer<gsl_multiroot_fdfsolver_type>
      get gsl_multiroot_fdfsolver_hybridj =>
          _gsl_multiroot_fdfsolver_hybridj.value;

  set gsl_multiroot_fdfsolver_hybridj(
          ffi.Pointer<gsl_multiroot_fdfsolver_type> value) =>
      _gsl_multiroot_fdfsolver_hybridj.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multiroot_fdfsolver_type>>
      _gsl_multiroot_fdfsolver_hybridsj =
      _lookup<ffi.Pointer<gsl_multiroot_fdfsolver_type>>(
          'gsl_multiroot_fdfsolver_hybridsj');

  ffi.Pointer<gsl_multiroot_fdfsolver_type>
      get gsl_multiroot_fdfsolver_hybridsj =>
          _gsl_multiroot_fdfsolver_hybridsj.value;

  set gsl_multiroot_fdfsolver_hybridsj(
          ffi.Pointer<gsl_multiroot_fdfsolver_type> value) =>
      _gsl_multiroot_fdfsolver_hybridsj.value = value;

  int gsl_sf_elljac_e(
    double u,
    double m,
    ffi.Pointer<ffi.Double> sn,
    ffi.Pointer<ffi.Double> cn,
    ffi.Pointer<ffi.Double> dn,
  ) {
    return _gsl_sf_elljac_e(
      u,
      m,
      sn,
      cn,
      dn,
    );
  }

  late final _gsl_sf_elljac_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_elljac_e');
  late final _gsl_sf_elljac_e = _gsl_sf_elljac_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_permute_vector_complex_float(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_permute_vector_complex_float(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_complex_floatPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_permute_vector_complex_float');
  late final _gsl_permute_vector_complex_float =
      _gsl_permute_vector_complex_floatPtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_permute_vector_complex_float_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_complex_float> v,
  ) {
    return _gsl_permute_vector_complex_float_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_complex_float_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_complex_float>)>>(
      'gsl_permute_vector_complex_float_inverse');
  late final _gsl_permute_vector_complex_float_inverse =
      _gsl_permute_vector_complex_float_inversePtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_complex_float>)>();

  int gsl_sf_hyperg_0F1_e(
    double c,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_0F1_e(
      c,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_0F1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_0F1_e');
  late final _gsl_sf_hyperg_0F1_e = _gsl_sf_hyperg_0F1_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_0F1(
    double c,
    double x,
  ) {
    return _gsl_sf_hyperg_0F1(
      c,
      x,
    );
  }

  late final _gsl_sf_hyperg_0F1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_hyperg_0F1');
  late final _gsl_sf_hyperg_0F1 =
      _gsl_sf_hyperg_0F1Ptr.asFunction<double Function(double, double)>();

  int gsl_sf_hyperg_1F1_int_e(
    int m,
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_1F1_int_e(
      m,
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_1F1_int_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_1F1_int_e');
  late final _gsl_sf_hyperg_1F1_int_e = _gsl_sf_hyperg_1F1_int_ePtr
      .asFunction<int Function(int, int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_1F1_int(
    int m,
    int n,
    double x,
  ) {
    return _gsl_sf_hyperg_1F1_int(
      m,
      n,
      x,
    );
  }

  late final _gsl_sf_hyperg_1F1_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Int32, ffi.Double)>>('gsl_sf_hyperg_1F1_int');
  late final _gsl_sf_hyperg_1F1_int =
      _gsl_sf_hyperg_1F1_intPtr.asFunction<double Function(int, int, double)>();

  int gsl_sf_hyperg_1F1_e(
    double a,
    double b,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_1F1_e(
      a,
      b,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_1F1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_1F1_e');
  late final _gsl_sf_hyperg_1F1_e = _gsl_sf_hyperg_1F1_ePtr.asFunction<
      int Function(double, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_1F1(
    double a,
    double b,
    double x,
  ) {
    return _gsl_sf_hyperg_1F1(
      a,
      b,
      x,
    );
  }

  late final _gsl_sf_hyperg_1F1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_sf_hyperg_1F1');
  late final _gsl_sf_hyperg_1F1 = _gsl_sf_hyperg_1F1Ptr
      .asFunction<double Function(double, double, double)>();

  int gsl_sf_hyperg_U_int_e(
    int m,
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_U_int_e(
      m,
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_U_int_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_U_int_e');
  late final _gsl_sf_hyperg_U_int_e = _gsl_sf_hyperg_U_int_ePtr
      .asFunction<int Function(int, int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_U_int(
    int m,
    int n,
    double x,
  ) {
    return _gsl_sf_hyperg_U_int(
      m,
      n,
      x,
    );
  }

  late final _gsl_sf_hyperg_U_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Int32, ffi.Double)>>('gsl_sf_hyperg_U_int');
  late final _gsl_sf_hyperg_U_int =
      _gsl_sf_hyperg_U_intPtr.asFunction<double Function(int, int, double)>();

  int gsl_sf_hyperg_U_int_e10_e(
    int m,
    int n,
    double x,
    ffi.Pointer<gsl_sf_result_e10> result,
  ) {
    return _gsl_sf_hyperg_U_int_e10_e(
      m,
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_U_int_e10_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result_e10>)>>('gsl_sf_hyperg_U_int_e10_e');
  late final _gsl_sf_hyperg_U_int_e10_e =
      _gsl_sf_hyperg_U_int_e10_ePtr.asFunction<
          int Function(int, int, double, ffi.Pointer<gsl_sf_result_e10>)>();

  int gsl_sf_hyperg_U_e(
    double a,
    double b,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_U_e(
      a,
      b,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_U_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_U_e');
  late final _gsl_sf_hyperg_U_e = _gsl_sf_hyperg_U_ePtr.asFunction<
      int Function(double, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_U(
    double a,
    double b,
    double x,
  ) {
    return _gsl_sf_hyperg_U(
      a,
      b,
      x,
    );
  }

  late final _gsl_sf_hyperg_UPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_sf_hyperg_U');
  late final _gsl_sf_hyperg_U =
      _gsl_sf_hyperg_UPtr.asFunction<double Function(double, double, double)>();

  int gsl_sf_hyperg_U_e10_e(
    double a,
    double b,
    double x,
    ffi.Pointer<gsl_sf_result_e10> result,
  ) {
    return _gsl_sf_hyperg_U_e10_e(
      a,
      b,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_U_e10_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result_e10>)>>('gsl_sf_hyperg_U_e10_e');
  late final _gsl_sf_hyperg_U_e10_e = _gsl_sf_hyperg_U_e10_ePtr.asFunction<
      int Function(double, double, double, ffi.Pointer<gsl_sf_result_e10>)>();

  int gsl_sf_hyperg_2F1_e(
    double a,
    double b,
    double c,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_2F1_e(
      a,
      b,
      c,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_2F1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_2F1_e');
  late final _gsl_sf_hyperg_2F1_e = _gsl_sf_hyperg_2F1_ePtr.asFunction<
      int Function(
          double, double, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_2F1(
    double a,
    double b,
    double c,
    double x,
  ) {
    return _gsl_sf_hyperg_2F1(
      a,
      b,
      c,
      x,
    );
  }

  late final _gsl_sf_hyperg_2F1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_sf_hyperg_2F1');
  late final _gsl_sf_hyperg_2F1 = _gsl_sf_hyperg_2F1Ptr
      .asFunction<double Function(double, double, double, double)>();

  int gsl_sf_hyperg_2F1_conj_e(
    double aR,
    double aI,
    double c,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_2F1_conj_e(
      aR,
      aI,
      c,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_2F1_conj_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_2F1_conj_e');
  late final _gsl_sf_hyperg_2F1_conj_e =
      _gsl_sf_hyperg_2F1_conj_ePtr.asFunction<
          int Function(
              double, double, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_2F1_conj(
    double aR,
    double aI,
    double c,
    double x,
  ) {
    return _gsl_sf_hyperg_2F1_conj(
      aR,
      aI,
      c,
      x,
    );
  }

  late final _gsl_sf_hyperg_2F1_conjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_sf_hyperg_2F1_conj');
  late final _gsl_sf_hyperg_2F1_conj = _gsl_sf_hyperg_2F1_conjPtr
      .asFunction<double Function(double, double, double, double)>();

  int gsl_sf_hyperg_2F1_renorm_e(
    double a,
    double b,
    double c,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_2F1_renorm_e(
      a,
      b,
      c,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_2F1_renorm_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_2F1_renorm_e');
  late final _gsl_sf_hyperg_2F1_renorm_e =
      _gsl_sf_hyperg_2F1_renorm_ePtr.asFunction<
          int Function(
              double, double, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_2F1_renorm(
    double a,
    double b,
    double c,
    double x,
  ) {
    return _gsl_sf_hyperg_2F1_renorm(
      a,
      b,
      c,
      x,
    );
  }

  late final _gsl_sf_hyperg_2F1_renormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_sf_hyperg_2F1_renorm');
  late final _gsl_sf_hyperg_2F1_renorm = _gsl_sf_hyperg_2F1_renormPtr
      .asFunction<double Function(double, double, double, double)>();

  int gsl_sf_hyperg_2F1_conj_renorm_e(
    double aR,
    double aI,
    double c,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_2F1_conj_renorm_e(
      aR,
      aI,
      c,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_2F1_conj_renorm_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_2F1_conj_renorm_e');
  late final _gsl_sf_hyperg_2F1_conj_renorm_e =
      _gsl_sf_hyperg_2F1_conj_renorm_ePtr.asFunction<
          int Function(
              double, double, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_2F1_conj_renorm(
    double aR,
    double aI,
    double c,
    double x,
  ) {
    return _gsl_sf_hyperg_2F1_conj_renorm(
      aR,
      aI,
      c,
      x,
    );
  }

  late final _gsl_sf_hyperg_2F1_conj_renormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_sf_hyperg_2F1_conj_renorm');
  late final _gsl_sf_hyperg_2F1_conj_renorm = _gsl_sf_hyperg_2F1_conj_renormPtr
      .asFunction<double Function(double, double, double, double)>();

  int gsl_sf_hyperg_2F0_e(
    double a,
    double b,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hyperg_2F0_e(
      a,
      b,
      x,
      result,
    );
  }

  late final _gsl_sf_hyperg_2F0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hyperg_2F0_e');
  late final _gsl_sf_hyperg_2F0_e = _gsl_sf_hyperg_2F0_ePtr.asFunction<
      int Function(double, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hyperg_2F0(
    double a,
    double b,
    double x,
  ) {
    return _gsl_sf_hyperg_2F0(
      a,
      b,
      x,
    );
  }

  late final _gsl_sf_hyperg_2F0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_sf_hyperg_2F0');
  late final _gsl_sf_hyperg_2F0 = _gsl_sf_hyperg_2F0Ptr
      .asFunction<double Function(double, double, double)>();

  int gsl_fft_complex_float_radix2_forward(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_float_radix2_forward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_float_radix2_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array_float, size_t,
              size_t)>>('gsl_fft_complex_float_radix2_forward');
  late final _gsl_fft_complex_float_radix2_forward =
      _gsl_fft_complex_float_radix2_forwardPtr
          .asFunction<int Function(gsl_complex_packed_array_float, int, int)>();

  int gsl_fft_complex_float_radix2_backward(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_float_radix2_backward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_float_radix2_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array_float, size_t,
              size_t)>>('gsl_fft_complex_float_radix2_backward');
  late final _gsl_fft_complex_float_radix2_backward =
      _gsl_fft_complex_float_radix2_backwardPtr
          .asFunction<int Function(gsl_complex_packed_array_float, int, int)>();

  int gsl_fft_complex_float_radix2_inverse(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_float_radix2_inverse(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_float_radix2_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array_float, size_t,
              size_t)>>('gsl_fft_complex_float_radix2_inverse');
  late final _gsl_fft_complex_float_radix2_inverse =
      _gsl_fft_complex_float_radix2_inversePtr
          .asFunction<int Function(gsl_complex_packed_array_float, int, int)>();

  int gsl_fft_complex_float_radix2_transform(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
    int sign,
  ) {
    return _gsl_fft_complex_float_radix2_transform(
      data,
      stride,
      n,
      sign,
    );
  }

  late final _gsl_fft_complex_float_radix2_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array_float, size_t, size_t,
              ffi.Int32)>>('gsl_fft_complex_float_radix2_transform');
  late final _gsl_fft_complex_float_radix2_transform =
      _gsl_fft_complex_float_radix2_transformPtr.asFunction<
          int Function(gsl_complex_packed_array_float, int, int, int)>();

  int gsl_fft_complex_float_radix2_dif_forward(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_float_radix2_dif_forward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_float_radix2_dif_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array_float, size_t,
              size_t)>>('gsl_fft_complex_float_radix2_dif_forward');
  late final _gsl_fft_complex_float_radix2_dif_forward =
      _gsl_fft_complex_float_radix2_dif_forwardPtr
          .asFunction<int Function(gsl_complex_packed_array_float, int, int)>();

  int gsl_fft_complex_float_radix2_dif_backward(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_float_radix2_dif_backward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_float_radix2_dif_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array_float, size_t,
              size_t)>>('gsl_fft_complex_float_radix2_dif_backward');
  late final _gsl_fft_complex_float_radix2_dif_backward =
      _gsl_fft_complex_float_radix2_dif_backwardPtr
          .asFunction<int Function(gsl_complex_packed_array_float, int, int)>();

  int gsl_fft_complex_float_radix2_dif_inverse(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_float_radix2_dif_inverse(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_float_radix2_dif_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array_float, size_t,
              size_t)>>('gsl_fft_complex_float_radix2_dif_inverse');
  late final _gsl_fft_complex_float_radix2_dif_inverse =
      _gsl_fft_complex_float_radix2_dif_inversePtr
          .asFunction<int Function(gsl_complex_packed_array_float, int, int)>();

  int gsl_fft_complex_float_radix2_dif_transform(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
    int sign,
  ) {
    return _gsl_fft_complex_float_radix2_dif_transform(
      data,
      stride,
      n,
      sign,
    );
  }

  late final _gsl_fft_complex_float_radix2_dif_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array_float, size_t, size_t,
              ffi.Int32)>>('gsl_fft_complex_float_radix2_dif_transform');
  late final _gsl_fft_complex_float_radix2_dif_transform =
      _gsl_fft_complex_float_radix2_dif_transformPtr.asFunction<
          int Function(gsl_complex_packed_array_float, int, int, int)>();

  ffi.Pointer<gsl_fft_complex_wavetable_float>
      gsl_fft_complex_wavetable_float_alloc(
    int n,
  ) {
    return _gsl_fft_complex_wavetable_float_alloc(
      n,
    );
  }

  late final _gsl_fft_complex_wavetable_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_complex_wavetable_float> Function(
              size_t)>>('gsl_fft_complex_wavetable_float_alloc');
  late final _gsl_fft_complex_wavetable_float_alloc =
      _gsl_fft_complex_wavetable_float_allocPtr.asFunction<
          ffi.Pointer<gsl_fft_complex_wavetable_float> Function(int)>();

  void gsl_fft_complex_wavetable_float_free(
    ffi.Pointer<gsl_fft_complex_wavetable_float> wavetable,
  ) {
    return _gsl_fft_complex_wavetable_float_free(
      wavetable,
    );
  }

  late final _gsl_fft_complex_wavetable_float_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_fft_complex_wavetable_float>)>>(
      'gsl_fft_complex_wavetable_float_free');
  late final _gsl_fft_complex_wavetable_float_free =
      _gsl_fft_complex_wavetable_float_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_fft_complex_wavetable_float>)>();

  ffi.Pointer<gsl_fft_complex_workspace_float>
      gsl_fft_complex_workspace_float_alloc(
    int n,
  ) {
    return _gsl_fft_complex_workspace_float_alloc(
      n,
    );
  }

  late final _gsl_fft_complex_workspace_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_complex_workspace_float> Function(
              size_t)>>('gsl_fft_complex_workspace_float_alloc');
  late final _gsl_fft_complex_workspace_float_alloc =
      _gsl_fft_complex_workspace_float_allocPtr.asFunction<
          ffi.Pointer<gsl_fft_complex_workspace_float> Function(int)>();

  void gsl_fft_complex_workspace_float_free(
    ffi.Pointer<gsl_fft_complex_workspace_float> workspace,
  ) {
    return _gsl_fft_complex_workspace_float_free(
      workspace,
    );
  }

  late final _gsl_fft_complex_workspace_float_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_fft_complex_workspace_float>)>>(
      'gsl_fft_complex_workspace_float_free');
  late final _gsl_fft_complex_workspace_float_free =
      _gsl_fft_complex_workspace_float_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_fft_complex_workspace_float>)>();

  int gsl_fft_complex_float_memcpy(
    ffi.Pointer<gsl_fft_complex_wavetable_float> dest,
    ffi.Pointer<gsl_fft_complex_wavetable_float> src,
  ) {
    return _gsl_fft_complex_float_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_fft_complex_float_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_fft_complex_wavetable_float>,
                  ffi.Pointer<gsl_fft_complex_wavetable_float>)>>(
      'gsl_fft_complex_float_memcpy');
  late final _gsl_fft_complex_float_memcpy =
      _gsl_fft_complex_float_memcpyPtr.asFunction<
          int Function(ffi.Pointer<gsl_fft_complex_wavetable_float>,
              ffi.Pointer<gsl_fft_complex_wavetable_float>)>();

  int gsl_fft_complex_float_forward(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_complex_wavetable_float> wavetable,
    ffi.Pointer<gsl_fft_complex_workspace_float> work,
  ) {
    return _gsl_fft_complex_float_forward(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_complex_float_forwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  gsl_complex_packed_array_float,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_complex_wavetable_float>,
                  ffi.Pointer<gsl_fft_complex_workspace_float>)>>(
      'gsl_fft_complex_float_forward');
  late final _gsl_fft_complex_float_forward =
      _gsl_fft_complex_float_forwardPtr.asFunction<
          int Function(
              gsl_complex_packed_array_float,
              int,
              int,
              ffi.Pointer<gsl_fft_complex_wavetable_float>,
              ffi.Pointer<gsl_fft_complex_workspace_float>)>();

  int gsl_fft_complex_float_backward(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_complex_wavetable_float> wavetable,
    ffi.Pointer<gsl_fft_complex_workspace_float> work,
  ) {
    return _gsl_fft_complex_float_backward(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_complex_float_backwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  gsl_complex_packed_array_float,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_complex_wavetable_float>,
                  ffi.Pointer<gsl_fft_complex_workspace_float>)>>(
      'gsl_fft_complex_float_backward');
  late final _gsl_fft_complex_float_backward =
      _gsl_fft_complex_float_backwardPtr.asFunction<
          int Function(
              gsl_complex_packed_array_float,
              int,
              int,
              ffi.Pointer<gsl_fft_complex_wavetable_float>,
              ffi.Pointer<gsl_fft_complex_workspace_float>)>();

  int gsl_fft_complex_float_inverse(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_complex_wavetable_float> wavetable,
    ffi.Pointer<gsl_fft_complex_workspace_float> work,
  ) {
    return _gsl_fft_complex_float_inverse(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_complex_float_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  gsl_complex_packed_array_float,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_complex_wavetable_float>,
                  ffi.Pointer<gsl_fft_complex_workspace_float>)>>(
      'gsl_fft_complex_float_inverse');
  late final _gsl_fft_complex_float_inverse =
      _gsl_fft_complex_float_inversePtr.asFunction<
          int Function(
              gsl_complex_packed_array_float,
              int,
              int,
              ffi.Pointer<gsl_fft_complex_wavetable_float>,
              ffi.Pointer<gsl_fft_complex_workspace_float>)>();

  int gsl_fft_complex_float_transform(
    gsl_complex_packed_array_float data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_complex_wavetable_float> wavetable,
    ffi.Pointer<gsl_fft_complex_workspace_float> work,
    int sign,
  ) {
    return _gsl_fft_complex_float_transform(
      data,
      stride,
      n,
      wavetable,
      work,
      sign,
    );
  }

  late final _gsl_fft_complex_float_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gsl_complex_packed_array_float,
              size_t,
              size_t,
              ffi.Pointer<gsl_fft_complex_wavetable_float>,
              ffi.Pointer<gsl_fft_complex_workspace_float>,
              ffi.Int32)>>('gsl_fft_complex_float_transform');
  late final _gsl_fft_complex_float_transform =
      _gsl_fft_complex_float_transformPtr.asFunction<
          int Function(
              gsl_complex_packed_array_float,
              int,
              int,
              ffi.Pointer<gsl_fft_complex_wavetable_float>,
              ffi.Pointer<gsl_fft_complex_workspace_float>,
              int)>();

  int gsl_sf_fermi_dirac_m1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fermi_dirac_m1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_fermi_dirac_m1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fermi_dirac_m1_e');
  late final _gsl_sf_fermi_dirac_m1_e = _gsl_sf_fermi_dirac_m1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fermi_dirac_m1(
    double x,
  ) {
    return _gsl_sf_fermi_dirac_m1(
      x,
    );
  }

  late final _gsl_sf_fermi_dirac_m1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_fermi_dirac_m1');
  late final _gsl_sf_fermi_dirac_m1 =
      _gsl_sf_fermi_dirac_m1Ptr.asFunction<double Function(double)>();

  int gsl_sf_fermi_dirac_0_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fermi_dirac_0_e(
      x,
      result,
    );
  }

  late final _gsl_sf_fermi_dirac_0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fermi_dirac_0_e');
  late final _gsl_sf_fermi_dirac_0_e = _gsl_sf_fermi_dirac_0_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fermi_dirac_0(
    double x,
  ) {
    return _gsl_sf_fermi_dirac_0(
      x,
    );
  }

  late final _gsl_sf_fermi_dirac_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_fermi_dirac_0');
  late final _gsl_sf_fermi_dirac_0 =
      _gsl_sf_fermi_dirac_0Ptr.asFunction<double Function(double)>();

  int gsl_sf_fermi_dirac_1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fermi_dirac_1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_fermi_dirac_1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fermi_dirac_1_e');
  late final _gsl_sf_fermi_dirac_1_e = _gsl_sf_fermi_dirac_1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fermi_dirac_1(
    double x,
  ) {
    return _gsl_sf_fermi_dirac_1(
      x,
    );
  }

  late final _gsl_sf_fermi_dirac_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_fermi_dirac_1');
  late final _gsl_sf_fermi_dirac_1 =
      _gsl_sf_fermi_dirac_1Ptr.asFunction<double Function(double)>();

  int gsl_sf_fermi_dirac_2_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fermi_dirac_2_e(
      x,
      result,
    );
  }

  late final _gsl_sf_fermi_dirac_2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fermi_dirac_2_e');
  late final _gsl_sf_fermi_dirac_2_e = _gsl_sf_fermi_dirac_2_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fermi_dirac_2(
    double x,
  ) {
    return _gsl_sf_fermi_dirac_2(
      x,
    );
  }

  late final _gsl_sf_fermi_dirac_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_fermi_dirac_2');
  late final _gsl_sf_fermi_dirac_2 =
      _gsl_sf_fermi_dirac_2Ptr.asFunction<double Function(double)>();

  int gsl_sf_fermi_dirac_int_e(
    int j,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fermi_dirac_int_e(
      j,
      x,
      result,
    );
  }

  late final _gsl_sf_fermi_dirac_int_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fermi_dirac_int_e');
  late final _gsl_sf_fermi_dirac_int_e = _gsl_sf_fermi_dirac_int_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fermi_dirac_int(
    int j,
    double x,
  ) {
    return _gsl_sf_fermi_dirac_int(
      j,
      x,
    );
  }

  late final _gsl_sf_fermi_dirac_intPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_fermi_dirac_int');
  late final _gsl_sf_fermi_dirac_int =
      _gsl_sf_fermi_dirac_intPtr.asFunction<double Function(int, double)>();

  int gsl_sf_fermi_dirac_mhalf_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fermi_dirac_mhalf_e(
      x,
      result,
    );
  }

  late final _gsl_sf_fermi_dirac_mhalf_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fermi_dirac_mhalf_e');
  late final _gsl_sf_fermi_dirac_mhalf_e = _gsl_sf_fermi_dirac_mhalf_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fermi_dirac_mhalf(
    double x,
  ) {
    return _gsl_sf_fermi_dirac_mhalf(
      x,
    );
  }

  late final _gsl_sf_fermi_dirac_mhalfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_fermi_dirac_mhalf');
  late final _gsl_sf_fermi_dirac_mhalf =
      _gsl_sf_fermi_dirac_mhalfPtr.asFunction<double Function(double)>();

  int gsl_sf_fermi_dirac_half_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fermi_dirac_half_e(
      x,
      result,
    );
  }

  late final _gsl_sf_fermi_dirac_half_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fermi_dirac_half_e');
  late final _gsl_sf_fermi_dirac_half_e = _gsl_sf_fermi_dirac_half_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fermi_dirac_half(
    double x,
  ) {
    return _gsl_sf_fermi_dirac_half(
      x,
    );
  }

  late final _gsl_sf_fermi_dirac_halfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_fermi_dirac_half');
  late final _gsl_sf_fermi_dirac_half =
      _gsl_sf_fermi_dirac_halfPtr.asFunction<double Function(double)>();

  int gsl_sf_fermi_dirac_3half_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fermi_dirac_3half_e(
      x,
      result,
    );
  }

  late final _gsl_sf_fermi_dirac_3half_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fermi_dirac_3half_e');
  late final _gsl_sf_fermi_dirac_3half_e = _gsl_sf_fermi_dirac_3half_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fermi_dirac_3half(
    double x,
  ) {
    return _gsl_sf_fermi_dirac_3half(
      x,
    );
  }

  late final _gsl_sf_fermi_dirac_3halfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_fermi_dirac_3half');
  late final _gsl_sf_fermi_dirac_3half =
      _gsl_sf_fermi_dirac_3halfPtr.asFunction<double Function(double)>();

  int gsl_sf_fermi_dirac_inc_0_e(
    double x,
    double b,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fermi_dirac_inc_0_e(
      x,
      b,
      result,
    );
  }

  late final _gsl_sf_fermi_dirac_inc_0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fermi_dirac_inc_0_e');
  late final _gsl_sf_fermi_dirac_inc_0_e = _gsl_sf_fermi_dirac_inc_0_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fermi_dirac_inc_0(
    double x,
    double b,
  ) {
    return _gsl_sf_fermi_dirac_inc_0(
      x,
      b,
    );
  }

  late final _gsl_sf_fermi_dirac_inc_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_fermi_dirac_inc_0');
  late final _gsl_sf_fermi_dirac_inc_0 = _gsl_sf_fermi_dirac_inc_0Ptr
      .asFunction<double Function(double, double)>();

  int gsl_sf_hermite_prob_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_prob_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_prob_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_prob_e');
  late final _gsl_sf_hermite_prob_e = _gsl_sf_hermite_prob_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_prob(
    int n,
    double x,
  ) {
    return _gsl_sf_hermite_prob(
      n,
      x,
    );
  }

  late final _gsl_sf_hermite_probPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_hermite_prob');
  late final _gsl_sf_hermite_prob =
      _gsl_sf_hermite_probPtr.asFunction<double Function(int, double)>();

  int gsl_sf_hermite_prob_deriv_e(
    int m,
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_prob_deriv_e(
      m,
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_prob_deriv_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_prob_deriv_e');
  late final _gsl_sf_hermite_prob_deriv_e = _gsl_sf_hermite_prob_deriv_ePtr
      .asFunction<int Function(int, int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_prob_deriv(
    int m,
    int n,
    double x,
  ) {
    return _gsl_sf_hermite_prob_deriv(
      m,
      n,
      x,
    );
  }

  late final _gsl_sf_hermite_prob_derivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Int32, ffi.Double)>>('gsl_sf_hermite_prob_deriv');
  late final _gsl_sf_hermite_prob_deriv = _gsl_sf_hermite_prob_derivPtr
      .asFunction<double Function(int, int, double)>();

  int gsl_sf_hermite_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_e');
  late final _gsl_sf_hermite_e = _gsl_sf_hermite_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite(
    int n,
    double x,
  ) {
    return _gsl_sf_hermite(
      n,
      x,
    );
  }

  late final _gsl_sf_hermitePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_hermite');
  late final _gsl_sf_hermite =
      _gsl_sf_hermitePtr.asFunction<double Function(int, double)>();

  int gsl_sf_hermite_deriv_e(
    int m,
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_deriv_e(
      m,
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_deriv_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_deriv_e');
  late final _gsl_sf_hermite_deriv_e = _gsl_sf_hermite_deriv_ePtr
      .asFunction<int Function(int, int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_deriv(
    int m,
    int n,
    double x,
  ) {
    return _gsl_sf_hermite_deriv(
      m,
      n,
      x,
    );
  }

  late final _gsl_sf_hermite_derivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Int32, ffi.Double)>>('gsl_sf_hermite_deriv');
  late final _gsl_sf_hermite_deriv =
      _gsl_sf_hermite_derivPtr.asFunction<double Function(int, int, double)>();

  int gsl_sf_hermite_func_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_func_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_func_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_func_e');
  late final _gsl_sf_hermite_func_e = _gsl_sf_hermite_func_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_func(
    int n,
    double x,
  ) {
    return _gsl_sf_hermite_func(
      n,
      x,
    );
  }

  late final _gsl_sf_hermite_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_hermite_func');
  late final _gsl_sf_hermite_func =
      _gsl_sf_hermite_funcPtr.asFunction<double Function(int, double)>();

  int gsl_sf_hermite_func_fast_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_func_fast_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_func_fast_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_func_fast_e');
  late final _gsl_sf_hermite_func_fast_e = _gsl_sf_hermite_func_fast_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_func_fast(
    int n,
    double x,
  ) {
    return _gsl_sf_hermite_func_fast(
      n,
      x,
    );
  }

  late final _gsl_sf_hermite_func_fastPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_hermite_func_fast');
  late final _gsl_sf_hermite_func_fast =
      _gsl_sf_hermite_func_fastPtr.asFunction<double Function(int, double)>();

  int gsl_sf_hermite_prob_array(
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_prob_array(
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_prob_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_prob_array');
  late final _gsl_sf_hermite_prob_array = _gsl_sf_hermite_prob_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_prob_array_deriv(
    int m,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_prob_array_deriv(
      m,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_prob_array_derivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_prob_array_deriv');
  late final _gsl_sf_hermite_prob_array_deriv =
      _gsl_sf_hermite_prob_array_derivPtr.asFunction<
          int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_prob_deriv_array(
    int mmax,
    int n,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_prob_deriv_array(
      mmax,
      n,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_prob_deriv_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_prob_deriv_array');
  late final _gsl_sf_hermite_prob_deriv_array =
      _gsl_sf_hermite_prob_deriv_arrayPtr.asFunction<
          int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_prob_series_e(
    int n,
    double x,
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_prob_series_e(
      n,
      x,
      a,
      result,
    );
  }

  late final _gsl_sf_hermite_prob_series_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_prob_series_e');
  late final _gsl_sf_hermite_prob_series_e =
      _gsl_sf_hermite_prob_series_ePtr.asFunction<
          int Function(int, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_prob_series(
    int n,
    double x,
    ffi.Pointer<ffi.Double> a,
  ) {
    return _gsl_sf_hermite_prob_series(
      n,
      x,
      a,
    );
  }

  late final _gsl_sf_hermite_prob_seriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_prob_series');
  late final _gsl_sf_hermite_prob_series = _gsl_sf_hermite_prob_seriesPtr
      .asFunction<double Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_array(
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_array(
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_array');
  late final _gsl_sf_hermite_array = _gsl_sf_hermite_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_array_deriv(
    int m,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_array_deriv(
      m,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_array_derivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_array_deriv');
  late final _gsl_sf_hermite_array_deriv = _gsl_sf_hermite_array_derivPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_deriv_array(
    int mmax,
    int n,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_deriv_array(
      mmax,
      n,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_deriv_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_deriv_array');
  late final _gsl_sf_hermite_deriv_array = _gsl_sf_hermite_deriv_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_series_e(
    int n,
    double x,
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_series_e(
      n,
      x,
      a,
      result,
    );
  }

  late final _gsl_sf_hermite_series_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_series_e');
  late final _gsl_sf_hermite_series_e = _gsl_sf_hermite_series_ePtr.asFunction<
      int Function(
          int, double, ffi.Pointer<ffi.Double>, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_series(
    int n,
    double x,
    ffi.Pointer<ffi.Double> a,
  ) {
    return _gsl_sf_hermite_series(
      n,
      x,
      a,
    );
  }

  late final _gsl_sf_hermite_seriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_series');
  late final _gsl_sf_hermite_series = _gsl_sf_hermite_seriesPtr
      .asFunction<double Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_func_array(
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_func_array(
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_func_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_func_array');
  late final _gsl_sf_hermite_func_array = _gsl_sf_hermite_func_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_func_series_e(
    int n,
    double x,
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_func_series_e(
      n,
      x,
      a,
      result,
    );
  }

  late final _gsl_sf_hermite_func_series_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_func_series_e');
  late final _gsl_sf_hermite_func_series_e =
      _gsl_sf_hermite_func_series_ePtr.asFunction<
          int Function(int, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_func_series(
    int n,
    double x,
    ffi.Pointer<ffi.Double> a,
  ) {
    return _gsl_sf_hermite_func_series(
      n,
      x,
      a,
    );
  }

  late final _gsl_sf_hermite_func_seriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_func_series');
  late final _gsl_sf_hermite_func_series = _gsl_sf_hermite_func_seriesPtr
      .asFunction<double Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_func_der_e(
    int m,
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_func_der_e(
      m,
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_func_der_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_func_der_e');
  late final _gsl_sf_hermite_func_der_e = _gsl_sf_hermite_func_der_ePtr
      .asFunction<int Function(int, int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_func_der(
    int m,
    int n,
    double x,
  ) {
    return _gsl_sf_hermite_func_der(
      m,
      n,
      x,
    );
  }

  late final _gsl_sf_hermite_func_derPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Int32, ffi.Double)>>('gsl_sf_hermite_func_der');
  late final _gsl_sf_hermite_func_der = _gsl_sf_hermite_func_derPtr
      .asFunction<double Function(int, int, double)>();

  int gsl_sf_hermite_prob_zero_e(
    int n,
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_prob_zero_e(
      n,
      s,
      result,
    );
  }

  late final _gsl_sf_hermite_prob_zero_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_prob_zero_e');
  late final _gsl_sf_hermite_prob_zero_e = _gsl_sf_hermite_prob_zero_ePtr
      .asFunction<int Function(int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_prob_zero(
    int n,
    int s,
  ) {
    return _gsl_sf_hermite_prob_zero(
      n,
      s,
    );
  }

  late final _gsl_sf_hermite_prob_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Int32)>>(
          'gsl_sf_hermite_prob_zero');
  late final _gsl_sf_hermite_prob_zero =
      _gsl_sf_hermite_prob_zeroPtr.asFunction<double Function(int, int)>();

  int gsl_sf_hermite_zero_e(
    int n,
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_zero_e(
      n,
      s,
      result,
    );
  }

  late final _gsl_sf_hermite_zero_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_zero_e');
  late final _gsl_sf_hermite_zero_e = _gsl_sf_hermite_zero_ePtr
      .asFunction<int Function(int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_zero(
    int n,
    int s,
  ) {
    return _gsl_sf_hermite_zero(
      n,
      s,
    );
  }

  late final _gsl_sf_hermite_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Int32)>>(
          'gsl_sf_hermite_zero');
  late final _gsl_sf_hermite_zero =
      _gsl_sf_hermite_zeroPtr.asFunction<double Function(int, int)>();

  int gsl_sf_hermite_func_zero_e(
    int n,
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_func_zero_e(
      n,
      s,
      result,
    );
  }

  late final _gsl_sf_hermite_func_zero_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_func_zero_e');
  late final _gsl_sf_hermite_func_zero_e = _gsl_sf_hermite_func_zero_ePtr
      .asFunction<int Function(int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_func_zero(
    int n,
    int s,
  ) {
    return _gsl_sf_hermite_func_zero(
      n,
      s,
    );
  }

  late final _gsl_sf_hermite_func_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Int32)>>(
          'gsl_sf_hermite_func_zero');
  late final _gsl_sf_hermite_func_zero =
      _gsl_sf_hermite_func_zeroPtr.asFunction<double Function(int, int)>();

  int gsl_sf_hermite_phys_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_phys_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_phys_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_phys_e');
  late final _gsl_sf_hermite_phys_e = _gsl_sf_hermite_phys_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_phys(
    int n,
    double x,
  ) {
    return _gsl_sf_hermite_phys(
      n,
      x,
    );
  }

  late final _gsl_sf_hermite_physPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_hermite_phys');
  late final _gsl_sf_hermite_phys =
      _gsl_sf_hermite_physPtr.asFunction<double Function(int, double)>();

  int gsl_sf_hermite_phys_der_e(
    int m,
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_phys_der_e(
      m,
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_phys_der_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_phys_der_e');
  late final _gsl_sf_hermite_phys_der_e = _gsl_sf_hermite_phys_der_ePtr
      .asFunction<int Function(int, int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_phys_der(
    int m,
    int n,
    double x,
  ) {
    return _gsl_sf_hermite_phys_der(
      m,
      n,
      x,
    );
  }

  late final _gsl_sf_hermite_phys_derPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Int32, ffi.Double)>>('gsl_sf_hermite_phys_der');
  late final _gsl_sf_hermite_phys_der = _gsl_sf_hermite_phys_derPtr
      .asFunction<double Function(int, int, double)>();

  int gsl_sf_hermite_phys_array(
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_phys_array(
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_phys_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_phys_array');
  late final _gsl_sf_hermite_phys_array = _gsl_sf_hermite_phys_arrayPtr
      .asFunction<int Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_phys_series_e(
    int n,
    double x,
    ffi.Pointer<ffi.Double> a,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_phys_series_e(
      n,
      x,
      a,
      result,
    );
  }

  late final _gsl_sf_hermite_phys_series_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_phys_series_e');
  late final _gsl_sf_hermite_phys_series_e =
      _gsl_sf_hermite_phys_series_ePtr.asFunction<
          int Function(int, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_phys_series(
    int n,
    double x,
    ffi.Pointer<ffi.Double> a,
  ) {
    return _gsl_sf_hermite_phys_series(
      n,
      x,
      a,
    );
  }

  late final _gsl_sf_hermite_phys_seriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_phys_series');
  late final _gsl_sf_hermite_phys_series = _gsl_sf_hermite_phys_seriesPtr
      .asFunction<double Function(int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_phys_array_der(
    int m,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_phys_array_der(
      m,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_phys_array_derPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_phys_array_der');
  late final _gsl_sf_hermite_phys_array_der = _gsl_sf_hermite_phys_array_derPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_phys_der_array(
    int mmax,
    int n,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_phys_der_array(
      mmax,
      n,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_phys_der_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_phys_der_array');
  late final _gsl_sf_hermite_phys_der_array = _gsl_sf_hermite_phys_der_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_phys_zero_e(
    int n,
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_phys_zero_e(
      n,
      s,
      result,
    );
  }

  late final _gsl_sf_hermite_phys_zero_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_phys_zero_e');
  late final _gsl_sf_hermite_phys_zero_e = _gsl_sf_hermite_phys_zero_ePtr
      .asFunction<int Function(int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_phys_zero(
    int n,
    int s,
  ) {
    return _gsl_sf_hermite_phys_zero(
      n,
      s,
    );
  }

  late final _gsl_sf_hermite_phys_zeroPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Int32)>>(
          'gsl_sf_hermite_phys_zero');
  late final _gsl_sf_hermite_phys_zero =
      _gsl_sf_hermite_phys_zeroPtr.asFunction<double Function(int, int)>();

  int gsl_sf_hermite_prob_array_der(
    int m,
    int nmax,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_prob_array_der(
      m,
      nmax,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_prob_array_derPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_prob_array_der');
  late final _gsl_sf_hermite_prob_array_der = _gsl_sf_hermite_prob_array_derPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_prob_der_array(
    int mmax,
    int n,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_hermite_prob_der_array(
      mmax,
      n,
      x,
      result_array,
    );
  }

  late final _gsl_sf_hermite_prob_der_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_hermite_prob_der_array');
  late final _gsl_sf_hermite_prob_der_array = _gsl_sf_hermite_prob_der_arrayPtr
      .asFunction<int Function(int, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_hermite_prob_der_e(
    int m,
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hermite_prob_der_e(
      m,
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_hermite_prob_der_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hermite_prob_der_e');
  late final _gsl_sf_hermite_prob_der_e = _gsl_sf_hermite_prob_der_ePtr
      .asFunction<int Function(int, int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hermite_prob_der(
    int m,
    int n,
    double x,
  ) {
    return _gsl_sf_hermite_prob_der(
      m,
      n,
      x,
    );
  }

  late final _gsl_sf_hermite_prob_derPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Int32, ffi.Double)>>('gsl_sf_hermite_prob_der');
  late final _gsl_sf_hermite_prob_der = _gsl_sf_hermite_prob_derPtr
      .asFunction<double Function(int, int, double)>();

  void gsl_test(
    int status,
    ffi.Pointer<ffi.Int8> test_description,
  ) {
    return _gsl_test(
      status,
      test_description,
    );
  }

  late final _gsl_testPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gsl_test');
  late final _gsl_test =
      _gsl_testPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  void gsl_test_rel(
    double result,
    double expected,
    double relative_error,
    ffi.Pointer<ffi.Int8> test_description,
  ) {
    return _gsl_test_rel(
      result,
      expected,
      relative_error,
      test_description,
    );
  }

  late final _gsl_test_relPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Int8>)>>('gsl_test_rel');
  late final _gsl_test_rel = _gsl_test_relPtr.asFunction<
      void Function(double, double, double, ffi.Pointer<ffi.Int8>)>();

  void gsl_test_abs(
    double result,
    double expected,
    double absolute_error,
    ffi.Pointer<ffi.Int8> test_description,
  ) {
    return _gsl_test_abs(
      result,
      expected,
      absolute_error,
      test_description,
    );
  }

  late final _gsl_test_absPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Int8>)>>('gsl_test_abs');
  late final _gsl_test_abs = _gsl_test_absPtr.asFunction<
      void Function(double, double, double, ffi.Pointer<ffi.Int8>)>();

  void gsl_test_factor(
    double result,
    double expected,
    double factor,
    ffi.Pointer<ffi.Int8> test_description,
  ) {
    return _gsl_test_factor(
      result,
      expected,
      factor,
      test_description,
    );
  }

  late final _gsl_test_factorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Int8>)>>('gsl_test_factor');
  late final _gsl_test_factor = _gsl_test_factorPtr.asFunction<
      void Function(double, double, double, ffi.Pointer<ffi.Int8>)>();

  void gsl_test_int(
    int result,
    int expected,
    ffi.Pointer<ffi.Int8> test_description,
  ) {
    return _gsl_test_int(
      result,
      expected,
      test_description,
    );
  }

  late final _gsl_test_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gsl_test_int');
  late final _gsl_test_int = _gsl_test_intPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Int8>)>();

  void gsl_test_str(
    ffi.Pointer<ffi.Int8> result,
    ffi.Pointer<ffi.Int8> expected,
    ffi.Pointer<ffi.Int8> test_description,
  ) {
    return _gsl_test_str(
      result,
      expected,
      test_description,
    );
  }

  late final _gsl_test_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('gsl_test_str');
  late final _gsl_test_str = _gsl_test_strPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void gsl_test_verbose(
    int verbose,
  ) {
    return _gsl_test_verbose(
      verbose,
    );
  }

  late final _gsl_test_verbosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'gsl_test_verbose');
  late final _gsl_test_verbose =
      _gsl_test_verbosePtr.asFunction<void Function(int)>();

  int gsl_test_summary() {
    return _gsl_test_summary();
  }

  late final _gsl_test_summaryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('gsl_test_summary');
  late final _gsl_test_summary =
      _gsl_test_summaryPtr.asFunction<int Function()>();

  int gsl_permute_short(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_short(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_shortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int16>,
              size_t, size_t)>>('gsl_permute_short');
  late final _gsl_permute_short = _gsl_permute_shortPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_permute_short_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_short_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_short_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int16>,
              size_t, size_t)>>('gsl_permute_short_inverse');
  late final _gsl_permute_short_inverse =
      _gsl_permute_short_inversePtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_sf_psi_int_e(
    int n,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_psi_int_e(
      n,
      result,
    );
  }

  late final _gsl_sf_psi_int_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_psi_int_e');
  late final _gsl_sf_psi_int_e = _gsl_sf_psi_int_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_psi_int(
    int n,
  ) {
    return _gsl_sf_psi_int(
      n,
    );
  }

  late final _gsl_sf_psi_intPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32)>>(
          'gsl_sf_psi_int');
  late final _gsl_sf_psi_int =
      _gsl_sf_psi_intPtr.asFunction<double Function(int)>();

  int gsl_sf_psi_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_psi_e(
      x,
      result,
    );
  }

  late final _gsl_sf_psi_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_psi_e');
  late final _gsl_sf_psi_e = _gsl_sf_psi_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_psi(
    double x,
  ) {
    return _gsl_sf_psi(
      x,
    );
  }

  late final _gsl_sf_psiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_psi');
  late final _gsl_sf_psi = _gsl_sf_psiPtr.asFunction<double Function(double)>();

  int gsl_sf_psi_1piy_e(
    double y,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_psi_1piy_e(
      y,
      result,
    );
  }

  late final _gsl_sf_psi_1piy_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_psi_1piy_e');
  late final _gsl_sf_psi_1piy_e = _gsl_sf_psi_1piy_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_psi_1piy(
    double y,
  ) {
    return _gsl_sf_psi_1piy(
      y,
    );
  }

  late final _gsl_sf_psi_1piyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_psi_1piy');
  late final _gsl_sf_psi_1piy =
      _gsl_sf_psi_1piyPtr.asFunction<double Function(double)>();

  int gsl_sf_complex_psi_e(
    double x,
    double y,
    ffi.Pointer<gsl_sf_result> result_re,
    ffi.Pointer<gsl_sf_result> result_im,
  ) {
    return _gsl_sf_complex_psi_e(
      x,
      y,
      result_re,
      result_im,
    );
  }

  late final _gsl_sf_complex_psi_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_complex_psi_e');
  late final _gsl_sf_complex_psi_e = _gsl_sf_complex_psi_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_psi_1_int_e(
    int n,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_psi_1_int_e(
      n,
      result,
    );
  }

  late final _gsl_sf_psi_1_int_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_psi_1_int_e');
  late final _gsl_sf_psi_1_int_e = _gsl_sf_psi_1_int_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_psi_1_int(
    int n,
  ) {
    return _gsl_sf_psi_1_int(
      n,
    );
  }

  late final _gsl_sf_psi_1_intPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32)>>(
          'gsl_sf_psi_1_int');
  late final _gsl_sf_psi_1_int =
      _gsl_sf_psi_1_intPtr.asFunction<double Function(int)>();

  int gsl_sf_psi_1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_psi_1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_psi_1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_psi_1_e');
  late final _gsl_sf_psi_1_e = _gsl_sf_psi_1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_psi_1(
    double x,
  ) {
    return _gsl_sf_psi_1(
      x,
    );
  }

  late final _gsl_sf_psi_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_psi_1');
  late final _gsl_sf_psi_1 =
      _gsl_sf_psi_1Ptr.asFunction<double Function(double)>();

  int gsl_sf_psi_n_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_psi_n_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_psi_n_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_psi_n_e');
  late final _gsl_sf_psi_n_e = _gsl_sf_psi_n_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_psi_n(
    int n,
    double x,
  ) {
    return _gsl_sf_psi_n(
      n,
      x,
    );
  }

  late final _gsl_sf_psi_nPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_psi_n');
  late final _gsl_sf_psi_n =
      _gsl_sf_psi_nPtr.asFunction<double Function(int, double)>();

  int gsl_sf_hydrogenicR_1_e(
    double Z,
    double r,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hydrogenicR_1_e(
      Z,
      r,
      result,
    );
  }

  late final _gsl_sf_hydrogenicR_1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hydrogenicR_1_e');
  late final _gsl_sf_hydrogenicR_1_e = _gsl_sf_hydrogenicR_1_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hydrogenicR_1(
    double Z,
    double r,
  ) {
    return _gsl_sf_hydrogenicR_1(
      Z,
      r,
    );
  }

  late final _gsl_sf_hydrogenicR_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_hydrogenicR_1');
  late final _gsl_sf_hydrogenicR_1 =
      _gsl_sf_hydrogenicR_1Ptr.asFunction<double Function(double, double)>();

  int gsl_sf_hydrogenicR_e(
    int n,
    int l,
    double Z,
    double r,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hydrogenicR_e(
      n,
      l,
      Z,
      r,
      result,
    );
  }

  late final _gsl_sf_hydrogenicR_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hydrogenicR_e');
  late final _gsl_sf_hydrogenicR_e = _gsl_sf_hydrogenicR_ePtr.asFunction<
      int Function(int, int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hydrogenicR(
    int n,
    int l,
    double Z,
    double r,
  ) {
    return _gsl_sf_hydrogenicR(
      n,
      l,
      Z,
      r,
    );
  }

  late final _gsl_sf_hydrogenicRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Int32, ffi.Double,
              ffi.Double)>>('gsl_sf_hydrogenicR');
  late final _gsl_sf_hydrogenicR = _gsl_sf_hydrogenicRPtr
      .asFunction<double Function(int, int, double, double)>();

  int gsl_sf_coulomb_wave_FG_e(
    double eta,
    double x,
    double lam_F,
    int k_lam_G,
    ffi.Pointer<gsl_sf_result> F,
    ffi.Pointer<gsl_sf_result> Fp,
    ffi.Pointer<gsl_sf_result> G,
    ffi.Pointer<gsl_sf_result> Gp,
    ffi.Pointer<ffi.Double> exp_F,
    ffi.Pointer<ffi.Double> exp_G,
  ) {
    return _gsl_sf_coulomb_wave_FG_e(
      eta,
      x,
      lam_F,
      k_lam_G,
      F,
      Fp,
      G,
      Gp,
      exp_F,
      exp_G,
    );
  }

  late final _gsl_sf_coulomb_wave_FG_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_coulomb_wave_FG_e');
  late final _gsl_sf_coulomb_wave_FG_e =
      _gsl_sf_coulomb_wave_FG_ePtr.asFunction<
          int Function(
              double,
              double,
              double,
              int,
              ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_coulomb_wave_F_array(
    double lam_min,
    int kmax,
    double eta,
    double x,
    ffi.Pointer<ffi.Double> fc_array,
    ffi.Pointer<ffi.Double> F_exponent,
  ) {
    return _gsl_sf_coulomb_wave_F_array(
      lam_min,
      kmax,
      eta,
      x,
      fc_array,
      F_exponent,
    );
  }

  late final _gsl_sf_coulomb_wave_F_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_coulomb_wave_F_array');
  late final _gsl_sf_coulomb_wave_F_array =
      _gsl_sf_coulomb_wave_F_arrayPtr.asFunction<
          int Function(double, int, double, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_coulomb_wave_FG_array(
    double lam_min,
    int kmax,
    double eta,
    double x,
    ffi.Pointer<ffi.Double> fc_array,
    ffi.Pointer<ffi.Double> gc_array,
    ffi.Pointer<ffi.Double> F_exponent,
    ffi.Pointer<ffi.Double> G_exponent,
  ) {
    return _gsl_sf_coulomb_wave_FG_array(
      lam_min,
      kmax,
      eta,
      x,
      fc_array,
      gc_array,
      F_exponent,
      G_exponent,
    );
  }

  late final _gsl_sf_coulomb_wave_FG_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_coulomb_wave_FG_array');
  late final _gsl_sf_coulomb_wave_FG_array =
      _gsl_sf_coulomb_wave_FG_arrayPtr.asFunction<
          int Function(
              double,
              int,
              double,
              double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_coulomb_wave_FGp_array(
    double lam_min,
    int kmax,
    double eta,
    double x,
    ffi.Pointer<ffi.Double> fc_array,
    ffi.Pointer<ffi.Double> fcp_array,
    ffi.Pointer<ffi.Double> gc_array,
    ffi.Pointer<ffi.Double> gcp_array,
    ffi.Pointer<ffi.Double> F_exponent,
    ffi.Pointer<ffi.Double> G_exponent,
  ) {
    return _gsl_sf_coulomb_wave_FGp_array(
      lam_min,
      kmax,
      eta,
      x,
      fc_array,
      fcp_array,
      gc_array,
      gcp_array,
      F_exponent,
      G_exponent,
    );
  }

  late final _gsl_sf_coulomb_wave_FGp_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_coulomb_wave_FGp_array');
  late final _gsl_sf_coulomb_wave_FGp_array =
      _gsl_sf_coulomb_wave_FGp_arrayPtr.asFunction<
          int Function(
              double,
              int,
              double,
              double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_coulomb_wave_sphF_array(
    double lam_min,
    int kmax,
    double eta,
    double x,
    ffi.Pointer<ffi.Double> fc_array,
    ffi.Pointer<ffi.Double> F_exponent,
  ) {
    return _gsl_sf_coulomb_wave_sphF_array(
      lam_min,
      kmax,
      eta,
      x,
      fc_array,
      F_exponent,
    );
  }

  late final _gsl_sf_coulomb_wave_sphF_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_coulomb_wave_sphF_array');
  late final _gsl_sf_coulomb_wave_sphF_array =
      _gsl_sf_coulomb_wave_sphF_arrayPtr.asFunction<
          int Function(double, int, double, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_sf_coulomb_CL_e(
    double L,
    double eta,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_coulomb_CL_e(
      L,
      eta,
      result,
    );
  }

  late final _gsl_sf_coulomb_CL_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_coulomb_CL_e');
  late final _gsl_sf_coulomb_CL_e = _gsl_sf_coulomb_CL_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_coulomb_CL_array(
    double Lmin,
    int kmax,
    double eta,
    ffi.Pointer<ffi.Double> cl,
  ) {
    return _gsl_sf_coulomb_CL_array(
      Lmin,
      kmax,
      eta,
      cl,
    );
  }

  late final _gsl_sf_coulomb_CL_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Int32, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_coulomb_CL_array');
  late final _gsl_sf_coulomb_CL_array = _gsl_sf_coulomb_CL_arrayPtr
      .asFunction<int Function(double, int, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_clausen_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_clausen_e(
      x,
      result,
    );
  }

  late final _gsl_sf_clausen_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_clausen_e');
  late final _gsl_sf_clausen_e = _gsl_sf_clausen_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_clausen(
    double x,
  ) {
    return _gsl_sf_clausen(
      x,
    );
  }

  late final _gsl_sf_clausenPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_clausen');
  late final _gsl_sf_clausen =
      _gsl_sf_clausenPtr.asFunction<double Function(double)>();

  int gsl_permute_matrix_complex(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_complex> A,
  ) {
    return _gsl_permute_matrix_complex(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_complexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_complex>)>>('gsl_permute_matrix_complex');
  late final _gsl_permute_matrix_complex =
      _gsl_permute_matrix_complexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_complex>)>();

  int gsl_fft_real_float_radix2_transform(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_fft_real_float_radix2_transform(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_real_float_radix2_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_fft_real_float_radix2_transform');
  late final _gsl_fft_real_float_radix2_transform =
      _gsl_fft_real_float_radix2_transformPtr
          .asFunction<int Function(ffi.Pointer<ffi.Float>, int, int)>();

  ffi.Pointer<gsl_fft_real_wavetable_float> gsl_fft_real_wavetable_float_alloc(
    int n,
  ) {
    return _gsl_fft_real_wavetable_float_alloc(
      n,
    );
  }

  late final _gsl_fft_real_wavetable_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_real_wavetable_float> Function(
              size_t)>>('gsl_fft_real_wavetable_float_alloc');
  late final _gsl_fft_real_wavetable_float_alloc =
      _gsl_fft_real_wavetable_float_allocPtr.asFunction<
          ffi.Pointer<gsl_fft_real_wavetable_float> Function(int)>();

  void gsl_fft_real_wavetable_float_free(
    ffi.Pointer<gsl_fft_real_wavetable_float> wavetable,
  ) {
    return _gsl_fft_real_wavetable_float_free(
      wavetable,
    );
  }

  late final _gsl_fft_real_wavetable_float_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_fft_real_wavetable_float>)>>(
      'gsl_fft_real_wavetable_float_free');
  late final _gsl_fft_real_wavetable_float_free =
      _gsl_fft_real_wavetable_float_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_fft_real_wavetable_float>)>();

  ffi.Pointer<gsl_fft_real_workspace_float> gsl_fft_real_workspace_float_alloc(
    int n,
  ) {
    return _gsl_fft_real_workspace_float_alloc(
      n,
    );
  }

  late final _gsl_fft_real_workspace_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_real_workspace_float> Function(
              size_t)>>('gsl_fft_real_workspace_float_alloc');
  late final _gsl_fft_real_workspace_float_alloc =
      _gsl_fft_real_workspace_float_allocPtr.asFunction<
          ffi.Pointer<gsl_fft_real_workspace_float> Function(int)>();

  void gsl_fft_real_workspace_float_free(
    ffi.Pointer<gsl_fft_real_workspace_float> workspace,
  ) {
    return _gsl_fft_real_workspace_float_free(
      workspace,
    );
  }

  late final _gsl_fft_real_workspace_float_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_fft_real_workspace_float>)>>(
      'gsl_fft_real_workspace_float_free');
  late final _gsl_fft_real_workspace_float_free =
      _gsl_fft_real_workspace_float_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_fft_real_workspace_float>)>();

  int gsl_fft_real_float_transform(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_real_wavetable_float> wavetable,
    ffi.Pointer<gsl_fft_real_workspace_float> work,
  ) {
    return _gsl_fft_real_float_transform(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_real_float_transformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Float>,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_real_wavetable_float>,
                  ffi.Pointer<gsl_fft_real_workspace_float>)>>(
      'gsl_fft_real_float_transform');
  late final _gsl_fft_real_float_transform =
      _gsl_fft_real_float_transformPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>,
              int,
              int,
              ffi.Pointer<gsl_fft_real_wavetable_float>,
              ffi.Pointer<gsl_fft_real_workspace_float>)>();

  int gsl_fft_real_float_unpack(
    ffi.Pointer<ffi.Float> real_float_coefficient,
    ffi.Pointer<ffi.Float> complex_coefficient,
    int stride,
    int n,
  ) {
    return _gsl_fft_real_float_unpack(
      real_float_coefficient,
      complex_coefficient,
      stride,
      n,
    );
  }

  late final _gsl_fft_real_float_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              size_t, size_t)>>('gsl_fft_real_float_unpack');
  late final _gsl_fft_real_float_unpack =
      _gsl_fft_real_float_unpackPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int, int)>();

  ffi.Pointer<gsl_cheb_series> gsl_cheb_alloc(
    int order,
  ) {
    return _gsl_cheb_alloc(
      order,
    );
  }

  late final _gsl_cheb_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_cheb_series> Function(size_t)>>(
      'gsl_cheb_alloc');
  late final _gsl_cheb_alloc = _gsl_cheb_allocPtr
      .asFunction<ffi.Pointer<gsl_cheb_series> Function(int)>();

  void gsl_cheb_free(
    ffi.Pointer<gsl_cheb_series> cs,
  ) {
    return _gsl_cheb_free(
      cs,
    );
  }

  late final _gsl_cheb_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_cheb_series>)>>(
      'gsl_cheb_free');
  late final _gsl_cheb_free = _gsl_cheb_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_cheb_series>)>();

  int gsl_cheb_init(
    ffi.Pointer<gsl_cheb_series> cs,
    ffi.Pointer<gsl_function> func,
    double a,
    double b,
  ) {
    return _gsl_cheb_init(
      cs,
      func,
      a,
      b,
    );
  }

  late final _gsl_cheb_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_cheb_series>,
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double)>>('gsl_cheb_init');
  late final _gsl_cheb_init = _gsl_cheb_initPtr.asFunction<
      int Function(ffi.Pointer<gsl_cheb_series>, ffi.Pointer<gsl_function>,
          double, double)>();

  int gsl_cheb_order(
    ffi.Pointer<gsl_cheb_series> cs,
  ) {
    return _gsl_cheb_order(
      cs,
    );
  }

  late final _gsl_cheb_orderPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_cheb_series>)>>(
      'gsl_cheb_order');
  late final _gsl_cheb_order = _gsl_cheb_orderPtr
      .asFunction<int Function(ffi.Pointer<gsl_cheb_series>)>();

  int gsl_cheb_size(
    ffi.Pointer<gsl_cheb_series> cs,
  ) {
    return _gsl_cheb_size(
      cs,
    );
  }

  late final _gsl_cheb_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_cheb_series>)>>(
      'gsl_cheb_size');
  late final _gsl_cheb_size = _gsl_cheb_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_cheb_series>)>();

  ffi.Pointer<ffi.Double> gsl_cheb_coeffs(
    ffi.Pointer<gsl_cheb_series> cs,
  ) {
    return _gsl_cheb_coeffs(
      cs,
    );
  }

  late final _gsl_cheb_coeffsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<gsl_cheb_series>)>>('gsl_cheb_coeffs');
  late final _gsl_cheb_coeffs = _gsl_cheb_coeffsPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<gsl_cheb_series>)>();

  double gsl_cheb_eval(
    ffi.Pointer<gsl_cheb_series> cs,
    double x,
  ) {
    return _gsl_cheb_eval(
      cs,
      x,
    );
  }

  late final _gsl_cheb_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_cheb_series>, ffi.Double)>>('gsl_cheb_eval');
  late final _gsl_cheb_eval = _gsl_cheb_evalPtr
      .asFunction<double Function(ffi.Pointer<gsl_cheb_series>, double)>();

  int gsl_cheb_eval_err(
    ffi.Pointer<gsl_cheb_series> cs,
    double x,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_cheb_eval_err(
      cs,
      x,
      result,
      abserr,
    );
  }

  late final _gsl_cheb_eval_errPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_cheb_series>,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_cheb_eval_err');
  late final _gsl_cheb_eval_err = _gsl_cheb_eval_errPtr.asFunction<
      int Function(ffi.Pointer<gsl_cheb_series>, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  double gsl_cheb_eval_n(
    ffi.Pointer<gsl_cheb_series> cs,
    int order,
    double x,
  ) {
    return _gsl_cheb_eval_n(
      cs,
      order,
      x,
    );
  }

  late final _gsl_cheb_eval_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_cheb_series>, size_t,
              ffi.Double)>>('gsl_cheb_eval_n');
  late final _gsl_cheb_eval_n = _gsl_cheb_eval_nPtr
      .asFunction<double Function(ffi.Pointer<gsl_cheb_series>, int, double)>();

  int gsl_cheb_eval_n_err(
    ffi.Pointer<gsl_cheb_series> cs,
    int order,
    double x,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_cheb_eval_n_err(
      cs,
      order,
      x,
      result,
      abserr,
    );
  }

  late final _gsl_cheb_eval_n_errPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_cheb_series>,
              size_t,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_cheb_eval_n_err');
  late final _gsl_cheb_eval_n_err = _gsl_cheb_eval_n_errPtr.asFunction<
      int Function(ffi.Pointer<gsl_cheb_series>, int, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  double gsl_cheb_eval_mode(
    ffi.Pointer<gsl_cheb_series> cs,
    double x,
    int mode,
  ) {
    return _gsl_cheb_eval_mode(
      cs,
      x,
      mode,
    );
  }

  late final _gsl_cheb_eval_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_cheb_series>, ffi.Double,
              gsl_mode_t)>>('gsl_cheb_eval_mode');
  late final _gsl_cheb_eval_mode = _gsl_cheb_eval_modePtr
      .asFunction<double Function(ffi.Pointer<gsl_cheb_series>, double, int)>();

  int gsl_cheb_eval_mode_e(
    ffi.Pointer<gsl_cheb_series> cs,
    double x,
    int mode,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_cheb_eval_mode_e(
      cs,
      x,
      mode,
      result,
      abserr,
    );
  }

  late final _gsl_cheb_eval_mode_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_cheb_series>,
              ffi.Double,
              gsl_mode_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_cheb_eval_mode_e');
  late final _gsl_cheb_eval_mode_e = _gsl_cheb_eval_mode_ePtr.asFunction<
      int Function(ffi.Pointer<gsl_cheb_series>, double, int,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_cheb_calc_deriv(
    ffi.Pointer<gsl_cheb_series> deriv,
    ffi.Pointer<gsl_cheb_series> cs,
  ) {
    return _gsl_cheb_calc_deriv(
      deriv,
      cs,
    );
  }

  late final _gsl_cheb_calc_derivPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_cheb_series>,
              ffi.Pointer<gsl_cheb_series>)>>('gsl_cheb_calc_deriv');
  late final _gsl_cheb_calc_deriv = _gsl_cheb_calc_derivPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_cheb_series>, ffi.Pointer<gsl_cheb_series>)>();

  int gsl_cheb_calc_integ(
    ffi.Pointer<gsl_cheb_series> integ,
    ffi.Pointer<gsl_cheb_series> cs,
  ) {
    return _gsl_cheb_calc_integ(
      integ,
      cs,
    );
  }

  late final _gsl_cheb_calc_integPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_cheb_series>,
              ffi.Pointer<gsl_cheb_series>)>>('gsl_cheb_calc_integ');
  late final _gsl_cheb_calc_integ = _gsl_cheb_calc_integPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_cheb_series>, ffi.Pointer<gsl_cheb_series>)>();

  int gsl_permute_matrix_complex_long_double(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_complex_long_double> A,
  ) {
    return _gsl_permute_matrix_complex_long_double(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_complex_long_doublePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_matrix_complex_long_double>)>>(
      'gsl_permute_matrix_complex_long_double');
  late final _gsl_permute_matrix_complex_long_double =
      _gsl_permute_matrix_complex_long_doublePtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_complex_long_double>)>();

  int gsl_permute_matrix_complex_float(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_complex_float> A,
  ) {
    return _gsl_permute_matrix_complex_float(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_complex_floatPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_matrix_complex_float>)>>(
      'gsl_permute_matrix_complex_float');
  late final _gsl_permute_matrix_complex_float =
      _gsl_permute_matrix_complex_floatPtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_complex_float>)>();

  int gsl_permute_matrix_long_double(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_long_double> A,
  ) {
    return _gsl_permute_matrix_long_double(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_long_doublePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_matrix_long_double>)>>(
      'gsl_permute_matrix_long_double');
  late final _gsl_permute_matrix_long_double =
      _gsl_permute_matrix_long_doublePtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_long_double>)>();

  int gsl_permute_matrix(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix> A,
  ) {
    return _gsl_permute_matrix(
      p,
      A,
    );
  }

  late final _gsl_permute_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix>)>>('gsl_permute_matrix');
  late final _gsl_permute_matrix = _gsl_permute_matrixPtr.asFunction<
      int Function(ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix>)>();

  int gsl_permute_matrix_ulong(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_ulong> A,
  ) {
    return _gsl_permute_matrix_ulong(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_ulong>)>>('gsl_permute_matrix_ulong');
  late final _gsl_permute_matrix_ulong =
      _gsl_permute_matrix_ulongPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_ulong>)>();

  int gsl_permute_matrix_long(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_long> A,
  ) {
    return _gsl_permute_matrix_long(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_long>)>>('gsl_permute_matrix_long');
  late final _gsl_permute_matrix_long = _gsl_permute_matrix_longPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_long>)>();

  int gsl_permute_matrix_uint(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_uint> A,
  ) {
    return _gsl_permute_matrix_uint(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_uint>)>>('gsl_permute_matrix_uint');
  late final _gsl_permute_matrix_uint = _gsl_permute_matrix_uintPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_uint>)>();

  int gsl_permute_matrix_int(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_int> A,
  ) {
    return _gsl_permute_matrix_int(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_int>)>>('gsl_permute_matrix_int');
  late final _gsl_permute_matrix_int = _gsl_permute_matrix_intPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_int>)>();

  int gsl_permute_matrix_ushort(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_ushort> A,
  ) {
    return _gsl_permute_matrix_ushort(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_ushortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_ushort>)>>('gsl_permute_matrix_ushort');
  late final _gsl_permute_matrix_ushort =
      _gsl_permute_matrix_ushortPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_ushort>)>();

  int gsl_permute_matrix_short(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_short> A,
  ) {
    return _gsl_permute_matrix_short(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_shortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_short>)>>('gsl_permute_matrix_short');
  late final _gsl_permute_matrix_short =
      _gsl_permute_matrix_shortPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_short>)>();

  int gsl_permute_matrix_uchar(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_uchar> A,
  ) {
    return _gsl_permute_matrix_uchar(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_ucharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_uchar>)>>('gsl_permute_matrix_uchar');
  late final _gsl_permute_matrix_uchar =
      _gsl_permute_matrix_ucharPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_uchar>)>();

  int gsl_permute_matrix_char(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_matrix_char> A,
  ) {
    return _gsl_permute_matrix_char(
      p,
      A,
    );
  }

  late final _gsl_permute_matrix_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_matrix_char>)>>('gsl_permute_matrix_char');
  late final _gsl_permute_matrix_char = _gsl_permute_matrix_charPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_matrix_char>)>();

  int gsl_sf_dilog_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_dilog_e(
      x,
      result,
    );
  }

  late final _gsl_sf_dilog_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_dilog_e');
  late final _gsl_sf_dilog_e = _gsl_sf_dilog_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_dilog(
    double x,
  ) {
    return _gsl_sf_dilog(
      x,
    );
  }

  late final _gsl_sf_dilogPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_dilog');
  late final _gsl_sf_dilog =
      _gsl_sf_dilogPtr.asFunction<double Function(double)>();

  int gsl_sf_complex_dilog_xy_e(
    double x,
    double y,
    ffi.Pointer<gsl_sf_result> result_re,
    ffi.Pointer<gsl_sf_result> result_im,
  ) {
    return _gsl_sf_complex_dilog_xy_e(
      x,
      y,
      result_re,
      result_im,
    );
  }

  late final _gsl_sf_complex_dilog_xy_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_complex_dilog_xy_e');
  late final _gsl_sf_complex_dilog_xy_e =
      _gsl_sf_complex_dilog_xy_ePtr.asFunction<
          int Function(double, double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_complex_dilog_e(
    double r,
    double theta,
    ffi.Pointer<gsl_sf_result> result_re,
    ffi.Pointer<gsl_sf_result> result_im,
  ) {
    return _gsl_sf_complex_dilog_e(
      r,
      theta,
      result_re,
      result_im,
    );
  }

  late final _gsl_sf_complex_dilog_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_complex_dilog_e');
  late final _gsl_sf_complex_dilog_e = _gsl_sf_complex_dilog_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_complex_spence_xy_e(
    double x,
    double y,
    ffi.Pointer<gsl_sf_result> real_sp,
    ffi.Pointer<gsl_sf_result> imag_sp,
  ) {
    return _gsl_sf_complex_spence_xy_e(
      x,
      y,
      real_sp,
      imag_sp,
    );
  }

  late final _gsl_sf_complex_spence_xy_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_complex_spence_xy_e');
  late final _gsl_sf_complex_spence_xy_e =
      _gsl_sf_complex_spence_xy_ePtr.asFunction<
          int Function(double, double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>();

  double gsl_cdf_ugaussian_P(
    double x,
  ) {
    return _gsl_cdf_ugaussian_P(
      x,
    );
  }

  late final _gsl_cdf_ugaussian_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_cdf_ugaussian_P');
  late final _gsl_cdf_ugaussian_P =
      _gsl_cdf_ugaussian_PPtr.asFunction<double Function(double)>();

  double gsl_cdf_ugaussian_Q(
    double x,
  ) {
    return _gsl_cdf_ugaussian_Q(
      x,
    );
  }

  late final _gsl_cdf_ugaussian_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_cdf_ugaussian_Q');
  late final _gsl_cdf_ugaussian_Q =
      _gsl_cdf_ugaussian_QPtr.asFunction<double Function(double)>();

  double gsl_cdf_ugaussian_Pinv(
    double P,
  ) {
    return _gsl_cdf_ugaussian_Pinv(
      P,
    );
  }

  late final _gsl_cdf_ugaussian_PinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_cdf_ugaussian_Pinv');
  late final _gsl_cdf_ugaussian_Pinv =
      _gsl_cdf_ugaussian_PinvPtr.asFunction<double Function(double)>();

  double gsl_cdf_ugaussian_Qinv(
    double Q,
  ) {
    return _gsl_cdf_ugaussian_Qinv(
      Q,
    );
  }

  late final _gsl_cdf_ugaussian_QinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_cdf_ugaussian_Qinv');
  late final _gsl_cdf_ugaussian_Qinv =
      _gsl_cdf_ugaussian_QinvPtr.asFunction<double Function(double)>();

  double gsl_cdf_gaussian_P(
    double x,
    double sigma,
  ) {
    return _gsl_cdf_gaussian_P(
      x,
      sigma,
    );
  }

  late final _gsl_cdf_gaussian_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_gaussian_P');
  late final _gsl_cdf_gaussian_P =
      _gsl_cdf_gaussian_PPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_gaussian_Q(
    double x,
    double sigma,
  ) {
    return _gsl_cdf_gaussian_Q(
      x,
      sigma,
    );
  }

  late final _gsl_cdf_gaussian_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_gaussian_Q');
  late final _gsl_cdf_gaussian_Q =
      _gsl_cdf_gaussian_QPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_gaussian_Pinv(
    double P,
    double sigma,
  ) {
    return _gsl_cdf_gaussian_Pinv(
      P,
      sigma,
    );
  }

  late final _gsl_cdf_gaussian_PinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_gaussian_Pinv');
  late final _gsl_cdf_gaussian_Pinv =
      _gsl_cdf_gaussian_PinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_gaussian_Qinv(
    double Q,
    double sigma,
  ) {
    return _gsl_cdf_gaussian_Qinv(
      Q,
      sigma,
    );
  }

  late final _gsl_cdf_gaussian_QinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_gaussian_Qinv');
  late final _gsl_cdf_gaussian_Qinv =
      _gsl_cdf_gaussian_QinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_gamma_P(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_gamma_P(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_gamma_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gamma_P');
  late final _gsl_cdf_gamma_P =
      _gsl_cdf_gamma_PPtr.asFunction<double Function(double, double, double)>();

  double gsl_cdf_gamma_Q(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_gamma_Q(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_gamma_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gamma_Q');
  late final _gsl_cdf_gamma_Q =
      _gsl_cdf_gamma_QPtr.asFunction<double Function(double, double, double)>();

  double gsl_cdf_gamma_Pinv(
    double P,
    double a,
    double b,
  ) {
    return _gsl_cdf_gamma_Pinv(
      P,
      a,
      b,
    );
  }

  late final _gsl_cdf_gamma_PinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gamma_Pinv');
  late final _gsl_cdf_gamma_Pinv = _gsl_cdf_gamma_PinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_gamma_Qinv(
    double Q,
    double a,
    double b,
  ) {
    return _gsl_cdf_gamma_Qinv(
      Q,
      a,
      b,
    );
  }

  late final _gsl_cdf_gamma_QinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gamma_Qinv');
  late final _gsl_cdf_gamma_Qinv = _gsl_cdf_gamma_QinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_cauchy_P(
    double x,
    double a,
  ) {
    return _gsl_cdf_cauchy_P(
      x,
      a,
    );
  }

  late final _gsl_cdf_cauchy_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_cauchy_P');
  late final _gsl_cdf_cauchy_P =
      _gsl_cdf_cauchy_PPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_cauchy_Q(
    double x,
    double a,
  ) {
    return _gsl_cdf_cauchy_Q(
      x,
      a,
    );
  }

  late final _gsl_cdf_cauchy_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_cauchy_Q');
  late final _gsl_cdf_cauchy_Q =
      _gsl_cdf_cauchy_QPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_cauchy_Pinv(
    double P,
    double a,
  ) {
    return _gsl_cdf_cauchy_Pinv(
      P,
      a,
    );
  }

  late final _gsl_cdf_cauchy_PinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_cauchy_Pinv');
  late final _gsl_cdf_cauchy_Pinv =
      _gsl_cdf_cauchy_PinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_cauchy_Qinv(
    double Q,
    double a,
  ) {
    return _gsl_cdf_cauchy_Qinv(
      Q,
      a,
    );
  }

  late final _gsl_cdf_cauchy_QinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_cauchy_Qinv');
  late final _gsl_cdf_cauchy_Qinv =
      _gsl_cdf_cauchy_QinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_laplace_P(
    double x,
    double a,
  ) {
    return _gsl_cdf_laplace_P(
      x,
      a,
    );
  }

  late final _gsl_cdf_laplace_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_laplace_P');
  late final _gsl_cdf_laplace_P =
      _gsl_cdf_laplace_PPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_laplace_Q(
    double x,
    double a,
  ) {
    return _gsl_cdf_laplace_Q(
      x,
      a,
    );
  }

  late final _gsl_cdf_laplace_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_laplace_Q');
  late final _gsl_cdf_laplace_Q =
      _gsl_cdf_laplace_QPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_laplace_Pinv(
    double P,
    double a,
  ) {
    return _gsl_cdf_laplace_Pinv(
      P,
      a,
    );
  }

  late final _gsl_cdf_laplace_PinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_laplace_Pinv');
  late final _gsl_cdf_laplace_Pinv =
      _gsl_cdf_laplace_PinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_laplace_Qinv(
    double Q,
    double a,
  ) {
    return _gsl_cdf_laplace_Qinv(
      Q,
      a,
    );
  }

  late final _gsl_cdf_laplace_QinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_laplace_Qinv');
  late final _gsl_cdf_laplace_Qinv =
      _gsl_cdf_laplace_QinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_rayleigh_P(
    double x,
    double sigma,
  ) {
    return _gsl_cdf_rayleigh_P(
      x,
      sigma,
    );
  }

  late final _gsl_cdf_rayleigh_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_rayleigh_P');
  late final _gsl_cdf_rayleigh_P =
      _gsl_cdf_rayleigh_PPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_rayleigh_Q(
    double x,
    double sigma,
  ) {
    return _gsl_cdf_rayleigh_Q(
      x,
      sigma,
    );
  }

  late final _gsl_cdf_rayleigh_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_rayleigh_Q');
  late final _gsl_cdf_rayleigh_Q =
      _gsl_cdf_rayleigh_QPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_rayleigh_Pinv(
    double P,
    double sigma,
  ) {
    return _gsl_cdf_rayleigh_Pinv(
      P,
      sigma,
    );
  }

  late final _gsl_cdf_rayleigh_PinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_rayleigh_Pinv');
  late final _gsl_cdf_rayleigh_Pinv =
      _gsl_cdf_rayleigh_PinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_rayleigh_Qinv(
    double Q,
    double sigma,
  ) {
    return _gsl_cdf_rayleigh_Qinv(
      Q,
      sigma,
    );
  }

  late final _gsl_cdf_rayleigh_QinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_rayleigh_Qinv');
  late final _gsl_cdf_rayleigh_Qinv =
      _gsl_cdf_rayleigh_QinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_chisq_P(
    double x,
    double nu,
  ) {
    return _gsl_cdf_chisq_P(
      x,
      nu,
    );
  }

  late final _gsl_cdf_chisq_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_chisq_P');
  late final _gsl_cdf_chisq_P =
      _gsl_cdf_chisq_PPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_chisq_Q(
    double x,
    double nu,
  ) {
    return _gsl_cdf_chisq_Q(
      x,
      nu,
    );
  }

  late final _gsl_cdf_chisq_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_chisq_Q');
  late final _gsl_cdf_chisq_Q =
      _gsl_cdf_chisq_QPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_chisq_Pinv(
    double P,
    double nu,
  ) {
    return _gsl_cdf_chisq_Pinv(
      P,
      nu,
    );
  }

  late final _gsl_cdf_chisq_PinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_chisq_Pinv');
  late final _gsl_cdf_chisq_Pinv =
      _gsl_cdf_chisq_PinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_chisq_Qinv(
    double Q,
    double nu,
  ) {
    return _gsl_cdf_chisq_Qinv(
      Q,
      nu,
    );
  }

  late final _gsl_cdf_chisq_QinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_chisq_Qinv');
  late final _gsl_cdf_chisq_Qinv =
      _gsl_cdf_chisq_QinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_exponential_P(
    double x,
    double mu,
  ) {
    return _gsl_cdf_exponential_P(
      x,
      mu,
    );
  }

  late final _gsl_cdf_exponential_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_exponential_P');
  late final _gsl_cdf_exponential_P =
      _gsl_cdf_exponential_PPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_exponential_Q(
    double x,
    double mu,
  ) {
    return _gsl_cdf_exponential_Q(
      x,
      mu,
    );
  }

  late final _gsl_cdf_exponential_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_exponential_Q');
  late final _gsl_cdf_exponential_Q =
      _gsl_cdf_exponential_QPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_exponential_Pinv(
    double P,
    double mu,
  ) {
    return _gsl_cdf_exponential_Pinv(
      P,
      mu,
    );
  }

  late final _gsl_cdf_exponential_PinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_exponential_Pinv');
  late final _gsl_cdf_exponential_Pinv = _gsl_cdf_exponential_PinvPtr
      .asFunction<double Function(double, double)>();

  double gsl_cdf_exponential_Qinv(
    double Q,
    double mu,
  ) {
    return _gsl_cdf_exponential_Qinv(
      Q,
      mu,
    );
  }

  late final _gsl_cdf_exponential_QinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_exponential_Qinv');
  late final _gsl_cdf_exponential_Qinv = _gsl_cdf_exponential_QinvPtr
      .asFunction<double Function(double, double)>();

  double gsl_cdf_exppow_P(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_exppow_P(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_exppow_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_exppow_P');
  late final _gsl_cdf_exppow_P = _gsl_cdf_exppow_PPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_exppow_Q(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_exppow_Q(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_exppow_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_exppow_Q');
  late final _gsl_cdf_exppow_Q = _gsl_cdf_exppow_QPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_tdist_P(
    double x,
    double nu,
  ) {
    return _gsl_cdf_tdist_P(
      x,
      nu,
    );
  }

  late final _gsl_cdf_tdist_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_tdist_P');
  late final _gsl_cdf_tdist_P =
      _gsl_cdf_tdist_PPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_tdist_Q(
    double x,
    double nu,
  ) {
    return _gsl_cdf_tdist_Q(
      x,
      nu,
    );
  }

  late final _gsl_cdf_tdist_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_tdist_Q');
  late final _gsl_cdf_tdist_Q =
      _gsl_cdf_tdist_QPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_tdist_Pinv(
    double P,
    double nu,
  ) {
    return _gsl_cdf_tdist_Pinv(
      P,
      nu,
    );
  }

  late final _gsl_cdf_tdist_PinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_tdist_Pinv');
  late final _gsl_cdf_tdist_Pinv =
      _gsl_cdf_tdist_PinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_tdist_Qinv(
    double Q,
    double nu,
  ) {
    return _gsl_cdf_tdist_Qinv(
      Q,
      nu,
    );
  }

  late final _gsl_cdf_tdist_QinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_tdist_Qinv');
  late final _gsl_cdf_tdist_Qinv =
      _gsl_cdf_tdist_QinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_fdist_P(
    double x,
    double nu1,
    double nu2,
  ) {
    return _gsl_cdf_fdist_P(
      x,
      nu1,
      nu2,
    );
  }

  late final _gsl_cdf_fdist_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_fdist_P');
  late final _gsl_cdf_fdist_P =
      _gsl_cdf_fdist_PPtr.asFunction<double Function(double, double, double)>();

  double gsl_cdf_fdist_Q(
    double x,
    double nu1,
    double nu2,
  ) {
    return _gsl_cdf_fdist_Q(
      x,
      nu1,
      nu2,
    );
  }

  late final _gsl_cdf_fdist_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_fdist_Q');
  late final _gsl_cdf_fdist_Q =
      _gsl_cdf_fdist_QPtr.asFunction<double Function(double, double, double)>();

  double gsl_cdf_fdist_Pinv(
    double P,
    double nu1,
    double nu2,
  ) {
    return _gsl_cdf_fdist_Pinv(
      P,
      nu1,
      nu2,
    );
  }

  late final _gsl_cdf_fdist_PinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_fdist_Pinv');
  late final _gsl_cdf_fdist_Pinv = _gsl_cdf_fdist_PinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_fdist_Qinv(
    double Q,
    double nu1,
    double nu2,
  ) {
    return _gsl_cdf_fdist_Qinv(
      Q,
      nu1,
      nu2,
    );
  }

  late final _gsl_cdf_fdist_QinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_fdist_Qinv');
  late final _gsl_cdf_fdist_Qinv = _gsl_cdf_fdist_QinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_beta_P(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_beta_P(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_beta_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_beta_P');
  late final _gsl_cdf_beta_P =
      _gsl_cdf_beta_PPtr.asFunction<double Function(double, double, double)>();

  double gsl_cdf_beta_Q(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_beta_Q(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_beta_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_beta_Q');
  late final _gsl_cdf_beta_Q =
      _gsl_cdf_beta_QPtr.asFunction<double Function(double, double, double)>();

  double gsl_cdf_beta_Pinv(
    double P,
    double a,
    double b,
  ) {
    return _gsl_cdf_beta_Pinv(
      P,
      a,
      b,
    );
  }

  late final _gsl_cdf_beta_PinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_beta_Pinv');
  late final _gsl_cdf_beta_Pinv = _gsl_cdf_beta_PinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_beta_Qinv(
    double Q,
    double a,
    double b,
  ) {
    return _gsl_cdf_beta_Qinv(
      Q,
      a,
      b,
    );
  }

  late final _gsl_cdf_beta_QinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_beta_Qinv');
  late final _gsl_cdf_beta_Qinv = _gsl_cdf_beta_QinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_flat_P(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_flat_P(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_flat_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_flat_P');
  late final _gsl_cdf_flat_P =
      _gsl_cdf_flat_PPtr.asFunction<double Function(double, double, double)>();

  double gsl_cdf_flat_Q(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_flat_Q(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_flat_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_flat_Q');
  late final _gsl_cdf_flat_Q =
      _gsl_cdf_flat_QPtr.asFunction<double Function(double, double, double)>();

  double gsl_cdf_flat_Pinv(
    double P,
    double a,
    double b,
  ) {
    return _gsl_cdf_flat_Pinv(
      P,
      a,
      b,
    );
  }

  late final _gsl_cdf_flat_PinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_flat_Pinv');
  late final _gsl_cdf_flat_Pinv = _gsl_cdf_flat_PinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_flat_Qinv(
    double Q,
    double a,
    double b,
  ) {
    return _gsl_cdf_flat_Qinv(
      Q,
      a,
      b,
    );
  }

  late final _gsl_cdf_flat_QinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_flat_Qinv');
  late final _gsl_cdf_flat_Qinv = _gsl_cdf_flat_QinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_lognormal_P(
    double x,
    double zeta,
    double sigma,
  ) {
    return _gsl_cdf_lognormal_P(
      x,
      zeta,
      sigma,
    );
  }

  late final _gsl_cdf_lognormal_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_lognormal_P');
  late final _gsl_cdf_lognormal_P = _gsl_cdf_lognormal_PPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_lognormal_Q(
    double x,
    double zeta,
    double sigma,
  ) {
    return _gsl_cdf_lognormal_Q(
      x,
      zeta,
      sigma,
    );
  }

  late final _gsl_cdf_lognormal_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_lognormal_Q');
  late final _gsl_cdf_lognormal_Q = _gsl_cdf_lognormal_QPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_lognormal_Pinv(
    double P,
    double zeta,
    double sigma,
  ) {
    return _gsl_cdf_lognormal_Pinv(
      P,
      zeta,
      sigma,
    );
  }

  late final _gsl_cdf_lognormal_PinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_lognormal_Pinv');
  late final _gsl_cdf_lognormal_Pinv = _gsl_cdf_lognormal_PinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_lognormal_Qinv(
    double Q,
    double zeta,
    double sigma,
  ) {
    return _gsl_cdf_lognormal_Qinv(
      Q,
      zeta,
      sigma,
    );
  }

  late final _gsl_cdf_lognormal_QinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_lognormal_Qinv');
  late final _gsl_cdf_lognormal_Qinv = _gsl_cdf_lognormal_QinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_gumbel1_P(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_gumbel1_P(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_gumbel1_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gumbel1_P');
  late final _gsl_cdf_gumbel1_P = _gsl_cdf_gumbel1_PPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_gumbel1_Q(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_gumbel1_Q(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_gumbel1_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gumbel1_Q');
  late final _gsl_cdf_gumbel1_Q = _gsl_cdf_gumbel1_QPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_gumbel1_Pinv(
    double P,
    double a,
    double b,
  ) {
    return _gsl_cdf_gumbel1_Pinv(
      P,
      a,
      b,
    );
  }

  late final _gsl_cdf_gumbel1_PinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gumbel1_Pinv');
  late final _gsl_cdf_gumbel1_Pinv = _gsl_cdf_gumbel1_PinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_gumbel1_Qinv(
    double Q,
    double a,
    double b,
  ) {
    return _gsl_cdf_gumbel1_Qinv(
      Q,
      a,
      b,
    );
  }

  late final _gsl_cdf_gumbel1_QinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gumbel1_Qinv');
  late final _gsl_cdf_gumbel1_Qinv = _gsl_cdf_gumbel1_QinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_gumbel2_P(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_gumbel2_P(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_gumbel2_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gumbel2_P');
  late final _gsl_cdf_gumbel2_P = _gsl_cdf_gumbel2_PPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_gumbel2_Q(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_gumbel2_Q(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_gumbel2_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gumbel2_Q');
  late final _gsl_cdf_gumbel2_Q = _gsl_cdf_gumbel2_QPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_gumbel2_Pinv(
    double P,
    double a,
    double b,
  ) {
    return _gsl_cdf_gumbel2_Pinv(
      P,
      a,
      b,
    );
  }

  late final _gsl_cdf_gumbel2_PinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gumbel2_Pinv');
  late final _gsl_cdf_gumbel2_Pinv = _gsl_cdf_gumbel2_PinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_gumbel2_Qinv(
    double Q,
    double a,
    double b,
  ) {
    return _gsl_cdf_gumbel2_Qinv(
      Q,
      a,
      b,
    );
  }

  late final _gsl_cdf_gumbel2_QinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_gumbel2_Qinv');
  late final _gsl_cdf_gumbel2_Qinv = _gsl_cdf_gumbel2_QinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_weibull_P(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_weibull_P(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_weibull_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_weibull_P');
  late final _gsl_cdf_weibull_P = _gsl_cdf_weibull_PPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_weibull_Q(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_weibull_Q(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_weibull_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_weibull_Q');
  late final _gsl_cdf_weibull_Q = _gsl_cdf_weibull_QPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_weibull_Pinv(
    double P,
    double a,
    double b,
  ) {
    return _gsl_cdf_weibull_Pinv(
      P,
      a,
      b,
    );
  }

  late final _gsl_cdf_weibull_PinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_weibull_Pinv');
  late final _gsl_cdf_weibull_Pinv = _gsl_cdf_weibull_PinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_weibull_Qinv(
    double Q,
    double a,
    double b,
  ) {
    return _gsl_cdf_weibull_Qinv(
      Q,
      a,
      b,
    );
  }

  late final _gsl_cdf_weibull_QinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_weibull_Qinv');
  late final _gsl_cdf_weibull_Qinv = _gsl_cdf_weibull_QinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_pareto_P(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_pareto_P(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_pareto_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_pareto_P');
  late final _gsl_cdf_pareto_P = _gsl_cdf_pareto_PPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_pareto_Q(
    double x,
    double a,
    double b,
  ) {
    return _gsl_cdf_pareto_Q(
      x,
      a,
      b,
    );
  }

  late final _gsl_cdf_pareto_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_pareto_Q');
  late final _gsl_cdf_pareto_Q = _gsl_cdf_pareto_QPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_pareto_Pinv(
    double P,
    double a,
    double b,
  ) {
    return _gsl_cdf_pareto_Pinv(
      P,
      a,
      b,
    );
  }

  late final _gsl_cdf_pareto_PinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_pareto_Pinv');
  late final _gsl_cdf_pareto_Pinv = _gsl_cdf_pareto_PinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_pareto_Qinv(
    double Q,
    double a,
    double b,
  ) {
    return _gsl_cdf_pareto_Qinv(
      Q,
      a,
      b,
    );
  }

  late final _gsl_cdf_pareto_QinvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_cdf_pareto_Qinv');
  late final _gsl_cdf_pareto_Qinv = _gsl_cdf_pareto_QinvPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_cdf_logistic_P(
    double x,
    double a,
  ) {
    return _gsl_cdf_logistic_P(
      x,
      a,
    );
  }

  late final _gsl_cdf_logistic_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_logistic_P');
  late final _gsl_cdf_logistic_P =
      _gsl_cdf_logistic_PPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_logistic_Q(
    double x,
    double a,
  ) {
    return _gsl_cdf_logistic_Q(
      x,
      a,
    );
  }

  late final _gsl_cdf_logistic_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_logistic_Q');
  late final _gsl_cdf_logistic_Q =
      _gsl_cdf_logistic_QPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_logistic_Pinv(
    double P,
    double a,
  ) {
    return _gsl_cdf_logistic_Pinv(
      P,
      a,
    );
  }

  late final _gsl_cdf_logistic_PinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_logistic_Pinv');
  late final _gsl_cdf_logistic_Pinv =
      _gsl_cdf_logistic_PinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_logistic_Qinv(
    double Q,
    double a,
  ) {
    return _gsl_cdf_logistic_Qinv(
      Q,
      a,
    );
  }

  late final _gsl_cdf_logistic_QinvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_cdf_logistic_Qinv');
  late final _gsl_cdf_logistic_Qinv =
      _gsl_cdf_logistic_QinvPtr.asFunction<double Function(double, double)>();

  double gsl_cdf_binomial_P(
    int k,
    double p,
    int n,
  ) {
    return _gsl_cdf_binomial_P(
      k,
      p,
      n,
    );
  }

  late final _gsl_cdf_binomial_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Uint32, ffi.Double, ffi.Uint32)>>('gsl_cdf_binomial_P');
  late final _gsl_cdf_binomial_P =
      _gsl_cdf_binomial_PPtr.asFunction<double Function(int, double, int)>();

  double gsl_cdf_binomial_Q(
    int k,
    double p,
    int n,
  ) {
    return _gsl_cdf_binomial_Q(
      k,
      p,
      n,
    );
  }

  late final _gsl_cdf_binomial_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Uint32, ffi.Double, ffi.Uint32)>>('gsl_cdf_binomial_Q');
  late final _gsl_cdf_binomial_Q =
      _gsl_cdf_binomial_QPtr.asFunction<double Function(int, double, int)>();

  double gsl_cdf_poisson_P(
    int k,
    double mu,
  ) {
    return _gsl_cdf_poisson_P(
      k,
      mu,
    );
  }

  late final _gsl_cdf_poisson_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Double)>>(
          'gsl_cdf_poisson_P');
  late final _gsl_cdf_poisson_P =
      _gsl_cdf_poisson_PPtr.asFunction<double Function(int, double)>();

  double gsl_cdf_poisson_Q(
    int k,
    double mu,
  ) {
    return _gsl_cdf_poisson_Q(
      k,
      mu,
    );
  }

  late final _gsl_cdf_poisson_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Double)>>(
          'gsl_cdf_poisson_Q');
  late final _gsl_cdf_poisson_Q =
      _gsl_cdf_poisson_QPtr.asFunction<double Function(int, double)>();

  double gsl_cdf_geometric_P(
    int k,
    double p,
  ) {
    return _gsl_cdf_geometric_P(
      k,
      p,
    );
  }

  late final _gsl_cdf_geometric_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Double)>>(
          'gsl_cdf_geometric_P');
  late final _gsl_cdf_geometric_P =
      _gsl_cdf_geometric_PPtr.asFunction<double Function(int, double)>();

  double gsl_cdf_geometric_Q(
    int k,
    double p,
  ) {
    return _gsl_cdf_geometric_Q(
      k,
      p,
    );
  }

  late final _gsl_cdf_geometric_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Double)>>(
          'gsl_cdf_geometric_Q');
  late final _gsl_cdf_geometric_Q =
      _gsl_cdf_geometric_QPtr.asFunction<double Function(int, double)>();

  double gsl_cdf_negative_binomial_P(
    int k,
    double p,
    double n,
  ) {
    return _gsl_cdf_negative_binomial_P(
      k,
      p,
      n,
    );
  }

  late final _gsl_cdf_negative_binomial_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Uint32, ffi.Double,
              ffi.Double)>>('gsl_cdf_negative_binomial_P');
  late final _gsl_cdf_negative_binomial_P = _gsl_cdf_negative_binomial_PPtr
      .asFunction<double Function(int, double, double)>();

  double gsl_cdf_negative_binomial_Q(
    int k,
    double p,
    double n,
  ) {
    return _gsl_cdf_negative_binomial_Q(
      k,
      p,
      n,
    );
  }

  late final _gsl_cdf_negative_binomial_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Uint32, ffi.Double,
              ffi.Double)>>('gsl_cdf_negative_binomial_Q');
  late final _gsl_cdf_negative_binomial_Q = _gsl_cdf_negative_binomial_QPtr
      .asFunction<double Function(int, double, double)>();

  double gsl_cdf_pascal_P(
    int k,
    double p,
    int n,
  ) {
    return _gsl_cdf_pascal_P(
      k,
      p,
      n,
    );
  }

  late final _gsl_cdf_pascal_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Uint32, ffi.Double, ffi.Uint32)>>('gsl_cdf_pascal_P');
  late final _gsl_cdf_pascal_P =
      _gsl_cdf_pascal_PPtr.asFunction<double Function(int, double, int)>();

  double gsl_cdf_pascal_Q(
    int k,
    double p,
    int n,
  ) {
    return _gsl_cdf_pascal_Q(
      k,
      p,
      n,
    );
  }

  late final _gsl_cdf_pascal_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Uint32, ffi.Double, ffi.Uint32)>>('gsl_cdf_pascal_Q');
  late final _gsl_cdf_pascal_Q =
      _gsl_cdf_pascal_QPtr.asFunction<double Function(int, double, int)>();

  double gsl_cdf_hypergeometric_P(
    int k,
    int n1,
    int n2,
    int t,
  ) {
    return _gsl_cdf_hypergeometric_P(
      k,
      n1,
      n2,
      t,
    );
  }

  late final _gsl_cdf_hypergeometric_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Uint32, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('gsl_cdf_hypergeometric_P');
  late final _gsl_cdf_hypergeometric_P = _gsl_cdf_hypergeometric_PPtr
      .asFunction<double Function(int, int, int, int)>();

  double gsl_cdf_hypergeometric_Q(
    int k,
    int n1,
    int n2,
    int t,
  ) {
    return _gsl_cdf_hypergeometric_Q(
      k,
      n1,
      n2,
      t,
    );
  }

  late final _gsl_cdf_hypergeometric_QPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Uint32, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('gsl_cdf_hypergeometric_Q');
  late final _gsl_cdf_hypergeometric_Q = _gsl_cdf_hypergeometric_QPtr
      .asFunction<double Function(int, int, int, int)>();

  int gsl_fft_real_radix2_transform(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_fft_real_radix2_transform(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_real_radix2_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_fft_real_radix2_transform');
  late final _gsl_fft_real_radix2_transform = _gsl_fft_real_radix2_transformPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int, int)>();

  ffi.Pointer<gsl_fft_real_wavetable> gsl_fft_real_wavetable_alloc(
    int n,
  ) {
    return _gsl_fft_real_wavetable_alloc(
      n,
    );
  }

  late final _gsl_fft_real_wavetable_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_real_wavetable> Function(
              size_t)>>('gsl_fft_real_wavetable_alloc');
  late final _gsl_fft_real_wavetable_alloc = _gsl_fft_real_wavetable_allocPtr
      .asFunction<ffi.Pointer<gsl_fft_real_wavetable> Function(int)>();

  void gsl_fft_real_wavetable_free(
    ffi.Pointer<gsl_fft_real_wavetable> wavetable,
  ) {
    return _gsl_fft_real_wavetable_free(
      wavetable,
    );
  }

  late final _gsl_fft_real_wavetable_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_fft_real_wavetable>)>>(
      'gsl_fft_real_wavetable_free');
  late final _gsl_fft_real_wavetable_free = _gsl_fft_real_wavetable_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_fft_real_wavetable>)>();

  ffi.Pointer<gsl_fft_real_workspace> gsl_fft_real_workspace_alloc(
    int n,
  ) {
    return _gsl_fft_real_workspace_alloc(
      n,
    );
  }

  late final _gsl_fft_real_workspace_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_real_workspace> Function(
              size_t)>>('gsl_fft_real_workspace_alloc');
  late final _gsl_fft_real_workspace_alloc = _gsl_fft_real_workspace_allocPtr
      .asFunction<ffi.Pointer<gsl_fft_real_workspace> Function(int)>();

  void gsl_fft_real_workspace_free(
    ffi.Pointer<gsl_fft_real_workspace> workspace,
  ) {
    return _gsl_fft_real_workspace_free(
      workspace,
    );
  }

  late final _gsl_fft_real_workspace_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_fft_real_workspace>)>>(
      'gsl_fft_real_workspace_free');
  late final _gsl_fft_real_workspace_free = _gsl_fft_real_workspace_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_fft_real_workspace>)>();

  int gsl_fft_real_transform(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_real_wavetable> wavetable,
    ffi.Pointer<gsl_fft_real_workspace> work,
  ) {
    return _gsl_fft_real_transform(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_real_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<gsl_fft_real_wavetable>,
              ffi.Pointer<gsl_fft_real_workspace>)>>('gsl_fft_real_transform');
  late final _gsl_fft_real_transform = _gsl_fft_real_transformPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>,
          int,
          int,
          ffi.Pointer<gsl_fft_real_wavetable>,
          ffi.Pointer<gsl_fft_real_workspace>)>();

  int gsl_fft_real_unpack(
    ffi.Pointer<ffi.Double> real_coefficient,
    ffi.Pointer<ffi.Double> complex_coefficient,
    int stride,
    int n,
  ) {
    return _gsl_fft_real_unpack(
      real_coefficient,
      complex_coefficient,
      stride,
      n,
    );
  }

  late final _gsl_fft_real_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              size_t, size_t)>>('gsl_fft_real_unpack');
  late final _gsl_fft_real_unpack = _gsl_fft_real_unpackPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_fft_halfcomplex_radix2_backward(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_radix2_backward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_radix2_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_fft_halfcomplex_radix2_backward');
  late final _gsl_fft_halfcomplex_radix2_backward =
      _gsl_fft_halfcomplex_radix2_backwardPtr
          .asFunction<int Function(ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_fft_halfcomplex_radix2_inverse(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_radix2_inverse(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_radix2_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_fft_halfcomplex_radix2_inverse');
  late final _gsl_fft_halfcomplex_radix2_inverse =
      _gsl_fft_halfcomplex_radix2_inversePtr
          .asFunction<int Function(ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_fft_halfcomplex_radix2_transform(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_radix2_transform(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_radix2_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_fft_halfcomplex_radix2_transform');
  late final _gsl_fft_halfcomplex_radix2_transform =
      _gsl_fft_halfcomplex_radix2_transformPtr
          .asFunction<int Function(ffi.Pointer<ffi.Double>, int, int)>();

  ffi.Pointer<gsl_fft_halfcomplex_wavetable>
      gsl_fft_halfcomplex_wavetable_alloc(
    int n,
  ) {
    return _gsl_fft_halfcomplex_wavetable_alloc(
      n,
    );
  }

  late final _gsl_fft_halfcomplex_wavetable_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_halfcomplex_wavetable> Function(
              size_t)>>('gsl_fft_halfcomplex_wavetable_alloc');
  late final _gsl_fft_halfcomplex_wavetable_alloc =
      _gsl_fft_halfcomplex_wavetable_allocPtr.asFunction<
          ffi.Pointer<gsl_fft_halfcomplex_wavetable> Function(int)>();

  void gsl_fft_halfcomplex_wavetable_free(
    ffi.Pointer<gsl_fft_halfcomplex_wavetable> wavetable,
  ) {
    return _gsl_fft_halfcomplex_wavetable_free(
      wavetable,
    );
  }

  late final _gsl_fft_halfcomplex_wavetable_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_fft_halfcomplex_wavetable>)>>(
      'gsl_fft_halfcomplex_wavetable_free');
  late final _gsl_fft_halfcomplex_wavetable_free =
      _gsl_fft_halfcomplex_wavetable_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_fft_halfcomplex_wavetable>)>();

  int gsl_fft_halfcomplex_backward(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_halfcomplex_wavetable> wavetable,
    ffi.Pointer<gsl_fft_real_workspace> work,
  ) {
    return _gsl_fft_halfcomplex_backward(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_halfcomplex_backwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_halfcomplex_wavetable>,
                  ffi.Pointer<gsl_fft_real_workspace>)>>(
      'gsl_fft_halfcomplex_backward');
  late final _gsl_fft_halfcomplex_backward =
      _gsl_fft_halfcomplex_backwardPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>,
              int,
              int,
              ffi.Pointer<gsl_fft_halfcomplex_wavetable>,
              ffi.Pointer<gsl_fft_real_workspace>)>();

  int gsl_fft_halfcomplex_inverse(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_halfcomplex_wavetable> wavetable,
    ffi.Pointer<gsl_fft_real_workspace> work,
  ) {
    return _gsl_fft_halfcomplex_inverse(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_halfcomplex_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_halfcomplex_wavetable>,
                  ffi.Pointer<gsl_fft_real_workspace>)>>(
      'gsl_fft_halfcomplex_inverse');
  late final _gsl_fft_halfcomplex_inverse =
      _gsl_fft_halfcomplex_inversePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>,
              int,
              int,
              ffi.Pointer<gsl_fft_halfcomplex_wavetable>,
              ffi.Pointer<gsl_fft_real_workspace>)>();

  int gsl_fft_halfcomplex_transform(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_halfcomplex_wavetable> wavetable,
    ffi.Pointer<gsl_fft_real_workspace> work,
  ) {
    return _gsl_fft_halfcomplex_transform(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_halfcomplex_transformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_halfcomplex_wavetable>,
                  ffi.Pointer<gsl_fft_real_workspace>)>>(
      'gsl_fft_halfcomplex_transform');
  late final _gsl_fft_halfcomplex_transform =
      _gsl_fft_halfcomplex_transformPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>,
              int,
              int,
              ffi.Pointer<gsl_fft_halfcomplex_wavetable>,
              ffi.Pointer<gsl_fft_real_workspace>)>();

  int gsl_fft_halfcomplex_unpack(
    ffi.Pointer<ffi.Double> halfcomplex_coefficient,
    ffi.Pointer<ffi.Double> complex_coefficient,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_unpack(
      halfcomplex_coefficient,
      complex_coefficient,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              size_t, size_t)>>('gsl_fft_halfcomplex_unpack');
  late final _gsl_fft_halfcomplex_unpack =
      _gsl_fft_halfcomplex_unpackPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_fft_halfcomplex_radix2_unpack(
    ffi.Pointer<ffi.Double> halfcomplex_coefficient,
    ffi.Pointer<ffi.Double> complex_coefficient,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_radix2_unpack(
      halfcomplex_coefficient,
      complex_coefficient,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_radix2_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              size_t, size_t)>>('gsl_fft_halfcomplex_radix2_unpack');
  late final _gsl_fft_halfcomplex_radix2_unpack =
      _gsl_fft_halfcomplex_radix2_unpackPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, int)>();

  void gsl_sort_long(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_long(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int64>, size_t, size_t)>>('gsl_sort_long');
  late final _gsl_sort_long = _gsl_sort_longPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int64>, int, int)>();

  void gsl_sort2_long(
    ffi.Pointer<ffi.Int64> data1,
    int stride1,
    ffi.Pointer<ffi.Int64> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2_long(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int64>, size_t,
              ffi.Pointer<ffi.Int64>, size_t, size_t)>>('gsl_sort2_long');
  late final _gsl_sort2_long = _gsl_sort2_longPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Int64>, int, int)>();

  void gsl_sort_long_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_long_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_long_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_sort_long_index');
  late final _gsl_sort_long_index = _gsl_sort_long_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_sort_long_smallest(
    ffi.Pointer<ffi.Int64> dest,
    int k,
    ffi.Pointer<ffi.Int64> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_long_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_long_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int64>,
              size_t,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t)>>('gsl_sort_long_smallest');
  late final _gsl_sort_long_smallest = _gsl_sort_long_smallestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_sort_long_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Int64> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_long_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_long_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t)>>('gsl_sort_long_smallest_index');
  late final _gsl_sort_long_smallest_index =
      _gsl_sort_long_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_sort_long_largest(
    ffi.Pointer<ffi.Int64> dest,
    int k,
    ffi.Pointer<ffi.Int64> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_long_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_long_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int64>,
              size_t,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t)>>('gsl_sort_long_largest');
  late final _gsl_sort_long_largest = _gsl_sort_long_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_sort_long_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Int64> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_long_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_long_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t)>>('gsl_sort_long_largest_index');
  late final _gsl_sort_long_largest_index =
      _gsl_sort_long_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Int64>, int, int)>();

  late final ffi.Pointer<ffi.Pointer<gsl_qrng_type>> _gsl_qrng_niederreiter_2 =
      _lookup<ffi.Pointer<gsl_qrng_type>>('gsl_qrng_niederreiter_2');

  ffi.Pointer<gsl_qrng_type> get gsl_qrng_niederreiter_2 =>
      _gsl_qrng_niederreiter_2.value;

  set gsl_qrng_niederreiter_2(ffi.Pointer<gsl_qrng_type> value) =>
      _gsl_qrng_niederreiter_2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_qrng_type>> _gsl_qrng_sobol =
      _lookup<ffi.Pointer<gsl_qrng_type>>('gsl_qrng_sobol');

  ffi.Pointer<gsl_qrng_type> get gsl_qrng_sobol => _gsl_qrng_sobol.value;

  set gsl_qrng_sobol(ffi.Pointer<gsl_qrng_type> value) =>
      _gsl_qrng_sobol.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_qrng_type>> _gsl_qrng_halton =
      _lookup<ffi.Pointer<gsl_qrng_type>>('gsl_qrng_halton');

  ffi.Pointer<gsl_qrng_type> get gsl_qrng_halton => _gsl_qrng_halton.value;

  set gsl_qrng_halton(ffi.Pointer<gsl_qrng_type> value) =>
      _gsl_qrng_halton.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_qrng_type>> _gsl_qrng_reversehalton =
      _lookup<ffi.Pointer<gsl_qrng_type>>('gsl_qrng_reversehalton');

  ffi.Pointer<gsl_qrng_type> get gsl_qrng_reversehalton =>
      _gsl_qrng_reversehalton.value;

  set gsl_qrng_reversehalton(ffi.Pointer<gsl_qrng_type> value) =>
      _gsl_qrng_reversehalton.value = value;

  ffi.Pointer<gsl_qrng> gsl_qrng_alloc(
    ffi.Pointer<gsl_qrng_type> T,
    int dimension,
  ) {
    return _gsl_qrng_alloc(
      T,
      dimension,
    );
  }

  late final _gsl_qrng_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_qrng> Function(
              ffi.Pointer<gsl_qrng_type>, ffi.Uint32)>>('gsl_qrng_alloc');
  late final _gsl_qrng_alloc = _gsl_qrng_allocPtr.asFunction<
      ffi.Pointer<gsl_qrng> Function(ffi.Pointer<gsl_qrng_type>, int)>();

  int gsl_qrng_memcpy(
    ffi.Pointer<gsl_qrng> dest,
    ffi.Pointer<gsl_qrng> src,
  ) {
    return _gsl_qrng_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_qrng_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_qrng>,
              ffi.Pointer<gsl_qrng>)>>('gsl_qrng_memcpy');
  late final _gsl_qrng_memcpy = _gsl_qrng_memcpyPtr
      .asFunction<int Function(ffi.Pointer<gsl_qrng>, ffi.Pointer<gsl_qrng>)>();

  ffi.Pointer<gsl_qrng> gsl_qrng_clone(
    ffi.Pointer<gsl_qrng> q,
  ) {
    return _gsl_qrng_clone(
      q,
    );
  }

  late final _gsl_qrng_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_qrng> Function(
              ffi.Pointer<gsl_qrng>)>>('gsl_qrng_clone');
  late final _gsl_qrng_clone = _gsl_qrng_clonePtr
      .asFunction<ffi.Pointer<gsl_qrng> Function(ffi.Pointer<gsl_qrng>)>();

  void gsl_qrng_free(
    ffi.Pointer<gsl_qrng> q,
  ) {
    return _gsl_qrng_free(
      q,
    );
  }

  late final _gsl_qrng_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_qrng>)>>(
          'gsl_qrng_free');
  late final _gsl_qrng_free =
      _gsl_qrng_freePtr.asFunction<void Function(ffi.Pointer<gsl_qrng>)>();

  void gsl_qrng_init(
    ffi.Pointer<gsl_qrng> q,
  ) {
    return _gsl_qrng_init(
      q,
    );
  }

  late final _gsl_qrng_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_qrng>)>>(
          'gsl_qrng_init');
  late final _gsl_qrng_init =
      _gsl_qrng_initPtr.asFunction<void Function(ffi.Pointer<gsl_qrng>)>();

  ffi.Pointer<ffi.Int8> gsl_qrng_name(
    ffi.Pointer<gsl_qrng> q,
  ) {
    return _gsl_qrng_name(
      q,
    );
  }

  late final _gsl_qrng_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_qrng>)>>('gsl_qrng_name');
  late final _gsl_qrng_name = _gsl_qrng_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_qrng>)>();

  int gsl_qrng_size(
    ffi.Pointer<gsl_qrng> q,
  ) {
    return _gsl_qrng_size(
      q,
    );
  }

  late final _gsl_qrng_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_qrng>)>>(
          'gsl_qrng_size');
  late final _gsl_qrng_size =
      _gsl_qrng_sizePtr.asFunction<int Function(ffi.Pointer<gsl_qrng>)>();

  ffi.Pointer<ffi.Void> gsl_qrng_state(
    ffi.Pointer<gsl_qrng> q,
  ) {
    return _gsl_qrng_state(
      q,
    );
  }

  late final _gsl_qrng_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gsl_qrng>)>>('gsl_qrng_state');
  late final _gsl_qrng_state = _gsl_qrng_statePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<gsl_qrng>)>();

  int gsl_qrng_get(
    ffi.Pointer<gsl_qrng> q,
    ffi.Pointer<ffi.Double> x,
  ) {
    return _gsl_qrng_get(
      q,
      x,
    );
  }

  late final _gsl_qrng_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_qrng>, ffi.Pointer<ffi.Double>)>>('gsl_qrng_get');
  late final _gsl_qrng_get = _gsl_qrng_getPtr.asFunction<
      int Function(ffi.Pointer<gsl_qrng>, ffi.Pointer<ffi.Double>)>();

  int gsl_permute_uchar(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_uchar(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_ucharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint8>,
              size_t, size_t)>>('gsl_permute_uchar');
  late final _gsl_permute_uchar = _gsl_permute_ucharPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_permute_uchar_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_uchar_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_uchar_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint8>,
              size_t, size_t)>>('gsl_permute_uchar_inverse');
  late final _gsl_permute_uchar_inverse =
      _gsl_permute_uchar_inversePtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_permute_char(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_char(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_permute_char');
  late final _gsl_permute_char = _gsl_permute_charPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_permute_char_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_char_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_char_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_permute_char_inverse');
  late final _gsl_permute_char_inverse =
      _gsl_permute_char_inversePtr.asFunction<
          int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_ushort_mean(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_mean');
  late final _gsl_stats_ushort_mean = _gsl_stats_ushort_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_variance(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_variance');
  late final _gsl_stats_ushort_variance = _gsl_stats_ushort_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_sd(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint16>, size_t, size_t)>>('gsl_stats_ushort_sd');
  late final _gsl_stats_ushort_sd = _gsl_stats_ushort_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_variance_with_fixed_mean(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ushort_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ushort_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ushort_variance_with_fixed_mean');
  late final _gsl_stats_ushort_variance_with_fixed_mean =
      _gsl_stats_ushort_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, int, double)>();

  double gsl_stats_ushort_sd_with_fixed_mean(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ushort_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ushort_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ushort_sd_with_fixed_mean');
  late final _gsl_stats_ushort_sd_with_fixed_mean =
      _gsl_stats_ushort_sd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, int, double)>();

  double gsl_stats_ushort_tss(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_tss');
  late final _gsl_stats_ushort_tss = _gsl_stats_ushort_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_tss_m(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ushort_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ushort_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ushort_tss_m');
  late final _gsl_stats_ushort_tss_m = _gsl_stats_ushort_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int, double)>();

  double gsl_stats_ushort_absdev(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_absdev');
  late final _gsl_stats_ushort_absdev = _gsl_stats_ushort_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_skew(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_skew');
  late final _gsl_stats_ushort_skew = _gsl_stats_ushort_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_kurtosis(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_kurtosis');
  late final _gsl_stats_ushort_kurtosis = _gsl_stats_ushort_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_lag1_autocorrelation(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_lag1_autocorrelation');
  late final _gsl_stats_ushort_lag1_autocorrelation =
      _gsl_stats_ushort_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_covariance(
    ffi.Pointer<ffi.Uint16> data1,
    int stride1,
    ffi.Pointer<ffi.Uint16> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_ushort_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_ushort_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_stats_ushort_covariance');
  late final _gsl_stats_ushort_covariance =
      _gsl_stats_ushort_covariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  double gsl_stats_ushort_correlation(
    ffi.Pointer<ffi.Uint16> data1,
    int stride1,
    ffi.Pointer<ffi.Uint16> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_ushort_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_ushort_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_stats_ushort_correlation');
  late final _gsl_stats_ushort_correlation =
      _gsl_stats_ushort_correlationPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  double gsl_stats_ushort_spearman(
    ffi.Pointer<ffi.Uint16> data1,
    int stride1,
    ffi.Pointer<ffi.Uint16> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_ushort_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_ushort_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_ushort_spearman');
  late final _gsl_stats_ushort_spearman =
      _gsl_stats_ushort_spearmanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_ushort_variance_m(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ushort_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ushort_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ushort_variance_m');
  late final _gsl_stats_ushort_variance_m = _gsl_stats_ushort_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int, double)>();

  double gsl_stats_ushort_sd_m(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ushort_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ushort_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ushort_sd_m');
  late final _gsl_stats_ushort_sd_m = _gsl_stats_ushort_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int, double)>();

  double gsl_stats_ushort_absdev_m(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ushort_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ushort_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ushort_absdev_m');
  late final _gsl_stats_ushort_absdev_m = _gsl_stats_ushort_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int, double)>();

  double gsl_stats_ushort_skew_m_sd(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_ushort_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_ushort_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_ushort_skew_m_sd');
  late final _gsl_stats_ushort_skew_m_sd =
      _gsl_stats_ushort_skew_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, int, double, double)>();

  double gsl_stats_ushort_kurtosis_m_sd(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_ushort_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_ushort_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_ushort_kurtosis_m_sd');
  late final _gsl_stats_ushort_kurtosis_m_sd =
      _gsl_stats_ushort_kurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, int, double, double)>();

  double gsl_stats_ushort_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ushort_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ushort_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ushort_lag1_autocorrelation_m');
  late final _gsl_stats_ushort_lag1_autocorrelation_m =
      _gsl_stats_ushort_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, int, double)>();

  double gsl_stats_ushort_covariance_m(
    ffi.Pointer<ffi.Uint16> data1,
    int stride1,
    ffi.Pointer<ffi.Uint16> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_ushort_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_ushort_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_ushort_covariance_m');
  late final _gsl_stats_ushort_covariance_m =
      _gsl_stats_ushort_covariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int, double, double)>();

  double gsl_stats_ushort_pvariance(
    ffi.Pointer<ffi.Uint16> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Uint16> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_ushort_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_ushort_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_stats_ushort_pvariance');
  late final _gsl_stats_ushort_pvariance =
      _gsl_stats_ushort_pvariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, int,
              ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_ttest(
    ffi.Pointer<ffi.Uint16> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Uint16> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_ushort_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_ushort_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_stats_ushort_ttest');
  late final _gsl_stats_ushort_ttest = _gsl_stats_ushort_ttestPtr.asFunction<
      double Function(ffi.Pointer<ffi.Uint16>, int, int,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_stats_ushort_max(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_max');
  late final _gsl_stats_ushort_max = _gsl_stats_ushort_maxPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_stats_ushort_min(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_min');
  late final _gsl_stats_ushort_min = _gsl_stats_ushort_minPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  void gsl_stats_ushort_minmax(
    ffi.Pointer<ffi.Uint16> min,
    ffi.Pointer<ffi.Uint16> max,
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_stats_ushort_minmax');
  late final _gsl_stats_ushort_minmax = _gsl_stats_ushort_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Uint16>,
          ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_stats_ushort_max_index(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_max_index');
  late final _gsl_stats_ushort_max_index = _gsl_stats_ushort_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_stats_ushort_min_index(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_min_index');
  late final _gsl_stats_ushort_min_index = _gsl_stats_ushort_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  void gsl_stats_ushort_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_stats_ushort_minmax_index');
  late final _gsl_stats_ushort_minmax_index =
      _gsl_stats_ushort_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_stats_ushort_select(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_ushort_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_ushort_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              size_t)>>('gsl_stats_ushort_select');
  late final _gsl_stats_ushort_select = _gsl_stats_ushort_selectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint16>, int, int, int)>();

  double gsl_stats_ushort_median_from_sorted_data(
    ffi.Pointer<ffi.Uint16> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_median_from_sorted_data');
  late final _gsl_stats_ushort_median_from_sorted_data =
      _gsl_stats_ushort_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_median(
    ffi.Pointer<ffi.Uint16> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_median');
  late final _gsl_stats_ushort_median = _gsl_stats_ushort_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_quantile_from_sorted_data(
    ffi.Pointer<ffi.Uint16> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_ushort_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_ushort_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ushort_quantile_from_sorted_data');
  late final _gsl_stats_ushort_quantile_from_sorted_data =
      _gsl_stats_ushort_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, int, double)>();

  double gsl_stats_ushort_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Uint16> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_trmean_from_sorted_data');
  late final _gsl_stats_ushort_trmean_from_sorted_data =
      _gsl_stats_ushort_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Uint16> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ushort_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ushort_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t,
              size_t)>>('gsl_stats_ushort_gastwirth_from_sorted_data');
  late final _gsl_stats_ushort_gastwirth_from_sorted_data =
      _gsl_stats_ushort_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  double gsl_stats_ushort_mad0(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_ushort_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_ushort_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_ushort_mad0');
  late final _gsl_stats_ushort_mad0 = _gsl_stats_ushort_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint16>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_ushort_mad(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_ushort_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_ushort_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_ushort_mad');
  late final _gsl_stats_ushort_mad = _gsl_stats_ushort_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint16>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_stats_ushort_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Uint16> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint16> work,
  ) {
    return _gsl_stats_ushort_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_ushort_Sn0_from_sorted_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint16 Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
                  ffi.Pointer<ffi.Uint16>)>>(
      'gsl_stats_ushort_Sn0_from_sorted_data');
  late final _gsl_stats_ushort_Sn0_from_sorted_data =
      _gsl_stats_ushort_Sn0_from_sorted_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint16>, int, int, ffi.Pointer<ffi.Uint16>)>();

  double gsl_stats_ushort_Sn_from_sorted_data(
    ffi.Pointer<ffi.Uint16> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint16> work,
  ) {
    return _gsl_stats_ushort_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_ushort_Sn_from_sorted_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
                  ffi.Pointer<ffi.Uint16>)>>(
      'gsl_stats_ushort_Sn_from_sorted_data');
  late final _gsl_stats_ushort_Sn_from_sorted_data =
      _gsl_stats_ushort_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Uint16>, int, int, ffi.Pointer<ffi.Uint16>)>();

  int gsl_stats_ushort_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Uint16> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint16> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_ushort_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_ushort_Qn0_from_sorted_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint16 Function(ffi.Pointer<ffi.Uint16>, size_t, size_t,
                  ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Int32>)>>(
      'gsl_stats_ushort_Qn0_from_sorted_data');
  late final _gsl_stats_ushort_Qn0_from_sorted_data =
      _gsl_stats_ushort_Qn0_from_sorted_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint16>, int, int,
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_ushort_Qn_from_sorted_data(
    ffi.Pointer<ffi.Uint16> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint16> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_ushort_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_ushort_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_ushort_Qn_from_sorted_data');
  late final _gsl_stats_ushort_Qn_from_sorted_data =
      _gsl_stats_ushort_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint16>, int, int,
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.Int32>)>();

  int gsl_permute_vector(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_permute_vector(
      p,
      v,
    );
  }

  late final _gsl_permute_vectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_permute_vector');
  late final _gsl_permute_vector = _gsl_permute_vectorPtr.asFunction<
      int Function(ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector>)>();

  int gsl_permute_vector_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector> v,
  ) {
    return _gsl_permute_vector_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector>)>>('gsl_permute_vector_inverse');
  late final _gsl_permute_vector_inverse =
      _gsl_permute_vector_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector>)>();

  ffi.Pointer<gsl_bspline_workspace> gsl_bspline_alloc(
    int k,
    int nbreak,
  ) {
    return _gsl_bspline_alloc(
      k,
      nbreak,
    );
  }

  late final _gsl_bspline_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_bspline_workspace> Function(
              size_t, size_t)>>('gsl_bspline_alloc');
  late final _gsl_bspline_alloc = _gsl_bspline_allocPtr
      .asFunction<ffi.Pointer<gsl_bspline_workspace> Function(int, int)>();

  void gsl_bspline_free(
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_free(
      w,
    );
  }

  late final _gsl_bspline_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_bspline_workspace>)>>('gsl_bspline_free');
  late final _gsl_bspline_free = _gsl_bspline_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_bspline_workspace>)>();

  int gsl_bspline_ncoeffs(
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_ncoeffs(
      w,
    );
  }

  late final _gsl_bspline_ncoeffsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_bspline_workspace>)>>('gsl_bspline_ncoeffs');
  late final _gsl_bspline_ncoeffs = _gsl_bspline_ncoeffsPtr
      .asFunction<int Function(ffi.Pointer<gsl_bspline_workspace>)>();

  int gsl_bspline_order(
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_order(
      w,
    );
  }

  late final _gsl_bspline_orderPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_bspline_workspace>)>>('gsl_bspline_order');
  late final _gsl_bspline_order = _gsl_bspline_orderPtr
      .asFunction<int Function(ffi.Pointer<gsl_bspline_workspace>)>();

  int gsl_bspline_nbreak(
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_nbreak(
      w,
    );
  }

  late final _gsl_bspline_nbreakPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_bspline_workspace>)>>('gsl_bspline_nbreak');
  late final _gsl_bspline_nbreak = _gsl_bspline_nbreakPtr
      .asFunction<int Function(ffi.Pointer<gsl_bspline_workspace>)>();

  double gsl_bspline_breakpoint(
    int i,
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_breakpoint(
      i,
      w,
    );
  }

  late final _gsl_bspline_breakpointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(size_t,
              ffi.Pointer<gsl_bspline_workspace>)>>('gsl_bspline_breakpoint');
  late final _gsl_bspline_breakpoint = _gsl_bspline_breakpointPtr
      .asFunction<double Function(int, ffi.Pointer<gsl_bspline_workspace>)>();

  double gsl_bspline_greville_abscissa(
    int i,
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_greville_abscissa(
      i,
      w,
    );
  }

  late final _gsl_bspline_greville_abscissaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(size_t, ffi.Pointer<gsl_bspline_workspace>)>>(
      'gsl_bspline_greville_abscissa');
  late final _gsl_bspline_greville_abscissa = _gsl_bspline_greville_abscissaPtr
      .asFunction<double Function(int, ffi.Pointer<gsl_bspline_workspace>)>();

  int gsl_bspline_knots(
    ffi.Pointer<gsl_vector> breakpts,
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_knots(
      breakpts,
      w,
    );
  }

  late final _gsl_bspline_knotsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_bspline_workspace>)>>('gsl_bspline_knots');
  late final _gsl_bspline_knots = _gsl_bspline_knotsPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_bspline_workspace>)>();

  int gsl_bspline_knots_uniform(
    double a,
    double b,
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_knots_uniform(
      a,
      b,
      w,
    );
  }

  late final _gsl_bspline_knots_uniformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double, ffi.Double, ffi.Pointer<gsl_bspline_workspace>)>>(
      'gsl_bspline_knots_uniform');
  late final _gsl_bspline_knots_uniform =
      _gsl_bspline_knots_uniformPtr.asFunction<
          int Function(double, double, ffi.Pointer<gsl_bspline_workspace>)>();

  int gsl_bspline_knots_greville(
    ffi.Pointer<gsl_vector> abscissae,
    ffi.Pointer<gsl_bspline_workspace> w,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_bspline_knots_greville(
      abscissae,
      w,
      abserr,
    );
  }

  late final _gsl_bspline_knots_grevillePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_bspline_workspace>,
              ffi.Pointer<ffi.Double>)>>('gsl_bspline_knots_greville');
  late final _gsl_bspline_knots_greville =
      _gsl_bspline_knots_grevillePtr.asFunction<
          int Function(ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_bspline_workspace>, ffi.Pointer<ffi.Double>)>();

  int gsl_bspline_eval(
    double x,
    ffi.Pointer<gsl_vector> B,
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_eval(
      x,
      B,
      w,
    );
  }

  late final _gsl_bspline_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_bspline_workspace>)>>('gsl_bspline_eval');
  late final _gsl_bspline_eval = _gsl_bspline_evalPtr.asFunction<
      int Function(double, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_bspline_workspace>)>();

  int gsl_bspline_eval_nonzero(
    double x,
    ffi.Pointer<gsl_vector> Bk,
    ffi.Pointer<size_t> istart,
    ffi.Pointer<size_t> iend,
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_eval_nonzero(
      x,
      Bk,
      istart,
      iend,
      w,
    );
  }

  late final _gsl_bspline_eval_nonzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<gsl_bspline_workspace>)>>('gsl_bspline_eval_nonzero');
  late final _gsl_bspline_eval_nonzero =
      _gsl_bspline_eval_nonzeroPtr.asFunction<
          int Function(double, ffi.Pointer<gsl_vector>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>, ffi.Pointer<gsl_bspline_workspace>)>();

  int gsl_bspline_deriv_eval(
    double x,
    int nderiv,
    ffi.Pointer<gsl_matrix> dB,
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_deriv_eval(
      x,
      nderiv,
      dB,
      w,
    );
  }

  late final _gsl_bspline_deriv_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, size_t, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_bspline_workspace>)>>('gsl_bspline_deriv_eval');
  late final _gsl_bspline_deriv_eval = _gsl_bspline_deriv_evalPtr.asFunction<
      int Function(double, int, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_bspline_workspace>)>();

  int gsl_bspline_deriv_eval_nonzero(
    double x,
    int nderiv,
    ffi.Pointer<gsl_matrix> dB,
    ffi.Pointer<size_t> istart,
    ffi.Pointer<size_t> iend,
    ffi.Pointer<gsl_bspline_workspace> w,
  ) {
    return _gsl_bspline_deriv_eval_nonzero(
      x,
      nderiv,
      dB,
      istart,
      iend,
      w,
    );
  }

  late final _gsl_bspline_deriv_eval_nonzeroPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double,
                  size_t,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<size_t>,
                  ffi.Pointer<size_t>,
                  ffi.Pointer<gsl_bspline_workspace>)>>(
      'gsl_bspline_deriv_eval_nonzero');
  late final _gsl_bspline_deriv_eval_nonzero =
      _gsl_bspline_deriv_eval_nonzeroPtr.asFunction<
          int Function(
              double,
              int,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<gsl_bspline_workspace>)>();

  double gsl_stats_mean(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_mean');
  late final _gsl_stats_mean = _gsl_stats_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_variance(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_variance');
  late final _gsl_stats_variance = _gsl_stats_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_sd(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_sd');
  late final _gsl_stats_sd = _gsl_stats_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_variance_with_fixed_mean(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double)>>('gsl_stats_variance_with_fixed_mean');
  late final _gsl_stats_variance_with_fixed_mean =
      _gsl_stats_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Double>, int, int, double)>();

  double gsl_stats_sd_with_fixed_mean(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double)>>('gsl_stats_sd_with_fixed_mean');
  late final _gsl_stats_sd_with_fixed_mean = _gsl_stats_sd_with_fixed_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int, double)>();

  double gsl_stats_tss(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_tss');
  late final _gsl_stats_tss = _gsl_stats_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_tss_m(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double)>>('gsl_stats_tss_m');
  late final _gsl_stats_tss_m = _gsl_stats_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int, double)>();

  double gsl_stats_absdev(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_absdev');
  late final _gsl_stats_absdev = _gsl_stats_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_skew(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_skew');
  late final _gsl_stats_skew = _gsl_stats_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_kurtosis(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_kurtosis');
  late final _gsl_stats_kurtosis = _gsl_stats_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_lag1_autocorrelation(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_stats_lag1_autocorrelation');
  late final _gsl_stats_lag1_autocorrelation =
      _gsl_stats_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_covariance(
    ffi.Pointer<ffi.Double> data1,
    int stride1,
    ffi.Pointer<ffi.Double> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t)>>('gsl_stats_covariance');
  late final _gsl_stats_covariance = _gsl_stats_covariancePtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_correlation(
    ffi.Pointer<ffi.Double> data1,
    int stride1,
    ffi.Pointer<ffi.Double> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t)>>('gsl_stats_correlation');
  late final _gsl_stats_correlation = _gsl_stats_correlationPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_spearman(
    ffi.Pointer<ffi.Double> data1,
    int stride1,
    ffi.Pointer<ffi.Double> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_spearman');
  late final _gsl_stats_spearman = _gsl_stats_spearmanPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
          int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_variance_m(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double)>>('gsl_stats_variance_m');
  late final _gsl_stats_variance_m = _gsl_stats_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int, double)>();

  double gsl_stats_sd_m(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double)>>('gsl_stats_sd_m');
  late final _gsl_stats_sd_m = _gsl_stats_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int, double)>();

  double gsl_stats_absdev_m(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double)>>('gsl_stats_absdev_m');
  late final _gsl_stats_absdev_m = _gsl_stats_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int, double)>();

  double gsl_stats_skew_m_sd(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_skew_m_sd');
  late final _gsl_stats_skew_m_sd = _gsl_stats_skew_m_sdPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, int, double, double)>();

  double gsl_stats_kurtosis_m_sd(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_kurtosis_m_sd');
  late final _gsl_stats_kurtosis_m_sd = _gsl_stats_kurtosis_m_sdPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, int, double, double)>();

  double gsl_stats_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double)>>('gsl_stats_lag1_autocorrelation_m');
  late final _gsl_stats_lag1_autocorrelation_m =
      _gsl_stats_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Double>, int, int, double)>();

  double gsl_stats_covariance_m(
    ffi.Pointer<ffi.Double> data1,
    int stride1,
    ffi.Pointer<ffi.Double> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_covariance_m');
  late final _gsl_stats_covariance_m = _gsl_stats_covariance_mPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
          int, int, double, double)>();

  double gsl_stats_wmean(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_wmean(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_wmeanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_wmean');
  late final _gsl_stats_wmean = _gsl_stats_wmeanPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_wvariance(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_wvariance(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_wvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_wvariance');
  late final _gsl_stats_wvariance = _gsl_stats_wvariancePtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_wsd(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_wsd(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_wsdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_wsd');
  late final _gsl_stats_wsd = _gsl_stats_wsdPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_wvariance_with_fixed_mean(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_wvariance_with_fixed_mean(
      w,
      wstride,
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_wvariance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_wvariance_with_fixed_mean');
  late final _gsl_stats_wvariance_with_fixed_mean =
      _gsl_stats_wvariance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
              int, int, double)>();

  double gsl_stats_wsd_with_fixed_mean(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_wsd_with_fixed_mean(
      w,
      wstride,
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_wsd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_wsd_with_fixed_mean');
  late final _gsl_stats_wsd_with_fixed_mean =
      _gsl_stats_wsd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
              int, int, double)>();

  double gsl_stats_wtss(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_wtss(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_wtssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_wtss');
  late final _gsl_stats_wtss = _gsl_stats_wtssPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_wtss_m(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double wmean,
  ) {
    return _gsl_stats_wtss_m(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
    );
  }

  late final _gsl_stats_wtss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_wtss_m');
  late final _gsl_stats_wtss_m = _gsl_stats_wtss_mPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
          int, int, double)>();

  double gsl_stats_wabsdev(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_wabsdev(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_wabsdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_wabsdev');
  late final _gsl_stats_wabsdev = _gsl_stats_wabsdevPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_wskew(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_wskew(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_wskewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_wskew');
  late final _gsl_stats_wskew = _gsl_stats_wskewPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_wkurtosis(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_wkurtosis(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_wkurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_wkurtosis');
  late final _gsl_stats_wkurtosis = _gsl_stats_wkurtosisPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_wvariance_m(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double wmean,
  ) {
    return _gsl_stats_wvariance_m(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
    );
  }

  late final _gsl_stats_wvariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_wvariance_m');
  late final _gsl_stats_wvariance_m = _gsl_stats_wvariance_mPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
          int, int, double)>();

  double gsl_stats_wsd_m(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double wmean,
  ) {
    return _gsl_stats_wsd_m(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
    );
  }

  late final _gsl_stats_wsd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_wsd_m');
  late final _gsl_stats_wsd_m = _gsl_stats_wsd_mPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
          int, int, double)>();

  double gsl_stats_wabsdev_m(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double wmean,
  ) {
    return _gsl_stats_wabsdev_m(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
    );
  }

  late final _gsl_stats_wabsdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_wabsdev_m');
  late final _gsl_stats_wabsdev_m = _gsl_stats_wabsdev_mPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
          int, int, double)>();

  double gsl_stats_wskew_m_sd(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double wmean,
    double wsd,
  ) {
    return _gsl_stats_wskew_m_sd(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
      wsd,
    );
  }

  late final _gsl_stats_wskew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_wskew_m_sd');
  late final _gsl_stats_wskew_m_sd = _gsl_stats_wskew_m_sdPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
          int, int, double, double)>();

  double gsl_stats_wkurtosis_m_sd(
    ffi.Pointer<ffi.Double> w,
    int wstride,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    double wmean,
    double wsd,
  ) {
    return _gsl_stats_wkurtosis_m_sd(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
      wsd,
    );
  }

  late final _gsl_stats_wkurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_wkurtosis_m_sd');
  late final _gsl_stats_wkurtosis_m_sd =
      _gsl_stats_wkurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>,
              int, int, double, double)>();

  double gsl_stats_pvariance(
    ffi.Pointer<ffi.Double> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Double> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_pvariance');
  late final _gsl_stats_pvariance = _gsl_stats_pvariancePtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, int,
          ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_ttest(
    ffi.Pointer<ffi.Double> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Double> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_ttest');
  late final _gsl_stats_ttest = _gsl_stats_ttestPtr.asFunction<
      double Function(ffi.Pointer<ffi.Double>, int, int,
          ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_max(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_max');
  late final _gsl_stats_max = _gsl_stats_maxPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_min(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_min');
  late final _gsl_stats_min = _gsl_stats_minPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  void gsl_stats_minmax(
    ffi.Pointer<ffi.Double> min,
    ffi.Pointer<ffi.Double> max,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_minmax');
  late final _gsl_stats_minmax = _gsl_stats_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_stats_max_index(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_max_index');
  late final _gsl_stats_max_index = _gsl_stats_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_stats_min_index(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_min_index');
  late final _gsl_stats_min_index = _gsl_stats_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, int, int)>();

  void gsl_stats_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t)>>('gsl_stats_minmax_index');
  late final _gsl_stats_minmax_index = _gsl_stats_minmax_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
          ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_select(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              size_t)>>('gsl_stats_select');
  late final _gsl_stats_select = _gsl_stats_selectPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int, int)>();

  double gsl_stats_median_from_sorted_data(
    ffi.Pointer<ffi.Double> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_stats_median_from_sorted_data');
  late final _gsl_stats_median_from_sorted_data =
      _gsl_stats_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_median(
    ffi.Pointer<ffi.Double> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_stats_median');
  late final _gsl_stats_median = _gsl_stats_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_quantile_from_sorted_data(
    ffi.Pointer<ffi.Double> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Double)>>('gsl_stats_quantile_from_sorted_data');
  late final _gsl_stats_quantile_from_sorted_data =
      _gsl_stats_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Double>, int, int, double)>();

  double gsl_stats_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Double> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_stats_trmean_from_sorted_data');
  late final _gsl_stats_trmean_from_sorted_data =
      _gsl_stats_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Double> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t,
              size_t)>>('gsl_stats_gastwirth_from_sorted_data');
  late final _gsl_stats_gastwirth_from_sorted_data =
      _gsl_stats_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Double>, int, int)>();

  double gsl_stats_mad0(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_mad0');
  late final _gsl_stats_mad0 = _gsl_stats_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_mad(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_mad');
  late final _gsl_stats_mad = _gsl_stats_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Double> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_Sn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_Sn0_from_sorted_data');
  late final _gsl_stats_Sn0_from_sorted_data =
      _gsl_stats_Sn0_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Double>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_Sn_from_sorted_data(
    ffi.Pointer<ffi.Double> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_Sn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_Sn_from_sorted_data');
  late final _gsl_stats_Sn_from_sorted_data =
      _gsl_stats_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Double>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Double> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_Qn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_Qn0_from_sorted_data');
  late final _gsl_stats_Qn0_from_sorted_data =
      _gsl_stats_Qn0_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Double>, int, int,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_Qn_from_sorted_data(
    ffi.Pointer<ffi.Double> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_Qn_from_sorted_data');
  late final _gsl_stats_Qn_from_sorted_data =
      _gsl_stats_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Double>, int, int,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_float_mean(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_stats_float_mean');
  late final _gsl_stats_float_mean = _gsl_stats_float_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_variance(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_variance');
  late final _gsl_stats_float_variance = _gsl_stats_float_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_sd(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_stats_float_sd');
  late final _gsl_stats_float_sd = _gsl_stats_float_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_variance_with_fixed_mean(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_float_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_float_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double)>>('gsl_stats_float_variance_with_fixed_mean');
  late final _gsl_stats_float_variance_with_fixed_mean =
      _gsl_stats_float_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  double gsl_stats_float_sd_with_fixed_mean(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_float_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_float_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double)>>('gsl_stats_float_sd_with_fixed_mean');
  late final _gsl_stats_float_sd_with_fixed_mean =
      _gsl_stats_float_sd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  double gsl_stats_float_tss(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_stats_float_tss');
  late final _gsl_stats_float_tss = _gsl_stats_float_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_tss_m(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_float_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_float_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double)>>('gsl_stats_float_tss_m');
  late final _gsl_stats_float_tss_m = _gsl_stats_float_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  double gsl_stats_float_absdev(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_absdev');
  late final _gsl_stats_float_absdev = _gsl_stats_float_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_skew(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_stats_float_skew');
  late final _gsl_stats_float_skew = _gsl_stats_float_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_kurtosis(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_kurtosis');
  late final _gsl_stats_float_kurtosis = _gsl_stats_float_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_lag1_autocorrelation(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_lag1_autocorrelation');
  late final _gsl_stats_float_lag1_autocorrelation =
      _gsl_stats_float_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_covariance(
    ffi.Pointer<ffi.Float> data1,
    int stride1,
    ffi.Pointer<ffi.Float> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_float_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_float_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_covariance');
  late final _gsl_stats_float_covariance =
      _gsl_stats_float_covariancePtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_correlation(
    ffi.Pointer<ffi.Float> data1,
    int stride1,
    ffi.Pointer<ffi.Float> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_float_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_float_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_correlation');
  late final _gsl_stats_float_correlation =
      _gsl_stats_float_correlationPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_spearman(
    ffi.Pointer<ffi.Float> data1,
    int stride1,
    ffi.Pointer<ffi.Float> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_float_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_float_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_float_spearman');
  late final _gsl_stats_float_spearman =
      _gsl_stats_float_spearmanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
              int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_float_variance_m(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_float_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_float_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double)>>('gsl_stats_float_variance_m');
  late final _gsl_stats_float_variance_m = _gsl_stats_float_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  double gsl_stats_float_sd_m(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_float_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_float_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double)>>('gsl_stats_float_sd_m');
  late final _gsl_stats_float_sd_m = _gsl_stats_float_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  double gsl_stats_float_absdev_m(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_float_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_float_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double)>>('gsl_stats_float_absdev_m');
  late final _gsl_stats_float_absdev_m = _gsl_stats_float_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  double gsl_stats_float_skew_m_sd(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_float_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_float_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_float_skew_m_sd');
  late final _gsl_stats_float_skew_m_sd =
      _gsl_stats_float_skew_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, int, double, double)>();

  double gsl_stats_float_kurtosis_m_sd(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_float_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_float_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_float_kurtosis_m_sd');
  late final _gsl_stats_float_kurtosis_m_sd =
      _gsl_stats_float_kurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, int, double, double)>();

  double gsl_stats_float_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_float_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_float_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double)>>('gsl_stats_float_lag1_autocorrelation_m');
  late final _gsl_stats_float_lag1_autocorrelation_m =
      _gsl_stats_float_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  double gsl_stats_float_covariance_m(
    ffi.Pointer<ffi.Float> data1,
    int stride1,
    ffi.Pointer<ffi.Float> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_float_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_float_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_float_covariance_m');
  late final _gsl_stats_float_covariance_m =
      _gsl_stats_float_covariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
              int, int, double, double)>();

  double gsl_stats_float_wmean(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_wmean(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_wmeanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_wmean');
  late final _gsl_stats_float_wmean = _gsl_stats_float_wmeanPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_wvariance(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_wvariance(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_wvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_wvariance');
  late final _gsl_stats_float_wvariance =
      _gsl_stats_float_wvariancePtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_wsd(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_wsd(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_wsdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t,
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_stats_float_wsd');
  late final _gsl_stats_float_wsd = _gsl_stats_float_wsdPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_wvariance_with_fixed_mean(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_float_wvariance_with_fixed_mean(
      w,
      wstride,
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_float_wvariance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_float_wvariance_with_fixed_mean');
  late final _gsl_stats_float_wvariance_with_fixed_mean =
      _gsl_stats_float_wvariance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
              int, int, double)>();

  double gsl_stats_float_wsd_with_fixed_mean(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_float_wsd_with_fixed_mean(
      w,
      wstride,
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_float_wsd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_float_wsd_with_fixed_mean');
  late final _gsl_stats_float_wsd_with_fixed_mean =
      _gsl_stats_float_wsd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
              int, int, double)>();

  double gsl_stats_float_wtss(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_wtss(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_wtssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t,
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_stats_float_wtss');
  late final _gsl_stats_float_wtss = _gsl_stats_float_wtssPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_wtss_m(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double wmean,
  ) {
    return _gsl_stats_float_wtss_m(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
    );
  }

  late final _gsl_stats_float_wtss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_float_wtss_m');
  late final _gsl_stats_float_wtss_m = _gsl_stats_float_wtss_mPtr.asFunction<
      double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int,
          int, double)>();

  double gsl_stats_float_wabsdev(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_wabsdev(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_wabsdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_wabsdev');
  late final _gsl_stats_float_wabsdev = _gsl_stats_float_wabsdevPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_wskew(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_wskew(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_wskewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_wskew');
  late final _gsl_stats_float_wskew = _gsl_stats_float_wskewPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_wkurtosis(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_wkurtosis(
      w,
      wstride,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_wkurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_wkurtosis');
  late final _gsl_stats_float_wkurtosis =
      _gsl_stats_float_wkurtosisPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_wvariance_m(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double wmean,
  ) {
    return _gsl_stats_float_wvariance_m(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
    );
  }

  late final _gsl_stats_float_wvariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_float_wvariance_m');
  late final _gsl_stats_float_wvariance_m =
      _gsl_stats_float_wvariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
              int, int, double)>();

  double gsl_stats_float_wsd_m(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double wmean,
  ) {
    return _gsl_stats_float_wsd_m(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
    );
  }

  late final _gsl_stats_float_wsd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_float_wsd_m');
  late final _gsl_stats_float_wsd_m = _gsl_stats_float_wsd_mPtr.asFunction<
      double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int,
          int, double)>();

  double gsl_stats_float_wabsdev_m(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double wmean,
  ) {
    return _gsl_stats_float_wabsdev_m(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
    );
  }

  late final _gsl_stats_float_wabsdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Double)>>('gsl_stats_float_wabsdev_m');
  late final _gsl_stats_float_wabsdev_m =
      _gsl_stats_float_wabsdev_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
              int, int, double)>();

  double gsl_stats_float_wskew_m_sd(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double wmean,
    double wsd,
  ) {
    return _gsl_stats_float_wskew_m_sd(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
      wsd,
    );
  }

  late final _gsl_stats_float_wskew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_float_wskew_m_sd');
  late final _gsl_stats_float_wskew_m_sd =
      _gsl_stats_float_wskew_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
              int, int, double, double)>();

  double gsl_stats_float_wkurtosis_m_sd(
    ffi.Pointer<ffi.Float> w,
    int wstride,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    double wmean,
    double wsd,
  ) {
    return _gsl_stats_float_wkurtosis_m_sd(
      w,
      wstride,
      data,
      stride,
      n,
      wmean,
      wsd,
    );
  }

  late final _gsl_stats_float_wkurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_float_wkurtosis_m_sd');
  late final _gsl_stats_float_wkurtosis_m_sd =
      _gsl_stats_float_wkurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>,
              int, int, double, double)>();

  double gsl_stats_float_pvariance(
    ffi.Pointer<ffi.Float> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Float> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_float_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_float_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_pvariance');
  late final _gsl_stats_float_pvariance =
      _gsl_stats_float_pvariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, int,
              ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_ttest(
    ffi.Pointer<ffi.Float> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Float> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_float_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_float_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_ttest');
  late final _gsl_stats_float_ttest = _gsl_stats_float_ttestPtr.asFunction<
      double Function(ffi.Pointer<ffi.Float>, int, int, ffi.Pointer<ffi.Float>,
          int, int)>();

  double gsl_stats_float_max(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_stats_float_max');
  late final _gsl_stats_float_max = _gsl_stats_float_maxPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_min(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_stats_float_min');
  late final _gsl_stats_float_min = _gsl_stats_float_minPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  void gsl_stats_float_minmax(
    ffi.Pointer<ffi.Float> min,
    ffi.Pointer<ffi.Float> max,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_minmax');
  late final _gsl_stats_float_minmax = _gsl_stats_float_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_stats_float_max_index(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_max_index');
  late final _gsl_stats_float_max_index = _gsl_stats_float_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_stats_float_min_index(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_min_index');
  late final _gsl_stats_float_min_index = _gsl_stats_float_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, int, int)>();

  void gsl_stats_float_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_stats_float_minmax_index');
  late final _gsl_stats_float_minmax_index =
      _gsl_stats_float_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_select(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_float_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_float_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              size_t)>>('gsl_stats_float_select');
  late final _gsl_stats_float_select = _gsl_stats_float_selectPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int, int)>();

  double gsl_stats_float_median_from_sorted_data(
    ffi.Pointer<ffi.Float> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_median_from_sorted_data');
  late final _gsl_stats_float_median_from_sorted_data =
      _gsl_stats_float_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_median(
    ffi.Pointer<ffi.Float> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_median');
  late final _gsl_stats_float_median = _gsl_stats_float_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_quantile_from_sorted_data(
    ffi.Pointer<ffi.Float> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_float_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_float_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Double)>>('gsl_stats_float_quantile_from_sorted_data');
  late final _gsl_stats_float_quantile_from_sorted_data =
      _gsl_stats_float_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, int, double)>();

  double gsl_stats_float_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Float> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_trmean_from_sorted_data');
  late final _gsl_stats_float_trmean_from_sorted_data =
      _gsl_stats_float_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Float> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_float_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_float_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_stats_float_gastwirth_from_sorted_data');
  late final _gsl_stats_float_gastwirth_from_sorted_data =
      _gsl_stats_float_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Float>, int, int)>();

  double gsl_stats_float_mad0(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_float_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_float_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_float_mad0');
  late final _gsl_stats_float_mad0 = _gsl_stats_float_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_float_mad(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_float_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_float_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_float_mad');
  late final _gsl_stats_float_mad = _gsl_stats_float_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Float>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_float_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Float> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Float> work,
  ) {
    return _gsl_stats_float_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_float_Sn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Pointer<ffi.Float>)>>('gsl_stats_float_Sn0_from_sorted_data');
  late final _gsl_stats_float_Sn0_from_sorted_data =
      _gsl_stats_float_Sn0_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Float>, int, int, ffi.Pointer<ffi.Float>)>();

  double gsl_stats_float_Sn_from_sorted_data(
    ffi.Pointer<ffi.Float> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Float> work,
  ) {
    return _gsl_stats_float_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_float_Sn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Pointer<ffi.Float>)>>('gsl_stats_float_Sn_from_sorted_data');
  late final _gsl_stats_float_Sn_from_sorted_data =
      _gsl_stats_float_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Float>, int, int, ffi.Pointer<ffi.Float>)>();

  double gsl_stats_float_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Float> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Float> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_float_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_float_Qn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_float_Qn0_from_sorted_data');
  late final _gsl_stats_float_Qn0_from_sorted_data =
      _gsl_stats_float_Qn0_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, int,
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_float_Qn_from_sorted_data(
    ffi.Pointer<ffi.Float> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Float> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_float_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_float_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_float_Qn_from_sorted_data');
  late final _gsl_stats_float_Qn_from_sorted_data =
      _gsl_stats_float_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Float>, int, int,
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_ulong_mean(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_mean');
  late final _gsl_stats_ulong_mean = _gsl_stats_ulong_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_variance(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_variance');
  late final _gsl_stats_ulong_variance = _gsl_stats_ulong_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_sd(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint64>, size_t, size_t)>>('gsl_stats_ulong_sd');
  late final _gsl_stats_ulong_sd = _gsl_stats_ulong_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_variance_with_fixed_mean(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ulong_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ulong_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ulong_variance_with_fixed_mean');
  late final _gsl_stats_ulong_variance_with_fixed_mean =
      _gsl_stats_ulong_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, int, double)>();

  double gsl_stats_ulong_sd_with_fixed_mean(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ulong_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ulong_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ulong_sd_with_fixed_mean');
  late final _gsl_stats_ulong_sd_with_fixed_mean =
      _gsl_stats_ulong_sd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, int, double)>();

  double gsl_stats_ulong_tss(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint64>, size_t, size_t)>>('gsl_stats_ulong_tss');
  late final _gsl_stats_ulong_tss = _gsl_stats_ulong_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_tss_m(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ulong_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ulong_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ulong_tss_m');
  late final _gsl_stats_ulong_tss_m = _gsl_stats_ulong_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int, double)>();

  double gsl_stats_ulong_absdev(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_absdev');
  late final _gsl_stats_ulong_absdev = _gsl_stats_ulong_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_skew(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_skew');
  late final _gsl_stats_ulong_skew = _gsl_stats_ulong_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_kurtosis(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_kurtosis');
  late final _gsl_stats_ulong_kurtosis = _gsl_stats_ulong_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_lag1_autocorrelation(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_lag1_autocorrelation');
  late final _gsl_stats_ulong_lag1_autocorrelation =
      _gsl_stats_ulong_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_covariance(
    ffi.Pointer<ffi.Uint64> data1,
    int stride1,
    ffi.Pointer<ffi.Uint64> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_ulong_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_ulong_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_stats_ulong_covariance');
  late final _gsl_stats_ulong_covariance =
      _gsl_stats_ulong_covariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>,
              int, int)>();

  double gsl_stats_ulong_correlation(
    ffi.Pointer<ffi.Uint64> data1,
    int stride1,
    ffi.Pointer<ffi.Uint64> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_ulong_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_ulong_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_stats_ulong_correlation');
  late final _gsl_stats_ulong_correlation =
      _gsl_stats_ulong_correlationPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>,
              int, int)>();

  double gsl_stats_ulong_spearman(
    ffi.Pointer<ffi.Uint64> data1,
    int stride1,
    ffi.Pointer<ffi.Uint64> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_ulong_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_ulong_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_ulong_spearman');
  late final _gsl_stats_ulong_spearman =
      _gsl_stats_ulong_spearmanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>,
              int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_ulong_variance_m(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ulong_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ulong_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ulong_variance_m');
  late final _gsl_stats_ulong_variance_m = _gsl_stats_ulong_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int, double)>();

  double gsl_stats_ulong_sd_m(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ulong_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ulong_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ulong_sd_m');
  late final _gsl_stats_ulong_sd_m = _gsl_stats_ulong_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int, double)>();

  double gsl_stats_ulong_absdev_m(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ulong_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ulong_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ulong_absdev_m');
  late final _gsl_stats_ulong_absdev_m = _gsl_stats_ulong_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int, double)>();

  double gsl_stats_ulong_skew_m_sd(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_ulong_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_ulong_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_ulong_skew_m_sd');
  late final _gsl_stats_ulong_skew_m_sd =
      _gsl_stats_ulong_skew_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, int, double, double)>();

  double gsl_stats_ulong_kurtosis_m_sd(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_ulong_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_ulong_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_ulong_kurtosis_m_sd');
  late final _gsl_stats_ulong_kurtosis_m_sd =
      _gsl_stats_ulong_kurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, int, double, double)>();

  double gsl_stats_ulong_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_ulong_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_ulong_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ulong_lag1_autocorrelation_m');
  late final _gsl_stats_ulong_lag1_autocorrelation_m =
      _gsl_stats_ulong_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, int, double)>();

  double gsl_stats_ulong_covariance_m(
    ffi.Pointer<ffi.Uint64> data1,
    int stride1,
    ffi.Pointer<ffi.Uint64> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_ulong_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_ulong_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_ulong_covariance_m');
  late final _gsl_stats_ulong_covariance_m =
      _gsl_stats_ulong_covariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>,
              int, int, double, double)>();

  double gsl_stats_ulong_pvariance(
    ffi.Pointer<ffi.Uint64> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Uint64> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_ulong_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_ulong_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_stats_ulong_pvariance');
  late final _gsl_stats_ulong_pvariance =
      _gsl_stats_ulong_pvariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, int,
              ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_ttest(
    ffi.Pointer<ffi.Uint64> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Uint64> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_ulong_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_ulong_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_stats_ulong_ttest');
  late final _gsl_stats_ulong_ttest = _gsl_stats_ulong_ttestPtr.asFunction<
      double Function(ffi.Pointer<ffi.Uint64>, int, int,
          ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_stats_ulong_max(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Uint64>, size_t, size_t)>>('gsl_stats_ulong_max');
  late final _gsl_stats_ulong_max = _gsl_stats_ulong_maxPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_stats_ulong_min(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Uint64>, size_t, size_t)>>('gsl_stats_ulong_min');
  late final _gsl_stats_ulong_min = _gsl_stats_ulong_minPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  void gsl_stats_ulong_minmax(
    ffi.Pointer<ffi.Uint64> min,
    ffi.Pointer<ffi.Uint64> max,
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_stats_ulong_minmax');
  late final _gsl_stats_ulong_minmax = _gsl_stats_ulong_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_stats_ulong_max_index(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_max_index');
  late final _gsl_stats_ulong_max_index = _gsl_stats_ulong_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_stats_ulong_min_index(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_min_index');
  late final _gsl_stats_ulong_min_index = _gsl_stats_ulong_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  void gsl_stats_ulong_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_stats_ulong_minmax_index');
  late final _gsl_stats_ulong_minmax_index =
      _gsl_stats_ulong_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_stats_ulong_select(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_ulong_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_ulong_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              size_t)>>('gsl_stats_ulong_select');
  late final _gsl_stats_ulong_select = _gsl_stats_ulong_selectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint64>, int, int, int)>();

  double gsl_stats_ulong_median_from_sorted_data(
    ffi.Pointer<ffi.Uint64> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_median_from_sorted_data');
  late final _gsl_stats_ulong_median_from_sorted_data =
      _gsl_stats_ulong_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_median(
    ffi.Pointer<ffi.Uint64> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_median');
  late final _gsl_stats_ulong_median = _gsl_stats_ulong_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_quantile_from_sorted_data(
    ffi.Pointer<ffi.Uint64> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_ulong_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_ulong_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_ulong_quantile_from_sorted_data');
  late final _gsl_stats_ulong_quantile_from_sorted_data =
      _gsl_stats_ulong_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, int, double)>();

  double gsl_stats_ulong_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Uint64> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_trmean_from_sorted_data');
  late final _gsl_stats_ulong_trmean_from_sorted_data =
      _gsl_stats_ulong_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Uint64> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_ulong_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_ulong_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t,
              size_t)>>('gsl_stats_ulong_gastwirth_from_sorted_data');
  late final _gsl_stats_ulong_gastwirth_from_sorted_data =
      _gsl_stats_ulong_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  double gsl_stats_ulong_mad0(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_ulong_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_ulong_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_ulong_mad0');
  late final _gsl_stats_ulong_mad0 = _gsl_stats_ulong_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint64>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_ulong_mad(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_ulong_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_ulong_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_ulong_mad');
  late final _gsl_stats_ulong_mad = _gsl_stats_ulong_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint64>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_stats_ulong_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Uint64> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint64> work,
  ) {
    return _gsl_stats_ulong_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_ulong_Sn0_from_sorted_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint64 Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
                  ffi.Pointer<ffi.Uint64>)>>(
      'gsl_stats_ulong_Sn0_from_sorted_data');
  late final _gsl_stats_ulong_Sn0_from_sorted_data =
      _gsl_stats_ulong_Sn0_from_sorted_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint64>, int, int, ffi.Pointer<ffi.Uint64>)>();

  double gsl_stats_ulong_Sn_from_sorted_data(
    ffi.Pointer<ffi.Uint64> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint64> work,
  ) {
    return _gsl_stats_ulong_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_ulong_Sn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint64>, size_t, size_t,
              ffi.Pointer<ffi.Uint64>)>>('gsl_stats_ulong_Sn_from_sorted_data');
  late final _gsl_stats_ulong_Sn_from_sorted_data =
      _gsl_stats_ulong_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Uint64>, int, int, ffi.Pointer<ffi.Uint64>)>();

  int gsl_stats_ulong_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Uint64> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint64> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_ulong_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_ulong_Qn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_ulong_Qn0_from_sorted_data');
  late final _gsl_stats_ulong_Qn0_from_sorted_data =
      _gsl_stats_ulong_Qn0_from_sorted_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint64>, int, int,
              ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_ulong_Qn_from_sorted_data(
    ffi.Pointer<ffi.Uint64> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint64> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_ulong_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_ulong_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_ulong_Qn_from_sorted_data');
  late final _gsl_stats_ulong_Qn_from_sorted_data =
      _gsl_stats_ulong_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint64>, int, int,
              ffi.Pointer<ffi.Uint64>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_long_mean(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>, size_t, size_t)>>('gsl_stats_long_mean');
  late final _gsl_stats_long_mean = _gsl_stats_long_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_variance(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_variance');
  late final _gsl_stats_long_variance = _gsl_stats_long_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_sd(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>, size_t, size_t)>>('gsl_stats_long_sd');
  late final _gsl_stats_long_sd = _gsl_stats_long_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_variance_with_fixed_mean(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_long_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_long_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_long_variance_with_fixed_mean');
  late final _gsl_stats_long_variance_with_fixed_mean =
      _gsl_stats_long_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int64>, int, int, double)>();

  double gsl_stats_long_sd_with_fixed_mean(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_long_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_long_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_long_sd_with_fixed_mean');
  late final _gsl_stats_long_sd_with_fixed_mean =
      _gsl_stats_long_sd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int64>, int, int, double)>();

  double gsl_stats_long_tss(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>, size_t, size_t)>>('gsl_stats_long_tss');
  late final _gsl_stats_long_tss = _gsl_stats_long_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_tss_m(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_long_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_long_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_long_tss_m');
  late final _gsl_stats_long_tss_m = _gsl_stats_long_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int, double)>();

  double gsl_stats_long_absdev(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_absdev');
  late final _gsl_stats_long_absdev = _gsl_stats_long_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_skew(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>, size_t, size_t)>>('gsl_stats_long_skew');
  late final _gsl_stats_long_skew = _gsl_stats_long_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_kurtosis(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_kurtosis');
  late final _gsl_stats_long_kurtosis = _gsl_stats_long_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_lag1_autocorrelation(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_lag1_autocorrelation');
  late final _gsl_stats_long_lag1_autocorrelation =
      _gsl_stats_long_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_covariance(
    ffi.Pointer<ffi.Int64> data1,
    int stride1,
    ffi.Pointer<ffi.Int64> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_long_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_long_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>,
              size_t,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t)>>('gsl_stats_long_covariance');
  late final _gsl_stats_long_covariance =
      _gsl_stats_long_covariancePtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_correlation(
    ffi.Pointer<ffi.Int64> data1,
    int stride1,
    ffi.Pointer<ffi.Int64> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_long_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_long_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>,
              size_t,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t)>>('gsl_stats_long_correlation');
  late final _gsl_stats_long_correlation =
      _gsl_stats_long_correlationPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_spearman(
    ffi.Pointer<ffi.Int64> data1,
    int stride1,
    ffi.Pointer<ffi.Int64> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_long_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_long_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>,
              size_t,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_long_spearman');
  late final _gsl_stats_long_spearman = _gsl_stats_long_spearmanPtr.asFunction<
      double Function(ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Int64>, int,
          int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_long_variance_m(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_long_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_long_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_long_variance_m');
  late final _gsl_stats_long_variance_m = _gsl_stats_long_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int, double)>();

  double gsl_stats_long_sd_m(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_long_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_long_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_long_sd_m');
  late final _gsl_stats_long_sd_m = _gsl_stats_long_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int, double)>();

  double gsl_stats_long_absdev_m(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_long_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_long_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_long_absdev_m');
  late final _gsl_stats_long_absdev_m = _gsl_stats_long_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int, double)>();

  double gsl_stats_long_skew_m_sd(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_long_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_long_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_long_skew_m_sd');
  late final _gsl_stats_long_skew_m_sd =
      _gsl_stats_long_skew_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int64>, int, int, double, double)>();

  double gsl_stats_long_kurtosis_m_sd(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_long_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_long_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_long_kurtosis_m_sd');
  late final _gsl_stats_long_kurtosis_m_sd =
      _gsl_stats_long_kurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int64>, int, int, double, double)>();

  double gsl_stats_long_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_long_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_long_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_long_lag1_autocorrelation_m');
  late final _gsl_stats_long_lag1_autocorrelation_m =
      _gsl_stats_long_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int64>, int, int, double)>();

  double gsl_stats_long_covariance_m(
    ffi.Pointer<ffi.Int64> data1,
    int stride1,
    ffi.Pointer<ffi.Int64> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_long_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_long_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>,
              size_t,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_long_covariance_m');
  late final _gsl_stats_long_covariance_m =
      _gsl_stats_long_covariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Int64>,
              int, int, double, double)>();

  double gsl_stats_long_pvariance(
    ffi.Pointer<ffi.Int64> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Int64> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_long_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_long_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t)>>('gsl_stats_long_pvariance');
  late final _gsl_stats_long_pvariance =
      _gsl_stats_long_pvariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Int64>, int, int,
              ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_ttest(
    ffi.Pointer<ffi.Int64> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Int64> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_long_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_long_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Pointer<ffi.Int64>, size_t, size_t)>>('gsl_stats_long_ttest');
  late final _gsl_stats_long_ttest = _gsl_stats_long_ttestPtr.asFunction<
      double Function(ffi.Pointer<ffi.Int64>, int, int, ffi.Pointer<ffi.Int64>,
          int, int)>();

  int gsl_stats_long_max(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Int64>, size_t, size_t)>>('gsl_stats_long_max');
  late final _gsl_stats_long_max = _gsl_stats_long_maxPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_stats_long_min(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Int64>, size_t, size_t)>>('gsl_stats_long_min');
  late final _gsl_stats_long_min = _gsl_stats_long_minPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int64>, int, int)>();

  void gsl_stats_long_minmax(
    ffi.Pointer<ffi.Int64> min,
    ffi.Pointer<ffi.Int64> max,
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t)>>('gsl_stats_long_minmax');
  late final _gsl_stats_long_minmax = _gsl_stats_long_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_stats_long_max_index(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_max_index');
  late final _gsl_stats_long_max_index = _gsl_stats_long_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_stats_long_min_index(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_min_index');
  late final _gsl_stats_long_min_index = _gsl_stats_long_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int64>, int, int)>();

  void gsl_stats_long_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t)>>('gsl_stats_long_minmax_index');
  late final _gsl_stats_long_minmax_index =
      _gsl_stats_long_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_stats_long_select(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_long_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_long_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              size_t)>>('gsl_stats_long_select');
  late final _gsl_stats_long_select = _gsl_stats_long_selectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int64>, int, int, int)>();

  double gsl_stats_long_median_from_sorted_data(
    ffi.Pointer<ffi.Int64> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_median_from_sorted_data');
  late final _gsl_stats_long_median_from_sorted_data =
      _gsl_stats_long_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_median(
    ffi.Pointer<ffi.Int64> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_median');
  late final _gsl_stats_long_median = _gsl_stats_long_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_quantile_from_sorted_data(
    ffi.Pointer<ffi.Int64> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_long_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_long_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Double)>>('gsl_stats_long_quantile_from_sorted_data');
  late final _gsl_stats_long_quantile_from_sorted_data =
      _gsl_stats_long_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int64>, int, int, double)>();

  double gsl_stats_long_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Int64> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_trmean_from_sorted_data');
  late final _gsl_stats_long_trmean_from_sorted_data =
      _gsl_stats_long_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Int64> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_long_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_long_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t,
              size_t)>>('gsl_stats_long_gastwirth_from_sorted_data');
  late final _gsl_stats_long_gastwirth_from_sorted_data =
      _gsl_stats_long_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int64>, int, int)>();

  double gsl_stats_long_mad0(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_long_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_long_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_long_mad0');
  late final _gsl_stats_long_mad0 = _gsl_stats_long_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int64>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_long_mad(
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_long_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_long_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_long_mad');
  late final _gsl_stats_long_mad = _gsl_stats_long_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int64>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_stats_long_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Int64> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int64> work,
  ) {
    return _gsl_stats_long_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_long_Sn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Pointer<ffi.Int64>)>>('gsl_stats_long_Sn0_from_sorted_data');
  late final _gsl_stats_long_Sn0_from_sorted_data =
      _gsl_stats_long_Sn0_from_sorted_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int64>, int, int, ffi.Pointer<ffi.Int64>)>();

  double gsl_stats_long_Sn_from_sorted_data(
    ffi.Pointer<ffi.Int64> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int64> work,
  ) {
    return _gsl_stats_long_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_long_Sn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int64>, size_t, size_t,
              ffi.Pointer<ffi.Int64>)>>('gsl_stats_long_Sn_from_sorted_data');
  late final _gsl_stats_long_Sn_from_sorted_data =
      _gsl_stats_long_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int64>, int, int, ffi.Pointer<ffi.Int64>)>();

  int gsl_stats_long_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Int64> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int64> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_long_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_long_Qn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_long_Qn0_from_sorted_data');
  late final _gsl_stats_long_Qn0_from_sorted_data =
      _gsl_stats_long_Qn0_from_sorted_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int64>, int, int, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_long_Qn_from_sorted_data(
    ffi.Pointer<ffi.Int64> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int64> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_long_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_long_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int64>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_long_Qn_from_sorted_data');
  late final _gsl_stats_long_Qn_from_sorted_data =
      _gsl_stats_long_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int64>, int, int,
              ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_int_mean(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_mean');
  late final _gsl_stats_int_mean = _gsl_stats_int_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_variance(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_stats_int_variance');
  late final _gsl_stats_int_variance = _gsl_stats_int_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_sd(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_sd');
  late final _gsl_stats_int_sd = _gsl_stats_int_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_variance_with_fixed_mean(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_int_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_int_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_int_variance_with_fixed_mean');
  late final _gsl_stats_int_variance_with_fixed_mean =
      _gsl_stats_int_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int32>, int, int, double)>();

  double gsl_stats_int_sd_with_fixed_mean(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_int_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_int_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_int_sd_with_fixed_mean');
  late final _gsl_stats_int_sd_with_fixed_mean =
      _gsl_stats_int_sd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int32>, int, int, double)>();

  double gsl_stats_int_tss(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_tss');
  late final _gsl_stats_int_tss = _gsl_stats_int_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_tss_m(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_int_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_int_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_int_tss_m');
  late final _gsl_stats_int_tss_m = _gsl_stats_int_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int, double)>();

  double gsl_stats_int_absdev(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_absdev');
  late final _gsl_stats_int_absdev = _gsl_stats_int_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_skew(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_skew');
  late final _gsl_stats_int_skew = _gsl_stats_int_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_kurtosis(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_stats_int_kurtosis');
  late final _gsl_stats_int_kurtosis = _gsl_stats_int_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_lag1_autocorrelation(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_stats_int_lag1_autocorrelation');
  late final _gsl_stats_int_lag1_autocorrelation =
      _gsl_stats_int_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_covariance(
    ffi.Pointer<ffi.Int32> data1,
    int stride1,
    ffi.Pointer<ffi.Int32> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_int_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_int_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>,
              size_t,
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t)>>('gsl_stats_int_covariance');
  late final _gsl_stats_int_covariance =
      _gsl_stats_int_covariancePtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_correlation(
    ffi.Pointer<ffi.Int32> data1,
    int stride1,
    ffi.Pointer<ffi.Int32> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_int_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_int_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>,
              size_t,
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t)>>('gsl_stats_int_correlation');
  late final _gsl_stats_int_correlation =
      _gsl_stats_int_correlationPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_spearman(
    ffi.Pointer<ffi.Int32> data1,
    int stride1,
    ffi.Pointer<ffi.Int32> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_int_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_int_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>,
              size_t,
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_int_spearman');
  late final _gsl_stats_int_spearman = _gsl_stats_int_spearmanPtr.asFunction<
      double Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Int32>, int,
          int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_int_variance_m(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_int_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_int_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_int_variance_m');
  late final _gsl_stats_int_variance_m = _gsl_stats_int_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int, double)>();

  double gsl_stats_int_sd_m(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_int_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_int_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_int_sd_m');
  late final _gsl_stats_int_sd_m = _gsl_stats_int_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int, double)>();

  double gsl_stats_int_absdev_m(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_int_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_int_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_int_absdev_m');
  late final _gsl_stats_int_absdev_m = _gsl_stats_int_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int, double)>();

  double gsl_stats_int_skew_m_sd(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_int_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_int_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_int_skew_m_sd');
  late final _gsl_stats_int_skew_m_sd = _gsl_stats_int_skew_m_sdPtr.asFunction<
      double Function(ffi.Pointer<ffi.Int32>, int, int, double, double)>();

  double gsl_stats_int_kurtosis_m_sd(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_int_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_int_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_int_kurtosis_m_sd');
  late final _gsl_stats_int_kurtosis_m_sd =
      _gsl_stats_int_kurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int32>, int, int, double, double)>();

  double gsl_stats_int_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_int_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_int_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_int_lag1_autocorrelation_m');
  late final _gsl_stats_int_lag1_autocorrelation_m =
      _gsl_stats_int_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int32>, int, int, double)>();

  double gsl_stats_int_covariance_m(
    ffi.Pointer<ffi.Int32> data1,
    int stride1,
    ffi.Pointer<ffi.Int32> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_int_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_int_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>,
              size_t,
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_int_covariance_m');
  late final _gsl_stats_int_covariance_m =
      _gsl_stats_int_covariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Int32>,
              int, int, double, double)>();

  double gsl_stats_int_pvariance(
    ffi.Pointer<ffi.Int32> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Int32> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_int_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_int_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t)>>('gsl_stats_int_pvariance');
  late final _gsl_stats_int_pvariance = _gsl_stats_int_pvariancePtr.asFunction<
      double Function(ffi.Pointer<ffi.Int32>, int, int, ffi.Pointer<ffi.Int32>,
          int, int)>();

  double gsl_stats_int_ttest(
    ffi.Pointer<ffi.Int32> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Int32> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_int_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_int_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_ttest');
  late final _gsl_stats_int_ttest = _gsl_stats_int_ttestPtr.asFunction<
      double Function(ffi.Pointer<ffi.Int32>, int, int, ffi.Pointer<ffi.Int32>,
          int, int)>();

  int gsl_stats_int_max(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_max');
  late final _gsl_stats_int_max = _gsl_stats_int_maxPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_stats_int_min(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_min');
  late final _gsl_stats_int_min = _gsl_stats_int_minPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>, int, int)>();

  void gsl_stats_int_minmax(
    ffi.Pointer<ffi.Int32> min,
    ffi.Pointer<ffi.Int32> max,
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_minmax');
  late final _gsl_stats_int_minmax = _gsl_stats_int_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_stats_int_max_index(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_stats_int_max_index');
  late final _gsl_stats_int_max_index = _gsl_stats_int_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_stats_int_min_index(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_stats_int_min_index');
  late final _gsl_stats_int_min_index = _gsl_stats_int_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>, int, int)>();

  void gsl_stats_int_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t)>>('gsl_stats_int_minmax_index');
  late final _gsl_stats_int_minmax_index =
      _gsl_stats_int_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_stats_int_select(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_int_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_int_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              size_t)>>('gsl_stats_int_select');
  late final _gsl_stats_int_select = _gsl_stats_int_selectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int32>, int, int, int)>();

  double gsl_stats_int_median_from_sorted_data(
    ffi.Pointer<ffi.Int32> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_stats_int_median_from_sorted_data');
  late final _gsl_stats_int_median_from_sorted_data =
      _gsl_stats_int_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_median(
    ffi.Pointer<ffi.Int32> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_stats_int_median');
  late final _gsl_stats_int_median = _gsl_stats_int_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_quantile_from_sorted_data(
    ffi.Pointer<ffi.Int32> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_int_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_int_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Double)>>('gsl_stats_int_quantile_from_sorted_data');
  late final _gsl_stats_int_quantile_from_sorted_data =
      _gsl_stats_int_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int32>, int, int, double)>();

  double gsl_stats_int_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Int32> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_stats_int_trmean_from_sorted_data');
  late final _gsl_stats_int_trmean_from_sorted_data =
      _gsl_stats_int_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Int32> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_int_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_int_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_stats_int_gastwirth_from_sorted_data');
  late final _gsl_stats_int_gastwirth_from_sorted_data =
      _gsl_stats_int_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int32>, int, int)>();

  double gsl_stats_int_mad0(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_int_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_int_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_int_mad0');
  late final _gsl_stats_int_mad0 = _gsl_stats_int_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int32>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_int_mad(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_int_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_int_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_int_mad');
  late final _gsl_stats_int_mad = _gsl_stats_int_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int32>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_stats_int_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Int32> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int32> work,
  ) {
    return _gsl_stats_int_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_int_Sn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_int_Sn0_from_sorted_data');
  late final _gsl_stats_int_Sn0_from_sorted_data =
      _gsl_stats_int_Sn0_from_sorted_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int32>, int, int, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_int_Sn_from_sorted_data(
    ffi.Pointer<ffi.Int32> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int32> work,
  ) {
    return _gsl_stats_int_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_int_Sn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int32>, size_t, size_t,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_int_Sn_from_sorted_data');
  late final _gsl_stats_int_Sn_from_sorted_data =
      _gsl_stats_int_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int32>, int, int, ffi.Pointer<ffi.Int32>)>();

  int gsl_stats_int_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Int32> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int32> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_int_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_int_Qn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_int_Qn0_from_sorted_data');
  late final _gsl_stats_int_Qn0_from_sorted_data =
      _gsl_stats_int_Qn0_from_sorted_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, int, int, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_int_Qn_from_sorted_data(
    ffi.Pointer<ffi.Int32> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int32> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_int_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_int_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_int_Qn_from_sorted_data');
  late final _gsl_stats_int_Qn_from_sorted_data =
      _gsl_stats_int_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int32>, int, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_short_mean(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>, size_t, size_t)>>('gsl_stats_short_mean');
  late final _gsl_stats_short_mean = _gsl_stats_short_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_variance(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_variance');
  late final _gsl_stats_short_variance = _gsl_stats_short_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_sd(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>, size_t, size_t)>>('gsl_stats_short_sd');
  late final _gsl_stats_short_sd = _gsl_stats_short_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_variance_with_fixed_mean(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_short_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_short_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_short_variance_with_fixed_mean');
  late final _gsl_stats_short_variance_with_fixed_mean =
      _gsl_stats_short_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, int, double)>();

  double gsl_stats_short_sd_with_fixed_mean(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_short_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_short_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_short_sd_with_fixed_mean');
  late final _gsl_stats_short_sd_with_fixed_mean =
      _gsl_stats_short_sd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, int, double)>();

  double gsl_stats_short_tss(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>, size_t, size_t)>>('gsl_stats_short_tss');
  late final _gsl_stats_short_tss = _gsl_stats_short_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_tss_m(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_short_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_short_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_short_tss_m');
  late final _gsl_stats_short_tss_m = _gsl_stats_short_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int, double)>();

  double gsl_stats_short_absdev(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_absdev');
  late final _gsl_stats_short_absdev = _gsl_stats_short_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_skew(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>, size_t, size_t)>>('gsl_stats_short_skew');
  late final _gsl_stats_short_skew = _gsl_stats_short_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_kurtosis(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_kurtosis');
  late final _gsl_stats_short_kurtosis = _gsl_stats_short_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_lag1_autocorrelation(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_lag1_autocorrelation');
  late final _gsl_stats_short_lag1_autocorrelation =
      _gsl_stats_short_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_covariance(
    ffi.Pointer<ffi.Int16> data1,
    int stride1,
    ffi.Pointer<ffi.Int16> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_short_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_short_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_stats_short_covariance');
  late final _gsl_stats_short_covariance =
      _gsl_stats_short_covariancePtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int16>, int, ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_correlation(
    ffi.Pointer<ffi.Int16> data1,
    int stride1,
    ffi.Pointer<ffi.Int16> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_short_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_short_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_stats_short_correlation');
  late final _gsl_stats_short_correlation =
      _gsl_stats_short_correlationPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int16>, int, ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_spearman(
    ffi.Pointer<ffi.Int16> data1,
    int stride1,
    ffi.Pointer<ffi.Int16> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_short_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_short_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_short_spearman');
  late final _gsl_stats_short_spearman =
      _gsl_stats_short_spearmanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, ffi.Pointer<ffi.Int16>,
              int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_short_variance_m(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_short_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_short_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_short_variance_m');
  late final _gsl_stats_short_variance_m = _gsl_stats_short_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int, double)>();

  double gsl_stats_short_sd_m(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_short_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_short_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_short_sd_m');
  late final _gsl_stats_short_sd_m = _gsl_stats_short_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int, double)>();

  double gsl_stats_short_absdev_m(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_short_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_short_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_short_absdev_m');
  late final _gsl_stats_short_absdev_m = _gsl_stats_short_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int, double)>();

  double gsl_stats_short_skew_m_sd(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_short_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_short_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_short_skew_m_sd');
  late final _gsl_stats_short_skew_m_sd =
      _gsl_stats_short_skew_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, int, double, double)>();

  double gsl_stats_short_kurtosis_m_sd(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_short_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_short_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_short_kurtosis_m_sd');
  late final _gsl_stats_short_kurtosis_m_sd =
      _gsl_stats_short_kurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, int, double, double)>();

  double gsl_stats_short_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_short_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_short_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_short_lag1_autocorrelation_m');
  late final _gsl_stats_short_lag1_autocorrelation_m =
      _gsl_stats_short_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, int, double)>();

  double gsl_stats_short_covariance_m(
    ffi.Pointer<ffi.Int16> data1,
    int stride1,
    ffi.Pointer<ffi.Int16> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_short_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_short_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_short_covariance_m');
  late final _gsl_stats_short_covariance_m =
      _gsl_stats_short_covariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, ffi.Pointer<ffi.Int16>,
              int, int, double, double)>();

  double gsl_stats_short_pvariance(
    ffi.Pointer<ffi.Int16> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Int16> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_short_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_short_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_stats_short_pvariance');
  late final _gsl_stats_short_pvariance =
      _gsl_stats_short_pvariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, int,
              ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_ttest(
    ffi.Pointer<ffi.Int16> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Int16> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_short_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_short_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_stats_short_ttest');
  late final _gsl_stats_short_ttest = _gsl_stats_short_ttestPtr.asFunction<
      double Function(ffi.Pointer<ffi.Int16>, int, int, ffi.Pointer<ffi.Int16>,
          int, int)>();

  int gsl_stats_short_max(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<ffi.Int16>, size_t, size_t)>>('gsl_stats_short_max');
  late final _gsl_stats_short_max = _gsl_stats_short_maxPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_stats_short_min(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<ffi.Int16>, size_t, size_t)>>('gsl_stats_short_min');
  late final _gsl_stats_short_min = _gsl_stats_short_minPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int16>, int, int)>();

  void gsl_stats_short_minmax(
    ffi.Pointer<ffi.Int16> min,
    ffi.Pointer<ffi.Int16> max,
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_stats_short_minmax');
  late final _gsl_stats_short_minmax = _gsl_stats_short_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int16>, ffi.Pointer<ffi.Int16>,
          ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_stats_short_max_index(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_max_index');
  late final _gsl_stats_short_max_index = _gsl_stats_short_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_stats_short_min_index(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_min_index');
  late final _gsl_stats_short_min_index = _gsl_stats_short_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int16>, int, int)>();

  void gsl_stats_short_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t)>>('gsl_stats_short_minmax_index');
  late final _gsl_stats_short_minmax_index =
      _gsl_stats_short_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int16>, int, int)>();

  int gsl_stats_short_select(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_short_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_short_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              size_t)>>('gsl_stats_short_select');
  late final _gsl_stats_short_select = _gsl_stats_short_selectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int16>, int, int, int)>();

  double gsl_stats_short_median_from_sorted_data(
    ffi.Pointer<ffi.Int16> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_median_from_sorted_data');
  late final _gsl_stats_short_median_from_sorted_data =
      _gsl_stats_short_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_median(
    ffi.Pointer<ffi.Int16> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_median');
  late final _gsl_stats_short_median = _gsl_stats_short_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_quantile_from_sorted_data(
    ffi.Pointer<ffi.Int16> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_short_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_short_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Double)>>('gsl_stats_short_quantile_from_sorted_data');
  late final _gsl_stats_short_quantile_from_sorted_data =
      _gsl_stats_short_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, int, double)>();

  double gsl_stats_short_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Int16> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_trmean_from_sorted_data');
  late final _gsl_stats_short_trmean_from_sorted_data =
      _gsl_stats_short_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Int16> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_short_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_short_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t,
              size_t)>>('gsl_stats_short_gastwirth_from_sorted_data');
  late final _gsl_stats_short_gastwirth_from_sorted_data =
      _gsl_stats_short_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int16>, int, int)>();

  double gsl_stats_short_mad0(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_short_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_short_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_short_mad0');
  late final _gsl_stats_short_mad0 = _gsl_stats_short_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int16>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_short_mad(
    ffi.Pointer<ffi.Int16> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_short_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_short_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_short_mad');
  late final _gsl_stats_short_mad = _gsl_stats_short_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int16>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_stats_short_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Int16> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int16> work,
  ) {
    return _gsl_stats_short_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_short_Sn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Pointer<ffi.Int16>)>>('gsl_stats_short_Sn0_from_sorted_data');
  late final _gsl_stats_short_Sn0_from_sorted_data =
      _gsl_stats_short_Sn0_from_sorted_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int16>, int, int, ffi.Pointer<ffi.Int16>)>();

  double gsl_stats_short_Sn_from_sorted_data(
    ffi.Pointer<ffi.Int16> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int16> work,
  ) {
    return _gsl_stats_short_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_short_Sn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int16>, size_t, size_t,
              ffi.Pointer<ffi.Int16>)>>('gsl_stats_short_Sn_from_sorted_data');
  late final _gsl_stats_short_Sn_from_sorted_data =
      _gsl_stats_short_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int16>, int, int, ffi.Pointer<ffi.Int16>)>();

  int gsl_stats_short_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Int16> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int16> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_short_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_short_Qn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_short_Qn0_from_sorted_data');
  late final _gsl_stats_short_Qn0_from_sorted_data =
      _gsl_stats_short_Qn0_from_sorted_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int16>, int, int, ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_short_Qn_from_sorted_data(
    ffi.Pointer<ffi.Int16> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int16> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_short_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_short_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int16>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_short_Qn_from_sorted_data');
  late final _gsl_stats_short_Qn_from_sorted_data =
      _gsl_stats_short_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int16>, int, int,
              ffi.Pointer<ffi.Int16>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_uchar_mean(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>, size_t, size_t)>>('gsl_stats_uchar_mean');
  late final _gsl_stats_uchar_mean = _gsl_stats_uchar_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_variance(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_variance');
  late final _gsl_stats_uchar_variance = _gsl_stats_uchar_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_sd(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>, size_t, size_t)>>('gsl_stats_uchar_sd');
  late final _gsl_stats_uchar_sd = _gsl_stats_uchar_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_variance_with_fixed_mean(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uchar_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uchar_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uchar_variance_with_fixed_mean');
  late final _gsl_stats_uchar_variance_with_fixed_mean =
      _gsl_stats_uchar_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, int, double)>();

  double gsl_stats_uchar_sd_with_fixed_mean(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uchar_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uchar_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uchar_sd_with_fixed_mean');
  late final _gsl_stats_uchar_sd_with_fixed_mean =
      _gsl_stats_uchar_sd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, int, double)>();

  double gsl_stats_uchar_tss(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>, size_t, size_t)>>('gsl_stats_uchar_tss');
  late final _gsl_stats_uchar_tss = _gsl_stats_uchar_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_tss_m(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uchar_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uchar_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uchar_tss_m');
  late final _gsl_stats_uchar_tss_m = _gsl_stats_uchar_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int, double)>();

  double gsl_stats_uchar_absdev(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_absdev');
  late final _gsl_stats_uchar_absdev = _gsl_stats_uchar_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_skew(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>, size_t, size_t)>>('gsl_stats_uchar_skew');
  late final _gsl_stats_uchar_skew = _gsl_stats_uchar_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_kurtosis(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_kurtosis');
  late final _gsl_stats_uchar_kurtosis = _gsl_stats_uchar_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_lag1_autocorrelation(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_lag1_autocorrelation');
  late final _gsl_stats_uchar_lag1_autocorrelation =
      _gsl_stats_uchar_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_covariance(
    ffi.Pointer<ffi.Uint8> data1,
    int stride1,
    ffi.Pointer<ffi.Uint8> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_uchar_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_uchar_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_stats_uchar_covariance');
  late final _gsl_stats_uchar_covariance =
      _gsl_stats_uchar_covariancePtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_correlation(
    ffi.Pointer<ffi.Uint8> data1,
    int stride1,
    ffi.Pointer<ffi.Uint8> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_uchar_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_uchar_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_stats_uchar_correlation');
  late final _gsl_stats_uchar_correlation =
      _gsl_stats_uchar_correlationPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_spearman(
    ffi.Pointer<ffi.Uint8> data1,
    int stride1,
    ffi.Pointer<ffi.Uint8> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_uchar_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_uchar_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_uchar_spearman');
  late final _gsl_stats_uchar_spearman =
      _gsl_stats_uchar_spearmanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
              int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_uchar_variance_m(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uchar_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uchar_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uchar_variance_m');
  late final _gsl_stats_uchar_variance_m = _gsl_stats_uchar_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int, double)>();

  double gsl_stats_uchar_sd_m(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uchar_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uchar_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uchar_sd_m');
  late final _gsl_stats_uchar_sd_m = _gsl_stats_uchar_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int, double)>();

  double gsl_stats_uchar_absdev_m(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uchar_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uchar_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uchar_absdev_m');
  late final _gsl_stats_uchar_absdev_m = _gsl_stats_uchar_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int, double)>();

  double gsl_stats_uchar_skew_m_sd(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_uchar_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_uchar_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_uchar_skew_m_sd');
  late final _gsl_stats_uchar_skew_m_sd =
      _gsl_stats_uchar_skew_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, int, double, double)>();

  double gsl_stats_uchar_kurtosis_m_sd(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_uchar_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_uchar_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double, ffi.Double)>>('gsl_stats_uchar_kurtosis_m_sd');
  late final _gsl_stats_uchar_kurtosis_m_sd =
      _gsl_stats_uchar_kurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, int, double, double)>();

  double gsl_stats_uchar_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_uchar_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_uchar_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uchar_lag1_autocorrelation_m');
  late final _gsl_stats_uchar_lag1_autocorrelation_m =
      _gsl_stats_uchar_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, int, double)>();

  double gsl_stats_uchar_covariance_m(
    ffi.Pointer<ffi.Uint8> data1,
    int stride1,
    ffi.Pointer<ffi.Uint8> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_uchar_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_uchar_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_uchar_covariance_m');
  late final _gsl_stats_uchar_covariance_m =
      _gsl_stats_uchar_covariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>,
              int, int, double, double)>();

  double gsl_stats_uchar_pvariance(
    ffi.Pointer<ffi.Uint8> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Uint8> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_uchar_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_uchar_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_stats_uchar_pvariance');
  late final _gsl_stats_uchar_pvariance =
      _gsl_stats_uchar_pvariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, int,
              ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_ttest(
    ffi.Pointer<ffi.Uint8> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Uint8> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_uchar_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_uchar_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_stats_uchar_ttest');
  late final _gsl_stats_uchar_ttest = _gsl_stats_uchar_ttestPtr.asFunction<
      double Function(ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>,
          int, int)>();

  int gsl_stats_uchar_max(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Uint8>, size_t, size_t)>>('gsl_stats_uchar_max');
  late final _gsl_stats_uchar_max = _gsl_stats_uchar_maxPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_stats_uchar_min(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Uint8>, size_t, size_t)>>('gsl_stats_uchar_min');
  late final _gsl_stats_uchar_min = _gsl_stats_uchar_minPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void gsl_stats_uchar_minmax(
    ffi.Pointer<ffi.Uint8> min,
    ffi.Pointer<ffi.Uint8> max,
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_stats_uchar_minmax');
  late final _gsl_stats_uchar_minmax = _gsl_stats_uchar_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_stats_uchar_max_index(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_max_index');
  late final _gsl_stats_uchar_max_index = _gsl_stats_uchar_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_stats_uchar_min_index(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_min_index');
  late final _gsl_stats_uchar_min_index = _gsl_stats_uchar_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void gsl_stats_uchar_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_stats_uchar_minmax_index');
  late final _gsl_stats_uchar_minmax_index =
      _gsl_stats_uchar_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_stats_uchar_select(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_uchar_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_uchar_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              size_t)>>('gsl_stats_uchar_select');
  late final _gsl_stats_uchar_select = _gsl_stats_uchar_selectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int, int, int)>();

  double gsl_stats_uchar_median_from_sorted_data(
    ffi.Pointer<ffi.Uint8> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_median_from_sorted_data');
  late final _gsl_stats_uchar_median_from_sorted_data =
      _gsl_stats_uchar_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_median(
    ffi.Pointer<ffi.Uint8> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_median');
  late final _gsl_stats_uchar_median = _gsl_stats_uchar_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_quantile_from_sorted_data(
    ffi.Pointer<ffi.Uint8> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_uchar_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_uchar_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_uchar_quantile_from_sorted_data');
  late final _gsl_stats_uchar_quantile_from_sorted_data =
      _gsl_stats_uchar_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, int, double)>();

  double gsl_stats_uchar_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Uint8> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_trmean_from_sorted_data');
  late final _gsl_stats_uchar_trmean_from_sorted_data =
      _gsl_stats_uchar_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Uint8> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_uchar_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_uchar_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_stats_uchar_gastwirth_from_sorted_data');
  late final _gsl_stats_uchar_gastwirth_from_sorted_data =
      _gsl_stats_uchar_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  double gsl_stats_uchar_mad0(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_uchar_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_uchar_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_uchar_mad0');
  late final _gsl_stats_uchar_mad0 = _gsl_stats_uchar_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_uchar_mad(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_uchar_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_uchar_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_uchar_mad');
  late final _gsl_stats_uchar_mad = _gsl_stats_uchar_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_stats_uchar_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Uint8> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint8> work,
  ) {
    return _gsl_stats_uchar_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_uchar_Sn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Pointer<ffi.Uint8>)>>('gsl_stats_uchar_Sn0_from_sorted_data');
  late final _gsl_stats_uchar_Sn0_from_sorted_data =
      _gsl_stats_uchar_Sn0_from_sorted_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>)>();

  double gsl_stats_uchar_Sn_from_sorted_data(
    ffi.Pointer<ffi.Uint8> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint8> work,
  ) {
    return _gsl_stats_uchar_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_uchar_Sn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Uint8>, size_t, size_t,
              ffi.Pointer<ffi.Uint8>)>>('gsl_stats_uchar_Sn_from_sorted_data');
  late final _gsl_stats_uchar_Sn_from_sorted_data =
      _gsl_stats_uchar_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>)>();

  int gsl_stats_uchar_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Uint8> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint8> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_uchar_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_uchar_Qn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_uchar_Qn0_from_sorted_data');
  late final _gsl_stats_uchar_Qn0_from_sorted_data =
      _gsl_stats_uchar_Qn0_from_sorted_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_uchar_Qn_from_sorted_data(
    ffi.Pointer<ffi.Uint8> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Uint8> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_uchar_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_uchar_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_uchar_Qn_from_sorted_data');
  late final _gsl_stats_uchar_Qn_from_sorted_data =
      _gsl_stats_uchar_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Uint8>, int, int,
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_char_mean(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_mean(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_mean');
  late final _gsl_stats_char_mean = _gsl_stats_char_meanPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_variance(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_variance(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_stats_char_variance');
  late final _gsl_stats_char_variance = _gsl_stats_char_variancePtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_sd(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_sd(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_sd');
  late final _gsl_stats_char_sd = _gsl_stats_char_sdPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_variance_with_fixed_mean(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_char_variance_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_char_variance_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_char_variance_with_fixed_mean');
  late final _gsl_stats_char_variance_with_fixed_mean =
      _gsl_stats_char_variance_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int8>, int, int, double)>();

  double gsl_stats_char_sd_with_fixed_mean(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_char_sd_with_fixed_mean(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_char_sd_with_fixed_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_char_sd_with_fixed_mean');
  late final _gsl_stats_char_sd_with_fixed_mean =
      _gsl_stats_char_sd_with_fixed_meanPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int8>, int, int, double)>();

  double gsl_stats_char_tss(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_tss(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_tssPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_tss');
  late final _gsl_stats_char_tss = _gsl_stats_char_tssPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_tss_m(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_char_tss_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_char_tss_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_char_tss_m');
  late final _gsl_stats_char_tss_m = _gsl_stats_char_tss_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int, double)>();

  double gsl_stats_char_absdev(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_absdev(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_absdevPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_absdev');
  late final _gsl_stats_char_absdev = _gsl_stats_char_absdevPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_skew(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_skew(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_skew');
  late final _gsl_stats_char_skew = _gsl_stats_char_skewPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_kurtosis(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_kurtosis(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_stats_char_kurtosis');
  late final _gsl_stats_char_kurtosis = _gsl_stats_char_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_lag1_autocorrelation(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_lag1_autocorrelation(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_lag1_autocorrelationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_stats_char_lag1_autocorrelation');
  late final _gsl_stats_char_lag1_autocorrelation =
      _gsl_stats_char_lag1_autocorrelationPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_covariance(
    ffi.Pointer<ffi.Int8> data1,
    int stride1,
    ffi.Pointer<ffi.Int8> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_char_covariance(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_char_covariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t)>>('gsl_stats_char_covariance');
  late final _gsl_stats_char_covariance =
      _gsl_stats_char_covariancePtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_correlation(
    ffi.Pointer<ffi.Int8> data1,
    int stride1,
    ffi.Pointer<ffi.Int8> data2,
    int stride2,
    int n,
  ) {
    return _gsl_stats_char_correlation(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_stats_char_correlationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t)>>('gsl_stats_char_correlation');
  late final _gsl_stats_char_correlation =
      _gsl_stats_char_correlationPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_spearman(
    ffi.Pointer<ffi.Int8> data1,
    int stride1,
    ffi.Pointer<ffi.Int8> data2,
    int stride2,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_char_spearman(
      data1,
      stride1,
      data2,
      stride2,
      n,
      work,
    );
  }

  late final _gsl_stats_char_spearmanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_char_spearman');
  late final _gsl_stats_char_spearman = _gsl_stats_char_spearmanPtr.asFunction<
      double Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int,
          int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_char_variance_m(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_char_variance_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_char_variance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_char_variance_m');
  late final _gsl_stats_char_variance_m = _gsl_stats_char_variance_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int, double)>();

  double gsl_stats_char_sd_m(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_char_sd_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_char_sd_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_char_sd_m');
  late final _gsl_stats_char_sd_m = _gsl_stats_char_sd_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int, double)>();

  double gsl_stats_char_absdev_m(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_char_absdev_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_char_absdev_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_char_absdev_m');
  late final _gsl_stats_char_absdev_m = _gsl_stats_char_absdev_mPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int, double)>();

  double gsl_stats_char_skew_m_sd(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_char_skew_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_char_skew_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t, ffi.Double,
              ffi.Double)>>('gsl_stats_char_skew_m_sd');
  late final _gsl_stats_char_skew_m_sd =
      _gsl_stats_char_skew_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int8>, int, int, double, double)>();

  double gsl_stats_char_kurtosis_m_sd(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    double mean,
    double sd,
  ) {
    return _gsl_stats_char_kurtosis_m_sd(
      data,
      stride,
      n,
      mean,
      sd,
    );
  }

  late final _gsl_stats_char_kurtosis_m_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t, ffi.Double,
              ffi.Double)>>('gsl_stats_char_kurtosis_m_sd');
  late final _gsl_stats_char_kurtosis_m_sd =
      _gsl_stats_char_kurtosis_m_sdPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int8>, int, int, double, double)>();

  double gsl_stats_char_lag1_autocorrelation_m(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    double mean,
  ) {
    return _gsl_stats_char_lag1_autocorrelation_m(
      data,
      stride,
      n,
      mean,
    );
  }

  late final _gsl_stats_char_lag1_autocorrelation_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_char_lag1_autocorrelation_m');
  late final _gsl_stats_char_lag1_autocorrelation_m =
      _gsl_stats_char_lag1_autocorrelation_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int8>, int, int, double)>();

  double gsl_stats_char_covariance_m(
    ffi.Pointer<ffi.Int8> data1,
    int stride1,
    ffi.Pointer<ffi.Int8> data2,
    int stride2,
    int n,
    double mean1,
    double mean2,
  ) {
    return _gsl_stats_char_covariance_m(
      data1,
      stride1,
      data2,
      stride2,
      n,
      mean1,
      mean2,
    );
  }

  late final _gsl_stats_char_covariance_mPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double)>>('gsl_stats_char_covariance_m');
  late final _gsl_stats_char_covariance_m =
      _gsl_stats_char_covariance_mPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
              int, int, double, double)>();

  double gsl_stats_char_pvariance(
    ffi.Pointer<ffi.Int8> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Int8> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_char_pvariance(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_char_pvariancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t)>>('gsl_stats_char_pvariance');
  late final _gsl_stats_char_pvariance =
      _gsl_stats_char_pvariancePtr.asFunction<
          double Function(ffi.Pointer<ffi.Int8>, int, int,
              ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_ttest(
    ffi.Pointer<ffi.Int8> data1,
    int stride1,
    int n1,
    ffi.Pointer<ffi.Int8> data2,
    int stride2,
    int n2,
  ) {
    return _gsl_stats_char_ttest(
      data1,
      stride1,
      n1,
      data2,
      stride2,
      n2,
    );
  }

  late final _gsl_stats_char_ttestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_ttest');
  late final _gsl_stats_char_ttest = _gsl_stats_char_ttestPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_stats_char_max(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_max(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_max');
  late final _gsl_stats_char_max = _gsl_stats_char_maxPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_stats_char_min(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_min(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_min');
  late final _gsl_stats_char_min = _gsl_stats_char_minPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, int)>();

  void gsl_stats_char_minmax(
    ffi.Pointer<ffi.Int8> min,
    ffi.Pointer<ffi.Int8> max,
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_minmax(
      min,
      max,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_minmax');
  late final _gsl_stats_char_minmax = _gsl_stats_char_minmaxPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_stats_char_max_index(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_max_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_max_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_stats_char_max_index');
  late final _gsl_stats_char_max_index = _gsl_stats_char_max_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_stats_char_min_index(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_min_index(
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_min_indexPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_stats_char_min_index');
  late final _gsl_stats_char_min_index = _gsl_stats_char_min_indexPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, int)>();

  void gsl_stats_char_minmax_index(
    ffi.Pointer<size_t> min_index,
    ffi.Pointer<size_t> max_index,
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_minmax_index(
      min_index,
      max_index,
      data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_minmax_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t)>>('gsl_stats_char_minmax_index');
  late final _gsl_stats_char_minmax_index =
      _gsl_stats_char_minmax_indexPtr.asFunction<
          void Function(ffi.Pointer<size_t>, ffi.Pointer<size_t>,
              ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_stats_char_select(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    int k,
  ) {
    return _gsl_stats_char_select(
      data,
      stride,
      n,
      k,
    );
  }

  late final _gsl_stats_char_selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              size_t)>>('gsl_stats_char_select');
  late final _gsl_stats_char_select = _gsl_stats_char_selectPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, int, int, int)>();

  double gsl_stats_char_median_from_sorted_data(
    ffi.Pointer<ffi.Int8> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_median_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_median_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_stats_char_median_from_sorted_data');
  late final _gsl_stats_char_median_from_sorted_data =
      _gsl_stats_char_median_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_median(
    ffi.Pointer<ffi.Int8> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_median(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_stats_char_median');
  late final _gsl_stats_char_median = _gsl_stats_char_medianPtr
      .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_quantile_from_sorted_data(
    ffi.Pointer<ffi.Int8> sorted_data,
    int stride,
    int n,
    double f,
  ) {
    return _gsl_stats_char_quantile_from_sorted_data(
      sorted_data,
      stride,
      n,
      f,
    );
  }

  late final _gsl_stats_char_quantile_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Double)>>('gsl_stats_char_quantile_from_sorted_data');
  late final _gsl_stats_char_quantile_from_sorted_data =
      _gsl_stats_char_quantile_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int8>, int, int, double)>();

  double gsl_stats_char_trmean_from_sorted_data(
    double trim,
    ffi.Pointer<ffi.Int8> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_trmean_from_sorted_data(
      trim,
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_trmean_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_stats_char_trmean_from_sorted_data');
  late final _gsl_stats_char_trmean_from_sorted_data =
      _gsl_stats_char_trmean_from_sorted_dataPtr.asFunction<
          double Function(double, ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_gastwirth_from_sorted_data(
    ffi.Pointer<ffi.Int8> sorted_data,
    int stride,
    int n,
  ) {
    return _gsl_stats_char_gastwirth_from_sorted_data(
      sorted_data,
      stride,
      n,
    );
  }

  late final _gsl_stats_char_gastwirth_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_stats_char_gastwirth_from_sorted_data');
  late final _gsl_stats_char_gastwirth_from_sorted_data =
      _gsl_stats_char_gastwirth_from_sorted_dataPtr
          .asFunction<double Function(ffi.Pointer<ffi.Int8>, int, int)>();

  double gsl_stats_char_mad0(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_char_mad0(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_char_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_char_mad0');
  late final _gsl_stats_char_mad0 = _gsl_stats_char_mad0Ptr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Double>)>();

  double gsl_stats_char_mad(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> work,
  ) {
    return _gsl_stats_char_mad(
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_char_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_stats_char_mad');
  late final _gsl_stats_char_mad = _gsl_stats_char_madPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_stats_char_Sn0_from_sorted_data(
    ffi.Pointer<ffi.Int8> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int8> work,
  ) {
    return _gsl_stats_char_Sn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_char_Sn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Pointer<ffi.Int8>)>>('gsl_stats_char_Sn0_from_sorted_data');
  late final _gsl_stats_char_Sn0_from_sorted_data =
      _gsl_stats_char_Sn0_from_sorted_dataPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Int8>)>();

  double gsl_stats_char_Sn_from_sorted_data(
    ffi.Pointer<ffi.Int8> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int8> work,
  ) {
    return _gsl_stats_char_Sn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_stats_char_Sn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>, size_t, size_t,
              ffi.Pointer<ffi.Int8>)>>('gsl_stats_char_Sn_from_sorted_data');
  late final _gsl_stats_char_Sn_from_sorted_data =
      _gsl_stats_char_Sn_from_sorted_dataPtr.asFunction<
          double Function(
              ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Int8>)>();

  int gsl_stats_char_Qn0_from_sorted_data(
    ffi.Pointer<ffi.Int8> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int8> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_char_Qn0_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_char_Qn0_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_char_Qn0_from_sorted_data');
  late final _gsl_stats_char_Qn0_from_sorted_data =
      _gsl_stats_char_Qn0_from_sorted_dataPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int8>, int, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>();

  double gsl_stats_char_Qn_from_sorted_data(
    ffi.Pointer<ffi.Int8> sorted_data,
    int stride,
    int n,
    ffi.Pointer<ffi.Int8> work,
    ffi.Pointer<ffi.Int32> work_int,
  ) {
    return _gsl_stats_char_Qn_from_sorted_data(
      sorted_data,
      stride,
      n,
      work,
      work_int,
    );
  }

  late final _gsl_stats_char_Qn_from_sorted_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>>('gsl_stats_char_Qn_from_sorted_data');
  late final _gsl_stats_char_Qn_from_sorted_data =
      _gsl_stats_char_Qn_from_sorted_dataPtr.asFunction<
          double Function(ffi.Pointer<ffi.Int8>, int, int,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>)>();

  int gsl_permute_vector_complex(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_permute_vector_complex(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_complexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_complex>)>>('gsl_permute_vector_complex');
  late final _gsl_permute_vector_complex =
      _gsl_permute_vector_complexPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_permute_vector_complex_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_complex> v,
  ) {
    return _gsl_permute_vector_complex_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_complex_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_complex>)>>(
      'gsl_permute_vector_complex_inverse');
  late final _gsl_permute_vector_complex_inverse =
      _gsl_permute_vector_complex_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_complex>)>();

  int gsl_fft_complex_radix2_forward(
    gsl_complex_packed_array data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_radix2_forward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_radix2_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array, size_t,
              size_t)>>('gsl_fft_complex_radix2_forward');
  late final _gsl_fft_complex_radix2_forward =
      _gsl_fft_complex_radix2_forwardPtr
          .asFunction<int Function(gsl_complex_packed_array, int, int)>();

  int gsl_fft_complex_radix2_backward(
    gsl_complex_packed_array data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_radix2_backward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_radix2_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array, size_t,
              size_t)>>('gsl_fft_complex_radix2_backward');
  late final _gsl_fft_complex_radix2_backward =
      _gsl_fft_complex_radix2_backwardPtr
          .asFunction<int Function(gsl_complex_packed_array, int, int)>();

  int gsl_fft_complex_radix2_inverse(
    gsl_complex_packed_array data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_radix2_inverse(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_radix2_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array, size_t,
              size_t)>>('gsl_fft_complex_radix2_inverse');
  late final _gsl_fft_complex_radix2_inverse =
      _gsl_fft_complex_radix2_inversePtr
          .asFunction<int Function(gsl_complex_packed_array, int, int)>();

  int gsl_fft_complex_radix2_transform(
    gsl_complex_packed_array data,
    int stride,
    int n,
    int sign,
  ) {
    return _gsl_fft_complex_radix2_transform(
      data,
      stride,
      n,
      sign,
    );
  }

  late final _gsl_fft_complex_radix2_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array, size_t, size_t,
              ffi.Int32)>>('gsl_fft_complex_radix2_transform');
  late final _gsl_fft_complex_radix2_transform =
      _gsl_fft_complex_radix2_transformPtr
          .asFunction<int Function(gsl_complex_packed_array, int, int, int)>();

  int gsl_fft_complex_radix2_dif_forward(
    gsl_complex_packed_array data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_radix2_dif_forward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_radix2_dif_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array, size_t,
              size_t)>>('gsl_fft_complex_radix2_dif_forward');
  late final _gsl_fft_complex_radix2_dif_forward =
      _gsl_fft_complex_radix2_dif_forwardPtr
          .asFunction<int Function(gsl_complex_packed_array, int, int)>();

  int gsl_fft_complex_radix2_dif_backward(
    gsl_complex_packed_array data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_radix2_dif_backward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_radix2_dif_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array, size_t,
              size_t)>>('gsl_fft_complex_radix2_dif_backward');
  late final _gsl_fft_complex_radix2_dif_backward =
      _gsl_fft_complex_radix2_dif_backwardPtr
          .asFunction<int Function(gsl_complex_packed_array, int, int)>();

  int gsl_fft_complex_radix2_dif_inverse(
    gsl_complex_packed_array data,
    int stride,
    int n,
  ) {
    return _gsl_fft_complex_radix2_dif_inverse(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_complex_radix2_dif_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array, size_t,
              size_t)>>('gsl_fft_complex_radix2_dif_inverse');
  late final _gsl_fft_complex_radix2_dif_inverse =
      _gsl_fft_complex_radix2_dif_inversePtr
          .asFunction<int Function(gsl_complex_packed_array, int, int)>();

  int gsl_fft_complex_radix2_dif_transform(
    gsl_complex_packed_array data,
    int stride,
    int n,
    int sign,
  ) {
    return _gsl_fft_complex_radix2_dif_transform(
      data,
      stride,
      n,
      sign,
    );
  }

  late final _gsl_fft_complex_radix2_dif_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(gsl_complex_packed_array, size_t, size_t,
              ffi.Int32)>>('gsl_fft_complex_radix2_dif_transform');
  late final _gsl_fft_complex_radix2_dif_transform =
      _gsl_fft_complex_radix2_dif_transformPtr
          .asFunction<int Function(gsl_complex_packed_array, int, int, int)>();

  ffi.Pointer<gsl_fft_complex_wavetable> gsl_fft_complex_wavetable_alloc(
    int n,
  ) {
    return _gsl_fft_complex_wavetable_alloc(
      n,
    );
  }

  late final _gsl_fft_complex_wavetable_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_complex_wavetable> Function(
              size_t)>>('gsl_fft_complex_wavetable_alloc');
  late final _gsl_fft_complex_wavetable_alloc =
      _gsl_fft_complex_wavetable_allocPtr
          .asFunction<ffi.Pointer<gsl_fft_complex_wavetable> Function(int)>();

  void gsl_fft_complex_wavetable_free(
    ffi.Pointer<gsl_fft_complex_wavetable> wavetable,
  ) {
    return _gsl_fft_complex_wavetable_free(
      wavetable,
    );
  }

  late final _gsl_fft_complex_wavetable_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_fft_complex_wavetable>)>>(
      'gsl_fft_complex_wavetable_free');
  late final _gsl_fft_complex_wavetable_free =
      _gsl_fft_complex_wavetable_freePtr
          .asFunction<void Function(ffi.Pointer<gsl_fft_complex_wavetable>)>();

  ffi.Pointer<gsl_fft_complex_workspace> gsl_fft_complex_workspace_alloc(
    int n,
  ) {
    return _gsl_fft_complex_workspace_alloc(
      n,
    );
  }

  late final _gsl_fft_complex_workspace_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_complex_workspace> Function(
              size_t)>>('gsl_fft_complex_workspace_alloc');
  late final _gsl_fft_complex_workspace_alloc =
      _gsl_fft_complex_workspace_allocPtr
          .asFunction<ffi.Pointer<gsl_fft_complex_workspace> Function(int)>();

  void gsl_fft_complex_workspace_free(
    ffi.Pointer<gsl_fft_complex_workspace> workspace,
  ) {
    return _gsl_fft_complex_workspace_free(
      workspace,
    );
  }

  late final _gsl_fft_complex_workspace_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_fft_complex_workspace>)>>(
      'gsl_fft_complex_workspace_free');
  late final _gsl_fft_complex_workspace_free =
      _gsl_fft_complex_workspace_freePtr
          .asFunction<void Function(ffi.Pointer<gsl_fft_complex_workspace>)>();

  int gsl_fft_complex_memcpy(
    ffi.Pointer<gsl_fft_complex_wavetable> dest,
    ffi.Pointer<gsl_fft_complex_wavetable> src,
  ) {
    return _gsl_fft_complex_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_fft_complex_memcpyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_fft_complex_wavetable>,
                  ffi.Pointer<gsl_fft_complex_wavetable>)>>(
      'gsl_fft_complex_memcpy');
  late final _gsl_fft_complex_memcpy = _gsl_fft_complex_memcpyPtr.asFunction<
      int Function(ffi.Pointer<gsl_fft_complex_wavetable>,
          ffi.Pointer<gsl_fft_complex_wavetable>)>();

  int gsl_fft_complex_forward(
    gsl_complex_packed_array data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_complex_wavetable> wavetable,
    ffi.Pointer<gsl_fft_complex_workspace> work,
  ) {
    return _gsl_fft_complex_forward(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_complex_forwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  gsl_complex_packed_array,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_complex_wavetable>,
                  ffi.Pointer<gsl_fft_complex_workspace>)>>(
      'gsl_fft_complex_forward');
  late final _gsl_fft_complex_forward = _gsl_fft_complex_forwardPtr.asFunction<
      int Function(
          gsl_complex_packed_array,
          int,
          int,
          ffi.Pointer<gsl_fft_complex_wavetable>,
          ffi.Pointer<gsl_fft_complex_workspace>)>();

  int gsl_fft_complex_backward(
    gsl_complex_packed_array data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_complex_wavetable> wavetable,
    ffi.Pointer<gsl_fft_complex_workspace> work,
  ) {
    return _gsl_fft_complex_backward(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_complex_backwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  gsl_complex_packed_array,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_complex_wavetable>,
                  ffi.Pointer<gsl_fft_complex_workspace>)>>(
      'gsl_fft_complex_backward');
  late final _gsl_fft_complex_backward =
      _gsl_fft_complex_backwardPtr.asFunction<
          int Function(
              gsl_complex_packed_array,
              int,
              int,
              ffi.Pointer<gsl_fft_complex_wavetable>,
              ffi.Pointer<gsl_fft_complex_workspace>)>();

  int gsl_fft_complex_inverse(
    gsl_complex_packed_array data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_complex_wavetable> wavetable,
    ffi.Pointer<gsl_fft_complex_workspace> work,
  ) {
    return _gsl_fft_complex_inverse(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_complex_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  gsl_complex_packed_array,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_complex_wavetable>,
                  ffi.Pointer<gsl_fft_complex_workspace>)>>(
      'gsl_fft_complex_inverse');
  late final _gsl_fft_complex_inverse = _gsl_fft_complex_inversePtr.asFunction<
      int Function(
          gsl_complex_packed_array,
          int,
          int,
          ffi.Pointer<gsl_fft_complex_wavetable>,
          ffi.Pointer<gsl_fft_complex_workspace>)>();

  int gsl_fft_complex_transform(
    gsl_complex_packed_array data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_complex_wavetable> wavetable,
    ffi.Pointer<gsl_fft_complex_workspace> work,
    int sign,
  ) {
    return _gsl_fft_complex_transform(
      data,
      stride,
      n,
      wavetable,
      work,
      sign,
    );
  }

  late final _gsl_fft_complex_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              gsl_complex_packed_array,
              size_t,
              size_t,
              ffi.Pointer<gsl_fft_complex_wavetable>,
              ffi.Pointer<gsl_fft_complex_workspace>,
              ffi.Int32)>>('gsl_fft_complex_transform');
  late final _gsl_fft_complex_transform =
      _gsl_fft_complex_transformPtr.asFunction<
          int Function(
              gsl_complex_packed_array,
              int,
              int,
              ffi.Pointer<gsl_fft_complex_wavetable>,
              ffi.Pointer<gsl_fft_complex_workspace>,
              int)>();

  int gsl_sf_dawson_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_dawson_e(
      x,
      result,
    );
  }

  late final _gsl_sf_dawson_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_dawson_e');
  late final _gsl_sf_dawson_e = _gsl_sf_dawson_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_dawson(
    double x,
  ) {
    return _gsl_sf_dawson(
      x,
    );
  }

  late final _gsl_sf_dawsonPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_dawson');
  late final _gsl_sf_dawson =
      _gsl_sf_dawsonPtr.asFunction<double Function(double)>();

  int gsl_dft_complex_forward(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> result,
  ) {
    return _gsl_dft_complex_forward(
      data,
      stride,
      n,
      result,
    );
  }

  late final _gsl_dft_complex_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_dft_complex_forward');
  late final _gsl_dft_complex_forward = _gsl_dft_complex_forwardPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_dft_complex_backward(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> result,
  ) {
    return _gsl_dft_complex_backward(
      data,
      stride,
      n,
      result,
    );
  }

  late final _gsl_dft_complex_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_dft_complex_backward');
  late final _gsl_dft_complex_backward =
      _gsl_dft_complex_backwardPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_dft_complex_inverse(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> result,
  ) {
    return _gsl_dft_complex_inverse(
      data,
      stride,
      n,
      result,
    );
  }

  late final _gsl_dft_complex_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_dft_complex_inverse');
  late final _gsl_dft_complex_inverse = _gsl_dft_complex_inversePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>, int, int, ffi.Pointer<ffi.Double>)>();

  int gsl_dft_complex_transform(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Double> result,
    int sign,
  ) {
    return _gsl_dft_complex_transform(
      data,
      stride,
      n,
      result,
      sign,
    );
  }

  late final _gsl_dft_complex_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Int32)>>('gsl_dft_complex_transform');
  late final _gsl_dft_complex_transform =
      _gsl_dft_complex_transformPtr.asFunction<
          int Function(ffi.Pointer<ffi.Double>, int, int,
              ffi.Pointer<ffi.Double>, int)>();

  late final ffi.Pointer<ffi.Pointer<gsl_interp2d_type>>
      _gsl_interp2d_bilinear =
      _lookup<ffi.Pointer<gsl_interp2d_type>>('gsl_interp2d_bilinear');

  ffi.Pointer<gsl_interp2d_type> get gsl_interp2d_bilinear =>
      _gsl_interp2d_bilinear.value;

  set gsl_interp2d_bilinear(ffi.Pointer<gsl_interp2d_type> value) =>
      _gsl_interp2d_bilinear.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_interp2d_type>> _gsl_interp2d_bicubic =
      _lookup<ffi.Pointer<gsl_interp2d_type>>('gsl_interp2d_bicubic');

  ffi.Pointer<gsl_interp2d_type> get gsl_interp2d_bicubic =>
      _gsl_interp2d_bicubic.value;

  set gsl_interp2d_bicubic(ffi.Pointer<gsl_interp2d_type> value) =>
      _gsl_interp2d_bicubic.value = value;

  ffi.Pointer<gsl_interp2d> gsl_interp2d_alloc(
    ffi.Pointer<gsl_interp2d_type> T,
    int xsize,
    int ysize,
  ) {
    return _gsl_interp2d_alloc(
      T,
      xsize,
      ysize,
    );
  }

  late final _gsl_interp2d_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_interp2d> Function(ffi.Pointer<gsl_interp2d_type>,
              size_t, size_t)>>('gsl_interp2d_alloc');
  late final _gsl_interp2d_alloc = _gsl_interp2d_allocPtr.asFunction<
      ffi.Pointer<gsl_interp2d> Function(
          ffi.Pointer<gsl_interp2d_type>, int, int)>();

  ffi.Pointer<ffi.Int8> gsl_interp2d_name(
    ffi.Pointer<gsl_interp2d> interp,
  ) {
    return _gsl_interp2d_name(
      interp,
    );
  }

  late final _gsl_interp2d_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_interp2d>)>>('gsl_interp2d_name');
  late final _gsl_interp2d_name = _gsl_interp2d_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_interp2d>)>();

  int gsl_interp2d_min_size(
    ffi.Pointer<gsl_interp2d> interp,
  ) {
    return _gsl_interp2d_min_size(
      interp,
    );
  }

  late final _gsl_interp2d_min_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_interp2d>)>>(
          'gsl_interp2d_min_size');
  late final _gsl_interp2d_min_size = _gsl_interp2d_min_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_interp2d>)>();

  int gsl_interp2d_type_min_size(
    ffi.Pointer<gsl_interp2d_type> T,
  ) {
    return _gsl_interp2d_type_min_size(
      T,
    );
  }

  late final _gsl_interp2d_type_min_sizePtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_interp2d_type>)>>(
      'gsl_interp2d_type_min_size');
  late final _gsl_interp2d_type_min_size = _gsl_interp2d_type_min_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_interp2d_type>)>();

  int gsl_interp2d_set(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> zarr,
    int i,
    int j,
    double z,
  ) {
    return _gsl_interp2d_set(
      interp,
      zarr,
      i,
      j,
      z,
    );
  }

  late final _gsl_interp2d_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_interp2d>, ffi.Pointer<ffi.Double>,
              size_t, size_t, ffi.Double)>>('gsl_interp2d_set');
  late final _gsl_interp2d_set = _gsl_interp2d_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_interp2d>, ffi.Pointer<ffi.Double>, int, int,
          double)>();

  double gsl_interp2d_get(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> zarr,
    int i,
    int j,
  ) {
    return _gsl_interp2d_get(
      interp,
      zarr,
      i,
      j,
    );
  }

  late final _gsl_interp2d_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_interp2d_get');
  late final _gsl_interp2d_get = _gsl_interp2d_getPtr.asFunction<
      double Function(
          ffi.Pointer<gsl_interp2d>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_interp2d_idx(
    ffi.Pointer<gsl_interp2d> interp,
    int i,
    int j,
  ) {
    return _gsl_interp2d_idx(
      interp,
      i,
      j,
    );
  }

  late final _gsl_interp2d_idxPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_interp2d>, size_t, size_t)>>('gsl_interp2d_idx');
  late final _gsl_interp2d_idx = _gsl_interp2d_idxPtr
      .asFunction<int Function(ffi.Pointer<gsl_interp2d>, int, int)>();

  int gsl_interp2d_init(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    ffi.Pointer<ffi.Double> za,
    int xsize,
    int ysize,
  ) {
    return _gsl_interp2d_init(
      interp,
      xa,
      ya,
      za,
      xsize,
      ysize,
    );
  }

  late final _gsl_interp2d_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t)>>('gsl_interp2d_init');
  late final _gsl_interp2d_init = _gsl_interp2d_initPtr.asFunction<
      int Function(ffi.Pointer<gsl_interp2d>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, int)>();

  void gsl_interp2d_free(
    ffi.Pointer<gsl_interp2d> interp,
  ) {
    return _gsl_interp2d_free(
      interp,
    );
  }

  late final _gsl_interp2d_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_interp2d>)>>(
          'gsl_interp2d_free');
  late final _gsl_interp2d_free = _gsl_interp2d_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_interp2d>)>();

  double gsl_interp2d_eval(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_interp2d_eval(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_interp2d_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp2d_eval');
  late final _gsl_interp2d_eval = _gsl_interp2d_evalPtr.asFunction<
      double Function(
          ffi.Pointer<gsl_interp2d>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          ffi.Pointer<gsl_interp_accel>,
          ffi.Pointer<gsl_interp_accel>)>();

  double gsl_interp2d_eval_extrap(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_interp2d_eval_extrap(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_interp2d_eval_extrapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp2d_eval_extrap');
  late final _gsl_interp2d_eval_extrap =
      _gsl_interp2d_eval_extrapPtr.asFunction<
          double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>();

  int gsl_interp2d_eval_e(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_interp2d_eval_e(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_interp2d_eval_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp2d_eval_e');
  late final _gsl_interp2d_eval_e = _gsl_interp2d_eval_ePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_interp2d>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          double,
          double,
          ffi.Pointer<gsl_interp_accel>,
          ffi.Pointer<gsl_interp_accel>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_interp2d_eval_e_extrap(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_interp2d_eval_e_extrap(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_interp2d_eval_e_extrapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp2d_eval_e_extrap');
  late final _gsl_interp2d_eval_e_extrap =
      _gsl_interp2d_eval_e_extrapPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_interp2d_eval_extrap_e(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_interp2d_eval_extrap_e(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_interp2d_eval_extrap_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp2d_eval_extrap_e');
  late final _gsl_interp2d_eval_extrap_e =
      _gsl_interp2d_eval_extrap_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_interp2d_eval_deriv_x(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_interp2d_eval_deriv_x(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_interp2d_eval_deriv_xPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp2d_eval_deriv_x');
  late final _gsl_interp2d_eval_deriv_x =
      _gsl_interp2d_eval_deriv_xPtr.asFunction<
          double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>();

  int gsl_interp2d_eval_deriv_x_e(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_interp2d_eval_deriv_x_e(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_interp2d_eval_deriv_x_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp2d_eval_deriv_x_e');
  late final _gsl_interp2d_eval_deriv_x_e =
      _gsl_interp2d_eval_deriv_x_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_interp2d_eval_deriv_y(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_interp2d_eval_deriv_y(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_interp2d_eval_deriv_yPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp2d_eval_deriv_y');
  late final _gsl_interp2d_eval_deriv_y =
      _gsl_interp2d_eval_deriv_yPtr.asFunction<
          double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>();

  int gsl_interp2d_eval_deriv_y_e(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_interp2d_eval_deriv_y_e(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_interp2d_eval_deriv_y_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp2d_eval_deriv_y_e');
  late final _gsl_interp2d_eval_deriv_y_e =
      _gsl_interp2d_eval_deriv_y_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_interp2d_eval_deriv_xx(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_interp2d_eval_deriv_xx(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_interp2d_eval_deriv_xxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp2d_eval_deriv_xx');
  late final _gsl_interp2d_eval_deriv_xx =
      _gsl_interp2d_eval_deriv_xxPtr.asFunction<
          double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>();

  int gsl_interp2d_eval_deriv_xx_e(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_interp2d_eval_deriv_xx_e(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_interp2d_eval_deriv_xx_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp2d_eval_deriv_xx_e');
  late final _gsl_interp2d_eval_deriv_xx_e =
      _gsl_interp2d_eval_deriv_xx_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_interp2d_eval_deriv_yy(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_interp2d_eval_deriv_yy(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_interp2d_eval_deriv_yyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp2d_eval_deriv_yy');
  late final _gsl_interp2d_eval_deriv_yy =
      _gsl_interp2d_eval_deriv_yyPtr.asFunction<
          double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>();

  int gsl_interp2d_eval_deriv_yy_e(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_interp2d_eval_deriv_yy_e(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_interp2d_eval_deriv_yy_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp2d_eval_deriv_yy_e');
  late final _gsl_interp2d_eval_deriv_yy_e =
      _gsl_interp2d_eval_deriv_yy_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_interp2d_eval_deriv_xy(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_interp2d_eval_deriv_xy(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_interp2d_eval_deriv_xyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_interp2d_eval_deriv_xy');
  late final _gsl_interp2d_eval_deriv_xy =
      _gsl_interp2d_eval_deriv_xyPtr.asFunction<
          double Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>();

  int gsl_interp2d_eval_deriv_xy_e(
    ffi.Pointer<gsl_interp2d> interp,
    ffi.Pointer<ffi.Double> xarr,
    ffi.Pointer<ffi.Double> yarr,
    ffi.Pointer<ffi.Double> zarr,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_interp2d_eval_deriv_xy_e(
      interp,
      xarr,
      yarr,
      zarr,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_interp2d_eval_deriv_xy_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_interp2d_eval_deriv_xy_e');
  late final _gsl_interp2d_eval_deriv_xy_e =
      _gsl_interp2d_eval_deriv_xy_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_interp2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_spline2d> gsl_spline2d_alloc(
    ffi.Pointer<gsl_interp2d_type> T,
    int xsize,
    int ysize,
  ) {
    return _gsl_spline2d_alloc(
      T,
      xsize,
      ysize,
    );
  }

  late final _gsl_spline2d_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_spline2d> Function(ffi.Pointer<gsl_interp2d_type>,
              size_t, size_t)>>('gsl_spline2d_alloc');
  late final _gsl_spline2d_alloc = _gsl_spline2d_allocPtr.asFunction<
      ffi.Pointer<gsl_spline2d> Function(
          ffi.Pointer<gsl_interp2d_type>, int, int)>();

  int gsl_spline2d_init(
    ffi.Pointer<gsl_spline2d> interp,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    ffi.Pointer<ffi.Double> za,
    int xsize,
    int ysize,
  ) {
    return _gsl_spline2d_init(
      interp,
      xa,
      ya,
      za,
      xsize,
      ysize,
    );
  }

  late final _gsl_spline2d_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t)>>('gsl_spline2d_init');
  late final _gsl_spline2d_init = _gsl_spline2d_initPtr.asFunction<
      int Function(ffi.Pointer<gsl_spline2d>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, int)>();

  void gsl_spline2d_free(
    ffi.Pointer<gsl_spline2d> interp,
  ) {
    return _gsl_spline2d_free(
      interp,
    );
  }

  late final _gsl_spline2d_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_spline2d>)>>(
          'gsl_spline2d_free');
  late final _gsl_spline2d_free = _gsl_spline2d_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_spline2d>)>();

  double gsl_spline2d_eval(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_spline2d_eval(
      interp,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_spline2d_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline2d_eval');
  late final _gsl_spline2d_eval = _gsl_spline2d_evalPtr.asFunction<
      double Function(ffi.Pointer<gsl_spline2d>, double, double,
          ffi.Pointer<gsl_interp_accel>, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline2d_eval_e(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_spline2d_eval_e(
      interp,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_spline2d_eval_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline2d_eval_e');
  late final _gsl_spline2d_eval_e = _gsl_spline2d_eval_ePtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spline2d>,
          double,
          double,
          ffi.Pointer<gsl_interp_accel>,
          ffi.Pointer<gsl_interp_accel>,
          ffi.Pointer<ffi.Double>)>();

  double gsl_spline2d_eval_extrap(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_spline2d_eval_extrap(
      interp,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_spline2d_eval_extrapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline2d_eval_extrap');
  late final _gsl_spline2d_eval_extrap =
      _gsl_spline2d_eval_extrapPtr.asFunction<
          double Function(ffi.Pointer<gsl_spline2d>, double, double,
              ffi.Pointer<gsl_interp_accel>, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline2d_eval_extrap_e(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_spline2d_eval_extrap_e(
      interp,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_spline2d_eval_extrap_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline2d_eval_extrap_e');
  late final _gsl_spline2d_eval_extrap_e =
      _gsl_spline2d_eval_extrap_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spline2d>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_spline2d_eval_deriv_x(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_spline2d_eval_deriv_x(
      interp,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_spline2d_eval_deriv_xPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline2d_eval_deriv_x');
  late final _gsl_spline2d_eval_deriv_x =
      _gsl_spline2d_eval_deriv_xPtr.asFunction<
          double Function(ffi.Pointer<gsl_spline2d>, double, double,
              ffi.Pointer<gsl_interp_accel>, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline2d_eval_deriv_x_e(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_spline2d_eval_deriv_x_e(
      interp,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_spline2d_eval_deriv_x_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline2d_eval_deriv_x_e');
  late final _gsl_spline2d_eval_deriv_x_e =
      _gsl_spline2d_eval_deriv_x_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spline2d>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_spline2d_eval_deriv_y(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_spline2d_eval_deriv_y(
      interp,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_spline2d_eval_deriv_yPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline2d_eval_deriv_y');
  late final _gsl_spline2d_eval_deriv_y =
      _gsl_spline2d_eval_deriv_yPtr.asFunction<
          double Function(ffi.Pointer<gsl_spline2d>, double, double,
              ffi.Pointer<gsl_interp_accel>, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline2d_eval_deriv_y_e(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_spline2d_eval_deriv_y_e(
      interp,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_spline2d_eval_deriv_y_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline2d_eval_deriv_y_e');
  late final _gsl_spline2d_eval_deriv_y_e =
      _gsl_spline2d_eval_deriv_y_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spline2d>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_spline2d_eval_deriv_xx(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_spline2d_eval_deriv_xx(
      interp,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_spline2d_eval_deriv_xxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline2d_eval_deriv_xx');
  late final _gsl_spline2d_eval_deriv_xx =
      _gsl_spline2d_eval_deriv_xxPtr.asFunction<
          double Function(ffi.Pointer<gsl_spline2d>, double, double,
              ffi.Pointer<gsl_interp_accel>, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline2d_eval_deriv_xx_e(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_spline2d_eval_deriv_xx_e(
      interp,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_spline2d_eval_deriv_xx_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline2d_eval_deriv_xx_e');
  late final _gsl_spline2d_eval_deriv_xx_e =
      _gsl_spline2d_eval_deriv_xx_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spline2d>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_spline2d_eval_deriv_yy(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_spline2d_eval_deriv_yy(
      interp,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_spline2d_eval_deriv_yyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline2d_eval_deriv_yy');
  late final _gsl_spline2d_eval_deriv_yy =
      _gsl_spline2d_eval_deriv_yyPtr.asFunction<
          double Function(ffi.Pointer<gsl_spline2d>, double, double,
              ffi.Pointer<gsl_interp_accel>, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline2d_eval_deriv_yy_e(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_spline2d_eval_deriv_yy_e(
      interp,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_spline2d_eval_deriv_yy_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline2d_eval_deriv_yy_e');
  late final _gsl_spline2d_eval_deriv_yy_e =
      _gsl_spline2d_eval_deriv_yy_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spline2d>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  double gsl_spline2d_eval_deriv_xy(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
  ) {
    return _gsl_spline2d_eval_deriv_xy(
      interp,
      x,
      y,
      xa,
      ya,
    );
  }

  late final _gsl_spline2d_eval_deriv_xyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>)>>('gsl_spline2d_eval_deriv_xy');
  late final _gsl_spline2d_eval_deriv_xy =
      _gsl_spline2d_eval_deriv_xyPtr.asFunction<
          double Function(ffi.Pointer<gsl_spline2d>, double, double,
              ffi.Pointer<gsl_interp_accel>, ffi.Pointer<gsl_interp_accel>)>();

  int gsl_spline2d_eval_deriv_xy_e(
    ffi.Pointer<gsl_spline2d> interp,
    double x,
    double y,
    ffi.Pointer<gsl_interp_accel> xa,
    ffi.Pointer<gsl_interp_accel> ya,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_spline2d_eval_deriv_xy_e(
      interp,
      x,
      y,
      xa,
      ya,
      z,
    );
  }

  late final _gsl_spline2d_eval_deriv_xy_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spline2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>>('gsl_spline2d_eval_deriv_xy_e');
  late final _gsl_spline2d_eval_deriv_xy_e =
      _gsl_spline2d_eval_deriv_xy_ePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_spline2d>,
              double,
              double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_spline2d_min_size(
    ffi.Pointer<gsl_spline2d> interp,
  ) {
    return _gsl_spline2d_min_size(
      interp,
    );
  }

  late final _gsl_spline2d_min_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_spline2d>)>>(
          'gsl_spline2d_min_size');
  late final _gsl_spline2d_min_size = _gsl_spline2d_min_sizePtr
      .asFunction<int Function(ffi.Pointer<gsl_spline2d>)>();

  ffi.Pointer<ffi.Int8> gsl_spline2d_name(
    ffi.Pointer<gsl_spline2d> interp,
  ) {
    return _gsl_spline2d_name(
      interp,
    );
  }

  late final _gsl_spline2d_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_spline2d>)>>('gsl_spline2d_name');
  late final _gsl_spline2d_name = _gsl_spline2d_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_spline2d>)>();

  int gsl_spline2d_set(
    ffi.Pointer<gsl_spline2d> interp,
    ffi.Pointer<ffi.Double> zarr,
    int i,
    int j,
    double z,
  ) {
    return _gsl_spline2d_set(
      interp,
      zarr,
      i,
      j,
      z,
    );
  }

  late final _gsl_spline2d_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_spline2d>, ffi.Pointer<ffi.Double>,
              size_t, size_t, ffi.Double)>>('gsl_spline2d_set');
  late final _gsl_spline2d_set = _gsl_spline2d_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_spline2d>, ffi.Pointer<ffi.Double>, int, int,
          double)>();

  double gsl_spline2d_get(
    ffi.Pointer<gsl_spline2d> interp,
    ffi.Pointer<ffi.Double> zarr,
    int i,
    int j,
  ) {
    return _gsl_spline2d_get(
      interp,
      zarr,
      i,
      j,
    );
  }

  late final _gsl_spline2d_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_spline2d>,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_spline2d_get');
  late final _gsl_spline2d_get = _gsl_spline2d_getPtr.asFunction<
      double Function(
          ffi.Pointer<gsl_spline2d>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_permute_vector_complex_long_double(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_permute_vector_complex_long_double(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_complex_long_doublePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_permute_vector_complex_long_double');
  late final _gsl_permute_vector_complex_long_double =
      _gsl_permute_vector_complex_long_doublePtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_permute_vector_complex_long_double_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_complex_long_double> v,
  ) {
    return _gsl_permute_vector_complex_long_double_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_complex_long_double_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_complex_long_double>)>>(
      'gsl_permute_vector_complex_long_double_inverse');
  late final _gsl_permute_vector_complex_long_double_inverse =
      _gsl_permute_vector_complex_long_double_inversePtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_complex_long_double>)>();

  int gsl_permute_vector_long_double(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_permute_vector_long_double(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_long_doublePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_permute_vector_long_double');
  late final _gsl_permute_vector_long_double =
      _gsl_permute_vector_long_doublePtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_permute_vector_long_double_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_long_double> v,
  ) {
    return _gsl_permute_vector_long_double_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_long_double_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_long_double>)>>(
      'gsl_permute_vector_long_double_inverse');
  late final _gsl_permute_vector_long_double_inverse =
      _gsl_permute_vector_long_double_inversePtr.asFunction<
          int Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_long_double>)>();

  int gsl_permute_vector_float(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_permute_vector_float(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_float>)>>('gsl_permute_vector_float');
  late final _gsl_permute_vector_float =
      _gsl_permute_vector_floatPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_permute_vector_float_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_float> v,
  ) {
    return _gsl_permute_vector_float_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_float_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_float>)>>(
      'gsl_permute_vector_float_inverse');
  late final _gsl_permute_vector_float_inverse =
      _gsl_permute_vector_float_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_float>)>();

  int gsl_permute_vector_ulong(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_permute_vector_ulong(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_ulong>)>>('gsl_permute_vector_ulong');
  late final _gsl_permute_vector_ulong =
      _gsl_permute_vector_ulongPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_permute_vector_ulong_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_ulong> v,
  ) {
    return _gsl_permute_vector_ulong_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_ulong_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_ulong>)>>(
      'gsl_permute_vector_ulong_inverse');
  late final _gsl_permute_vector_ulong_inverse =
      _gsl_permute_vector_ulong_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_ulong>)>();

  int gsl_permute_vector_uint(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_permute_vector_uint(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_uint>)>>('gsl_permute_vector_uint');
  late final _gsl_permute_vector_uint = _gsl_permute_vector_uintPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_permute_vector_uint_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_uint> v,
  ) {
    return _gsl_permute_vector_uint_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_uint_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_uint>)>>(
      'gsl_permute_vector_uint_inverse');
  late final _gsl_permute_vector_uint_inverse =
      _gsl_permute_vector_uint_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_uint>)>();

  int gsl_permute_vector_int(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_permute_vector_int(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_permute_vector_int');
  late final _gsl_permute_vector_int = _gsl_permute_vector_intPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_permute_vector_int_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_int> v,
  ) {
    return _gsl_permute_vector_int_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_int_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_int>)>>('gsl_permute_vector_int_inverse');
  late final _gsl_permute_vector_int_inverse =
      _gsl_permute_vector_int_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_int>)>();

  int gsl_permute_vector_ushort(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_permute_vector_ushort(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_ushortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_ushort>)>>('gsl_permute_vector_ushort');
  late final _gsl_permute_vector_ushort =
      _gsl_permute_vector_ushortPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_permute_vector_ushort_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_ushort> v,
  ) {
    return _gsl_permute_vector_ushort_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_ushort_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_ushort>)>>(
      'gsl_permute_vector_ushort_inverse');
  late final _gsl_permute_vector_ushort_inverse =
      _gsl_permute_vector_ushort_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_ushort>)>();

  int gsl_permute_vector_short(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_permute_vector_short(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_shortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_short>)>>('gsl_permute_vector_short');
  late final _gsl_permute_vector_short =
      _gsl_permute_vector_shortPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_permute_vector_short_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_short> v,
  ) {
    return _gsl_permute_vector_short_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_short_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
                  ffi.Pointer<gsl_vector_short>)>>(
      'gsl_permute_vector_short_inverse');
  late final _gsl_permute_vector_short_inverse =
      _gsl_permute_vector_short_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_short>)>();

  int gsl_permute_vector_char(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_permute_vector_char(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_permutation>,
              ffi.Pointer<gsl_vector_char>)>>('gsl_permute_vector_char');
  late final _gsl_permute_vector_char = _gsl_permute_vector_charPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_permute_vector_char_inverse(
    ffi.Pointer<gsl_permutation> p,
    ffi.Pointer<gsl_vector_char> v,
  ) {
    return _gsl_permute_vector_char_inverse(
      p,
      v,
    );
  }

  late final _gsl_permute_vector_char_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_char>)>>(
      'gsl_permute_vector_char_inverse');
  late final _gsl_permute_vector_char_inverse =
      _gsl_permute_vector_char_inversePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_permutation>, ffi.Pointer<gsl_vector_char>)>();

  int gsl_sf_gegenpoly_1_e(
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gegenpoly_1_e(
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_gegenpoly_1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gegenpoly_1_e');
  late final _gsl_sf_gegenpoly_1_e = _gsl_sf_gegenpoly_1_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_gegenpoly_2_e(
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gegenpoly_2_e(
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_gegenpoly_2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gegenpoly_2_e');
  late final _gsl_sf_gegenpoly_2_e = _gsl_sf_gegenpoly_2_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_gegenpoly_3_e(
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gegenpoly_3_e(
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_gegenpoly_3_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gegenpoly_3_e');
  late final _gsl_sf_gegenpoly_3_e = _gsl_sf_gegenpoly_3_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_gegenpoly_1(
    double lambda,
    double x,
  ) {
    return _gsl_sf_gegenpoly_1(
      lambda,
      x,
    );
  }

  late final _gsl_sf_gegenpoly_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_gegenpoly_1');
  late final _gsl_sf_gegenpoly_1 =
      _gsl_sf_gegenpoly_1Ptr.asFunction<double Function(double, double)>();

  double gsl_sf_gegenpoly_2(
    double lambda,
    double x,
  ) {
    return _gsl_sf_gegenpoly_2(
      lambda,
      x,
    );
  }

  late final _gsl_sf_gegenpoly_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_gegenpoly_2');
  late final _gsl_sf_gegenpoly_2 =
      _gsl_sf_gegenpoly_2Ptr.asFunction<double Function(double, double)>();

  double gsl_sf_gegenpoly_3(
    double lambda,
    double x,
  ) {
    return _gsl_sf_gegenpoly_3(
      lambda,
      x,
    );
  }

  late final _gsl_sf_gegenpoly_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_gegenpoly_3');
  late final _gsl_sf_gegenpoly_3 =
      _gsl_sf_gegenpoly_3Ptr.asFunction<double Function(double, double)>();

  int gsl_sf_gegenpoly_n_e(
    int n,
    double lambda,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gegenpoly_n_e(
      n,
      lambda,
      x,
      result,
    );
  }

  late final _gsl_sf_gegenpoly_n_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gegenpoly_n_e');
  late final _gsl_sf_gegenpoly_n_e = _gsl_sf_gegenpoly_n_ePtr.asFunction<
      int Function(int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_gegenpoly_n(
    int n,
    double lambda,
    double x,
  ) {
    return _gsl_sf_gegenpoly_n(
      n,
      lambda,
      x,
    );
  }

  late final _gsl_sf_gegenpoly_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Double, ffi.Double)>>('gsl_sf_gegenpoly_n');
  late final _gsl_sf_gegenpoly_n =
      _gsl_sf_gegenpoly_nPtr.asFunction<double Function(int, double, double)>();

  int gsl_sf_gegenpoly_array(
    int nmax,
    double lambda,
    double x,
    ffi.Pointer<ffi.Double> result_array,
  ) {
    return _gsl_sf_gegenpoly_array(
      nmax,
      lambda,
      x,
      result_array,
    );
  }

  late final _gsl_sf_gegenpoly_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_gegenpoly_array');
  late final _gsl_sf_gegenpoly_array = _gsl_sf_gegenpoly_arrayPtr
      .asFunction<int Function(int, double, double, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_lambert_W0_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lambert_W0_e(
      x,
      result,
    );
  }

  late final _gsl_sf_lambert_W0_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lambert_W0_e');
  late final _gsl_sf_lambert_W0_e = _gsl_sf_lambert_W0_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lambert_W0(
    double x,
  ) {
    return _gsl_sf_lambert_W0(
      x,
    );
  }

  late final _gsl_sf_lambert_W0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_lambert_W0');
  late final _gsl_sf_lambert_W0 =
      _gsl_sf_lambert_W0Ptr.asFunction<double Function(double)>();

  int gsl_sf_lambert_Wm1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lambert_Wm1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_lambert_Wm1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lambert_Wm1_e');
  late final _gsl_sf_lambert_Wm1_e = _gsl_sf_lambert_Wm1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lambert_Wm1(
    double x,
  ) {
    return _gsl_sf_lambert_Wm1(
      x,
    );
  }

  late final _gsl_sf_lambert_Wm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_lambert_Wm1');
  late final _gsl_sf_lambert_Wm1 =
      _gsl_sf_lambert_Wm1Ptr.asFunction<double Function(double)>();

  ffi.Pointer<gsl_rstat_quantile_workspace> gsl_rstat_quantile_alloc(
    double p,
  ) {
    return _gsl_rstat_quantile_alloc(
      p,
    );
  }

  late final _gsl_rstat_quantile_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_rstat_quantile_workspace> Function(
              ffi.Double)>>('gsl_rstat_quantile_alloc');
  late final _gsl_rstat_quantile_alloc = _gsl_rstat_quantile_allocPtr
      .asFunction<ffi.Pointer<gsl_rstat_quantile_workspace> Function(double)>();

  void gsl_rstat_quantile_free(
    ffi.Pointer<gsl_rstat_quantile_workspace> w,
  ) {
    return _gsl_rstat_quantile_free(
      w,
    );
  }

  late final _gsl_rstat_quantile_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_rstat_quantile_workspace>)>>(
      'gsl_rstat_quantile_free');
  late final _gsl_rstat_quantile_free = _gsl_rstat_quantile_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_rstat_quantile_workspace>)>();

  int gsl_rstat_quantile_reset(
    ffi.Pointer<gsl_rstat_quantile_workspace> w,
  ) {
    return _gsl_rstat_quantile_reset(
      w,
    );
  }

  late final _gsl_rstat_quantile_resetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_rstat_quantile_workspace>)>>(
      'gsl_rstat_quantile_reset');
  late final _gsl_rstat_quantile_reset = _gsl_rstat_quantile_resetPtr
      .asFunction<int Function(ffi.Pointer<gsl_rstat_quantile_workspace>)>();

  int gsl_rstat_quantile_add(
    double x,
    ffi.Pointer<gsl_rstat_quantile_workspace> w,
  ) {
    return _gsl_rstat_quantile_add(
      x,
      w,
    );
  }

  late final _gsl_rstat_quantile_addPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double, ffi.Pointer<gsl_rstat_quantile_workspace>)>>(
      'gsl_rstat_quantile_add');
  late final _gsl_rstat_quantile_add = _gsl_rstat_quantile_addPtr.asFunction<
      int Function(double, ffi.Pointer<gsl_rstat_quantile_workspace>)>();

  double gsl_rstat_quantile_get(
    ffi.Pointer<gsl_rstat_quantile_workspace> w,
  ) {
    return _gsl_rstat_quantile_get(
      w,
    );
  }

  late final _gsl_rstat_quantile_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<gsl_rstat_quantile_workspace>)>>(
      'gsl_rstat_quantile_get');
  late final _gsl_rstat_quantile_get = _gsl_rstat_quantile_getPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_quantile_workspace>)>();

  ffi.Pointer<gsl_rstat_workspace> gsl_rstat_alloc() {
    return _gsl_rstat_alloc();
  }

  late final _gsl_rstat_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_rstat_workspace> Function()>>(
          'gsl_rstat_alloc');
  late final _gsl_rstat_alloc = _gsl_rstat_allocPtr
      .asFunction<ffi.Pointer<gsl_rstat_workspace> Function()>();

  void gsl_rstat_free(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_free(
      w,
    );
  }

  late final _gsl_rstat_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_free');
  late final _gsl_rstat_free = _gsl_rstat_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_rstat_workspace>)>();

  int gsl_rstat_n(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_n(
      w,
    );
  }

  late final _gsl_rstat_nPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_n');
  late final _gsl_rstat_n = _gsl_rstat_nPtr
      .asFunction<int Function(ffi.Pointer<gsl_rstat_workspace>)>();

  int gsl_rstat_add(
    double x,
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_add(
      x,
      w,
    );
  }

  late final _gsl_rstat_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_add');
  late final _gsl_rstat_add = _gsl_rstat_addPtr
      .asFunction<int Function(double, ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_min(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_min(
      w,
    );
  }

  late final _gsl_rstat_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_min');
  late final _gsl_rstat_min = _gsl_rstat_minPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_max(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_max(
      w,
    );
  }

  late final _gsl_rstat_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_max');
  late final _gsl_rstat_max = _gsl_rstat_maxPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_mean(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_mean(
      w,
    );
  }

  late final _gsl_rstat_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_mean');
  late final _gsl_rstat_mean = _gsl_rstat_meanPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_variance(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_variance(
      w,
    );
  }

  late final _gsl_rstat_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_variance');
  late final _gsl_rstat_variance = _gsl_rstat_variancePtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_sd(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_sd(
      w,
    );
  }

  late final _gsl_rstat_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_sd');
  late final _gsl_rstat_sd = _gsl_rstat_sdPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_rms(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_rms(
      w,
    );
  }

  late final _gsl_rstat_rmsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_rms');
  late final _gsl_rstat_rms = _gsl_rstat_rmsPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_sd_mean(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_sd_mean(
      w,
    );
  }

  late final _gsl_rstat_sd_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_sd_mean');
  late final _gsl_rstat_sd_mean = _gsl_rstat_sd_meanPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_median(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_median(
      w,
    );
  }

  late final _gsl_rstat_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_median');
  late final _gsl_rstat_median = _gsl_rstat_medianPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_skew(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_skew(
      w,
    );
  }

  late final _gsl_rstat_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_skew');
  late final _gsl_rstat_skew = _gsl_rstat_skewPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  double gsl_rstat_kurtosis(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_kurtosis(
      w,
    );
  }

  late final _gsl_rstat_kurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_kurtosis');
  late final _gsl_rstat_kurtosis = _gsl_rstat_kurtosisPtr
      .asFunction<double Function(ffi.Pointer<gsl_rstat_workspace>)>();

  int gsl_rstat_reset(
    ffi.Pointer<gsl_rstat_workspace> w,
  ) {
    return _gsl_rstat_reset(
      w,
    );
  }

  late final _gsl_rstat_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_rstat_workspace>)>>('gsl_rstat_reset');
  late final _gsl_rstat_reset = _gsl_rstat_resetPtr
      .asFunction<int Function(ffi.Pointer<gsl_rstat_workspace>)>();

  int gsl_sf_airy_Ai_e(
    double x,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_Ai_e(
      x,
      mode,
      result,
    );
  }

  late final _gsl_sf_airy_Ai_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_Ai_e');
  late final _gsl_sf_airy_Ai_e = _gsl_sf_airy_Ai_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_Ai(
    double x,
    int mode,
  ) {
    return _gsl_sf_airy_Ai(
      x,
      mode,
    );
  }

  late final _gsl_sf_airy_AiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_airy_Ai');
  late final _gsl_sf_airy_Ai =
      _gsl_sf_airy_AiPtr.asFunction<double Function(double, int)>();

  int gsl_sf_airy_Bi_e(
    double x,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_Bi_e(
      x,
      mode,
      result,
    );
  }

  late final _gsl_sf_airy_Bi_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_Bi_e');
  late final _gsl_sf_airy_Bi_e = _gsl_sf_airy_Bi_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_Bi(
    double x,
    int mode,
  ) {
    return _gsl_sf_airy_Bi(
      x,
      mode,
    );
  }

  late final _gsl_sf_airy_BiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_airy_Bi');
  late final _gsl_sf_airy_Bi =
      _gsl_sf_airy_BiPtr.asFunction<double Function(double, int)>();

  int gsl_sf_airy_Ai_scaled_e(
    double x,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_Ai_scaled_e(
      x,
      mode,
      result,
    );
  }

  late final _gsl_sf_airy_Ai_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_Ai_scaled_e');
  late final _gsl_sf_airy_Ai_scaled_e = _gsl_sf_airy_Ai_scaled_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_Ai_scaled(
    double x,
    int mode,
  ) {
    return _gsl_sf_airy_Ai_scaled(
      x,
      mode,
    );
  }

  late final _gsl_sf_airy_Ai_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_airy_Ai_scaled');
  late final _gsl_sf_airy_Ai_scaled =
      _gsl_sf_airy_Ai_scaledPtr.asFunction<double Function(double, int)>();

  int gsl_sf_airy_Bi_scaled_e(
    double x,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_Bi_scaled_e(
      x,
      mode,
      result,
    );
  }

  late final _gsl_sf_airy_Bi_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_Bi_scaled_e');
  late final _gsl_sf_airy_Bi_scaled_e = _gsl_sf_airy_Bi_scaled_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_Bi_scaled(
    double x,
    int mode,
  ) {
    return _gsl_sf_airy_Bi_scaled(
      x,
      mode,
    );
  }

  late final _gsl_sf_airy_Bi_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_airy_Bi_scaled');
  late final _gsl_sf_airy_Bi_scaled =
      _gsl_sf_airy_Bi_scaledPtr.asFunction<double Function(double, int)>();

  int gsl_sf_airy_Ai_deriv_e(
    double x,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_Ai_deriv_e(
      x,
      mode,
      result,
    );
  }

  late final _gsl_sf_airy_Ai_deriv_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_Ai_deriv_e');
  late final _gsl_sf_airy_Ai_deriv_e = _gsl_sf_airy_Ai_deriv_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_Ai_deriv(
    double x,
    int mode,
  ) {
    return _gsl_sf_airy_Ai_deriv(
      x,
      mode,
    );
  }

  late final _gsl_sf_airy_Ai_derivPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_airy_Ai_deriv');
  late final _gsl_sf_airy_Ai_deriv =
      _gsl_sf_airy_Ai_derivPtr.asFunction<double Function(double, int)>();

  int gsl_sf_airy_Bi_deriv_e(
    double x,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_Bi_deriv_e(
      x,
      mode,
      result,
    );
  }

  late final _gsl_sf_airy_Bi_deriv_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_Bi_deriv_e');
  late final _gsl_sf_airy_Bi_deriv_e = _gsl_sf_airy_Bi_deriv_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_Bi_deriv(
    double x,
    int mode,
  ) {
    return _gsl_sf_airy_Bi_deriv(
      x,
      mode,
    );
  }

  late final _gsl_sf_airy_Bi_derivPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_airy_Bi_deriv');
  late final _gsl_sf_airy_Bi_deriv =
      _gsl_sf_airy_Bi_derivPtr.asFunction<double Function(double, int)>();

  int gsl_sf_airy_Ai_deriv_scaled_e(
    double x,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_Ai_deriv_scaled_e(
      x,
      mode,
      result,
    );
  }

  late final _gsl_sf_airy_Ai_deriv_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_Ai_deriv_scaled_e');
  late final _gsl_sf_airy_Ai_deriv_scaled_e = _gsl_sf_airy_Ai_deriv_scaled_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_Ai_deriv_scaled(
    double x,
    int mode,
  ) {
    return _gsl_sf_airy_Ai_deriv_scaled(
      x,
      mode,
    );
  }

  late final _gsl_sf_airy_Ai_deriv_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_airy_Ai_deriv_scaled');
  late final _gsl_sf_airy_Ai_deriv_scaled = _gsl_sf_airy_Ai_deriv_scaledPtr
      .asFunction<double Function(double, int)>();

  int gsl_sf_airy_Bi_deriv_scaled_e(
    double x,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_Bi_deriv_scaled_e(
      x,
      mode,
      result,
    );
  }

  late final _gsl_sf_airy_Bi_deriv_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_Bi_deriv_scaled_e');
  late final _gsl_sf_airy_Bi_deriv_scaled_e = _gsl_sf_airy_Bi_deriv_scaled_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_Bi_deriv_scaled(
    double x,
    int mode,
  ) {
    return _gsl_sf_airy_Bi_deriv_scaled(
      x,
      mode,
    );
  }

  late final _gsl_sf_airy_Bi_deriv_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_airy_Bi_deriv_scaled');
  late final _gsl_sf_airy_Bi_deriv_scaled = _gsl_sf_airy_Bi_deriv_scaledPtr
      .asFunction<double Function(double, int)>();

  int gsl_sf_airy_zero_Ai_e(
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_zero_Ai_e(
      s,
      result,
    );
  }

  late final _gsl_sf_airy_zero_Ai_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_zero_Ai_e');
  late final _gsl_sf_airy_zero_Ai_e = _gsl_sf_airy_zero_Ai_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_zero_Ai(
    int s,
  ) {
    return _gsl_sf_airy_zero_Ai(
      s,
    );
  }

  late final _gsl_sf_airy_zero_AiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_airy_zero_Ai');
  late final _gsl_sf_airy_zero_Ai =
      _gsl_sf_airy_zero_AiPtr.asFunction<double Function(int)>();

  int gsl_sf_airy_zero_Bi_e(
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_zero_Bi_e(
      s,
      result,
    );
  }

  late final _gsl_sf_airy_zero_Bi_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_zero_Bi_e');
  late final _gsl_sf_airy_zero_Bi_e = _gsl_sf_airy_zero_Bi_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_zero_Bi(
    int s,
  ) {
    return _gsl_sf_airy_zero_Bi(
      s,
    );
  }

  late final _gsl_sf_airy_zero_BiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_airy_zero_Bi');
  late final _gsl_sf_airy_zero_Bi =
      _gsl_sf_airy_zero_BiPtr.asFunction<double Function(int)>();

  int gsl_sf_airy_zero_Ai_deriv_e(
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_zero_Ai_deriv_e(
      s,
      result,
    );
  }

  late final _gsl_sf_airy_zero_Ai_deriv_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_zero_Ai_deriv_e');
  late final _gsl_sf_airy_zero_Ai_deriv_e = _gsl_sf_airy_zero_Ai_deriv_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_zero_Ai_deriv(
    int s,
  ) {
    return _gsl_sf_airy_zero_Ai_deriv(
      s,
    );
  }

  late final _gsl_sf_airy_zero_Ai_derivPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_airy_zero_Ai_deriv');
  late final _gsl_sf_airy_zero_Ai_deriv =
      _gsl_sf_airy_zero_Ai_derivPtr.asFunction<double Function(int)>();

  int gsl_sf_airy_zero_Bi_deriv_e(
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_airy_zero_Bi_deriv_e(
      s,
      result,
    );
  }

  late final _gsl_sf_airy_zero_Bi_deriv_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_airy_zero_Bi_deriv_e');
  late final _gsl_sf_airy_zero_Bi_deriv_e = _gsl_sf_airy_zero_Bi_deriv_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_airy_zero_Bi_deriv(
    int s,
  ) {
    return _gsl_sf_airy_zero_Bi_deriv(
      s,
    );
  }

  late final _gsl_sf_airy_zero_Bi_derivPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_airy_zero_Bi_deriv');
  late final _gsl_sf_airy_zero_Bi_deriv =
      _gsl_sf_airy_zero_Bi_derivPtr.asFunction<double Function(int)>();

  int gsl_sf_coupling_3j_e(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_ma,
    int two_mb,
    int two_mc,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_coupling_3j_e(
      two_ja,
      two_jb,
      two_jc,
      two_ma,
      two_mb,
      two_mc,
      result,
    );
  }

  late final _gsl_sf_coupling_3j_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_coupling_3j_e');
  late final _gsl_sf_coupling_3j_e = _gsl_sf_coupling_3j_ePtr.asFunction<
      int Function(int, int, int, int, int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_coupling_3j(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_ma,
    int two_mb,
    int two_mc,
  ) {
    return _gsl_sf_coupling_3j(
      two_ja,
      two_jb,
      two_jc,
      two_ma,
      two_mb,
      two_mc,
    );
  }

  late final _gsl_sf_coupling_3jPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('gsl_sf_coupling_3j');
  late final _gsl_sf_coupling_3j = _gsl_sf_coupling_3jPtr
      .asFunction<double Function(int, int, int, int, int, int)>();

  int gsl_sf_coupling_6j_e(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_jd,
    int two_je,
    int two_jf,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_coupling_6j_e(
      two_ja,
      two_jb,
      two_jc,
      two_jd,
      two_je,
      two_jf,
      result,
    );
  }

  late final _gsl_sf_coupling_6j_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_coupling_6j_e');
  late final _gsl_sf_coupling_6j_e = _gsl_sf_coupling_6j_ePtr.asFunction<
      int Function(int, int, int, int, int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_coupling_6j(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_jd,
    int two_je,
    int two_jf,
  ) {
    return _gsl_sf_coupling_6j(
      two_ja,
      two_jb,
      two_jc,
      two_jd,
      two_je,
      two_jf,
    );
  }

  late final _gsl_sf_coupling_6jPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('gsl_sf_coupling_6j');
  late final _gsl_sf_coupling_6j = _gsl_sf_coupling_6jPtr
      .asFunction<double Function(int, int, int, int, int, int)>();

  int gsl_sf_coupling_RacahW_e(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_jd,
    int two_je,
    int two_jf,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_coupling_RacahW_e(
      two_ja,
      two_jb,
      two_jc,
      two_jd,
      two_je,
      two_jf,
      result,
    );
  }

  late final _gsl_sf_coupling_RacahW_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_coupling_RacahW_e');
  late final _gsl_sf_coupling_RacahW_e =
      _gsl_sf_coupling_RacahW_ePtr.asFunction<
          int Function(
              int, int, int, int, int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_coupling_RacahW(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_jd,
    int two_je,
    int two_jf,
  ) {
    return _gsl_sf_coupling_RacahW(
      two_ja,
      two_jb,
      two_jc,
      two_jd,
      two_je,
      two_jf,
    );
  }

  late final _gsl_sf_coupling_RacahWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('gsl_sf_coupling_RacahW');
  late final _gsl_sf_coupling_RacahW = _gsl_sf_coupling_RacahWPtr
      .asFunction<double Function(int, int, int, int, int, int)>();

  int gsl_sf_coupling_9j_e(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_jd,
    int two_je,
    int two_jf,
    int two_jg,
    int two_jh,
    int two_ji,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_coupling_9j_e(
      two_ja,
      two_jb,
      two_jc,
      two_jd,
      two_je,
      two_jf,
      two_jg,
      two_jh,
      two_ji,
      result,
    );
  }

  late final _gsl_sf_coupling_9j_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_coupling_9j_e');
  late final _gsl_sf_coupling_9j_e = _gsl_sf_coupling_9j_ePtr.asFunction<
      int Function(int, int, int, int, int, int, int, int, int,
          ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_coupling_9j(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_jd,
    int two_je,
    int two_jf,
    int two_jg,
    int two_jh,
    int two_ji,
  ) {
    return _gsl_sf_coupling_9j(
      two_ja,
      two_jb,
      two_jc,
      two_jd,
      two_je,
      two_jf,
      two_jg,
      two_jh,
      two_ji,
    );
  }

  late final _gsl_sf_coupling_9jPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('gsl_sf_coupling_9j');
  late final _gsl_sf_coupling_9j = _gsl_sf_coupling_9jPtr.asFunction<
      double Function(int, int, int, int, int, int, int, int, int)>();

  int gsl_sf_coupling_6j_INCORRECT_e(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_jd,
    int two_je,
    int two_jf,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_coupling_6j_INCORRECT_e(
      two_ja,
      two_jb,
      two_jc,
      two_jd,
      two_je,
      two_jf,
      result,
    );
  }

  late final _gsl_sf_coupling_6j_INCORRECT_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_coupling_6j_INCORRECT_e');
  late final _gsl_sf_coupling_6j_INCORRECT_e =
      _gsl_sf_coupling_6j_INCORRECT_ePtr.asFunction<
          int Function(
              int, int, int, int, int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_coupling_6j_INCORRECT(
    int two_ja,
    int two_jb,
    int two_jc,
    int two_jd,
    int two_je,
    int two_jf,
  ) {
    return _gsl_sf_coupling_6j_INCORRECT(
      two_ja,
      two_jb,
      two_jc,
      two_jd,
      two_je,
      two_jf,
    );
  }

  late final _gsl_sf_coupling_6j_INCORRECTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('gsl_sf_coupling_6j_INCORRECT');
  late final _gsl_sf_coupling_6j_INCORRECT = _gsl_sf_coupling_6j_INCORRECTPtr
      .asFunction<double Function(int, int, int, int, int, int)>();

  int gsl_sf_debye_1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_debye_1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_debye_1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_debye_1_e');
  late final _gsl_sf_debye_1_e = _gsl_sf_debye_1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_debye_1(
    double x,
  ) {
    return _gsl_sf_debye_1(
      x,
    );
  }

  late final _gsl_sf_debye_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_debye_1');
  late final _gsl_sf_debye_1 =
      _gsl_sf_debye_1Ptr.asFunction<double Function(double)>();

  int gsl_sf_debye_2_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_debye_2_e(
      x,
      result,
    );
  }

  late final _gsl_sf_debye_2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_debye_2_e');
  late final _gsl_sf_debye_2_e = _gsl_sf_debye_2_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_debye_2(
    double x,
  ) {
    return _gsl_sf_debye_2(
      x,
    );
  }

  late final _gsl_sf_debye_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_debye_2');
  late final _gsl_sf_debye_2 =
      _gsl_sf_debye_2Ptr.asFunction<double Function(double)>();

  int gsl_sf_debye_3_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_debye_3_e(
      x,
      result,
    );
  }

  late final _gsl_sf_debye_3_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_debye_3_e');
  late final _gsl_sf_debye_3_e = _gsl_sf_debye_3_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_debye_3(
    double x,
  ) {
    return _gsl_sf_debye_3(
      x,
    );
  }

  late final _gsl_sf_debye_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_debye_3');
  late final _gsl_sf_debye_3 =
      _gsl_sf_debye_3Ptr.asFunction<double Function(double)>();

  int gsl_sf_debye_4_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_debye_4_e(
      x,
      result,
    );
  }

  late final _gsl_sf_debye_4_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_debye_4_e');
  late final _gsl_sf_debye_4_e = _gsl_sf_debye_4_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_debye_4(
    double x,
  ) {
    return _gsl_sf_debye_4(
      x,
    );
  }

  late final _gsl_sf_debye_4Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_debye_4');
  late final _gsl_sf_debye_4 =
      _gsl_sf_debye_4Ptr.asFunction<double Function(double)>();

  int gsl_sf_debye_5_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_debye_5_e(
      x,
      result,
    );
  }

  late final _gsl_sf_debye_5_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_debye_5_e');
  late final _gsl_sf_debye_5_e = _gsl_sf_debye_5_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_debye_5(
    double x,
  ) {
    return _gsl_sf_debye_5(
      x,
    );
  }

  late final _gsl_sf_debye_5Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_debye_5');
  late final _gsl_sf_debye_5 =
      _gsl_sf_debye_5Ptr.asFunction<double Function(double)>();

  int gsl_sf_debye_6_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_debye_6_e(
      x,
      result,
    );
  }

  late final _gsl_sf_debye_6_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_debye_6_e');
  late final _gsl_sf_debye_6_e = _gsl_sf_debye_6_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_debye_6(
    double x,
  ) {
    return _gsl_sf_debye_6(
      x,
    );
  }

  late final _gsl_sf_debye_6Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_debye_6');
  late final _gsl_sf_debye_6 =
      _gsl_sf_debye_6Ptr.asFunction<double Function(double)>();

  int gsl_sf_multiply_e(
    double x,
    double y,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_multiply_e(
      x,
      y,
      result,
    );
  }

  late final _gsl_sf_multiply_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_multiply_e');
  late final _gsl_sf_multiply_e = _gsl_sf_multiply_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_multiply(
    double x,
    double y,
  ) {
    return _gsl_sf_multiply(
      x,
      y,
    );
  }

  late final _gsl_sf_multiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_multiply');
  late final _gsl_sf_multiply =
      _gsl_sf_multiplyPtr.asFunction<double Function(double, double)>();

  int gsl_sf_multiply_err_e(
    double x,
    double dx,
    double y,
    double dy,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_multiply_err_e(
      x,
      dx,
      y,
      dy,
      result,
    );
  }

  late final _gsl_sf_multiply_err_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_multiply_err_e');
  late final _gsl_sf_multiply_err_e = _gsl_sf_multiply_err_ePtr.asFunction<
      int Function(
          double, double, double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_ellint_Kcomp_e(
    double k,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_Kcomp_e(
      k,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_Kcomp_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_Kcomp_e');
  late final _gsl_sf_ellint_Kcomp_e = _gsl_sf_ellint_Kcomp_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_Kcomp(
    double k,
    int mode,
  ) {
    return _gsl_sf_ellint_Kcomp(
      k,
      mode,
    );
  }

  late final _gsl_sf_ellint_KcompPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_ellint_Kcomp');
  late final _gsl_sf_ellint_Kcomp =
      _gsl_sf_ellint_KcompPtr.asFunction<double Function(double, int)>();

  int gsl_sf_ellint_Ecomp_e(
    double k,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_Ecomp_e(
      k,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_Ecomp_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_Ecomp_e');
  late final _gsl_sf_ellint_Ecomp_e = _gsl_sf_ellint_Ecomp_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_Ecomp(
    double k,
    int mode,
  ) {
    return _gsl_sf_ellint_Ecomp(
      k,
      mode,
    );
  }

  late final _gsl_sf_ellint_EcompPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_ellint_Ecomp');
  late final _gsl_sf_ellint_Ecomp =
      _gsl_sf_ellint_EcompPtr.asFunction<double Function(double, int)>();

  int gsl_sf_ellint_Pcomp_e(
    double k,
    double n,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_Pcomp_e(
      k,
      n,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_Pcomp_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_Pcomp_e');
  late final _gsl_sf_ellint_Pcomp_e = _gsl_sf_ellint_Pcomp_ePtr.asFunction<
      int Function(double, double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_Pcomp(
    double k,
    double n,
    int mode,
  ) {
    return _gsl_sf_ellint_Pcomp(
      k,
      n,
      mode,
    );
  }

  late final _gsl_sf_ellint_PcompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, gsl_mode_t)>>('gsl_sf_ellint_Pcomp');
  late final _gsl_sf_ellint_Pcomp = _gsl_sf_ellint_PcompPtr
      .asFunction<double Function(double, double, int)>();

  int gsl_sf_ellint_Dcomp_e(
    double k,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_Dcomp_e(
      k,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_Dcomp_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_Dcomp_e');
  late final _gsl_sf_ellint_Dcomp_e = _gsl_sf_ellint_Dcomp_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_Dcomp(
    double k,
    int mode,
  ) {
    return _gsl_sf_ellint_Dcomp(
      k,
      mode,
    );
  }

  late final _gsl_sf_ellint_DcompPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, gsl_mode_t)>>(
          'gsl_sf_ellint_Dcomp');
  late final _gsl_sf_ellint_Dcomp =
      _gsl_sf_ellint_DcompPtr.asFunction<double Function(double, int)>();

  int gsl_sf_ellint_F_e(
    double phi,
    double k,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_F_e(
      phi,
      k,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_F_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_F_e');
  late final _gsl_sf_ellint_F_e = _gsl_sf_ellint_F_ePtr.asFunction<
      int Function(double, double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_F(
    double phi,
    double k,
    int mode,
  ) {
    return _gsl_sf_ellint_F(
      phi,
      k,
      mode,
    );
  }

  late final _gsl_sf_ellint_FPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, gsl_mode_t)>>('gsl_sf_ellint_F');
  late final _gsl_sf_ellint_F =
      _gsl_sf_ellint_FPtr.asFunction<double Function(double, double, int)>();

  int gsl_sf_ellint_E_e(
    double phi,
    double k,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_E_e(
      phi,
      k,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_E_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_E_e');
  late final _gsl_sf_ellint_E_e = _gsl_sf_ellint_E_ePtr.asFunction<
      int Function(double, double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_E(
    double phi,
    double k,
    int mode,
  ) {
    return _gsl_sf_ellint_E(
      phi,
      k,
      mode,
    );
  }

  late final _gsl_sf_ellint_EPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, gsl_mode_t)>>('gsl_sf_ellint_E');
  late final _gsl_sf_ellint_E =
      _gsl_sf_ellint_EPtr.asFunction<double Function(double, double, int)>();

  int gsl_sf_ellint_P_e(
    double phi,
    double k,
    double n,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_P_e(
      phi,
      k,
      n,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_P_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_P_e');
  late final _gsl_sf_ellint_P_e = _gsl_sf_ellint_P_ePtr.asFunction<
      int Function(double, double, double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_P(
    double phi,
    double k,
    double n,
    int mode,
  ) {
    return _gsl_sf_ellint_P(
      phi,
      k,
      n,
      mode,
    );
  }

  late final _gsl_sf_ellint_PPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double,
              gsl_mode_t)>>('gsl_sf_ellint_P');
  late final _gsl_sf_ellint_P = _gsl_sf_ellint_PPtr
      .asFunction<double Function(double, double, double, int)>();

  int gsl_sf_ellint_D_e(
    double phi,
    double k,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_D_e(
      phi,
      k,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_D_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_D_e');
  late final _gsl_sf_ellint_D_e = _gsl_sf_ellint_D_ePtr.asFunction<
      int Function(double, double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_D(
    double phi,
    double k,
    int mode,
  ) {
    return _gsl_sf_ellint_D(
      phi,
      k,
      mode,
    );
  }

  late final _gsl_sf_ellint_DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, gsl_mode_t)>>('gsl_sf_ellint_D');
  late final _gsl_sf_ellint_D =
      _gsl_sf_ellint_DPtr.asFunction<double Function(double, double, int)>();

  int gsl_sf_ellint_RC_e(
    double x,
    double y,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_RC_e(
      x,
      y,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_RC_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_RC_e');
  late final _gsl_sf_ellint_RC_e = _gsl_sf_ellint_RC_ePtr.asFunction<
      int Function(double, double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_RC(
    double x,
    double y,
    int mode,
  ) {
    return _gsl_sf_ellint_RC(
      x,
      y,
      mode,
    );
  }

  late final _gsl_sf_ellint_RCPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, gsl_mode_t)>>('gsl_sf_ellint_RC');
  late final _gsl_sf_ellint_RC =
      _gsl_sf_ellint_RCPtr.asFunction<double Function(double, double, int)>();

  int gsl_sf_ellint_RD_e(
    double x,
    double y,
    double z,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_RD_e(
      x,
      y,
      z,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_RD_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_RD_e');
  late final _gsl_sf_ellint_RD_e = _gsl_sf_ellint_RD_ePtr.asFunction<
      int Function(double, double, double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_RD(
    double x,
    double y,
    double z,
    int mode,
  ) {
    return _gsl_sf_ellint_RD(
      x,
      y,
      z,
      mode,
    );
  }

  late final _gsl_sf_ellint_RDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double,
              gsl_mode_t)>>('gsl_sf_ellint_RD');
  late final _gsl_sf_ellint_RD = _gsl_sf_ellint_RDPtr
      .asFunction<double Function(double, double, double, int)>();

  int gsl_sf_ellint_RF_e(
    double x,
    double y,
    double z,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_RF_e(
      x,
      y,
      z,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_RF_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, gsl_mode_t,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_RF_e');
  late final _gsl_sf_ellint_RF_e = _gsl_sf_ellint_RF_ePtr.asFunction<
      int Function(double, double, double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_RF(
    double x,
    double y,
    double z,
    int mode,
  ) {
    return _gsl_sf_ellint_RF(
      x,
      y,
      z,
      mode,
    );
  }

  late final _gsl_sf_ellint_RFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double,
              gsl_mode_t)>>('gsl_sf_ellint_RF');
  late final _gsl_sf_ellint_RF = _gsl_sf_ellint_RFPtr
      .asFunction<double Function(double, double, double, int)>();

  int gsl_sf_ellint_RJ_e(
    double x,
    double y,
    double z,
    double p,
    int mode,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_ellint_RJ_e(
      x,
      y,
      z,
      p,
      mode,
      result,
    );
  }

  late final _gsl_sf_ellint_RJ_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              gsl_mode_t, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_ellint_RJ_e');
  late final _gsl_sf_ellint_RJ_e = _gsl_sf_ellint_RJ_ePtr.asFunction<
      int Function(
          double, double, double, double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_ellint_RJ(
    double x,
    double y,
    double z,
    double p,
    int mode,
  ) {
    return _gsl_sf_ellint_RJ(
      x,
      y,
      z,
      p,
      mode,
    );
  }

  late final _gsl_sf_ellint_RJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              gsl_mode_t)>>('gsl_sf_ellint_RJ');
  late final _gsl_sf_ellint_RJ = _gsl_sf_ellint_RJPtr
      .asFunction<double Function(double, double, double, double, int)>();

  int gsl_sf_erfc_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_erfc_e(
      x,
      result,
    );
  }

  late final _gsl_sf_erfc_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_erfc_e');
  late final _gsl_sf_erfc_e = _gsl_sf_erfc_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_erfc(
    double x,
  ) {
    return _gsl_sf_erfc(
      x,
    );
  }

  late final _gsl_sf_erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_erfc');
  late final _gsl_sf_erfc =
      _gsl_sf_erfcPtr.asFunction<double Function(double)>();

  int gsl_sf_log_erfc_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_log_erfc_e(
      x,
      result,
    );
  }

  late final _gsl_sf_log_erfc_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_log_erfc_e');
  late final _gsl_sf_log_erfc_e = _gsl_sf_log_erfc_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_log_erfc(
    double x,
  ) {
    return _gsl_sf_log_erfc(
      x,
    );
  }

  late final _gsl_sf_log_erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_log_erfc');
  late final _gsl_sf_log_erfc =
      _gsl_sf_log_erfcPtr.asFunction<double Function(double)>();

  int gsl_sf_erf_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_erf_e(
      x,
      result,
    );
  }

  late final _gsl_sf_erf_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_erf_e');
  late final _gsl_sf_erf_e = _gsl_sf_erf_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_erf(
    double x,
  ) {
    return _gsl_sf_erf(
      x,
    );
  }

  late final _gsl_sf_erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_erf');
  late final _gsl_sf_erf = _gsl_sf_erfPtr.asFunction<double Function(double)>();

  int gsl_sf_erf_Z_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_erf_Z_e(
      x,
      result,
    );
  }

  late final _gsl_sf_erf_Z_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_erf_Z_e');
  late final _gsl_sf_erf_Z_e = _gsl_sf_erf_Z_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_erf_Q_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_erf_Q_e(
      x,
      result,
    );
  }

  late final _gsl_sf_erf_Q_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_erf_Q_e');
  late final _gsl_sf_erf_Q_e = _gsl_sf_erf_Q_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_erf_Z(
    double x,
  ) {
    return _gsl_sf_erf_Z(
      x,
    );
  }

  late final _gsl_sf_erf_ZPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_erf_Z');
  late final _gsl_sf_erf_Z =
      _gsl_sf_erf_ZPtr.asFunction<double Function(double)>();

  double gsl_sf_erf_Q(
    double x,
  ) {
    return _gsl_sf_erf_Q(
      x,
    );
  }

  late final _gsl_sf_erf_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_erf_Q');
  late final _gsl_sf_erf_Q =
      _gsl_sf_erf_QPtr.asFunction<double Function(double)>();

  int gsl_sf_hazard_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hazard_e(
      x,
      result,
    );
  }

  late final _gsl_sf_hazard_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hazard_e');
  late final _gsl_sf_hazard_e = _gsl_sf_hazard_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hazard(
    double x,
  ) {
    return _gsl_sf_hazard(
      x,
    );
  }

  late final _gsl_sf_hazardPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_hazard');
  late final _gsl_sf_hazard =
      _gsl_sf_hazardPtr.asFunction<double Function(double)>();

  int gsl_sf_expint_E1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expint_E1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_expint_E1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expint_E1_e');
  late final _gsl_sf_expint_E1_e = _gsl_sf_expint_E1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expint_E1(
    double x,
  ) {
    return _gsl_sf_expint_E1(
      x,
    );
  }

  late final _gsl_sf_expint_E1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_expint_E1');
  late final _gsl_sf_expint_E1 =
      _gsl_sf_expint_E1Ptr.asFunction<double Function(double)>();

  int gsl_sf_expint_E2_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expint_E2_e(
      x,
      result,
    );
  }

  late final _gsl_sf_expint_E2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expint_E2_e');
  late final _gsl_sf_expint_E2_e = _gsl_sf_expint_E2_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expint_E2(
    double x,
  ) {
    return _gsl_sf_expint_E2(
      x,
    );
  }

  late final _gsl_sf_expint_E2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_expint_E2');
  late final _gsl_sf_expint_E2 =
      _gsl_sf_expint_E2Ptr.asFunction<double Function(double)>();

  int gsl_sf_expint_En_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expint_En_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_expint_En_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expint_En_e');
  late final _gsl_sf_expint_En_e = _gsl_sf_expint_En_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expint_En(
    int n,
    double x,
  ) {
    return _gsl_sf_expint_En(
      n,
      x,
    );
  }

  late final _gsl_sf_expint_EnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_expint_En');
  late final _gsl_sf_expint_En =
      _gsl_sf_expint_EnPtr.asFunction<double Function(int, double)>();

  int gsl_sf_expint_E1_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expint_E1_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_expint_E1_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expint_E1_scaled_e');
  late final _gsl_sf_expint_E1_scaled_e = _gsl_sf_expint_E1_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expint_E1_scaled(
    double x,
  ) {
    return _gsl_sf_expint_E1_scaled(
      x,
    );
  }

  late final _gsl_sf_expint_E1_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_expint_E1_scaled');
  late final _gsl_sf_expint_E1_scaled =
      _gsl_sf_expint_E1_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_expint_E2_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expint_E2_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_expint_E2_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expint_E2_scaled_e');
  late final _gsl_sf_expint_E2_scaled_e = _gsl_sf_expint_E2_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expint_E2_scaled(
    double x,
  ) {
    return _gsl_sf_expint_E2_scaled(
      x,
    );
  }

  late final _gsl_sf_expint_E2_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_expint_E2_scaled');
  late final _gsl_sf_expint_E2_scaled =
      _gsl_sf_expint_E2_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_expint_En_scaled_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expint_En_scaled_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_expint_En_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expint_En_scaled_e');
  late final _gsl_sf_expint_En_scaled_e = _gsl_sf_expint_En_scaled_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expint_En_scaled(
    int n,
    double x,
  ) {
    return _gsl_sf_expint_En_scaled(
      n,
      x,
    );
  }

  late final _gsl_sf_expint_En_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_expint_En_scaled');
  late final _gsl_sf_expint_En_scaled =
      _gsl_sf_expint_En_scaledPtr.asFunction<double Function(int, double)>();

  int gsl_sf_expint_Ei_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expint_Ei_e(
      x,
      result,
    );
  }

  late final _gsl_sf_expint_Ei_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expint_Ei_e');
  late final _gsl_sf_expint_Ei_e = _gsl_sf_expint_Ei_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expint_Ei(
    double x,
  ) {
    return _gsl_sf_expint_Ei(
      x,
    );
  }

  late final _gsl_sf_expint_EiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_expint_Ei');
  late final _gsl_sf_expint_Ei =
      _gsl_sf_expint_EiPtr.asFunction<double Function(double)>();

  int gsl_sf_expint_Ei_scaled_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expint_Ei_scaled_e(
      x,
      result,
    );
  }

  late final _gsl_sf_expint_Ei_scaled_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expint_Ei_scaled_e');
  late final _gsl_sf_expint_Ei_scaled_e = _gsl_sf_expint_Ei_scaled_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expint_Ei_scaled(
    double x,
  ) {
    return _gsl_sf_expint_Ei_scaled(
      x,
    );
  }

  late final _gsl_sf_expint_Ei_scaledPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_expint_Ei_scaled');
  late final _gsl_sf_expint_Ei_scaled =
      _gsl_sf_expint_Ei_scaledPtr.asFunction<double Function(double)>();

  int gsl_sf_Shi_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_Shi_e(
      x,
      result,
    );
  }

  late final _gsl_sf_Shi_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_Shi_e');
  late final _gsl_sf_Shi_e = _gsl_sf_Shi_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_Shi(
    double x,
  ) {
    return _gsl_sf_Shi(
      x,
    );
  }

  late final _gsl_sf_ShiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_Shi');
  late final _gsl_sf_Shi = _gsl_sf_ShiPtr.asFunction<double Function(double)>();

  int gsl_sf_Chi_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_Chi_e(
      x,
      result,
    );
  }

  late final _gsl_sf_Chi_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_Chi_e');
  late final _gsl_sf_Chi_e = _gsl_sf_Chi_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_Chi(
    double x,
  ) {
    return _gsl_sf_Chi(
      x,
    );
  }

  late final _gsl_sf_ChiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_Chi');
  late final _gsl_sf_Chi = _gsl_sf_ChiPtr.asFunction<double Function(double)>();

  int gsl_sf_expint_3_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_expint_3_e(
      x,
      result,
    );
  }

  late final _gsl_sf_expint_3_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_expint_3_e');
  late final _gsl_sf_expint_3_e = _gsl_sf_expint_3_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_expint_3(
    double x,
  ) {
    return _gsl_sf_expint_3(
      x,
    );
  }

  late final _gsl_sf_expint_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_expint_3');
  late final _gsl_sf_expint_3 =
      _gsl_sf_expint_3Ptr.asFunction<double Function(double)>();

  int gsl_sf_Si_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_Si_e(
      x,
      result,
    );
  }

  late final _gsl_sf_Si_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_Si_e');
  late final _gsl_sf_Si_e = _gsl_sf_Si_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_Si(
    double x,
  ) {
    return _gsl_sf_Si(
      x,
    );
  }

  late final _gsl_sf_SiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_sf_Si');
  late final _gsl_sf_Si = _gsl_sf_SiPtr.asFunction<double Function(double)>();

  int gsl_sf_Ci_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_Ci_e(
      x,
      result,
    );
  }

  late final _gsl_sf_Ci_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_Ci_e');
  late final _gsl_sf_Ci_e = _gsl_sf_Ci_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_Ci(
    double x,
  ) {
    return _gsl_sf_Ci(
      x,
    );
  }

  late final _gsl_sf_CiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('gsl_sf_Ci');
  late final _gsl_sf_Ci = _gsl_sf_CiPtr.asFunction<double Function(double)>();

  int gsl_sf_atanint_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_atanint_e(
      x,
      result,
    );
  }

  late final _gsl_sf_atanint_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_atanint_e');
  late final _gsl_sf_atanint_e = _gsl_sf_atanint_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_atanint(
    double x,
  ) {
    return _gsl_sf_atanint(
      x,
    );
  }

  late final _gsl_sf_atanintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_atanint');
  late final _gsl_sf_atanint =
      _gsl_sf_atanintPtr.asFunction<double Function(double)>();

  int gsl_sf_lngamma_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lngamma_e(
      x,
      result,
    );
  }

  late final _gsl_sf_lngamma_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lngamma_e');
  late final _gsl_sf_lngamma_e = _gsl_sf_lngamma_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lngamma(
    double x,
  ) {
    return _gsl_sf_lngamma(
      x,
    );
  }

  late final _gsl_sf_lngammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_lngamma');
  late final _gsl_sf_lngamma =
      _gsl_sf_lngammaPtr.asFunction<double Function(double)>();

  int gsl_sf_lngamma_sgn_e(
    double x,
    ffi.Pointer<gsl_sf_result> result_lg,
    ffi.Pointer<ffi.Double> sgn,
  ) {
    return _gsl_sf_lngamma_sgn_e(
      x,
      result_lg,
      sgn,
    );
  }

  late final _gsl_sf_lngamma_sgn_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_lngamma_sgn_e');
  late final _gsl_sf_lngamma_sgn_e = _gsl_sf_lngamma_sgn_ePtr.asFunction<
      int Function(
          double, ffi.Pointer<gsl_sf_result>, ffi.Pointer<ffi.Double>)>();

  int gsl_sf_gamma_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gamma_e(
      x,
      result,
    );
  }

  late final _gsl_sf_gamma_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gamma_e');
  late final _gsl_sf_gamma_e = _gsl_sf_gamma_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_gamma(
    double x,
  ) {
    return _gsl_sf_gamma(
      x,
    );
  }

  late final _gsl_sf_gammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_gamma');
  late final _gsl_sf_gamma =
      _gsl_sf_gammaPtr.asFunction<double Function(double)>();

  int gsl_sf_gammastar_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gammastar_e(
      x,
      result,
    );
  }

  late final _gsl_sf_gammastar_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gammastar_e');
  late final _gsl_sf_gammastar_e = _gsl_sf_gammastar_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_gammastar(
    double x,
  ) {
    return _gsl_sf_gammastar(
      x,
    );
  }

  late final _gsl_sf_gammastarPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_gammastar');
  late final _gsl_sf_gammastar =
      _gsl_sf_gammastarPtr.asFunction<double Function(double)>();

  int gsl_sf_gammainv_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gammainv_e(
      x,
      result,
    );
  }

  late final _gsl_sf_gammainv_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gammainv_e');
  late final _gsl_sf_gammainv_e = _gsl_sf_gammainv_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_gammainv(
    double x,
  ) {
    return _gsl_sf_gammainv(
      x,
    );
  }

  late final _gsl_sf_gammainvPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_gammainv');
  late final _gsl_sf_gammainv =
      _gsl_sf_gammainvPtr.asFunction<double Function(double)>();

  int gsl_sf_lngamma_complex_e(
    double zr,
    double zi,
    ffi.Pointer<gsl_sf_result> lnr,
    ffi.Pointer<gsl_sf_result> arg,
  ) {
    return _gsl_sf_lngamma_complex_e(
      zr,
      zi,
      lnr,
      arg,
    );
  }

  late final _gsl_sf_lngamma_complex_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lngamma_complex_e');
  late final _gsl_sf_lngamma_complex_e =
      _gsl_sf_lngamma_complex_ePtr.asFunction<
          int Function(double, double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_taylorcoeff_e(
    int n,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_taylorcoeff_e(
      n,
      x,
      result,
    );
  }

  late final _gsl_sf_taylorcoeff_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_taylorcoeff_e');
  late final _gsl_sf_taylorcoeff_e = _gsl_sf_taylorcoeff_ePtr
      .asFunction<int Function(int, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_taylorcoeff(
    int n,
    double x,
  ) {
    return _gsl_sf_taylorcoeff(
      n,
      x,
    );
  }

  late final _gsl_sf_taylorcoeffPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Double)>>(
          'gsl_sf_taylorcoeff');
  late final _gsl_sf_taylorcoeff =
      _gsl_sf_taylorcoeffPtr.asFunction<double Function(int, double)>();

  int gsl_sf_fact_e(
    int n,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_fact_e(
      n,
      result,
    );
  }

  late final _gsl_sf_fact_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_fact_e');
  late final _gsl_sf_fact_e = _gsl_sf_fact_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_fact(
    int n,
  ) {
    return _gsl_sf_fact(
      n,
    );
  }

  late final _gsl_sf_factPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_fact');
  late final _gsl_sf_fact = _gsl_sf_factPtr.asFunction<double Function(int)>();

  int gsl_sf_doublefact_e(
    int n,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_doublefact_e(
      n,
      result,
    );
  }

  late final _gsl_sf_doublefact_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_doublefact_e');
  late final _gsl_sf_doublefact_e = _gsl_sf_doublefact_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_doublefact(
    int n,
  ) {
    return _gsl_sf_doublefact(
      n,
    );
  }

  late final _gsl_sf_doublefactPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_doublefact');
  late final _gsl_sf_doublefact =
      _gsl_sf_doublefactPtr.asFunction<double Function(int)>();

  int gsl_sf_lnfact_e(
    int n,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lnfact_e(
      n,
      result,
    );
  }

  late final _gsl_sf_lnfact_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lnfact_e');
  late final _gsl_sf_lnfact_e = _gsl_sf_lnfact_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lnfact(
    int n,
  ) {
    return _gsl_sf_lnfact(
      n,
    );
  }

  late final _gsl_sf_lnfactPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_lnfact');
  late final _gsl_sf_lnfact =
      _gsl_sf_lnfactPtr.asFunction<double Function(int)>();

  int gsl_sf_lndoublefact_e(
    int n,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lndoublefact_e(
      n,
      result,
    );
  }

  late final _gsl_sf_lndoublefact_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lndoublefact_e');
  late final _gsl_sf_lndoublefact_e = _gsl_sf_lndoublefact_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lndoublefact(
    int n,
  ) {
    return _gsl_sf_lndoublefact(
      n,
    );
  }

  late final _gsl_sf_lndoublefactPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32)>>(
          'gsl_sf_lndoublefact');
  late final _gsl_sf_lndoublefact =
      _gsl_sf_lndoublefactPtr.asFunction<double Function(int)>();

  int gsl_sf_lnchoose_e(
    int n,
    int m,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lnchoose_e(
      n,
      m,
      result,
    );
  }

  late final _gsl_sf_lnchoose_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32, ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lnchoose_e');
  late final _gsl_sf_lnchoose_e = _gsl_sf_lnchoose_ePtr
      .asFunction<int Function(int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lnchoose(
    int n,
    int m,
  ) {
    return _gsl_sf_lnchoose(
      n,
      m,
    );
  }

  late final _gsl_sf_lnchoosePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Uint32)>>(
          'gsl_sf_lnchoose');
  late final _gsl_sf_lnchoose =
      _gsl_sf_lnchoosePtr.asFunction<double Function(int, int)>();

  int gsl_sf_choose_e(
    int n,
    int m,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_choose_e(
      n,
      m,
      result,
    );
  }

  late final _gsl_sf_choose_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32, ffi.Uint32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_choose_e');
  late final _gsl_sf_choose_e = _gsl_sf_choose_ePtr
      .asFunction<int Function(int, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_choose(
    int n,
    int m,
  ) {
    return _gsl_sf_choose(
      n,
      m,
    );
  }

  late final _gsl_sf_choosePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Uint32)>>(
          'gsl_sf_choose');
  late final _gsl_sf_choose =
      _gsl_sf_choosePtr.asFunction<double Function(int, int)>();

  int gsl_sf_lnpoch_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lnpoch_e(
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_lnpoch_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lnpoch_e');
  late final _gsl_sf_lnpoch_e = _gsl_sf_lnpoch_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lnpoch(
    double a,
    double x,
  ) {
    return _gsl_sf_lnpoch(
      a,
      x,
    );
  }

  late final _gsl_sf_lnpochPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_lnpoch');
  late final _gsl_sf_lnpoch =
      _gsl_sf_lnpochPtr.asFunction<double Function(double, double)>();

  int gsl_sf_lnpoch_sgn_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
    ffi.Pointer<ffi.Double> sgn,
  ) {
    return _gsl_sf_lnpoch_sgn_e(
      a,
      x,
      result,
      sgn,
    );
  }

  late final _gsl_sf_lnpoch_sgn_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_lnpoch_sgn_e');
  late final _gsl_sf_lnpoch_sgn_e = _gsl_sf_lnpoch_sgn_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_sf_poch_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_poch_e(
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_poch_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_poch_e');
  late final _gsl_sf_poch_e = _gsl_sf_poch_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_poch(
    double a,
    double x,
  ) {
    return _gsl_sf_poch(
      a,
      x,
    );
  }

  late final _gsl_sf_pochPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_poch');
  late final _gsl_sf_poch =
      _gsl_sf_pochPtr.asFunction<double Function(double, double)>();

  int gsl_sf_pochrel_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_pochrel_e(
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_pochrel_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_pochrel_e');
  late final _gsl_sf_pochrel_e = _gsl_sf_pochrel_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_pochrel(
    double a,
    double x,
  ) {
    return _gsl_sf_pochrel(
      a,
      x,
    );
  }

  late final _gsl_sf_pochrelPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_pochrel');
  late final _gsl_sf_pochrel =
      _gsl_sf_pochrelPtr.asFunction<double Function(double, double)>();

  int gsl_sf_gamma_inc_Q_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gamma_inc_Q_e(
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_gamma_inc_Q_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gamma_inc_Q_e');
  late final _gsl_sf_gamma_inc_Q_e = _gsl_sf_gamma_inc_Q_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_gamma_inc_Q(
    double a,
    double x,
  ) {
    return _gsl_sf_gamma_inc_Q(
      a,
      x,
    );
  }

  late final _gsl_sf_gamma_inc_QPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_gamma_inc_Q');
  late final _gsl_sf_gamma_inc_Q =
      _gsl_sf_gamma_inc_QPtr.asFunction<double Function(double, double)>();

  int gsl_sf_gamma_inc_P_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gamma_inc_P_e(
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_gamma_inc_P_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gamma_inc_P_e');
  late final _gsl_sf_gamma_inc_P_e = _gsl_sf_gamma_inc_P_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_gamma_inc_P(
    double a,
    double x,
  ) {
    return _gsl_sf_gamma_inc_P(
      a,
      x,
    );
  }

  late final _gsl_sf_gamma_inc_PPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_gamma_inc_P');
  late final _gsl_sf_gamma_inc_P =
      _gsl_sf_gamma_inc_PPtr.asFunction<double Function(double, double)>();

  int gsl_sf_gamma_inc_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_gamma_inc_e(
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_gamma_inc_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_gamma_inc_e');
  late final _gsl_sf_gamma_inc_e = _gsl_sf_gamma_inc_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_gamma_inc(
    double a,
    double x,
  ) {
    return _gsl_sf_gamma_inc(
      a,
      x,
    );
  }

  late final _gsl_sf_gamma_incPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_gamma_inc');
  late final _gsl_sf_gamma_inc =
      _gsl_sf_gamma_incPtr.asFunction<double Function(double, double)>();

  int gsl_sf_lnbeta_e(
    double a,
    double b,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lnbeta_e(
      a,
      b,
      result,
    );
  }

  late final _gsl_sf_lnbeta_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lnbeta_e');
  late final _gsl_sf_lnbeta_e = _gsl_sf_lnbeta_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lnbeta(
    double a,
    double b,
  ) {
    return _gsl_sf_lnbeta(
      a,
      b,
    );
  }

  late final _gsl_sf_lnbetaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_lnbeta');
  late final _gsl_sf_lnbeta =
      _gsl_sf_lnbetaPtr.asFunction<double Function(double, double)>();

  int gsl_sf_lnbeta_sgn_e(
    double x,
    double y,
    ffi.Pointer<gsl_sf_result> result,
    ffi.Pointer<ffi.Double> sgn,
  ) {
    return _gsl_sf_lnbeta_sgn_e(
      x,
      y,
      result,
      sgn,
    );
  }

  late final _gsl_sf_lnbeta_sgn_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<ffi.Double>)>>('gsl_sf_lnbeta_sgn_e');
  late final _gsl_sf_lnbeta_sgn_e = _gsl_sf_lnbeta_sgn_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_sf_beta_e(
    double a,
    double b,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_beta_e(
      a,
      b,
      result,
    );
  }

  late final _gsl_sf_beta_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_beta_e');
  late final _gsl_sf_beta_e = _gsl_sf_beta_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_beta(
    double a,
    double b,
  ) {
    return _gsl_sf_beta(
      a,
      b,
    );
  }

  late final _gsl_sf_betaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_beta');
  late final _gsl_sf_beta =
      _gsl_sf_betaPtr.asFunction<double Function(double, double)>();

  int gsl_sf_beta_inc_e(
    double a,
    double b,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_beta_inc_e(
      a,
      b,
      x,
      result,
    );
  }

  late final _gsl_sf_beta_inc_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_beta_inc_e');
  late final _gsl_sf_beta_inc_e = _gsl_sf_beta_inc_ePtr.asFunction<
      int Function(double, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_beta_inc(
    double a,
    double b,
    double x,
  ) {
    return _gsl_sf_beta_inc(
      a,
      b,
      x,
    );
  }

  late final _gsl_sf_beta_incPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_sf_beta_inc');
  late final _gsl_sf_beta_inc =
      _gsl_sf_beta_incPtr.asFunction<double Function(double, double, double)>();

  int gsl_sf_laguerre_1_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_laguerre_1_e(
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_laguerre_1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_laguerre_1_e');
  late final _gsl_sf_laguerre_1_e = _gsl_sf_laguerre_1_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_laguerre_2_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_laguerre_2_e(
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_laguerre_2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_laguerre_2_e');
  late final _gsl_sf_laguerre_2_e = _gsl_sf_laguerre_2_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_laguerre_3_e(
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_laguerre_3_e(
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_laguerre_3_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_laguerre_3_e');
  late final _gsl_sf_laguerre_3_e = _gsl_sf_laguerre_3_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_laguerre_1(
    double a,
    double x,
  ) {
    return _gsl_sf_laguerre_1(
      a,
      x,
    );
  }

  late final _gsl_sf_laguerre_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_laguerre_1');
  late final _gsl_sf_laguerre_1 =
      _gsl_sf_laguerre_1Ptr.asFunction<double Function(double, double)>();

  double gsl_sf_laguerre_2(
    double a,
    double x,
  ) {
    return _gsl_sf_laguerre_2(
      a,
      x,
    );
  }

  late final _gsl_sf_laguerre_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_laguerre_2');
  late final _gsl_sf_laguerre_2 =
      _gsl_sf_laguerre_2Ptr.asFunction<double Function(double, double)>();

  double gsl_sf_laguerre_3(
    double a,
    double x,
  ) {
    return _gsl_sf_laguerre_3(
      a,
      x,
    );
  }

  late final _gsl_sf_laguerre_3Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_laguerre_3');
  late final _gsl_sf_laguerre_3 =
      _gsl_sf_laguerre_3Ptr.asFunction<double Function(double, double)>();

  int gsl_sf_laguerre_n_e(
    int n,
    double a,
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_laguerre_n_e(
      n,
      a,
      x,
      result,
    );
  }

  late final _gsl_sf_laguerre_n_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_laguerre_n_e');
  late final _gsl_sf_laguerre_n_e = _gsl_sf_laguerre_n_ePtr.asFunction<
      int Function(int, double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_laguerre_n(
    int n,
    double a,
    double x,
  ) {
    return _gsl_sf_laguerre_n(
      n,
      a,
      x,
    );
  }

  late final _gsl_sf_laguerre_nPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Int32, ffi.Double, ffi.Double)>>('gsl_sf_laguerre_n');
  late final _gsl_sf_laguerre_n =
      _gsl_sf_laguerre_nPtr.asFunction<double Function(int, double, double)>();

  int gsl_sf_pow_int_e(
    double x,
    int n,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_pow_int_e(
      x,
      n,
      result,
    );
  }

  late final _gsl_sf_pow_int_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Int32,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_pow_int_e');
  late final _gsl_sf_pow_int_e = _gsl_sf_pow_int_ePtr
      .asFunction<int Function(double, int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_pow_int(
    double x,
    int n,
  ) {
    return _gsl_sf_pow_int(
      x,
      n,
    );
  }

  late final _gsl_sf_pow_intPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int32)>>(
          'gsl_sf_pow_int');
  late final _gsl_sf_pow_int =
      _gsl_sf_pow_intPtr.asFunction<double Function(double, int)>();

  int gsl_sf_sin_pi_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_sin_pi_e(
      x,
      result,
    );
  }

  late final _gsl_sf_sin_pi_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_sin_pi_e');
  late final _gsl_sf_sin_pi_e = _gsl_sf_sin_pi_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_sin_pi(
    double x,
  ) {
    return _gsl_sf_sin_pi(
      x,
    );
  }

  late final _gsl_sf_sin_piPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_sin_pi');
  late final _gsl_sf_sin_pi =
      _gsl_sf_sin_piPtr.asFunction<double Function(double)>();

  int gsl_sf_cos_pi_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_cos_pi_e(
      x,
      result,
    );
  }

  late final _gsl_sf_cos_pi_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_cos_pi_e');
  late final _gsl_sf_cos_pi_e = _gsl_sf_cos_pi_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_cos_pi(
    double x,
  ) {
    return _gsl_sf_cos_pi(
      x,
    );
  }

  late final _gsl_sf_cos_piPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_cos_pi');
  late final _gsl_sf_cos_pi =
      _gsl_sf_cos_piPtr.asFunction<double Function(double)>();

  int gsl_sf_synchrotron_1_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_synchrotron_1_e(
      x,
      result,
    );
  }

  late final _gsl_sf_synchrotron_1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_synchrotron_1_e');
  late final _gsl_sf_synchrotron_1_e = _gsl_sf_synchrotron_1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_synchrotron_1(
    double x,
  ) {
    return _gsl_sf_synchrotron_1(
      x,
    );
  }

  late final _gsl_sf_synchrotron_1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_synchrotron_1');
  late final _gsl_sf_synchrotron_1 =
      _gsl_sf_synchrotron_1Ptr.asFunction<double Function(double)>();

  int gsl_sf_synchrotron_2_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_synchrotron_2_e(
      x,
      result,
    );
  }

  late final _gsl_sf_synchrotron_2_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_synchrotron_2_e');
  late final _gsl_sf_synchrotron_2_e = _gsl_sf_synchrotron_2_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_synchrotron_2(
    double x,
  ) {
    return _gsl_sf_synchrotron_2(
      x,
    );
  }

  late final _gsl_sf_synchrotron_2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_synchrotron_2');
  late final _gsl_sf_synchrotron_2 =
      _gsl_sf_synchrotron_2Ptr.asFunction<double Function(double)>();

  int gsl_sf_sin_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_sin_e(
      x,
      result,
    );
  }

  late final _gsl_sf_sin_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_sin_e');
  late final _gsl_sf_sin_e = _gsl_sf_sin_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_sin(
    double x,
  ) {
    return _gsl_sf_sin(
      x,
    );
  }

  late final _gsl_sf_sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_sin');
  late final _gsl_sf_sin = _gsl_sf_sinPtr.asFunction<double Function(double)>();

  int gsl_sf_cos_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_cos_e(
      x,
      result,
    );
  }

  late final _gsl_sf_cos_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_cos_e');
  late final _gsl_sf_cos_e = _gsl_sf_cos_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_cos(
    double x,
  ) {
    return _gsl_sf_cos(
      x,
    );
  }

  late final _gsl_sf_cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_cos');
  late final _gsl_sf_cos = _gsl_sf_cosPtr.asFunction<double Function(double)>();

  int gsl_sf_hypot_e(
    double x,
    double y,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hypot_e(
      x,
      y,
      result,
    );
  }

  late final _gsl_sf_hypot_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hypot_e');
  late final _gsl_sf_hypot_e = _gsl_sf_hypot_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hypot(
    double x,
    double y,
  ) {
    return _gsl_sf_hypot(
      x,
      y,
    );
  }

  late final _gsl_sf_hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_hypot');
  late final _gsl_sf_hypot =
      _gsl_sf_hypotPtr.asFunction<double Function(double, double)>();

  int gsl_sf_complex_sin_e(
    double zr,
    double zi,
    ffi.Pointer<gsl_sf_result> szr,
    ffi.Pointer<gsl_sf_result> szi,
  ) {
    return _gsl_sf_complex_sin_e(
      zr,
      zi,
      szr,
      szi,
    );
  }

  late final _gsl_sf_complex_sin_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_complex_sin_e');
  late final _gsl_sf_complex_sin_e = _gsl_sf_complex_sin_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_complex_cos_e(
    double zr,
    double zi,
    ffi.Pointer<gsl_sf_result> czr,
    ffi.Pointer<gsl_sf_result> czi,
  ) {
    return _gsl_sf_complex_cos_e(
      zr,
      zi,
      czr,
      czi,
    );
  }

  late final _gsl_sf_complex_cos_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_complex_cos_e');
  late final _gsl_sf_complex_cos_e = _gsl_sf_complex_cos_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_complex_logsin_e(
    double zr,
    double zi,
    ffi.Pointer<gsl_sf_result> lszr,
    ffi.Pointer<gsl_sf_result> lszi,
  ) {
    return _gsl_sf_complex_logsin_e(
      zr,
      zi,
      lszr,
      lszi,
    );
  }

  late final _gsl_sf_complex_logsin_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_complex_logsin_e');
  late final _gsl_sf_complex_logsin_e = _gsl_sf_complex_logsin_ePtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_sinc_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_sinc_e(
      x,
      result,
    );
  }

  late final _gsl_sf_sinc_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_sinc_e');
  late final _gsl_sf_sinc_e = _gsl_sf_sinc_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_sinc(
    double x,
  ) {
    return _gsl_sf_sinc(
      x,
    );
  }

  late final _gsl_sf_sincPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_sinc');
  late final _gsl_sf_sinc =
      _gsl_sf_sincPtr.asFunction<double Function(double)>();

  int gsl_sf_lnsinh_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lnsinh_e(
      x,
      result,
    );
  }

  late final _gsl_sf_lnsinh_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lnsinh_e');
  late final _gsl_sf_lnsinh_e = _gsl_sf_lnsinh_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lnsinh(
    double x,
  ) {
    return _gsl_sf_lnsinh(
      x,
    );
  }

  late final _gsl_sf_lnsinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_lnsinh');
  late final _gsl_sf_lnsinh =
      _gsl_sf_lnsinhPtr.asFunction<double Function(double)>();

  int gsl_sf_lncosh_e(
    double x,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_lncosh_e(
      x,
      result,
    );
  }

  late final _gsl_sf_lncosh_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_lncosh_e');
  late final _gsl_sf_lncosh_e = _gsl_sf_lncosh_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_lncosh(
    double x,
  ) {
    return _gsl_sf_lncosh(
      x,
    );
  }

  late final _gsl_sf_lncoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_lncosh');
  late final _gsl_sf_lncosh =
      _gsl_sf_lncoshPtr.asFunction<double Function(double)>();

  int gsl_sf_polar_to_rect(
    double r,
    double theta,
    ffi.Pointer<gsl_sf_result> x,
    ffi.Pointer<gsl_sf_result> y,
  ) {
    return _gsl_sf_polar_to_rect(
      r,
      theta,
      x,
      y,
    );
  }

  late final _gsl_sf_polar_to_rectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_polar_to_rect');
  late final _gsl_sf_polar_to_rect = _gsl_sf_polar_to_rectPtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_rect_to_polar(
    double x,
    double y,
    ffi.Pointer<gsl_sf_result> r,
    ffi.Pointer<gsl_sf_result> theta,
  ) {
    return _gsl_sf_rect_to_polar(
      x,
      y,
      r,
      theta,
    );
  }

  late final _gsl_sf_rect_to_polarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Pointer<gsl_sf_result>,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_rect_to_polar');
  late final _gsl_sf_rect_to_polar = _gsl_sf_rect_to_polarPtr.asFunction<
      int Function(double, double, ffi.Pointer<gsl_sf_result>,
          ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_sin_err_e(
    double x,
    double dx,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_sin_err_e(
      x,
      dx,
      result,
    );
  }

  late final _gsl_sf_sin_err_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_sin_err_e');
  late final _gsl_sf_sin_err_e = _gsl_sf_sin_err_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_cos_err_e(
    double x,
    double dx,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_cos_err_e(
      x,
      dx,
      result,
    );
  }

  late final _gsl_sf_cos_err_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_cos_err_e');
  late final _gsl_sf_cos_err_e = _gsl_sf_cos_err_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_angle_restrict_symm_e(
    ffi.Pointer<ffi.Double> theta,
  ) {
    return _gsl_sf_angle_restrict_symm_e(
      theta,
    );
  }

  late final _gsl_sf_angle_restrict_symm_ePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Double>)>>(
          'gsl_sf_angle_restrict_symm_e');
  late final _gsl_sf_angle_restrict_symm_e = _gsl_sf_angle_restrict_symm_ePtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  double gsl_sf_angle_restrict_symm(
    double theta,
  ) {
    return _gsl_sf_angle_restrict_symm(
      theta,
    );
  }

  late final _gsl_sf_angle_restrict_symmPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_angle_restrict_symm');
  late final _gsl_sf_angle_restrict_symm =
      _gsl_sf_angle_restrict_symmPtr.asFunction<double Function(double)>();

  int gsl_sf_angle_restrict_pos_e(
    ffi.Pointer<ffi.Double> theta,
  ) {
    return _gsl_sf_angle_restrict_pos_e(
      theta,
    );
  }

  late final _gsl_sf_angle_restrict_pos_ePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Double>)>>(
          'gsl_sf_angle_restrict_pos_e');
  late final _gsl_sf_angle_restrict_pos_e = _gsl_sf_angle_restrict_pos_ePtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  double gsl_sf_angle_restrict_pos(
    double theta,
  ) {
    return _gsl_sf_angle_restrict_pos(
      theta,
    );
  }

  late final _gsl_sf_angle_restrict_posPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_angle_restrict_pos');
  late final _gsl_sf_angle_restrict_pos =
      _gsl_sf_angle_restrict_posPtr.asFunction<double Function(double)>();

  int gsl_sf_angle_restrict_symm_err_e(
    double theta,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_angle_restrict_symm_err_e(
      theta,
      result,
    );
  }

  late final _gsl_sf_angle_restrict_symm_err_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_angle_restrict_symm_err_e');
  late final _gsl_sf_angle_restrict_symm_err_e =
      _gsl_sf_angle_restrict_symm_err_ePtr
          .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_angle_restrict_pos_err_e(
    double theta,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_angle_restrict_pos_err_e(
      theta,
      result,
    );
  }

  late final _gsl_sf_angle_restrict_pos_err_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_angle_restrict_pos_err_e');
  late final _gsl_sf_angle_restrict_pos_err_e =
      _gsl_sf_angle_restrict_pos_err_ePtr
          .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  int gsl_sf_zeta_int_e(
    int n,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_zeta_int_e(
      n,
      result,
    );
  }

  late final _gsl_sf_zeta_int_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_zeta_int_e');
  late final _gsl_sf_zeta_int_e = _gsl_sf_zeta_int_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_zeta_int(
    int n,
  ) {
    return _gsl_sf_zeta_int(
      n,
    );
  }

  late final _gsl_sf_zeta_intPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32)>>(
          'gsl_sf_zeta_int');
  late final _gsl_sf_zeta_int =
      _gsl_sf_zeta_intPtr.asFunction<double Function(int)>();

  int gsl_sf_zeta_e(
    double s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_zeta_e(
      s,
      result,
    );
  }

  late final _gsl_sf_zeta_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_zeta_e');
  late final _gsl_sf_zeta_e = _gsl_sf_zeta_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_zeta(
    double s,
  ) {
    return _gsl_sf_zeta(
      s,
    );
  }

  late final _gsl_sf_zetaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_zeta');
  late final _gsl_sf_zeta =
      _gsl_sf_zetaPtr.asFunction<double Function(double)>();

  int gsl_sf_zetam1_e(
    double s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_zetam1_e(
      s,
      result,
    );
  }

  late final _gsl_sf_zetam1_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_zetam1_e');
  late final _gsl_sf_zetam1_e = _gsl_sf_zetam1_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_zetam1(
    double s,
  ) {
    return _gsl_sf_zetam1(
      s,
    );
  }

  late final _gsl_sf_zetam1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_zetam1');
  late final _gsl_sf_zetam1 =
      _gsl_sf_zetam1Ptr.asFunction<double Function(double)>();

  int gsl_sf_zetam1_int_e(
    int s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_zetam1_int_e(
      s,
      result,
    );
  }

  late final _gsl_sf_zetam1_int_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_zetam1_int_e');
  late final _gsl_sf_zetam1_int_e = _gsl_sf_zetam1_int_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_zetam1_int(
    int s,
  ) {
    return _gsl_sf_zetam1_int(
      s,
    );
  }

  late final _gsl_sf_zetam1_intPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32)>>(
          'gsl_sf_zetam1_int');
  late final _gsl_sf_zetam1_int =
      _gsl_sf_zetam1_intPtr.asFunction<double Function(int)>();

  int gsl_sf_hzeta_e(
    double s,
    double q,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_hzeta_e(
      s,
      q,
      result,
    );
  }

  late final _gsl_sf_hzeta_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_sf_result>)>>('gsl_sf_hzeta_e');
  late final _gsl_sf_hzeta_e = _gsl_sf_hzeta_ePtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_hzeta(
    double s,
    double q,
  ) {
    return _gsl_sf_hzeta(
      s,
      q,
    );
  }

  late final _gsl_sf_hzetaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_sf_hzeta');
  late final _gsl_sf_hzeta =
      _gsl_sf_hzetaPtr.asFunction<double Function(double, double)>();

  int gsl_sf_eta_int_e(
    int n,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_eta_int_e(
      n,
      result,
    );
  }

  late final _gsl_sf_eta_int_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_eta_int_e');
  late final _gsl_sf_eta_int_e = _gsl_sf_eta_int_ePtr
      .asFunction<int Function(int, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_eta_int(
    int n,
  ) {
    return _gsl_sf_eta_int(
      n,
    );
  }

  late final _gsl_sf_eta_intPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32)>>(
          'gsl_sf_eta_int');
  late final _gsl_sf_eta_int =
      _gsl_sf_eta_intPtr.asFunction<double Function(int)>();

  int gsl_sf_eta_e(
    double s,
    ffi.Pointer<gsl_sf_result> result,
  ) {
    return _gsl_sf_eta_e(
      s,
      result,
    );
  }

  late final _gsl_sf_eta_ePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double, ffi.Pointer<gsl_sf_result>)>>('gsl_sf_eta_e');
  late final _gsl_sf_eta_e = _gsl_sf_eta_ePtr
      .asFunction<int Function(double, ffi.Pointer<gsl_sf_result>)>();

  double gsl_sf_eta(
    double s,
  ) {
    return _gsl_sf_eta(
      s,
    );
  }

  late final _gsl_sf_etaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_sf_eta');
  late final _gsl_sf_eta = _gsl_sf_etaPtr.asFunction<double Function(double)>();

  ffi.Pointer<gsl_dht> gsl_dht_alloc(
    int size,
  ) {
    return _gsl_dht_alloc(
      size,
    );
  }

  late final _gsl_dht_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_dht> Function(size_t)>>(
          'gsl_dht_alloc');
  late final _gsl_dht_alloc =
      _gsl_dht_allocPtr.asFunction<ffi.Pointer<gsl_dht> Function(int)>();

  ffi.Pointer<gsl_dht> gsl_dht_new(
    int size,
    double nu,
    double xmax,
  ) {
    return _gsl_dht_new(
      size,
      nu,
      xmax,
    );
  }

  late final _gsl_dht_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_dht> Function(
              size_t, ffi.Double, ffi.Double)>>('gsl_dht_new');
  late final _gsl_dht_new = _gsl_dht_newPtr
      .asFunction<ffi.Pointer<gsl_dht> Function(int, double, double)>();

  int gsl_dht_init(
    ffi.Pointer<gsl_dht> t,
    double nu,
    double xmax,
  ) {
    return _gsl_dht_init(
      t,
      nu,
      xmax,
    );
  }

  late final _gsl_dht_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_dht>, ffi.Double, ffi.Double)>>('gsl_dht_init');
  late final _gsl_dht_init = _gsl_dht_initPtr
      .asFunction<int Function(ffi.Pointer<gsl_dht>, double, double)>();

  double gsl_dht_x_sample(
    ffi.Pointer<gsl_dht> t,
    int n,
  ) {
    return _gsl_dht_x_sample(
      t,
      n,
    );
  }

  late final _gsl_dht_x_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_dht>, ffi.Int32)>>('gsl_dht_x_sample');
  late final _gsl_dht_x_sample = _gsl_dht_x_samplePtr
      .asFunction<double Function(ffi.Pointer<gsl_dht>, int)>();

  double gsl_dht_k_sample(
    ffi.Pointer<gsl_dht> t,
    int n,
  ) {
    return _gsl_dht_k_sample(
      t,
      n,
    );
  }

  late final _gsl_dht_k_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_dht>, ffi.Int32)>>('gsl_dht_k_sample');
  late final _gsl_dht_k_sample = _gsl_dht_k_samplePtr
      .asFunction<double Function(ffi.Pointer<gsl_dht>, int)>();

  void gsl_dht_free(
    ffi.Pointer<gsl_dht> t,
  ) {
    return _gsl_dht_free(
      t,
    );
  }

  late final _gsl_dht_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_dht>)>>(
          'gsl_dht_free');
  late final _gsl_dht_free =
      _gsl_dht_freePtr.asFunction<void Function(ffi.Pointer<gsl_dht>)>();

  int gsl_dht_apply(
    ffi.Pointer<gsl_dht> t,
    ffi.Pointer<ffi.Double> f_in,
    ffi.Pointer<ffi.Double> f_out,
  ) {
    return _gsl_dht_apply(
      t,
      f_in,
      f_out,
    );
  }

  late final _gsl_dht_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_dht>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_dht_apply');
  late final _gsl_dht_apply = _gsl_dht_applyPtr.asFunction<
      int Function(ffi.Pointer<gsl_dht>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_heapsort(
    ffi.Pointer<ffi.Void> array,
    int count,
    int size,
    gsl_comparison_fn_t compare,
  ) {
    return _gsl_heapsort(
      array,
      count,
      size,
      compare,
    );
  }

  late final _gsl_heapsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              gsl_comparison_fn_t)>>('gsl_heapsort');
  late final _gsl_heapsort = _gsl_heapsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, gsl_comparison_fn_t)>();

  int gsl_heapsort_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Void> array,
    int count,
    int size,
    gsl_comparison_fn_t compare,
  ) {
    return _gsl_heapsort_index(
      p,
      array,
      count,
      size,
      compare,
    );
  }

  late final _gsl_heapsort_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Void>, size_t,
              size_t, gsl_comparison_fn_t)>>('gsl_heapsort_index');
  late final _gsl_heapsort_index = _gsl_heapsort_indexPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Void>, int, int,
          gsl_comparison_fn_t)>();

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_borosh13 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_borosh13');

  ffi.Pointer<gsl_rng_type> get gsl_rng_borosh13 => _gsl_rng_borosh13.value;

  set gsl_rng_borosh13(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_borosh13.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_coveyou =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_coveyou');

  ffi.Pointer<gsl_rng_type> get gsl_rng_coveyou => _gsl_rng_coveyou.value;

  set gsl_rng_coveyou(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_coveyou.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_cmrg =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_cmrg');

  ffi.Pointer<gsl_rng_type> get gsl_rng_cmrg => _gsl_rng_cmrg.value;

  set gsl_rng_cmrg(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_cmrg.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_fishman18 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_fishman18');

  ffi.Pointer<gsl_rng_type> get gsl_rng_fishman18 => _gsl_rng_fishman18.value;

  set gsl_rng_fishman18(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_fishman18.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_fishman20 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_fishman20');

  ffi.Pointer<gsl_rng_type> get gsl_rng_fishman20 => _gsl_rng_fishman20.value;

  set gsl_rng_fishman20(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_fishman20.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_fishman2x =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_fishman2x');

  ffi.Pointer<gsl_rng_type> get gsl_rng_fishman2x => _gsl_rng_fishman2x.value;

  set gsl_rng_fishman2x(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_fishman2x.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_gfsr4 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_gfsr4');

  ffi.Pointer<gsl_rng_type> get gsl_rng_gfsr4 => _gsl_rng_gfsr4.value;

  set gsl_rng_gfsr4(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_gfsr4.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_knuthran =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_knuthran');

  ffi.Pointer<gsl_rng_type> get gsl_rng_knuthran => _gsl_rng_knuthran.value;

  set gsl_rng_knuthran(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_knuthran.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_knuthran2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_knuthran2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_knuthran2 => _gsl_rng_knuthran2.value;

  set gsl_rng_knuthran2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_knuthran2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_knuthran2002 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_knuthran2002');

  ffi.Pointer<gsl_rng_type> get gsl_rng_knuthran2002 =>
      _gsl_rng_knuthran2002.value;

  set gsl_rng_knuthran2002(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_knuthran2002.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_lecuyer21 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_lecuyer21');

  ffi.Pointer<gsl_rng_type> get gsl_rng_lecuyer21 => _gsl_rng_lecuyer21.value;

  set gsl_rng_lecuyer21(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_lecuyer21.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_minstd =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_minstd');

  ffi.Pointer<gsl_rng_type> get gsl_rng_minstd => _gsl_rng_minstd.value;

  set gsl_rng_minstd(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_minstd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_mrg =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_mrg');

  ffi.Pointer<gsl_rng_type> get gsl_rng_mrg => _gsl_rng_mrg.value;

  set gsl_rng_mrg(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_mrg.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_mt19937 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_mt19937');

  ffi.Pointer<gsl_rng_type> get gsl_rng_mt19937 => _gsl_rng_mt19937.value;

  set gsl_rng_mt19937(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_mt19937.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_mt19937_1999 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_mt19937_1999');

  ffi.Pointer<gsl_rng_type> get gsl_rng_mt19937_1999 =>
      _gsl_rng_mt19937_1999.value;

  set gsl_rng_mt19937_1999(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_mt19937_1999.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_mt19937_1998 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_mt19937_1998');

  ffi.Pointer<gsl_rng_type> get gsl_rng_mt19937_1998 =>
      _gsl_rng_mt19937_1998.value;

  set gsl_rng_mt19937_1998(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_mt19937_1998.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_r250 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_r250');

  ffi.Pointer<gsl_rng_type> get gsl_rng_r250 => _gsl_rng_r250.value;

  set gsl_rng_r250(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_r250.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ran0 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ran0');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ran0 => _gsl_rng_ran0.value;

  set gsl_rng_ran0(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ran0.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ran1 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ran1');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ran1 => _gsl_rng_ran1.value;

  set gsl_rng_ran1(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ran1.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ran2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ran2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ran2 => _gsl_rng_ran2.value;

  set gsl_rng_ran2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ran2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ran3 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ran3');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ran3 => _gsl_rng_ran3.value;

  set gsl_rng_ran3(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ran3.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_rand =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_rand');

  ffi.Pointer<gsl_rng_type> get gsl_rng_rand => _gsl_rng_rand.value;

  set gsl_rng_rand(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_rand.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_rand48 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_rand48');

  ffi.Pointer<gsl_rng_type> get gsl_rng_rand48 => _gsl_rng_rand48.value;

  set gsl_rng_rand48(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_rand48.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random128_bsd =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random128_bsd');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random128_bsd =>
      _gsl_rng_random128_bsd.value;

  set gsl_rng_random128_bsd(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random128_bsd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random128_glibc2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random128_glibc2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random128_glibc2 =>
      _gsl_rng_random128_glibc2.value;

  set gsl_rng_random128_glibc2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random128_glibc2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random128_libc5 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random128_libc5');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random128_libc5 =>
      _gsl_rng_random128_libc5.value;

  set gsl_rng_random128_libc5(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random128_libc5.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random256_bsd =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random256_bsd');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random256_bsd =>
      _gsl_rng_random256_bsd.value;

  set gsl_rng_random256_bsd(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random256_bsd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random256_glibc2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random256_glibc2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random256_glibc2 =>
      _gsl_rng_random256_glibc2.value;

  set gsl_rng_random256_glibc2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random256_glibc2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random256_libc5 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random256_libc5');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random256_libc5 =>
      _gsl_rng_random256_libc5.value;

  set gsl_rng_random256_libc5(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random256_libc5.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random32_bsd =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random32_bsd');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random32_bsd =>
      _gsl_rng_random32_bsd.value;

  set gsl_rng_random32_bsd(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random32_bsd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random32_glibc2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random32_glibc2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random32_glibc2 =>
      _gsl_rng_random32_glibc2.value;

  set gsl_rng_random32_glibc2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random32_glibc2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random32_libc5 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random32_libc5');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random32_libc5 =>
      _gsl_rng_random32_libc5.value;

  set gsl_rng_random32_libc5(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random32_libc5.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random64_bsd =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random64_bsd');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random64_bsd =>
      _gsl_rng_random64_bsd.value;

  set gsl_rng_random64_bsd(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random64_bsd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random64_glibc2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random64_glibc2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random64_glibc2 =>
      _gsl_rng_random64_glibc2.value;

  set gsl_rng_random64_glibc2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random64_glibc2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random64_libc5 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random64_libc5');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random64_libc5 =>
      _gsl_rng_random64_libc5.value;

  set gsl_rng_random64_libc5(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random64_libc5.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random8_bsd =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random8_bsd');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random8_bsd =>
      _gsl_rng_random8_bsd.value;

  set gsl_rng_random8_bsd(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random8_bsd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random8_glibc2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random8_glibc2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random8_glibc2 =>
      _gsl_rng_random8_glibc2.value;

  set gsl_rng_random8_glibc2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random8_glibc2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random8_libc5 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random8_libc5');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random8_libc5 =>
      _gsl_rng_random8_libc5.value;

  set gsl_rng_random8_libc5(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random8_libc5.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random_bsd =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random_bsd');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random_bsd => _gsl_rng_random_bsd.value;

  set gsl_rng_random_bsd(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random_bsd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random_glibc2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random_glibc2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random_glibc2 =>
      _gsl_rng_random_glibc2.value;

  set gsl_rng_random_glibc2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random_glibc2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_random_libc5 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_random_libc5');

  ffi.Pointer<gsl_rng_type> get gsl_rng_random_libc5 =>
      _gsl_rng_random_libc5.value;

  set gsl_rng_random_libc5(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_random_libc5.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_randu =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_randu');

  ffi.Pointer<gsl_rng_type> get gsl_rng_randu => _gsl_rng_randu.value;

  set gsl_rng_randu(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_randu.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ranf =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ranf');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ranf => _gsl_rng_ranf.value;

  set gsl_rng_ranf(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ranf.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ranlux =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ranlux');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ranlux => _gsl_rng_ranlux.value;

  set gsl_rng_ranlux(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ranlux.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ranlux389 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ranlux389');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ranlux389 => _gsl_rng_ranlux389.value;

  set gsl_rng_ranlux389(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ranlux389.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ranlxd1 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ranlxd1');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ranlxd1 => _gsl_rng_ranlxd1.value;

  set gsl_rng_ranlxd1(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ranlxd1.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ranlxd2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ranlxd2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ranlxd2 => _gsl_rng_ranlxd2.value;

  set gsl_rng_ranlxd2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ranlxd2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ranlxs0 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ranlxs0');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ranlxs0 => _gsl_rng_ranlxs0.value;

  set gsl_rng_ranlxs0(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ranlxs0.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ranlxs1 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ranlxs1');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ranlxs1 => _gsl_rng_ranlxs1.value;

  set gsl_rng_ranlxs1(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ranlxs1.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ranlxs2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ranlxs2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ranlxs2 => _gsl_rng_ranlxs2.value;

  set gsl_rng_ranlxs2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ranlxs2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_ranmar =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_ranmar');

  ffi.Pointer<gsl_rng_type> get gsl_rng_ranmar => _gsl_rng_ranmar.value;

  set gsl_rng_ranmar(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_ranmar.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_slatec =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_slatec');

  ffi.Pointer<gsl_rng_type> get gsl_rng_slatec => _gsl_rng_slatec.value;

  set gsl_rng_slatec(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_slatec.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_taus =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_taus');

  ffi.Pointer<gsl_rng_type> get gsl_rng_taus => _gsl_rng_taus.value;

  set gsl_rng_taus(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_taus.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_taus2 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_taus2');

  ffi.Pointer<gsl_rng_type> get gsl_rng_taus2 => _gsl_rng_taus2.value;

  set gsl_rng_taus2(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_taus2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_taus113 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_taus113');

  ffi.Pointer<gsl_rng_type> get gsl_rng_taus113 => _gsl_rng_taus113.value;

  set gsl_rng_taus113(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_taus113.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_transputer =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_transputer');

  ffi.Pointer<gsl_rng_type> get gsl_rng_transputer => _gsl_rng_transputer.value;

  set gsl_rng_transputer(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_transputer.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_tt800 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_tt800');

  ffi.Pointer<gsl_rng_type> get gsl_rng_tt800 => _gsl_rng_tt800.value;

  set gsl_rng_tt800(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_tt800.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_uni =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_uni');

  ffi.Pointer<gsl_rng_type> get gsl_rng_uni => _gsl_rng_uni.value;

  set gsl_rng_uni(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_uni.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_uni32 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_uni32');

  ffi.Pointer<gsl_rng_type> get gsl_rng_uni32 => _gsl_rng_uni32.value;

  set gsl_rng_uni32(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_uni32.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_vax =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_vax');

  ffi.Pointer<gsl_rng_type> get gsl_rng_vax => _gsl_rng_vax.value;

  set gsl_rng_vax(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_vax.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_waterman14 =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_waterman14');

  ffi.Pointer<gsl_rng_type> get gsl_rng_waterman14 => _gsl_rng_waterman14.value;

  set gsl_rng_waterman14(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_waterman14.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_zuf =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_zuf');

  ffi.Pointer<gsl_rng_type> get gsl_rng_zuf => _gsl_rng_zuf.value;

  set gsl_rng_zuf(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_zuf.value = value;

  ffi.Pointer<ffi.Pointer<gsl_rng_type>> gsl_rng_types_setup() {
    return _gsl_rng_types_setup();
  }

  late final _gsl_rng_types_setupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<gsl_rng_type>>
              Function()>>('gsl_rng_types_setup');
  late final _gsl_rng_types_setup = _gsl_rng_types_setupPtr
      .asFunction<ffi.Pointer<ffi.Pointer<gsl_rng_type>> Function()>();

  late final ffi.Pointer<ffi.Pointer<gsl_rng_type>> _gsl_rng_default =
      _lookup<ffi.Pointer<gsl_rng_type>>('gsl_rng_default');

  ffi.Pointer<gsl_rng_type> get gsl_rng_default => _gsl_rng_default.value;

  set gsl_rng_default(ffi.Pointer<gsl_rng_type> value) =>
      _gsl_rng_default.value = value;

  late final ffi.Pointer<ffi.Uint64> _gsl_rng_default_seed =
      _lookup<ffi.Uint64>('gsl_rng_default_seed');

  int get gsl_rng_default_seed => _gsl_rng_default_seed.value;

  set gsl_rng_default_seed(int value) => _gsl_rng_default_seed.value = value;

  ffi.Pointer<gsl_rng> gsl_rng_alloc(
    ffi.Pointer<gsl_rng_type> T,
  ) {
    return _gsl_rng_alloc(
      T,
    );
  }

  late final _gsl_rng_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_rng> Function(
              ffi.Pointer<gsl_rng_type>)>>('gsl_rng_alloc');
  late final _gsl_rng_alloc = _gsl_rng_allocPtr
      .asFunction<ffi.Pointer<gsl_rng> Function(ffi.Pointer<gsl_rng_type>)>();

  int gsl_rng_memcpy(
    ffi.Pointer<gsl_rng> dest,
    ffi.Pointer<gsl_rng> src,
  ) {
    return _gsl_rng_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_rng_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_rng>, ffi.Pointer<gsl_rng>)>>('gsl_rng_memcpy');
  late final _gsl_rng_memcpy = _gsl_rng_memcpyPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, ffi.Pointer<gsl_rng>)>();

  ffi.Pointer<gsl_rng> gsl_rng_clone(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_clone(
      r,
    );
  }

  late final _gsl_rng_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_rng> Function(
              ffi.Pointer<gsl_rng>)>>('gsl_rng_clone');
  late final _gsl_rng_clone = _gsl_rng_clonePtr
      .asFunction<ffi.Pointer<gsl_rng> Function(ffi.Pointer<gsl_rng>)>();

  void gsl_rng_free(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_free(
      r,
    );
  }

  late final _gsl_rng_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_rng_free');
  late final _gsl_rng_free =
      _gsl_rng_freePtr.asFunction<void Function(ffi.Pointer<gsl_rng>)>();

  void gsl_rng_set(
    ffi.Pointer<gsl_rng> r,
    int seed,
  ) {
    return _gsl_rng_set(
      r,
      seed,
    );
  }

  late final _gsl_rng_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_rng>, ffi.Uint64)>>('gsl_rng_set');
  late final _gsl_rng_set =
      _gsl_rng_setPtr.asFunction<void Function(ffi.Pointer<gsl_rng>, int)>();

  int gsl_rng_max(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_max(
      r,
    );
  }

  late final _gsl_rng_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_rng_max');
  late final _gsl_rng_max =
      _gsl_rng_maxPtr.asFunction<int Function(ffi.Pointer<gsl_rng>)>();

  int gsl_rng_min(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_min(
      r,
    );
  }

  late final _gsl_rng_minPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_rng_min');
  late final _gsl_rng_min =
      _gsl_rng_minPtr.asFunction<int Function(ffi.Pointer<gsl_rng>)>();

  ffi.Pointer<ffi.Int8> gsl_rng_name(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_name(
      r,
    );
  }

  late final _gsl_rng_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_rng>)>>('gsl_rng_name');
  late final _gsl_rng_name = _gsl_rng_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_rng>)>();

  int gsl_rng_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_fread(
      stream,
      r,
    );
  }

  late final _gsl_rng_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_rng>)>>('gsl_rng_fread');
  late final _gsl_rng_fread = _gsl_rng_freadPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_rng>)>();

  int gsl_rng_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_fwrite(
      stream,
      r,
    );
  }

  late final _gsl_rng_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<gsl_rng>)>>('gsl_rng_fwrite');
  late final _gsl_rng_fwrite = _gsl_rng_fwritePtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_rng>)>();

  int gsl_rng_size(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_size(
      r,
    );
  }

  late final _gsl_rng_sizePtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_rng_size');
  late final _gsl_rng_size =
      _gsl_rng_sizePtr.asFunction<int Function(ffi.Pointer<gsl_rng>)>();

  ffi.Pointer<ffi.Void> gsl_rng_state(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_state(
      r,
    );
  }

  late final _gsl_rng_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gsl_rng>)>>('gsl_rng_state');
  late final _gsl_rng_state = _gsl_rng_statePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<gsl_rng>)>();

  void gsl_rng_print_state(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_print_state(
      r,
    );
  }

  late final _gsl_rng_print_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_rng_print_state');
  late final _gsl_rng_print_state =
      _gsl_rng_print_statePtr.asFunction<void Function(ffi.Pointer<gsl_rng>)>();

  ffi.Pointer<gsl_rng_type> gsl_rng_env_setup() {
    return _gsl_rng_env_setup();
  }

  late final _gsl_rng_env_setupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_rng_type> Function()>>(
          'gsl_rng_env_setup');
  late final _gsl_rng_env_setup =
      _gsl_rng_env_setupPtr.asFunction<ffi.Pointer<gsl_rng_type> Function()>();

  int gsl_rng_get(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_get(
      r,
    );
  }

  late final _gsl_rng_getPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_rng_get');
  late final _gsl_rng_get =
      _gsl_rng_getPtr.asFunction<int Function(ffi.Pointer<gsl_rng>)>();

  double gsl_rng_uniform(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_uniform(
      r,
    );
  }

  late final _gsl_rng_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_rng_uniform');
  late final _gsl_rng_uniform =
      _gsl_rng_uniformPtr.asFunction<double Function(ffi.Pointer<gsl_rng>)>();

  double gsl_rng_uniform_pos(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_rng_uniform_pos(
      r,
    );
  }

  late final _gsl_rng_uniform_posPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_rng_uniform_pos');
  late final _gsl_rng_uniform_pos = _gsl_rng_uniform_posPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>)>();

  int gsl_rng_uniform_int(
    ffi.Pointer<gsl_rng> r,
    int n,
  ) {
    return _gsl_rng_uniform_int(
      r,
      n,
    );
  }

  late final _gsl_rng_uniform_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
              ffi.Pointer<gsl_rng>, ffi.Uint64)>>('gsl_rng_uniform_int');
  late final _gsl_rng_uniform_int = _gsl_rng_uniform_intPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, int)>();

  void gsl_siman_solve(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<ffi.Void> x0_p,
    gsl_siman_Efunc_t Ef,
    gsl_siman_step_t take_step,
    gsl_siman_metric_t distance,
    gsl_siman_print_t print_position,
    gsl_siman_copy_t copyfunc,
    gsl_siman_copy_construct_t copy_constructor,
    gsl_siman_destroy_t destructor,
    int element_size,
    gsl_siman_params_t params,
  ) {
    return _gsl_siman_solve(
      r,
      x0_p,
      Ef,
      take_step,
      distance,
      print_position,
      copyfunc,
      copy_constructor,
      destructor,
      element_size,
      params,
    );
  }

  late final _gsl_siman_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<ffi.Void>,
              gsl_siman_Efunc_t,
              gsl_siman_step_t,
              gsl_siman_metric_t,
              gsl_siman_print_t,
              gsl_siman_copy_t,
              gsl_siman_copy_construct_t,
              gsl_siman_destroy_t,
              size_t,
              gsl_siman_params_t)>>('gsl_siman_solve');
  late final _gsl_siman_solve = _gsl_siman_solvePtr.asFunction<
      void Function(
          ffi.Pointer<gsl_rng>,
          ffi.Pointer<ffi.Void>,
          gsl_siman_Efunc_t,
          gsl_siman_step_t,
          gsl_siman_metric_t,
          gsl_siman_print_t,
          gsl_siman_copy_t,
          gsl_siman_copy_construct_t,
          gsl_siman_destroy_t,
          int,
          gsl_siman_params_t)>();

  void gsl_siman_solve_many(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<ffi.Void> x0_p,
    gsl_siman_Efunc_t Ef,
    gsl_siman_step_t take_step,
    gsl_siman_metric_t distance,
    gsl_siman_print_t print_position,
    int element_size,
    gsl_siman_params_t params,
  ) {
    return _gsl_siman_solve_many(
      r,
      x0_p,
      Ef,
      take_step,
      distance,
      print_position,
      element_size,
      params,
    );
  }

  late final _gsl_siman_solve_manyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<ffi.Void>,
              gsl_siman_Efunc_t,
              gsl_siman_step_t,
              gsl_siman_metric_t,
              gsl_siman_print_t,
              size_t,
              gsl_siman_params_t)>>('gsl_siman_solve_many');
  late final _gsl_siman_solve_many = _gsl_siman_solve_manyPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_rng>,
          ffi.Pointer<ffi.Void>,
          gsl_siman_Efunc_t,
          gsl_siman_step_t,
          gsl_siman_metric_t,
          gsl_siman_print_t,
          int,
          gsl_siman_params_t)>();

  void gsl_sort_ushort(
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_ushort(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_ushortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint16>, size_t, size_t)>>('gsl_sort_ushort');
  late final _gsl_sort_ushort = _gsl_sort_ushortPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint16>, int, int)>();

  void gsl_sort2_ushort(
    ffi.Pointer<ffi.Uint16> data1,
    int stride1,
    ffi.Pointer<ffi.Uint16> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2_ushort(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2_ushortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint16>, size_t,
              ffi.Pointer<ffi.Uint16>, size_t, size_t)>>('gsl_sort2_ushort');
  late final _gsl_sort2_ushort = _gsl_sort2_ushortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int, int)>();

  void gsl_sort_ushort_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_ushort_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_ushort_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint16>,
              size_t, size_t)>>('gsl_sort_ushort_index');
  late final _gsl_sort_ushort_index = _gsl_sort_ushort_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_sort_ushort_smallest(
    ffi.Pointer<ffi.Uint16> dest,
    int k,
    ffi.Pointer<ffi.Uint16> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_ushort_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_ushort_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_sort_ushort_smallest');
  late final _gsl_sort_ushort_smallest =
      _gsl_sort_ushort_smallestPtr.asFunction<
          int Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>,
              int, int)>();

  int gsl_sort_ushort_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Uint16> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_ushort_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_ushort_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_sort_ushort_smallest_index');
  late final _gsl_sort_ushort_smallest_index =
      _gsl_sort_ushort_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_sort_ushort_largest(
    ffi.Pointer<ffi.Uint16> dest,
    int k,
    ffi.Pointer<ffi.Uint16> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_ushort_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_ushort_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_sort_ushort_largest');
  late final _gsl_sort_ushort_largest = _gsl_sort_ushort_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_sort_ushort_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Uint16> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_ushort_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_ushort_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Uint16>,
              size_t,
              size_t)>>('gsl_sort_ushort_largest_index');
  late final _gsl_sort_ushort_largest_index =
      _gsl_sort_ushort_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_permute_long(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_long(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_longPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int64>,
              size_t, size_t)>>('gsl_permute_long');
  late final _gsl_permute_long = _gsl_permute_longPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int64>, int, int)>();

  int gsl_permute_long_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int64> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_long_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_long_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int64>,
              size_t, size_t)>>('gsl_permute_long_inverse');
  late final _gsl_permute_long_inverse =
      _gsl_permute_long_inversePtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Int64>, int, int)>();

  ffi.Pointer<gsl_multifit_nlinear_workspace> gsl_multifit_nlinear_alloc(
    ffi.Pointer<gsl_multifit_nlinear_type> T,
    ffi.Pointer<gsl_multifit_nlinear_parameters> params,
    int n,
    int p,
  ) {
    return _gsl_multifit_nlinear_alloc(
      T,
      params,
      n,
      p,
    );
  }

  late final _gsl_multifit_nlinear_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multifit_nlinear_workspace> Function(
              ffi.Pointer<gsl_multifit_nlinear_type>,
              ffi.Pointer<gsl_multifit_nlinear_parameters>,
              size_t,
              size_t)>>('gsl_multifit_nlinear_alloc');
  late final _gsl_multifit_nlinear_alloc =
      _gsl_multifit_nlinear_allocPtr.asFunction<
          ffi.Pointer<gsl_multifit_nlinear_workspace> Function(
              ffi.Pointer<gsl_multifit_nlinear_type>,
              ffi.Pointer<gsl_multifit_nlinear_parameters>,
              int,
              int)>();

  void gsl_multifit_nlinear_free(
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_free(
      w,
    );
  }

  late final _gsl_multifit_nlinear_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_free');
  late final _gsl_multifit_nlinear_free = _gsl_multifit_nlinear_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  gsl_multifit_nlinear_parameters gsl_multifit_nlinear_default_parameters() {
    return _gsl_multifit_nlinear_default_parameters();
  }

  late final _gsl_multifit_nlinear_default_parametersPtr =
      _lookup<ffi.NativeFunction<gsl_multifit_nlinear_parameters Function()>>(
          'gsl_multifit_nlinear_default_parameters');
  late final _gsl_multifit_nlinear_default_parameters =
      _gsl_multifit_nlinear_default_parametersPtr
          .asFunction<gsl_multifit_nlinear_parameters Function()>();

  int gsl_multifit_nlinear_init(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_multifit_nlinear_fdf> fdf,
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_init(
      x,
      fdf,
      w,
    );
  }

  late final _gsl_multifit_nlinear_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_nlinear_fdf>,
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_init');
  late final _gsl_multifit_nlinear_init =
      _gsl_multifit_nlinear_initPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  int gsl_multifit_nlinear_winit(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> wts,
    ffi.Pointer<gsl_multifit_nlinear_fdf> fdf,
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_winit(
      x,
      wts,
      fdf,
      w,
    );
  }

  late final _gsl_multifit_nlinear_winitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_nlinear_fdf>,
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_winit');
  late final _gsl_multifit_nlinear_winit =
      _gsl_multifit_nlinear_winitPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  int gsl_multifit_nlinear_iterate(
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_iterate(
      w,
    );
  }

  late final _gsl_multifit_nlinear_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_iterate');
  late final _gsl_multifit_nlinear_iterate = _gsl_multifit_nlinear_iteratePtr
      .asFunction<int Function(ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  double gsl_multifit_nlinear_avratio(
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_avratio(
      w,
    );
  }

  late final _gsl_multifit_nlinear_avratioPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_avratio');
  late final _gsl_multifit_nlinear_avratio =
      _gsl_multifit_nlinear_avratioPtr.asFunction<
          double Function(ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  int gsl_multifit_nlinear_driver(
    int maxiter,
    double xtol,
    double gtol,
    double ftol,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(size_t, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<gsl_multifit_nlinear_workspace>)>>
        callback,
    ffi.Pointer<ffi.Void> callback_params,
    ffi.Pointer<ffi.Int32> info,
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_driver(
      maxiter,
      xtol,
      gtol,
      ftol,
      callback,
      callback_params,
      info,
      w,
    );
  }

  late final _gsl_multifit_nlinear_driverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  size_t,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(size_t, ffi.Pointer<ffi.Void>,
                              ffi.Pointer<gsl_multifit_nlinear_workspace>)>>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_driver');
  late final _gsl_multifit_nlinear_driver =
      _gsl_multifit_nlinear_driverPtr.asFunction<
          int Function(
              int,
              double,
              double,
              double,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(size_t, ffi.Pointer<ffi.Void>,
                          ffi.Pointer<gsl_multifit_nlinear_workspace>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  ffi.Pointer<gsl_matrix> gsl_multifit_nlinear_jac(
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_jac(
      w,
    );
  }

  late final _gsl_multifit_nlinear_jacPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_matrix> Function(
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_jac');
  late final _gsl_multifit_nlinear_jac =
      _gsl_multifit_nlinear_jacPtr.asFunction<
          ffi.Pointer<gsl_matrix> Function(
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  ffi.Pointer<ffi.Int8> gsl_multifit_nlinear_name(
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_name(
      w,
    );
  }

  late final _gsl_multifit_nlinear_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_name');
  late final _gsl_multifit_nlinear_name =
      _gsl_multifit_nlinear_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  ffi.Pointer<gsl_vector> gsl_multifit_nlinear_position(
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_position(
      w,
    );
  }

  late final _gsl_multifit_nlinear_positionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_position');
  late final _gsl_multifit_nlinear_position =
      _gsl_multifit_nlinear_positionPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  ffi.Pointer<gsl_vector> gsl_multifit_nlinear_residual(
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_residual(
      w,
    );
  }

  late final _gsl_multifit_nlinear_residualPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_residual');
  late final _gsl_multifit_nlinear_residual =
      _gsl_multifit_nlinear_residualPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  int gsl_multifit_nlinear_niter(
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_niter(
      w,
    );
  }

  late final _gsl_multifit_nlinear_niterPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_niter');
  late final _gsl_multifit_nlinear_niter = _gsl_multifit_nlinear_niterPtr
      .asFunction<int Function(ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  int gsl_multifit_nlinear_rcond(
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_rcond(
      rcond,
      w,
    );
  }

  late final _gsl_multifit_nlinear_rcondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_rcond');
  late final _gsl_multifit_nlinear_rcond =
      _gsl_multifit_nlinear_rcondPtr.asFunction<
          int Function(ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  ffi.Pointer<ffi.Int8> gsl_multifit_nlinear_trs_name(
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_trs_name(
      w,
    );
  }

  late final _gsl_multifit_nlinear_trs_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_trs_name');
  late final _gsl_multifit_nlinear_trs_name =
      _gsl_multifit_nlinear_trs_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  int gsl_multifit_nlinear_eval_f(
    ffi.Pointer<gsl_multifit_nlinear_fdf> fdf,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> swts,
    ffi.Pointer<gsl_vector> y,
  ) {
    return _gsl_multifit_nlinear_eval_f(
      fdf,
      x,
      swts,
      y,
    );
  }

  late final _gsl_multifit_nlinear_eval_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_nlinear_eval_f');
  late final _gsl_multifit_nlinear_eval_f =
      _gsl_multifit_nlinear_eval_fPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_nlinear_eval_df(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_vector> swts,
    double h,
    int fdtype,
    ffi.Pointer<gsl_multifit_nlinear_fdf> fdf,
    ffi.Pointer<gsl_matrix> df,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_multifit_nlinear_eval_df(
      x,
      f,
      swts,
      h,
      fdtype,
      fdf,
      df,
      work,
    );
  }

  late final _gsl_multifit_nlinear_eval_dfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_nlinear_eval_df');
  late final _gsl_multifit_nlinear_eval_df =
      _gsl_multifit_nlinear_eval_dfPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              double,
              int,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_nlinear_eval_fvv(
    double h,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_matrix> J,
    ffi.Pointer<gsl_vector> swts,
    ffi.Pointer<gsl_multifit_nlinear_fdf> fdf,
    ffi.Pointer<gsl_vector> yvv,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_multifit_nlinear_eval_fvv(
      h,
      x,
      v,
      f,
      J,
      swts,
      fdf,
      yvv,
      work,
    );
  }

  late final _gsl_multifit_nlinear_eval_fvvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_nlinear_eval_fvv');
  late final _gsl_multifit_nlinear_eval_fvv =
      _gsl_multifit_nlinear_eval_fvvPtr.asFunction<
          int Function(
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_nlinear_covar(
    ffi.Pointer<gsl_matrix> J,
    double epsrel,
    ffi.Pointer<gsl_matrix> covar,
  ) {
    return _gsl_multifit_nlinear_covar(
      J,
      epsrel,
      covar,
    );
  }

  late final _gsl_multifit_nlinear_covarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Double,
              ffi.Pointer<gsl_matrix>)>>('gsl_multifit_nlinear_covar');
  late final _gsl_multifit_nlinear_covar =
      _gsl_multifit_nlinear_covarPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>, double, ffi.Pointer<gsl_matrix>)>();

  int gsl_multifit_nlinear_test(
    double xtol,
    double gtol,
    double ftol,
    ffi.Pointer<ffi.Int32> info,
    ffi.Pointer<gsl_multifit_nlinear_workspace> w,
  ) {
    return _gsl_multifit_nlinear_test(
      xtol,
      gtol,
      ftol,
      info,
      w,
    );
  }

  late final _gsl_multifit_nlinear_testPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<gsl_multifit_nlinear_workspace>)>>(
      'gsl_multifit_nlinear_test');
  late final _gsl_multifit_nlinear_test =
      _gsl_multifit_nlinear_testPtr.asFunction<
          int Function(double, double, double, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gsl_multifit_nlinear_workspace>)>();

  int gsl_multifit_nlinear_df(
    double h,
    int fdtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> wts,
    ffi.Pointer<gsl_multifit_nlinear_fdf> fdf,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_matrix> J,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_multifit_nlinear_df(
      h,
      fdtype,
      x,
      wts,
      fdf,
      f,
      J,
      work,
    );
  }

  late final _gsl_multifit_nlinear_dfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_nlinear_df');
  late final _gsl_multifit_nlinear_df = _gsl_multifit_nlinear_dfPtr.asFunction<
      int Function(
          double,
          int,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_multifit_nlinear_fdf>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_nlinear_fdfvv(
    double h,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_matrix> J,
    ffi.Pointer<gsl_vector> swts,
    ffi.Pointer<gsl_multifit_nlinear_fdf> fdf,
    ffi.Pointer<gsl_vector> fvv,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_multifit_nlinear_fdfvv(
      h,
      x,
      v,
      f,
      J,
      swts,
      fdf,
      fvv,
      work,
    );
  }

  late final _gsl_multifit_nlinear_fdfvvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_nlinear_fdfvv');
  late final _gsl_multifit_nlinear_fdfvv =
      _gsl_multifit_nlinear_fdfvvPtr.asFunction<
          int Function(
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_type>>
      _gsl_multifit_nlinear_trust =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_type>>(
          'gsl_multifit_nlinear_trust');

  ffi.Pointer<gsl_multifit_nlinear_type> get gsl_multifit_nlinear_trust =>
      _gsl_multifit_nlinear_trust.value;

  set gsl_multifit_nlinear_trust(
          ffi.Pointer<gsl_multifit_nlinear_type> value) =>
      _gsl_multifit_nlinear_trust.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_trs>>
      _gsl_multifit_nlinear_trs_lm =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_trs>>(
          'gsl_multifit_nlinear_trs_lm');

  ffi.Pointer<gsl_multifit_nlinear_trs> get gsl_multifit_nlinear_trs_lm =>
      _gsl_multifit_nlinear_trs_lm.value;

  set gsl_multifit_nlinear_trs_lm(
          ffi.Pointer<gsl_multifit_nlinear_trs> value) =>
      _gsl_multifit_nlinear_trs_lm.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_trs>>
      _gsl_multifit_nlinear_trs_lmaccel =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_trs>>(
          'gsl_multifit_nlinear_trs_lmaccel');

  ffi.Pointer<gsl_multifit_nlinear_trs> get gsl_multifit_nlinear_trs_lmaccel =>
      _gsl_multifit_nlinear_trs_lmaccel.value;

  set gsl_multifit_nlinear_trs_lmaccel(
          ffi.Pointer<gsl_multifit_nlinear_trs> value) =>
      _gsl_multifit_nlinear_trs_lmaccel.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_trs>>
      _gsl_multifit_nlinear_trs_dogleg =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_trs>>(
          'gsl_multifit_nlinear_trs_dogleg');

  ffi.Pointer<gsl_multifit_nlinear_trs> get gsl_multifit_nlinear_trs_dogleg =>
      _gsl_multifit_nlinear_trs_dogleg.value;

  set gsl_multifit_nlinear_trs_dogleg(
          ffi.Pointer<gsl_multifit_nlinear_trs> value) =>
      _gsl_multifit_nlinear_trs_dogleg.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_trs>>
      _gsl_multifit_nlinear_trs_ddogleg =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_trs>>(
          'gsl_multifit_nlinear_trs_ddogleg');

  ffi.Pointer<gsl_multifit_nlinear_trs> get gsl_multifit_nlinear_trs_ddogleg =>
      _gsl_multifit_nlinear_trs_ddogleg.value;

  set gsl_multifit_nlinear_trs_ddogleg(
          ffi.Pointer<gsl_multifit_nlinear_trs> value) =>
      _gsl_multifit_nlinear_trs_ddogleg.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_trs>>
      _gsl_multifit_nlinear_trs_subspace2D =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_trs>>(
          'gsl_multifit_nlinear_trs_subspace2D');

  ffi.Pointer<gsl_multifit_nlinear_trs>
      get gsl_multifit_nlinear_trs_subspace2D =>
          _gsl_multifit_nlinear_trs_subspace2D.value;

  set gsl_multifit_nlinear_trs_subspace2D(
          ffi.Pointer<gsl_multifit_nlinear_trs> value) =>
      _gsl_multifit_nlinear_trs_subspace2D.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_scale>>
      _gsl_multifit_nlinear_scale_levenberg =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_scale>>(
          'gsl_multifit_nlinear_scale_levenberg');

  ffi.Pointer<gsl_multifit_nlinear_scale>
      get gsl_multifit_nlinear_scale_levenberg =>
          _gsl_multifit_nlinear_scale_levenberg.value;

  set gsl_multifit_nlinear_scale_levenberg(
          ffi.Pointer<gsl_multifit_nlinear_scale> value) =>
      _gsl_multifit_nlinear_scale_levenberg.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_scale>>
      _gsl_multifit_nlinear_scale_marquardt =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_scale>>(
          'gsl_multifit_nlinear_scale_marquardt');

  ffi.Pointer<gsl_multifit_nlinear_scale>
      get gsl_multifit_nlinear_scale_marquardt =>
          _gsl_multifit_nlinear_scale_marquardt.value;

  set gsl_multifit_nlinear_scale_marquardt(
          ffi.Pointer<gsl_multifit_nlinear_scale> value) =>
      _gsl_multifit_nlinear_scale_marquardt.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_scale>>
      _gsl_multifit_nlinear_scale_more =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_scale>>(
          'gsl_multifit_nlinear_scale_more');

  ffi.Pointer<gsl_multifit_nlinear_scale> get gsl_multifit_nlinear_scale_more =>
      _gsl_multifit_nlinear_scale_more.value;

  set gsl_multifit_nlinear_scale_more(
          ffi.Pointer<gsl_multifit_nlinear_scale> value) =>
      _gsl_multifit_nlinear_scale_more.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_solver>>
      _gsl_multifit_nlinear_solver_cholesky =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_solver>>(
          'gsl_multifit_nlinear_solver_cholesky');

  ffi.Pointer<gsl_multifit_nlinear_solver>
      get gsl_multifit_nlinear_solver_cholesky =>
          _gsl_multifit_nlinear_solver_cholesky.value;

  set gsl_multifit_nlinear_solver_cholesky(
          ffi.Pointer<gsl_multifit_nlinear_solver> value) =>
      _gsl_multifit_nlinear_solver_cholesky.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_solver>>
      _gsl_multifit_nlinear_solver_mcholesky =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_solver>>(
          'gsl_multifit_nlinear_solver_mcholesky');

  ffi.Pointer<gsl_multifit_nlinear_solver>
      get gsl_multifit_nlinear_solver_mcholesky =>
          _gsl_multifit_nlinear_solver_mcholesky.value;

  set gsl_multifit_nlinear_solver_mcholesky(
          ffi.Pointer<gsl_multifit_nlinear_solver> value) =>
      _gsl_multifit_nlinear_solver_mcholesky.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_solver>>
      _gsl_multifit_nlinear_solver_qr =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_solver>>(
          'gsl_multifit_nlinear_solver_qr');

  ffi.Pointer<gsl_multifit_nlinear_solver> get gsl_multifit_nlinear_solver_qr =>
      _gsl_multifit_nlinear_solver_qr.value;

  set gsl_multifit_nlinear_solver_qr(
          ffi.Pointer<gsl_multifit_nlinear_solver> value) =>
      _gsl_multifit_nlinear_solver_qr.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_nlinear_solver>>
      _gsl_multifit_nlinear_solver_svd =
      _lookup<ffi.Pointer<gsl_multifit_nlinear_solver>>(
          'gsl_multifit_nlinear_solver_svd');

  ffi.Pointer<gsl_multifit_nlinear_solver>
      get gsl_multifit_nlinear_solver_svd =>
          _gsl_multifit_nlinear_solver_svd.value;

  set gsl_multifit_nlinear_solver_svd(
          ffi.Pointer<gsl_multifit_nlinear_solver> value) =>
      _gsl_multifit_nlinear_solver_svd.value = value;

  ffi.Pointer<gsl_multifit_linear_workspace> gsl_multifit_linear_alloc(
    int n,
    int p,
  ) {
    return _gsl_multifit_linear_alloc(
      n,
      p,
    );
  }

  late final _gsl_multifit_linear_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multifit_linear_workspace> Function(
              size_t, size_t)>>('gsl_multifit_linear_alloc');
  late final _gsl_multifit_linear_alloc =
      _gsl_multifit_linear_allocPtr.asFunction<
          ffi.Pointer<gsl_multifit_linear_workspace> Function(int, int)>();

  void gsl_multifit_linear_free(
    ffi.Pointer<gsl_multifit_linear_workspace> w,
  ) {
    return _gsl_multifit_linear_free(
      w,
    );
  }

  late final _gsl_multifit_linear_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_free');
  late final _gsl_multifit_linear_free = _gsl_multifit_linear_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_matrix> cov,
    ffi.Pointer<ffi.Double> chisq,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear(
      X,
      y,
      c,
      cov,
      chisq,
      work,
    );
  }

  late final _gsl_multifit_linearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear');
  late final _gsl_multifit_linear = _gsl_multifit_linearPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_tsvd(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    double tol,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_matrix> cov,
    ffi.Pointer<ffi.Double> chisq,
    ffi.Pointer<size_t> rank,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_tsvd(
      X,
      y,
      tol,
      c,
      cov,
      chisq,
      rank,
      work,
    );
  }

  late final _gsl_multifit_linear_tsvdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Double,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<size_t>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_tsvd');
  late final _gsl_multifit_linear_tsvd =
      _gsl_multifit_linear_tsvdPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<size_t>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_svd(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_svd(
      X,
      work,
    );
  }

  late final _gsl_multifit_linear_svdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_svd');
  late final _gsl_multifit_linear_svd = _gsl_multifit_linear_svdPtr.asFunction<
      int Function(ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_bsvd(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_bsvd(
      X,
      work,
    );
  }

  late final _gsl_multifit_linear_bsvdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_bsvd');
  late final _gsl_multifit_linear_bsvd =
      _gsl_multifit_linear_bsvdPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_rank(
    double tol,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_rank(
      tol,
      work,
    );
  }

  late final _gsl_multifit_linear_rankPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(
                  ffi.Double, ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_rank');
  late final _gsl_multifit_linear_rank =
      _gsl_multifit_linear_rankPtr.asFunction<
          int Function(double, ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_solve(
    double lambda,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<ffi.Double> rnorm,
    ffi.Pointer<ffi.Double> snorm,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_solve(
      lambda,
      X,
      y,
      c,
      rnorm,
      snorm,
      work,
    );
  }

  late final _gsl_multifit_linear_solvePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_solve');
  late final _gsl_multifit_linear_solve =
      _gsl_multifit_linear_solvePtr.asFunction<
          int Function(
              double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_applyW(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_matrix> WX,
    ffi.Pointer<gsl_vector> Wy,
  ) {
    return _gsl_multifit_linear_applyW(
      X,
      w,
      y,
      WX,
      Wy,
    );
  }

  late final _gsl_multifit_linear_applyWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_linear_applyW');
  late final _gsl_multifit_linear_applyW =
      _gsl_multifit_linear_applyWPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_linear_stdform1(
    ffi.Pointer<gsl_vector> L,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_matrix> Xs,
    ffi.Pointer<gsl_vector> ys,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_stdform1(
      L,
      X,
      y,
      Xs,
      ys,
      work,
    );
  }

  late final _gsl_multifit_linear_stdform1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_stdform1');
  late final _gsl_multifit_linear_stdform1 =
      _gsl_multifit_linear_stdform1Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_wstdform1(
    ffi.Pointer<gsl_vector> L,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_matrix> Xs,
    ffi.Pointer<gsl_vector> ys,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_wstdform1(
      L,
      X,
      w,
      y,
      Xs,
      ys,
      work,
    );
  }

  late final _gsl_multifit_linear_wstdform1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_wstdform1');
  late final _gsl_multifit_linear_wstdform1 =
      _gsl_multifit_linear_wstdform1Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_L_decomp(
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_multifit_linear_L_decomp(
      L,
      tau,
    );
  }

  late final _gsl_multifit_linear_L_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_linear_L_decomp');
  late final _gsl_multifit_linear_L_decomp =
      _gsl_multifit_linear_L_decompPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_linear_stdform2(
    ffi.Pointer<gsl_matrix> LQR,
    ffi.Pointer<gsl_vector> Ltau,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_matrix> Xs,
    ffi.Pointer<gsl_vector> ys,
    ffi.Pointer<gsl_matrix> M,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_stdform2(
      LQR,
      Ltau,
      X,
      y,
      Xs,
      ys,
      M,
      work,
    );
  }

  late final _gsl_multifit_linear_stdform2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_stdform2');
  late final _gsl_multifit_linear_stdform2 =
      _gsl_multifit_linear_stdform2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_wstdform2(
    ffi.Pointer<gsl_matrix> LQR,
    ffi.Pointer<gsl_vector> Ltau,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_matrix> Xs,
    ffi.Pointer<gsl_vector> ys,
    ffi.Pointer<gsl_matrix> M,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_wstdform2(
      LQR,
      Ltau,
      X,
      w,
      y,
      Xs,
      ys,
      M,
      work,
    );
  }

  late final _gsl_multifit_linear_wstdform2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_wstdform2');
  late final _gsl_multifit_linear_wstdform2 =
      _gsl_multifit_linear_wstdform2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_genform1(
    ffi.Pointer<gsl_vector> L,
    ffi.Pointer<gsl_vector> cs,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_genform1(
      L,
      cs,
      c,
      work,
    );
  }

  late final _gsl_multifit_linear_genform1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_genform1');
  late final _gsl_multifit_linear_genform1 =
      _gsl_multifit_linear_genform1Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_genform2(
    ffi.Pointer<gsl_matrix> LQR,
    ffi.Pointer<gsl_vector> Ltau,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> cs,
    ffi.Pointer<gsl_matrix> M,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_genform2(
      LQR,
      Ltau,
      X,
      y,
      cs,
      M,
      c,
      work,
    );
  }

  late final _gsl_multifit_linear_genform2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_genform2');
  late final _gsl_multifit_linear_genform2 =
      _gsl_multifit_linear_genform2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_wgenform2(
    ffi.Pointer<gsl_matrix> LQR,
    ffi.Pointer<gsl_vector> Ltau,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> cs,
    ffi.Pointer<gsl_matrix> M,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_wgenform2(
      LQR,
      Ltau,
      X,
      w,
      y,
      cs,
      M,
      c,
      work,
    );
  }

  late final _gsl_multifit_linear_wgenform2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_wgenform2');
  late final _gsl_multifit_linear_wgenform2 =
      _gsl_multifit_linear_wgenform2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_lreg(
    double smin,
    double smax,
    ffi.Pointer<gsl_vector> reg_param,
  ) {
    return _gsl_multifit_linear_lreg(
      smin,
      smax,
      reg_param,
    );
  }

  late final _gsl_multifit_linear_lregPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_linear_lreg');
  late final _gsl_multifit_linear_lreg = _gsl_multifit_linear_lregPtr
      .asFunction<int Function(double, double, ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_linear_lcurve(
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> reg_param,
    ffi.Pointer<gsl_vector> rho,
    ffi.Pointer<gsl_vector> eta,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_lcurve(
      y,
      reg_param,
      rho,
      eta,
      work,
    );
  }

  late final _gsl_multifit_linear_lcurvePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_lcurve');
  late final _gsl_multifit_linear_lcurve =
      _gsl_multifit_linear_lcurvePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_lcurvature(
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> reg_param,
    ffi.Pointer<gsl_vector> rho,
    ffi.Pointer<gsl_vector> eta,
    ffi.Pointer<gsl_vector> kappa,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_lcurvature(
      y,
      reg_param,
      rho,
      eta,
      kappa,
      work,
    );
  }

  late final _gsl_multifit_linear_lcurvaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_lcurvature');
  late final _gsl_multifit_linear_lcurvature =
      _gsl_multifit_linear_lcurvaturePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_lcorner(
    ffi.Pointer<gsl_vector> rho,
    ffi.Pointer<gsl_vector> eta,
    ffi.Pointer<size_t> idx,
  ) {
    return _gsl_multifit_linear_lcorner(
      rho,
      eta,
      idx,
    );
  }

  late final _gsl_multifit_linear_lcornerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<size_t>)>>('gsl_multifit_linear_lcorner');
  late final _gsl_multifit_linear_lcorner =
      _gsl_multifit_linear_lcornerPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<size_t>)>();

  int gsl_multifit_linear_lcorner2(
    ffi.Pointer<gsl_vector> reg_param,
    ffi.Pointer<gsl_vector> eta,
    ffi.Pointer<size_t> idx,
  ) {
    return _gsl_multifit_linear_lcorner2(
      reg_param,
      eta,
      idx,
    );
  }

  late final _gsl_multifit_linear_lcorner2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<size_t>)>>('gsl_multifit_linear_lcorner2');
  late final _gsl_multifit_linear_lcorner2 =
      _gsl_multifit_linear_lcorner2Ptr.asFunction<
          int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<size_t>)>();

  int gsl_multifit_linear_Lk(
    int p,
    int k,
    ffi.Pointer<gsl_matrix> L,
  ) {
    return _gsl_multifit_linear_Lk(
      p,
      k,
      L,
    );
  }

  late final _gsl_multifit_linear_LkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(size_t, size_t,
              ffi.Pointer<gsl_matrix>)>>('gsl_multifit_linear_Lk');
  late final _gsl_multifit_linear_Lk = _gsl_multifit_linear_LkPtr
      .asFunction<int Function(int, int, ffi.Pointer<gsl_matrix>)>();

  int gsl_multifit_linear_Lsobolev(
    int p,
    int kmax,
    ffi.Pointer<gsl_vector> alpha,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_Lsobolev(
      p,
      kmax,
      alpha,
      L,
      work,
    );
  }

  late final _gsl_multifit_linear_LsobolevPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_Lsobolev');
  late final _gsl_multifit_linear_Lsobolev =
      _gsl_multifit_linear_LsobolevPtr.asFunction<
          int Function(
              int,
              int,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_wlinear(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_matrix> cov,
    ffi.Pointer<ffi.Double> chisq,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_wlinear(
      X,
      w,
      y,
      c,
      cov,
      chisq,
      work,
    );
  }

  late final _gsl_multifit_wlinearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_wlinear');
  late final _gsl_multifit_wlinear = _gsl_multifit_wlinearPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_wlinear_tsvd(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    double tol,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_matrix> cov,
    ffi.Pointer<ffi.Double> chisq,
    ffi.Pointer<size_t> rank,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_wlinear_tsvd(
      X,
      w,
      y,
      tol,
      c,
      cov,
      chisq,
      rank,
      work,
    );
  }

  late final _gsl_multifit_wlinear_tsvdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Double,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<size_t>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_wlinear_tsvd');
  late final _gsl_multifit_wlinear_tsvd =
      _gsl_multifit_wlinear_tsvdPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<size_t>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_wlinear_svd(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    double tol,
    ffi.Pointer<size_t> rank,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_matrix> cov,
    ffi.Pointer<ffi.Double> chisq,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_wlinear_svd(
      X,
      w,
      y,
      tol,
      rank,
      c,
      cov,
      chisq,
      work,
    );
  }

  late final _gsl_multifit_wlinear_svdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Double,
                  ffi.Pointer<size_t>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_wlinear_svd');
  late final _gsl_multifit_wlinear_svd =
      _gsl_multifit_wlinear_svdPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              double,
              ffi.Pointer<size_t>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_wlinear_usvd(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    double tol,
    ffi.Pointer<size_t> rank,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_matrix> cov,
    ffi.Pointer<ffi.Double> chisq,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_wlinear_usvd(
      X,
      w,
      y,
      tol,
      rank,
      c,
      cov,
      chisq,
      work,
    );
  }

  late final _gsl_multifit_wlinear_usvdPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Double,
                  ffi.Pointer<size_t>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_wlinear_usvd');
  late final _gsl_multifit_wlinear_usvd =
      _gsl_multifit_wlinear_usvdPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              double,
              ffi.Pointer<size_t>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_est(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_matrix> cov,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> y_err,
  ) {
    return _gsl_multifit_linear_est(
      x,
      c,
      cov,
      y,
      y_err,
    );
  }

  late final _gsl_multifit_linear_estPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_multifit_linear_est');
  late final _gsl_multifit_linear_est = _gsl_multifit_linear_estPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  double gsl_multifit_linear_rcond(
    ffi.Pointer<gsl_multifit_linear_workspace> w,
  ) {
    return _gsl_multifit_linear_rcond(
      w,
    );
  }

  late final _gsl_multifit_linear_rcondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_rcond');
  late final _gsl_multifit_linear_rcond =
      _gsl_multifit_linear_rcondPtr.asFunction<
          double Function(ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_residuals(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_vector> r,
  ) {
    return _gsl_multifit_linear_residuals(
      X,
      y,
      c,
      r,
    );
  }

  late final _gsl_multifit_linear_residualsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multifit_linear_residuals');
  late final _gsl_multifit_linear_residuals =
      _gsl_multifit_linear_residualsPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>();

  int gsl_multifit_linear_gcv_init(
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> reg_param,
    ffi.Pointer<gsl_vector> UTy,
    ffi.Pointer<ffi.Double> delta0,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_gcv_init(
      y,
      reg_param,
      UTy,
      delta0,
      work,
    );
  }

  late final _gsl_multifit_linear_gcv_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_gcv_init');
  late final _gsl_multifit_linear_gcv_init =
      _gsl_multifit_linear_gcv_initPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_gcv_curve(
    ffi.Pointer<gsl_vector> reg_param,
    ffi.Pointer<gsl_vector> UTy,
    double delta0,
    ffi.Pointer<gsl_vector> G,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_gcv_curve(
      reg_param,
      UTy,
      delta0,
      G,
      work,
    );
  }

  late final _gsl_multifit_linear_gcv_curvePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Double,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_gcv_curve');
  late final _gsl_multifit_linear_gcv_curve =
      _gsl_multifit_linear_gcv_curvePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_gcv_min(
    ffi.Pointer<gsl_vector> reg_param,
    ffi.Pointer<gsl_vector> UTy,
    ffi.Pointer<gsl_vector> G,
    double delta0,
    ffi.Pointer<ffi.Double> lambda,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_gcv_min(
      reg_param,
      UTy,
      G,
      delta0,
      lambda,
      work,
    );
  }

  late final _gsl_multifit_linear_gcv_minPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Double,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_gcv_min');
  late final _gsl_multifit_linear_gcv_min =
      _gsl_multifit_linear_gcv_minPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  double gsl_multifit_linear_gcv_calc(
    double lambda,
    ffi.Pointer<gsl_vector> UTy,
    double delta0,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_gcv_calc(
      lambda,
      UTy,
      delta0,
      work,
    );
  }

  late final _gsl_multifit_linear_gcv_calcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Double, ffi.Pointer<gsl_vector>,
                  ffi.Double, ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_gcv_calc');
  late final _gsl_multifit_linear_gcv_calc =
      _gsl_multifit_linear_gcv_calcPtr.asFunction<
          double Function(double, ffi.Pointer<gsl_vector>, double,
              ffi.Pointer<gsl_multifit_linear_workspace>)>();

  int gsl_multifit_linear_gcv(
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> reg_param,
    ffi.Pointer<gsl_vector> G,
    ffi.Pointer<ffi.Double> lambda,
    ffi.Pointer<ffi.Double> G_lambda,
    ffi.Pointer<gsl_multifit_linear_workspace> work,
  ) {
    return _gsl_multifit_linear_gcv(
      y,
      reg_param,
      G,
      lambda,
      G_lambda,
      work,
    );
  }

  late final _gsl_multifit_linear_gcvPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multifit_linear_workspace>)>>(
      'gsl_multifit_linear_gcv');
  late final _gsl_multifit_linear_gcv = _gsl_multifit_linear_gcvPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_multifit_linear_workspace>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_robust_type>>
      _gsl_multifit_robust_default =
      _lookup<ffi.Pointer<gsl_multifit_robust_type>>(
          'gsl_multifit_robust_default');

  ffi.Pointer<gsl_multifit_robust_type> get gsl_multifit_robust_default =>
      _gsl_multifit_robust_default.value;

  set gsl_multifit_robust_default(
          ffi.Pointer<gsl_multifit_robust_type> value) =>
      _gsl_multifit_robust_default.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_robust_type>>
      _gsl_multifit_robust_bisquare =
      _lookup<ffi.Pointer<gsl_multifit_robust_type>>(
          'gsl_multifit_robust_bisquare');

  ffi.Pointer<gsl_multifit_robust_type> get gsl_multifit_robust_bisquare =>
      _gsl_multifit_robust_bisquare.value;

  set gsl_multifit_robust_bisquare(
          ffi.Pointer<gsl_multifit_robust_type> value) =>
      _gsl_multifit_robust_bisquare.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_robust_type>>
      _gsl_multifit_robust_cauchy =
      _lookup<ffi.Pointer<gsl_multifit_robust_type>>(
          'gsl_multifit_robust_cauchy');

  ffi.Pointer<gsl_multifit_robust_type> get gsl_multifit_robust_cauchy =>
      _gsl_multifit_robust_cauchy.value;

  set gsl_multifit_robust_cauchy(ffi.Pointer<gsl_multifit_robust_type> value) =>
      _gsl_multifit_robust_cauchy.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_robust_type>>
      _gsl_multifit_robust_fair =
      _lookup<ffi.Pointer<gsl_multifit_robust_type>>(
          'gsl_multifit_robust_fair');

  ffi.Pointer<gsl_multifit_robust_type> get gsl_multifit_robust_fair =>
      _gsl_multifit_robust_fair.value;

  set gsl_multifit_robust_fair(ffi.Pointer<gsl_multifit_robust_type> value) =>
      _gsl_multifit_robust_fair.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_robust_type>>
      _gsl_multifit_robust_huber =
      _lookup<ffi.Pointer<gsl_multifit_robust_type>>(
          'gsl_multifit_robust_huber');

  ffi.Pointer<gsl_multifit_robust_type> get gsl_multifit_robust_huber =>
      _gsl_multifit_robust_huber.value;

  set gsl_multifit_robust_huber(ffi.Pointer<gsl_multifit_robust_type> value) =>
      _gsl_multifit_robust_huber.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_robust_type>>
      _gsl_multifit_robust_ols =
      _lookup<ffi.Pointer<gsl_multifit_robust_type>>('gsl_multifit_robust_ols');

  ffi.Pointer<gsl_multifit_robust_type> get gsl_multifit_robust_ols =>
      _gsl_multifit_robust_ols.value;

  set gsl_multifit_robust_ols(ffi.Pointer<gsl_multifit_robust_type> value) =>
      _gsl_multifit_robust_ols.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multifit_robust_type>>
      _gsl_multifit_robust_welsch =
      _lookup<ffi.Pointer<gsl_multifit_robust_type>>(
          'gsl_multifit_robust_welsch');

  ffi.Pointer<gsl_multifit_robust_type> get gsl_multifit_robust_welsch =>
      _gsl_multifit_robust_welsch.value;

  set gsl_multifit_robust_welsch(ffi.Pointer<gsl_multifit_robust_type> value) =>
      _gsl_multifit_robust_welsch.value = value;

  ffi.Pointer<gsl_multifit_robust_workspace> gsl_multifit_robust_alloc(
    ffi.Pointer<gsl_multifit_robust_type> T,
    int n,
    int p,
  ) {
    return _gsl_multifit_robust_alloc(
      T,
      n,
      p,
    );
  }

  late final _gsl_multifit_robust_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multifit_robust_workspace> Function(
              ffi.Pointer<gsl_multifit_robust_type>,
              size_t,
              size_t)>>('gsl_multifit_robust_alloc');
  late final _gsl_multifit_robust_alloc =
      _gsl_multifit_robust_allocPtr.asFunction<
          ffi.Pointer<gsl_multifit_robust_workspace> Function(
              ffi.Pointer<gsl_multifit_robust_type>, int, int)>();

  void gsl_multifit_robust_free(
    ffi.Pointer<gsl_multifit_robust_workspace> w,
  ) {
    return _gsl_multifit_robust_free(
      w,
    );
  }

  late final _gsl_multifit_robust_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multifit_robust_workspace>)>>(
      'gsl_multifit_robust_free');
  late final _gsl_multifit_robust_free = _gsl_multifit_robust_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multifit_robust_workspace>)>();

  int gsl_multifit_robust_tune(
    double tune,
    ffi.Pointer<gsl_multifit_robust_workspace> w,
  ) {
    return _gsl_multifit_robust_tune(
      tune,
      w,
    );
  }

  late final _gsl_multifit_robust_tunePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double, ffi.Pointer<gsl_multifit_robust_workspace>)>>(
      'gsl_multifit_robust_tune');
  late final _gsl_multifit_robust_tune =
      _gsl_multifit_robust_tunePtr.asFunction<
          int Function(double, ffi.Pointer<gsl_multifit_robust_workspace>)>();

  int gsl_multifit_robust_maxiter(
    int maxiter,
    ffi.Pointer<gsl_multifit_robust_workspace> w,
  ) {
    return _gsl_multifit_robust_maxiter(
      maxiter,
      w,
    );
  }

  late final _gsl_multifit_robust_maxiterPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  size_t, ffi.Pointer<gsl_multifit_robust_workspace>)>>(
      'gsl_multifit_robust_maxiter');
  late final _gsl_multifit_robust_maxiter =
      _gsl_multifit_robust_maxiterPtr.asFunction<
          int Function(int, ffi.Pointer<gsl_multifit_robust_workspace>)>();

  ffi.Pointer<ffi.Int8> gsl_multifit_robust_name(
    ffi.Pointer<gsl_multifit_robust_workspace> w,
  ) {
    return _gsl_multifit_robust_name(
      w,
    );
  }

  late final _gsl_multifit_robust_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multifit_robust_workspace>)>>(
      'gsl_multifit_robust_name');
  late final _gsl_multifit_robust_name =
      _gsl_multifit_robust_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multifit_robust_workspace>)>();

  gsl_multifit_robust_stats gsl_multifit_robust_statistics(
    ffi.Pointer<gsl_multifit_robust_workspace> w,
  ) {
    return _gsl_multifit_robust_statistics(
      w,
    );
  }

  late final _gsl_multifit_robust_statisticsPtr = _lookup<
          ffi.NativeFunction<
              gsl_multifit_robust_stats Function(
                  ffi.Pointer<gsl_multifit_robust_workspace>)>>(
      'gsl_multifit_robust_statistics');
  late final _gsl_multifit_robust_statistics =
      _gsl_multifit_robust_statisticsPtr.asFunction<
          gsl_multifit_robust_stats Function(
              ffi.Pointer<gsl_multifit_robust_workspace>)>();

  int gsl_multifit_robust_weights(
    ffi.Pointer<gsl_vector> r,
    ffi.Pointer<gsl_vector> wts,
    ffi.Pointer<gsl_multifit_robust_workspace> w,
  ) {
    return _gsl_multifit_robust_weights(
      r,
      wts,
      w,
    );
  }

  late final _gsl_multifit_robust_weightsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_robust_workspace>)>>(
      'gsl_multifit_robust_weights');
  late final _gsl_multifit_robust_weights =
      _gsl_multifit_robust_weightsPtr.asFunction<
          int Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_robust_workspace>)>();

  int gsl_multifit_robust(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_matrix> cov,
    ffi.Pointer<gsl_multifit_robust_workspace> w,
  ) {
    return _gsl_multifit_robust(
      X,
      y,
      c,
      cov,
      w,
    );
  }

  late final _gsl_multifit_robustPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_multifit_robust_workspace>)>>(
      'gsl_multifit_robust');
  late final _gsl_multifit_robust = _gsl_multifit_robustPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_multifit_robust_workspace>)>();

  int gsl_multifit_robust_est(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_matrix> cov,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> y_err,
  ) {
    return _gsl_multifit_robust_est(
      x,
      c,
      cov,
      y,
      y_err,
    );
  }

  late final _gsl_multifit_robust_estPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_multifit_robust_est');
  late final _gsl_multifit_robust_est = _gsl_multifit_robust_estPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_multifit_robust_residuals(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_vector> r,
    ffi.Pointer<gsl_multifit_robust_workspace> w,
  ) {
    return _gsl_multifit_robust_residuals(
      X,
      y,
      c,
      r,
      w,
    );
  }

  late final _gsl_multifit_robust_residualsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multifit_robust_workspace>)>>(
      'gsl_multifit_robust_residuals');
  late final _gsl_multifit_robust_residuals =
      _gsl_multifit_robust_residualsPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_robust_workspace>)>();

  int gsl_permute_float(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_float(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>,
              size_t, size_t)>>('gsl_permute_float');
  late final _gsl_permute_float = _gsl_permute_floatPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_permute_float_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_float_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_float_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>,
              size_t, size_t)>>('gsl_permute_float_inverse');
  late final _gsl_permute_float_inverse =
      _gsl_permute_float_inversePtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>, int, int)>();

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_rk2 =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_rk2');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_rk2 =>
      _gsl_odeiv2_step_rk2.value;

  set gsl_odeiv2_step_rk2(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_rk2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_rk4 =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_rk4');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_rk4 =>
      _gsl_odeiv2_step_rk4.value;

  set gsl_odeiv2_step_rk4(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_rk4.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_rkf45 =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_rkf45');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_rkf45 =>
      _gsl_odeiv2_step_rkf45.value;

  set gsl_odeiv2_step_rkf45(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_rkf45.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_rkck =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_rkck');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_rkck =>
      _gsl_odeiv2_step_rkck.value;

  set gsl_odeiv2_step_rkck(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_rkck.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_rk8pd =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_rk8pd');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_rk8pd =>
      _gsl_odeiv2_step_rk8pd.value;

  set gsl_odeiv2_step_rk8pd(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_rk8pd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_rk2imp =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_rk2imp');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_rk2imp =>
      _gsl_odeiv2_step_rk2imp.value;

  set gsl_odeiv2_step_rk2imp(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_rk2imp.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_rk4imp =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_rk4imp');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_rk4imp =>
      _gsl_odeiv2_step_rk4imp.value;

  set gsl_odeiv2_step_rk4imp(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_rk4imp.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_bsimp =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_bsimp');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_bsimp =>
      _gsl_odeiv2_step_bsimp.value;

  set gsl_odeiv2_step_bsimp(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_bsimp.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_rk1imp =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_rk1imp');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_rk1imp =>
      _gsl_odeiv2_step_rk1imp.value;

  set gsl_odeiv2_step_rk1imp(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_rk1imp.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_msadams =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_msadams');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_msadams =>
      _gsl_odeiv2_step_msadams.value;

  set gsl_odeiv2_step_msadams(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_msadams.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_odeiv2_step_type>>
      _gsl_odeiv2_step_msbdf =
      _lookup<ffi.Pointer<gsl_odeiv2_step_type>>('gsl_odeiv2_step_msbdf');

  ffi.Pointer<gsl_odeiv2_step_type> get gsl_odeiv2_step_msbdf =>
      _gsl_odeiv2_step_msbdf.value;

  set gsl_odeiv2_step_msbdf(ffi.Pointer<gsl_odeiv2_step_type> value) =>
      _gsl_odeiv2_step_msbdf.value = value;

  ffi.Pointer<gsl_odeiv2_step> gsl_odeiv2_step_alloc(
    ffi.Pointer<gsl_odeiv2_step_type> T,
    int dim,
  ) {
    return _gsl_odeiv2_step_alloc(
      T,
      dim,
    );
  }

  late final _gsl_odeiv2_step_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv2_step> Function(
              ffi.Pointer<gsl_odeiv2_step_type>,
              size_t)>>('gsl_odeiv2_step_alloc');
  late final _gsl_odeiv2_step_alloc = _gsl_odeiv2_step_allocPtr.asFunction<
      ffi.Pointer<gsl_odeiv2_step> Function(
          ffi.Pointer<gsl_odeiv2_step_type>, int)>();

  int gsl_odeiv2_step_reset(
    ffi.Pointer<gsl_odeiv2_step> s,
  ) {
    return _gsl_odeiv2_step_reset(
      s,
    );
  }

  late final _gsl_odeiv2_step_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_odeiv2_step>)>>(
      'gsl_odeiv2_step_reset');
  late final _gsl_odeiv2_step_reset = _gsl_odeiv2_step_resetPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv2_step>)>();

  void gsl_odeiv2_step_free(
    ffi.Pointer<gsl_odeiv2_step> s,
  ) {
    return _gsl_odeiv2_step_free(
      s,
    );
  }

  late final _gsl_odeiv2_step_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_odeiv2_step>)>>(
      'gsl_odeiv2_step_free');
  late final _gsl_odeiv2_step_free = _gsl_odeiv2_step_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_odeiv2_step>)>();

  ffi.Pointer<ffi.Int8> gsl_odeiv2_step_name(
    ffi.Pointer<gsl_odeiv2_step> s,
  ) {
    return _gsl_odeiv2_step_name(
      s,
    );
  }

  late final _gsl_odeiv2_step_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_odeiv2_step>)>>('gsl_odeiv2_step_name');
  late final _gsl_odeiv2_step_name = _gsl_odeiv2_step_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_odeiv2_step>)>();

  int gsl_odeiv2_step_order(
    ffi.Pointer<gsl_odeiv2_step> s,
  ) {
    return _gsl_odeiv2_step_order(
      s,
    );
  }

  late final _gsl_odeiv2_step_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_odeiv2_step>)>>('gsl_odeiv2_step_order');
  late final _gsl_odeiv2_step_order = _gsl_odeiv2_step_orderPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv2_step>)>();

  int gsl_odeiv2_step_apply(
    ffi.Pointer<gsl_odeiv2_step> s,
    double t,
    double h,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> yerr,
    ffi.Pointer<ffi.Double> dydt_in,
    ffi.Pointer<ffi.Double> dydt_out,
    ffi.Pointer<gsl_odeiv2_system> dydt,
  ) {
    return _gsl_odeiv2_step_apply(
      s,
      t,
      h,
      y,
      yerr,
      dydt_in,
      dydt_out,
      dydt,
    );
  }

  late final _gsl_odeiv2_step_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv2_step>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_odeiv2_system>)>>('gsl_odeiv2_step_apply');
  late final _gsl_odeiv2_step_apply = _gsl_odeiv2_step_applyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_odeiv2_step>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_odeiv2_system>)>();

  int gsl_odeiv2_step_set_driver(
    ffi.Pointer<gsl_odeiv2_step> s,
    ffi.Pointer<gsl_odeiv2_driver> d,
  ) {
    return _gsl_odeiv2_step_set_driver(
      s,
      d,
    );
  }

  late final _gsl_odeiv2_step_set_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_odeiv2_step>,
              ffi.Pointer<gsl_odeiv2_driver>)>>('gsl_odeiv2_step_set_driver');
  late final _gsl_odeiv2_step_set_driver =
      _gsl_odeiv2_step_set_driverPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_odeiv2_step>, ffi.Pointer<gsl_odeiv2_driver>)>();

  ffi.Pointer<gsl_odeiv2_control> gsl_odeiv2_control_alloc(
    ffi.Pointer<gsl_odeiv2_control_type> T,
  ) {
    return _gsl_odeiv2_control_alloc(
      T,
    );
  }

  late final _gsl_odeiv2_control_allocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_odeiv2_control> Function(
                  ffi.Pointer<gsl_odeiv2_control_type>)>>(
      'gsl_odeiv2_control_alloc');
  late final _gsl_odeiv2_control_alloc =
      _gsl_odeiv2_control_allocPtr.asFunction<
          ffi.Pointer<gsl_odeiv2_control> Function(
              ffi.Pointer<gsl_odeiv2_control_type>)>();

  int gsl_odeiv2_control_init(
    ffi.Pointer<gsl_odeiv2_control> c,
    double eps_abs,
    double eps_rel,
    double a_y,
    double a_dydt,
  ) {
    return _gsl_odeiv2_control_init(
      c,
      eps_abs,
      eps_rel,
      a_y,
      a_dydt,
    );
  }

  late final _gsl_odeiv2_control_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_odeiv2_control>, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_odeiv2_control_init');
  late final _gsl_odeiv2_control_init = _gsl_odeiv2_control_initPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_odeiv2_control>, double, double, double, double)>();

  void gsl_odeiv2_control_free(
    ffi.Pointer<gsl_odeiv2_control> c,
  ) {
    return _gsl_odeiv2_control_free(
      c,
    );
  }

  late final _gsl_odeiv2_control_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_odeiv2_control>)>>('gsl_odeiv2_control_free');
  late final _gsl_odeiv2_control_free = _gsl_odeiv2_control_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_odeiv2_control>)>();

  int gsl_odeiv2_control_hadjust(
    ffi.Pointer<gsl_odeiv2_control> c,
    ffi.Pointer<gsl_odeiv2_step> s,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> yerr,
    ffi.Pointer<ffi.Double> dydt,
    ffi.Pointer<ffi.Double> h,
  ) {
    return _gsl_odeiv2_control_hadjust(
      c,
      s,
      y,
      yerr,
      dydt,
      h,
    );
  }

  late final _gsl_odeiv2_control_hadjustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv2_control>,
              ffi.Pointer<gsl_odeiv2_step>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_odeiv2_control_hadjust');
  late final _gsl_odeiv2_control_hadjust =
      _gsl_odeiv2_control_hadjustPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_odeiv2_control>,
              ffi.Pointer<gsl_odeiv2_step>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<ffi.Int8> gsl_odeiv2_control_name(
    ffi.Pointer<gsl_odeiv2_control> c,
  ) {
    return _gsl_odeiv2_control_name(
      c,
    );
  }

  late final _gsl_odeiv2_control_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_odeiv2_control>)>>('gsl_odeiv2_control_name');
  late final _gsl_odeiv2_control_name = _gsl_odeiv2_control_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_odeiv2_control>)>();

  int gsl_odeiv2_control_errlevel(
    ffi.Pointer<gsl_odeiv2_control> c,
    double y,
    double dydt,
    double h,
    int ind,
    ffi.Pointer<ffi.Double> errlev,
  ) {
    return _gsl_odeiv2_control_errlevel(
      c,
      y,
      dydt,
      h,
      ind,
      errlev,
    );
  }

  late final _gsl_odeiv2_control_errlevelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv2_control>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_odeiv2_control_errlevel');
  late final _gsl_odeiv2_control_errlevel =
      _gsl_odeiv2_control_errlevelPtr.asFunction<
          int Function(ffi.Pointer<gsl_odeiv2_control>, double, double, double,
              int, ffi.Pointer<ffi.Double>)>();

  int gsl_odeiv2_control_set_driver(
    ffi.Pointer<gsl_odeiv2_control> c,
    ffi.Pointer<gsl_odeiv2_driver> d,
  ) {
    return _gsl_odeiv2_control_set_driver(
      c,
      d,
    );
  }

  late final _gsl_odeiv2_control_set_driverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_odeiv2_control>,
                  ffi.Pointer<gsl_odeiv2_driver>)>>(
      'gsl_odeiv2_control_set_driver');
  late final _gsl_odeiv2_control_set_driver =
      _gsl_odeiv2_control_set_driverPtr.asFunction<
          int Function(ffi.Pointer<gsl_odeiv2_control>,
              ffi.Pointer<gsl_odeiv2_driver>)>();

  ffi.Pointer<gsl_odeiv2_control> gsl_odeiv2_control_standard_new(
    double eps_abs,
    double eps_rel,
    double a_y,
    double a_dydt,
  ) {
    return _gsl_odeiv2_control_standard_new(
      eps_abs,
      eps_rel,
      a_y,
      a_dydt,
    );
  }

  late final _gsl_odeiv2_control_standard_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv2_control> Function(ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('gsl_odeiv2_control_standard_new');
  late final _gsl_odeiv2_control_standard_new =
      _gsl_odeiv2_control_standard_newPtr.asFunction<
          ffi.Pointer<gsl_odeiv2_control> Function(
              double, double, double, double)>();

  ffi.Pointer<gsl_odeiv2_control> gsl_odeiv2_control_y_new(
    double eps_abs,
    double eps_rel,
  ) {
    return _gsl_odeiv2_control_y_new(
      eps_abs,
      eps_rel,
    );
  }

  late final _gsl_odeiv2_control_y_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv2_control> Function(
              ffi.Double, ffi.Double)>>('gsl_odeiv2_control_y_new');
  late final _gsl_odeiv2_control_y_new = _gsl_odeiv2_control_y_newPtr
      .asFunction<ffi.Pointer<gsl_odeiv2_control> Function(double, double)>();

  ffi.Pointer<gsl_odeiv2_control> gsl_odeiv2_control_yp_new(
    double eps_abs,
    double eps_rel,
  ) {
    return _gsl_odeiv2_control_yp_new(
      eps_abs,
      eps_rel,
    );
  }

  late final _gsl_odeiv2_control_yp_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv2_control> Function(
              ffi.Double, ffi.Double)>>('gsl_odeiv2_control_yp_new');
  late final _gsl_odeiv2_control_yp_new = _gsl_odeiv2_control_yp_newPtr
      .asFunction<ffi.Pointer<gsl_odeiv2_control> Function(double, double)>();

  ffi.Pointer<gsl_odeiv2_control> gsl_odeiv2_control_scaled_new(
    double eps_abs,
    double eps_rel,
    double a_y,
    double a_dydt,
    ffi.Pointer<ffi.Double> scale_abs,
    int dim,
  ) {
    return _gsl_odeiv2_control_scaled_new(
      eps_abs,
      eps_rel,
      a_y,
      a_dydt,
      scale_abs,
      dim,
    );
  }

  late final _gsl_odeiv2_control_scaled_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv2_control> Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              size_t)>>('gsl_odeiv2_control_scaled_new');
  late final _gsl_odeiv2_control_scaled_new =
      _gsl_odeiv2_control_scaled_newPtr.asFunction<
          ffi.Pointer<gsl_odeiv2_control> Function(
              double, double, double, double, ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<gsl_odeiv2_evolve> gsl_odeiv2_evolve_alloc(
    int dim,
  ) {
    return _gsl_odeiv2_evolve_alloc(
      dim,
    );
  }

  late final _gsl_odeiv2_evolve_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_odeiv2_evolve> Function(size_t)>>(
      'gsl_odeiv2_evolve_alloc');
  late final _gsl_odeiv2_evolve_alloc = _gsl_odeiv2_evolve_allocPtr
      .asFunction<ffi.Pointer<gsl_odeiv2_evolve> Function(int)>();

  int gsl_odeiv2_evolve_apply(
    ffi.Pointer<gsl_odeiv2_evolve> e,
    ffi.Pointer<gsl_odeiv2_control> con,
    ffi.Pointer<gsl_odeiv2_step> step,
    ffi.Pointer<gsl_odeiv2_system> dydt,
    ffi.Pointer<ffi.Double> t,
    double t1,
    ffi.Pointer<ffi.Double> h,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_odeiv2_evolve_apply(
      e,
      con,
      step,
      dydt,
      t,
      t1,
      h,
      y,
    );
  }

  late final _gsl_odeiv2_evolve_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv2_evolve>,
              ffi.Pointer<gsl_odeiv2_control>,
              ffi.Pointer<gsl_odeiv2_step>,
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_odeiv2_evolve_apply');
  late final _gsl_odeiv2_evolve_apply = _gsl_odeiv2_evolve_applyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_odeiv2_evolve>,
          ffi.Pointer<gsl_odeiv2_control>,
          ffi.Pointer<gsl_odeiv2_step>,
          ffi.Pointer<gsl_odeiv2_system>,
          ffi.Pointer<ffi.Double>,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_odeiv2_evolve_apply_fixed_step(
    ffi.Pointer<gsl_odeiv2_evolve> e,
    ffi.Pointer<gsl_odeiv2_control> con,
    ffi.Pointer<gsl_odeiv2_step> step,
    ffi.Pointer<gsl_odeiv2_system> dydt,
    ffi.Pointer<ffi.Double> t,
    double h0,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_odeiv2_evolve_apply_fixed_step(
      e,
      con,
      step,
      dydt,
      t,
      h0,
      y,
    );
  }

  late final _gsl_odeiv2_evolve_apply_fixed_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv2_evolve>,
              ffi.Pointer<gsl_odeiv2_control>,
              ffi.Pointer<gsl_odeiv2_step>,
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_odeiv2_evolve_apply_fixed_step');
  late final _gsl_odeiv2_evolve_apply_fixed_step =
      _gsl_odeiv2_evolve_apply_fixed_stepPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_odeiv2_evolve>,
              ffi.Pointer<gsl_odeiv2_control>,
              ffi.Pointer<gsl_odeiv2_step>,
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<ffi.Double>,
              double,
              ffi.Pointer<ffi.Double>)>();

  int gsl_odeiv2_evolve_reset(
    ffi.Pointer<gsl_odeiv2_evolve> e,
  ) {
    return _gsl_odeiv2_evolve_reset(
      e,
    );
  }

  late final _gsl_odeiv2_evolve_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv2_evolve>)>>('gsl_odeiv2_evolve_reset');
  late final _gsl_odeiv2_evolve_reset = _gsl_odeiv2_evolve_resetPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv2_evolve>)>();

  void gsl_odeiv2_evolve_free(
    ffi.Pointer<gsl_odeiv2_evolve> e,
  ) {
    return _gsl_odeiv2_evolve_free(
      e,
    );
  }

  late final _gsl_odeiv2_evolve_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_odeiv2_evolve>)>>('gsl_odeiv2_evolve_free');
  late final _gsl_odeiv2_evolve_free = _gsl_odeiv2_evolve_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_odeiv2_evolve>)>();

  int gsl_odeiv2_evolve_set_driver(
    ffi.Pointer<gsl_odeiv2_evolve> e,
    ffi.Pointer<gsl_odeiv2_driver> d,
  ) {
    return _gsl_odeiv2_evolve_set_driver(
      e,
      d,
    );
  }

  late final _gsl_odeiv2_evolve_set_driverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_odeiv2_evolve>,
              ffi.Pointer<gsl_odeiv2_driver>)>>('gsl_odeiv2_evolve_set_driver');
  late final _gsl_odeiv2_evolve_set_driver =
      _gsl_odeiv2_evolve_set_driverPtr.asFunction<
          int Function(ffi.Pointer<gsl_odeiv2_evolve>,
              ffi.Pointer<gsl_odeiv2_driver>)>();

  ffi.Pointer<gsl_odeiv2_driver> gsl_odeiv2_driver_alloc_y_new(
    ffi.Pointer<gsl_odeiv2_system> sys,
    ffi.Pointer<gsl_odeiv2_step_type> T,
    double hstart,
    double epsabs,
    double epsrel,
  ) {
    return _gsl_odeiv2_driver_alloc_y_new(
      sys,
      T,
      hstart,
      epsabs,
      epsrel,
    );
  }

  late final _gsl_odeiv2_driver_alloc_y_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv2_driver> Function(
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<gsl_odeiv2_step_type>,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('gsl_odeiv2_driver_alloc_y_new');
  late final _gsl_odeiv2_driver_alloc_y_new =
      _gsl_odeiv2_driver_alloc_y_newPtr.asFunction<
          ffi.Pointer<gsl_odeiv2_driver> Function(
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<gsl_odeiv2_step_type>,
              double,
              double,
              double)>();

  ffi.Pointer<gsl_odeiv2_driver> gsl_odeiv2_driver_alloc_yp_new(
    ffi.Pointer<gsl_odeiv2_system> sys,
    ffi.Pointer<gsl_odeiv2_step_type> T,
    double hstart,
    double epsabs,
    double epsrel,
  ) {
    return _gsl_odeiv2_driver_alloc_yp_new(
      sys,
      T,
      hstart,
      epsabs,
      epsrel,
    );
  }

  late final _gsl_odeiv2_driver_alloc_yp_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv2_driver> Function(
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<gsl_odeiv2_step_type>,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('gsl_odeiv2_driver_alloc_yp_new');
  late final _gsl_odeiv2_driver_alloc_yp_new =
      _gsl_odeiv2_driver_alloc_yp_newPtr.asFunction<
          ffi.Pointer<gsl_odeiv2_driver> Function(
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<gsl_odeiv2_step_type>,
              double,
              double,
              double)>();

  ffi.Pointer<gsl_odeiv2_driver> gsl_odeiv2_driver_alloc_scaled_new(
    ffi.Pointer<gsl_odeiv2_system> sys,
    ffi.Pointer<gsl_odeiv2_step_type> T,
    double hstart,
    double epsabs,
    double epsrel,
    double a_y,
    double a_dydt,
    ffi.Pointer<ffi.Double> scale_abs,
  ) {
    return _gsl_odeiv2_driver_alloc_scaled_new(
      sys,
      T,
      hstart,
      epsabs,
      epsrel,
      a_y,
      a_dydt,
      scale_abs,
    );
  }

  late final _gsl_odeiv2_driver_alloc_scaled_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv2_driver> Function(
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<gsl_odeiv2_step_type>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_odeiv2_driver_alloc_scaled_new');
  late final _gsl_odeiv2_driver_alloc_scaled_new =
      _gsl_odeiv2_driver_alloc_scaled_newPtr.asFunction<
          ffi.Pointer<gsl_odeiv2_driver> Function(
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<gsl_odeiv2_step_type>,
              double,
              double,
              double,
              double,
              double,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_odeiv2_driver> gsl_odeiv2_driver_alloc_standard_new(
    ffi.Pointer<gsl_odeiv2_system> sys,
    ffi.Pointer<gsl_odeiv2_step_type> T,
    double hstart,
    double epsabs,
    double epsrel,
    double a_y,
    double a_dydt,
  ) {
    return _gsl_odeiv2_driver_alloc_standard_new(
      sys,
      T,
      hstart,
      epsabs,
      epsrel,
      a_y,
      a_dydt,
    );
  }

  late final _gsl_odeiv2_driver_alloc_standard_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_odeiv2_driver> Function(
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<gsl_odeiv2_step_type>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('gsl_odeiv2_driver_alloc_standard_new');
  late final _gsl_odeiv2_driver_alloc_standard_new =
      _gsl_odeiv2_driver_alloc_standard_newPtr.asFunction<
          ffi.Pointer<gsl_odeiv2_driver> Function(
              ffi.Pointer<gsl_odeiv2_system>,
              ffi.Pointer<gsl_odeiv2_step_type>,
              double,
              double,
              double,
              double,
              double)>();

  int gsl_odeiv2_driver_set_hmin(
    ffi.Pointer<gsl_odeiv2_driver> d,
    double hmin,
  ) {
    return _gsl_odeiv2_driver_set_hmin(
      d,
      hmin,
    );
  }

  late final _gsl_odeiv2_driver_set_hminPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_odeiv2_driver>,
              ffi.Double)>>('gsl_odeiv2_driver_set_hmin');
  late final _gsl_odeiv2_driver_set_hmin = _gsl_odeiv2_driver_set_hminPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv2_driver>, double)>();

  int gsl_odeiv2_driver_set_hmax(
    ffi.Pointer<gsl_odeiv2_driver> d,
    double hmax,
  ) {
    return _gsl_odeiv2_driver_set_hmax(
      d,
      hmax,
    );
  }

  late final _gsl_odeiv2_driver_set_hmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_odeiv2_driver>,
              ffi.Double)>>('gsl_odeiv2_driver_set_hmax');
  late final _gsl_odeiv2_driver_set_hmax = _gsl_odeiv2_driver_set_hmaxPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv2_driver>, double)>();

  int gsl_odeiv2_driver_set_nmax(
    ffi.Pointer<gsl_odeiv2_driver> d,
    int nmax,
  ) {
    return _gsl_odeiv2_driver_set_nmax(
      d,
      nmax,
    );
  }

  late final _gsl_odeiv2_driver_set_nmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_odeiv2_driver>,
              ffi.Uint64)>>('gsl_odeiv2_driver_set_nmax');
  late final _gsl_odeiv2_driver_set_nmax = _gsl_odeiv2_driver_set_nmaxPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv2_driver>, int)>();

  int gsl_odeiv2_driver_apply(
    ffi.Pointer<gsl_odeiv2_driver> d,
    ffi.Pointer<ffi.Double> t,
    double t1,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_odeiv2_driver_apply(
      d,
      t,
      t1,
      y,
    );
  }

  late final _gsl_odeiv2_driver_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv2_driver>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Double>)>>('gsl_odeiv2_driver_apply');
  late final _gsl_odeiv2_driver_apply = _gsl_odeiv2_driver_applyPtr.asFunction<
      int Function(ffi.Pointer<gsl_odeiv2_driver>, ffi.Pointer<ffi.Double>,
          double, ffi.Pointer<ffi.Double>)>();

  int gsl_odeiv2_driver_apply_fixed_step(
    ffi.Pointer<gsl_odeiv2_driver> d,
    ffi.Pointer<ffi.Double> t,
    double h,
    int n,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_odeiv2_driver_apply_fixed_step(
      d,
      t,
      h,
      n,
      y,
    );
  }

  late final _gsl_odeiv2_driver_apply_fixed_stepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv2_driver>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Uint64,
              ffi.Pointer<ffi.Double>)>>('gsl_odeiv2_driver_apply_fixed_step');
  late final _gsl_odeiv2_driver_apply_fixed_step =
      _gsl_odeiv2_driver_apply_fixed_stepPtr.asFunction<
          int Function(ffi.Pointer<gsl_odeiv2_driver>, ffi.Pointer<ffi.Double>,
              double, int, ffi.Pointer<ffi.Double>)>();

  int gsl_odeiv2_driver_reset(
    ffi.Pointer<gsl_odeiv2_driver> d,
  ) {
    return _gsl_odeiv2_driver_reset(
      d,
    );
  }

  late final _gsl_odeiv2_driver_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_odeiv2_driver>)>>('gsl_odeiv2_driver_reset');
  late final _gsl_odeiv2_driver_reset = _gsl_odeiv2_driver_resetPtr
      .asFunction<int Function(ffi.Pointer<gsl_odeiv2_driver>)>();

  int gsl_odeiv2_driver_reset_hstart(
    ffi.Pointer<gsl_odeiv2_driver> d,
    double hstart,
  ) {
    return _gsl_odeiv2_driver_reset_hstart(
      d,
      hstart,
    );
  }

  late final _gsl_odeiv2_driver_reset_hstartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_odeiv2_driver>,
              ffi.Double)>>('gsl_odeiv2_driver_reset_hstart');
  late final _gsl_odeiv2_driver_reset_hstart =
      _gsl_odeiv2_driver_reset_hstartPtr
          .asFunction<int Function(ffi.Pointer<gsl_odeiv2_driver>, double)>();

  void gsl_odeiv2_driver_free(
    ffi.Pointer<gsl_odeiv2_driver> state,
  ) {
    return _gsl_odeiv2_driver_free(
      state,
    );
  }

  late final _gsl_odeiv2_driver_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_odeiv2_driver>)>>('gsl_odeiv2_driver_free');
  late final _gsl_odeiv2_driver_free = _gsl_odeiv2_driver_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_odeiv2_driver>)>();

  gsl_complex gsl_complex_polar(
    double r,
    double theta,
  ) {
    return _gsl_complex_polar(
      r,
      theta,
    );
  }

  late final _gsl_complex_polarPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(ffi.Double, ffi.Double)>>(
          'gsl_complex_polar');
  late final _gsl_complex_polar =
      _gsl_complex_polarPtr.asFunction<gsl_complex Function(double, double)>();

  gsl_complex gsl_complex_rect(
    double x,
    double y,
  ) {
    return _gsl_complex_rect(
      x,
      y,
    );
  }

  late final _gsl_complex_rectPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(ffi.Double, ffi.Double)>>(
          'gsl_complex_rect');
  late final _gsl_complex_rect =
      _gsl_complex_rectPtr.asFunction<gsl_complex Function(double, double)>();

  double gsl_complex_arg(
    gsl_complex z,
  ) {
    return _gsl_complex_arg(
      z,
    );
  }

  late final _gsl_complex_argPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gsl_complex)>>(
          'gsl_complex_arg');
  late final _gsl_complex_arg =
      _gsl_complex_argPtr.asFunction<double Function(gsl_complex)>();

  double gsl_complex_abs(
    gsl_complex z,
  ) {
    return _gsl_complex_abs(
      z,
    );
  }

  late final _gsl_complex_absPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gsl_complex)>>(
          'gsl_complex_abs');
  late final _gsl_complex_abs =
      _gsl_complex_absPtr.asFunction<double Function(gsl_complex)>();

  double gsl_complex_abs2(
    gsl_complex z,
  ) {
    return _gsl_complex_abs2(
      z,
    );
  }

  late final _gsl_complex_abs2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gsl_complex)>>(
          'gsl_complex_abs2');
  late final _gsl_complex_abs2 =
      _gsl_complex_abs2Ptr.asFunction<double Function(gsl_complex)>();

  double gsl_complex_logabs(
    gsl_complex z,
  ) {
    return _gsl_complex_logabs(
      z,
    );
  }

  late final _gsl_complex_logabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(gsl_complex)>>(
          'gsl_complex_logabs');
  late final _gsl_complex_logabs =
      _gsl_complex_logabsPtr.asFunction<double Function(gsl_complex)>();

  gsl_complex gsl_complex_add(
    gsl_complex a,
    gsl_complex b,
  ) {
    return _gsl_complex_add(
      a,
      b,
    );
  }

  late final _gsl_complex_addPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, gsl_complex)>>(
      'gsl_complex_add');
  late final _gsl_complex_add = _gsl_complex_addPtr
      .asFunction<gsl_complex Function(gsl_complex, gsl_complex)>();

  gsl_complex gsl_complex_sub(
    gsl_complex a,
    gsl_complex b,
  ) {
    return _gsl_complex_sub(
      a,
      b,
    );
  }

  late final _gsl_complex_subPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, gsl_complex)>>(
      'gsl_complex_sub');
  late final _gsl_complex_sub = _gsl_complex_subPtr
      .asFunction<gsl_complex Function(gsl_complex, gsl_complex)>();

  gsl_complex gsl_complex_mul(
    gsl_complex a,
    gsl_complex b,
  ) {
    return _gsl_complex_mul(
      a,
      b,
    );
  }

  late final _gsl_complex_mulPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, gsl_complex)>>(
      'gsl_complex_mul');
  late final _gsl_complex_mul = _gsl_complex_mulPtr
      .asFunction<gsl_complex Function(gsl_complex, gsl_complex)>();

  gsl_complex gsl_complex_div(
    gsl_complex a,
    gsl_complex b,
  ) {
    return _gsl_complex_div(
      a,
      b,
    );
  }

  late final _gsl_complex_divPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, gsl_complex)>>(
      'gsl_complex_div');
  late final _gsl_complex_div = _gsl_complex_divPtr
      .asFunction<gsl_complex Function(gsl_complex, gsl_complex)>();

  gsl_complex gsl_complex_add_real(
    gsl_complex a,
    double x,
  ) {
    return _gsl_complex_add_real(
      a,
      x,
    );
  }

  late final _gsl_complex_add_realPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, ffi.Double)>>(
      'gsl_complex_add_real');
  late final _gsl_complex_add_real = _gsl_complex_add_realPtr
      .asFunction<gsl_complex Function(gsl_complex, double)>();

  gsl_complex gsl_complex_sub_real(
    gsl_complex a,
    double x,
  ) {
    return _gsl_complex_sub_real(
      a,
      x,
    );
  }

  late final _gsl_complex_sub_realPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, ffi.Double)>>(
      'gsl_complex_sub_real');
  late final _gsl_complex_sub_real = _gsl_complex_sub_realPtr
      .asFunction<gsl_complex Function(gsl_complex, double)>();

  gsl_complex gsl_complex_mul_real(
    gsl_complex a,
    double x,
  ) {
    return _gsl_complex_mul_real(
      a,
      x,
    );
  }

  late final _gsl_complex_mul_realPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, ffi.Double)>>(
      'gsl_complex_mul_real');
  late final _gsl_complex_mul_real = _gsl_complex_mul_realPtr
      .asFunction<gsl_complex Function(gsl_complex, double)>();

  gsl_complex gsl_complex_div_real(
    gsl_complex a,
    double x,
  ) {
    return _gsl_complex_div_real(
      a,
      x,
    );
  }

  late final _gsl_complex_div_realPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, ffi.Double)>>(
      'gsl_complex_div_real');
  late final _gsl_complex_div_real = _gsl_complex_div_realPtr
      .asFunction<gsl_complex Function(gsl_complex, double)>();

  gsl_complex gsl_complex_add_imag(
    gsl_complex a,
    double y,
  ) {
    return _gsl_complex_add_imag(
      a,
      y,
    );
  }

  late final _gsl_complex_add_imagPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, ffi.Double)>>(
      'gsl_complex_add_imag');
  late final _gsl_complex_add_imag = _gsl_complex_add_imagPtr
      .asFunction<gsl_complex Function(gsl_complex, double)>();

  gsl_complex gsl_complex_sub_imag(
    gsl_complex a,
    double y,
  ) {
    return _gsl_complex_sub_imag(
      a,
      y,
    );
  }

  late final _gsl_complex_sub_imagPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, ffi.Double)>>(
      'gsl_complex_sub_imag');
  late final _gsl_complex_sub_imag = _gsl_complex_sub_imagPtr
      .asFunction<gsl_complex Function(gsl_complex, double)>();

  gsl_complex gsl_complex_mul_imag(
    gsl_complex a,
    double y,
  ) {
    return _gsl_complex_mul_imag(
      a,
      y,
    );
  }

  late final _gsl_complex_mul_imagPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, ffi.Double)>>(
      'gsl_complex_mul_imag');
  late final _gsl_complex_mul_imag = _gsl_complex_mul_imagPtr
      .asFunction<gsl_complex Function(gsl_complex, double)>();

  gsl_complex gsl_complex_div_imag(
    gsl_complex a,
    double y,
  ) {
    return _gsl_complex_div_imag(
      a,
      y,
    );
  }

  late final _gsl_complex_div_imagPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, ffi.Double)>>(
      'gsl_complex_div_imag');
  late final _gsl_complex_div_imag = _gsl_complex_div_imagPtr
      .asFunction<gsl_complex Function(gsl_complex, double)>();

  gsl_complex gsl_complex_conjugate(
    gsl_complex z,
  ) {
    return _gsl_complex_conjugate(
      z,
    );
  }

  late final _gsl_complex_conjugatePtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_conjugate');
  late final _gsl_complex_conjugate =
      _gsl_complex_conjugatePtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_inverse(
    gsl_complex a,
  ) {
    return _gsl_complex_inverse(
      a,
    );
  }

  late final _gsl_complex_inversePtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_inverse');
  late final _gsl_complex_inverse =
      _gsl_complex_inversePtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_negative(
    gsl_complex a,
  ) {
    return _gsl_complex_negative(
      a,
    );
  }

  late final _gsl_complex_negativePtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_negative');
  late final _gsl_complex_negative =
      _gsl_complex_negativePtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_sqrt(
    gsl_complex z,
  ) {
    return _gsl_complex_sqrt(
      z,
    );
  }

  late final _gsl_complex_sqrtPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_sqrt');
  late final _gsl_complex_sqrt =
      _gsl_complex_sqrtPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_sqrt_real(
    double x,
  ) {
    return _gsl_complex_sqrt_real(
      x,
    );
  }

  late final _gsl_complex_sqrt_realPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(ffi.Double)>>(
          'gsl_complex_sqrt_real');
  late final _gsl_complex_sqrt_real =
      _gsl_complex_sqrt_realPtr.asFunction<gsl_complex Function(double)>();

  gsl_complex gsl_complex_pow(
    gsl_complex a,
    gsl_complex b,
  ) {
    return _gsl_complex_pow(
      a,
      b,
    );
  }

  late final _gsl_complex_powPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, gsl_complex)>>(
      'gsl_complex_pow');
  late final _gsl_complex_pow = _gsl_complex_powPtr
      .asFunction<gsl_complex Function(gsl_complex, gsl_complex)>();

  gsl_complex gsl_complex_pow_real(
    gsl_complex a,
    double b,
  ) {
    return _gsl_complex_pow_real(
      a,
      b,
    );
  }

  late final _gsl_complex_pow_realPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, ffi.Double)>>(
      'gsl_complex_pow_real');
  late final _gsl_complex_pow_real = _gsl_complex_pow_realPtr
      .asFunction<gsl_complex Function(gsl_complex, double)>();

  gsl_complex gsl_complex_exp(
    gsl_complex a,
  ) {
    return _gsl_complex_exp(
      a,
    );
  }

  late final _gsl_complex_expPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_exp');
  late final _gsl_complex_exp =
      _gsl_complex_expPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_log(
    gsl_complex a,
  ) {
    return _gsl_complex_log(
      a,
    );
  }

  late final _gsl_complex_logPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_log');
  late final _gsl_complex_log =
      _gsl_complex_logPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_log10(
    gsl_complex a,
  ) {
    return _gsl_complex_log10(
      a,
    );
  }

  late final _gsl_complex_log10Ptr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_log10');
  late final _gsl_complex_log10 =
      _gsl_complex_log10Ptr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_log_b(
    gsl_complex a,
    gsl_complex b,
  ) {
    return _gsl_complex_log_b(
      a,
      b,
    );
  }

  late final _gsl_complex_log_bPtr = _lookup<
          ffi.NativeFunction<gsl_complex Function(gsl_complex, gsl_complex)>>(
      'gsl_complex_log_b');
  late final _gsl_complex_log_b = _gsl_complex_log_bPtr
      .asFunction<gsl_complex Function(gsl_complex, gsl_complex)>();

  gsl_complex gsl_complex_sin(
    gsl_complex a,
  ) {
    return _gsl_complex_sin(
      a,
    );
  }

  late final _gsl_complex_sinPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_sin');
  late final _gsl_complex_sin =
      _gsl_complex_sinPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_cos(
    gsl_complex a,
  ) {
    return _gsl_complex_cos(
      a,
    );
  }

  late final _gsl_complex_cosPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_cos');
  late final _gsl_complex_cos =
      _gsl_complex_cosPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_sec(
    gsl_complex a,
  ) {
    return _gsl_complex_sec(
      a,
    );
  }

  late final _gsl_complex_secPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_sec');
  late final _gsl_complex_sec =
      _gsl_complex_secPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_csc(
    gsl_complex a,
  ) {
    return _gsl_complex_csc(
      a,
    );
  }

  late final _gsl_complex_cscPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_csc');
  late final _gsl_complex_csc =
      _gsl_complex_cscPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_tan(
    gsl_complex a,
  ) {
    return _gsl_complex_tan(
      a,
    );
  }

  late final _gsl_complex_tanPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_tan');
  late final _gsl_complex_tan =
      _gsl_complex_tanPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_cot(
    gsl_complex a,
  ) {
    return _gsl_complex_cot(
      a,
    );
  }

  late final _gsl_complex_cotPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_cot');
  late final _gsl_complex_cot =
      _gsl_complex_cotPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arcsin(
    gsl_complex a,
  ) {
    return _gsl_complex_arcsin(
      a,
    );
  }

  late final _gsl_complex_arcsinPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arcsin');
  late final _gsl_complex_arcsin =
      _gsl_complex_arcsinPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arcsin_real(
    double a,
  ) {
    return _gsl_complex_arcsin_real(
      a,
    );
  }

  late final _gsl_complex_arcsin_realPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(ffi.Double)>>(
          'gsl_complex_arcsin_real');
  late final _gsl_complex_arcsin_real =
      _gsl_complex_arcsin_realPtr.asFunction<gsl_complex Function(double)>();

  gsl_complex gsl_complex_arccos(
    gsl_complex a,
  ) {
    return _gsl_complex_arccos(
      a,
    );
  }

  late final _gsl_complex_arccosPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arccos');
  late final _gsl_complex_arccos =
      _gsl_complex_arccosPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arccos_real(
    double a,
  ) {
    return _gsl_complex_arccos_real(
      a,
    );
  }

  late final _gsl_complex_arccos_realPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(ffi.Double)>>(
          'gsl_complex_arccos_real');
  late final _gsl_complex_arccos_real =
      _gsl_complex_arccos_realPtr.asFunction<gsl_complex Function(double)>();

  gsl_complex gsl_complex_arcsec(
    gsl_complex a,
  ) {
    return _gsl_complex_arcsec(
      a,
    );
  }

  late final _gsl_complex_arcsecPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arcsec');
  late final _gsl_complex_arcsec =
      _gsl_complex_arcsecPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arcsec_real(
    double a,
  ) {
    return _gsl_complex_arcsec_real(
      a,
    );
  }

  late final _gsl_complex_arcsec_realPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(ffi.Double)>>(
          'gsl_complex_arcsec_real');
  late final _gsl_complex_arcsec_real =
      _gsl_complex_arcsec_realPtr.asFunction<gsl_complex Function(double)>();

  gsl_complex gsl_complex_arccsc(
    gsl_complex a,
  ) {
    return _gsl_complex_arccsc(
      a,
    );
  }

  late final _gsl_complex_arccscPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arccsc');
  late final _gsl_complex_arccsc =
      _gsl_complex_arccscPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arccsc_real(
    double a,
  ) {
    return _gsl_complex_arccsc_real(
      a,
    );
  }

  late final _gsl_complex_arccsc_realPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(ffi.Double)>>(
          'gsl_complex_arccsc_real');
  late final _gsl_complex_arccsc_real =
      _gsl_complex_arccsc_realPtr.asFunction<gsl_complex Function(double)>();

  gsl_complex gsl_complex_arctan(
    gsl_complex a,
  ) {
    return _gsl_complex_arctan(
      a,
    );
  }

  late final _gsl_complex_arctanPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arctan');
  late final _gsl_complex_arctan =
      _gsl_complex_arctanPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arccot(
    gsl_complex a,
  ) {
    return _gsl_complex_arccot(
      a,
    );
  }

  late final _gsl_complex_arccotPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arccot');
  late final _gsl_complex_arccot =
      _gsl_complex_arccotPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_sinh(
    gsl_complex a,
  ) {
    return _gsl_complex_sinh(
      a,
    );
  }

  late final _gsl_complex_sinhPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_sinh');
  late final _gsl_complex_sinh =
      _gsl_complex_sinhPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_cosh(
    gsl_complex a,
  ) {
    return _gsl_complex_cosh(
      a,
    );
  }

  late final _gsl_complex_coshPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_cosh');
  late final _gsl_complex_cosh =
      _gsl_complex_coshPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_sech(
    gsl_complex a,
  ) {
    return _gsl_complex_sech(
      a,
    );
  }

  late final _gsl_complex_sechPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_sech');
  late final _gsl_complex_sech =
      _gsl_complex_sechPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_csch(
    gsl_complex a,
  ) {
    return _gsl_complex_csch(
      a,
    );
  }

  late final _gsl_complex_cschPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_csch');
  late final _gsl_complex_csch =
      _gsl_complex_cschPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_tanh(
    gsl_complex a,
  ) {
    return _gsl_complex_tanh(
      a,
    );
  }

  late final _gsl_complex_tanhPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_tanh');
  late final _gsl_complex_tanh =
      _gsl_complex_tanhPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_coth(
    gsl_complex a,
  ) {
    return _gsl_complex_coth(
      a,
    );
  }

  late final _gsl_complex_cothPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_coth');
  late final _gsl_complex_coth =
      _gsl_complex_cothPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arcsinh(
    gsl_complex a,
  ) {
    return _gsl_complex_arcsinh(
      a,
    );
  }

  late final _gsl_complex_arcsinhPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arcsinh');
  late final _gsl_complex_arcsinh =
      _gsl_complex_arcsinhPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arccosh(
    gsl_complex a,
  ) {
    return _gsl_complex_arccosh(
      a,
    );
  }

  late final _gsl_complex_arccoshPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arccosh');
  late final _gsl_complex_arccosh =
      _gsl_complex_arccoshPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arccosh_real(
    double a,
  ) {
    return _gsl_complex_arccosh_real(
      a,
    );
  }

  late final _gsl_complex_arccosh_realPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(ffi.Double)>>(
          'gsl_complex_arccosh_real');
  late final _gsl_complex_arccosh_real =
      _gsl_complex_arccosh_realPtr.asFunction<gsl_complex Function(double)>();

  gsl_complex gsl_complex_arcsech(
    gsl_complex a,
  ) {
    return _gsl_complex_arcsech(
      a,
    );
  }

  late final _gsl_complex_arcsechPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arcsech');
  late final _gsl_complex_arcsech =
      _gsl_complex_arcsechPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arccsch(
    gsl_complex a,
  ) {
    return _gsl_complex_arccsch(
      a,
    );
  }

  late final _gsl_complex_arccschPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arccsch');
  late final _gsl_complex_arccsch =
      _gsl_complex_arccschPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arctanh(
    gsl_complex a,
  ) {
    return _gsl_complex_arctanh(
      a,
    );
  }

  late final _gsl_complex_arctanhPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arctanh');
  late final _gsl_complex_arctanh =
      _gsl_complex_arctanhPtr.asFunction<gsl_complex Function(gsl_complex)>();

  gsl_complex gsl_complex_arctanh_real(
    double a,
  ) {
    return _gsl_complex_arctanh_real(
      a,
    );
  }

  late final _gsl_complex_arctanh_realPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(ffi.Double)>>(
          'gsl_complex_arctanh_real');
  late final _gsl_complex_arctanh_real =
      _gsl_complex_arctanh_realPtr.asFunction<gsl_complex Function(double)>();

  gsl_complex gsl_complex_arccoth(
    gsl_complex a,
  ) {
    return _gsl_complex_arccoth(
      a,
    );
  }

  late final _gsl_complex_arccothPtr =
      _lookup<ffi.NativeFunction<gsl_complex Function(gsl_complex)>>(
          'gsl_complex_arccoth');
  late final _gsl_complex_arccoth =
      _gsl_complex_arccothPtr.asFunction<gsl_complex Function(gsl_complex)>();

  int gsl_permute_complex_float(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_complex_float(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_complex_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>,
              size_t, size_t)>>('gsl_permute_complex_float');
  late final _gsl_permute_complex_float =
      _gsl_permute_complex_floatPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_permute_complex_float_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_complex_float_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_complex_float_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>,
              size_t, size_t)>>('gsl_permute_complex_float_inverse');
  late final _gsl_permute_complex_float_inverse =
      _gsl_permute_complex_float_inversePtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_permute(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_permute(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>,
              size_t, size_t)>>('gsl_permute');
  late final _gsl_permute = _gsl_permutePtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_permute_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>,
              size_t, size_t)>>('gsl_permute_inverse');
  late final _gsl_permute_inverse = _gsl_permute_inversePtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_permute_ulong(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_ulong(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint64>,
              size_t, size_t)>>('gsl_permute_ulong');
  late final _gsl_permute_ulong = _gsl_permute_ulongPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_permute_ulong_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_ulong_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_ulong_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint64>,
              size_t, size_t)>>('gsl_permute_ulong_inverse');
  late final _gsl_permute_ulong_inverse =
      _gsl_permute_ulong_inversePtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_permute_uint(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_uint(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint32>,
              size_t, size_t)>>('gsl_permute_uint');
  late final _gsl_permute_uint = _gsl_permute_uintPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_permute_uint_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_uint_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_uint_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint32>,
              size_t, size_t)>>('gsl_permute_uint_inverse');
  late final _gsl_permute_uint_inverse =
      _gsl_permute_uint_inversePtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_permute_ushort(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_ushort(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_ushortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint16>,
              size_t, size_t)>>('gsl_permute_ushort');
  late final _gsl_permute_ushort = _gsl_permute_ushortPtr.asFunction<
      int Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint16>, int, int)>();

  int gsl_permute_ushort_inverse(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint16> data,
    int stride,
    int n,
  ) {
    return _gsl_permute_ushort_inverse(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_permute_ushort_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint16>,
              size_t, size_t)>>('gsl_permute_ushort_inverse');
  late final _gsl_permute_ushort_inverse =
      _gsl_permute_ushort_inversePtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint16>, int, int)>();

  void gsl_sort_uint(
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_uint(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint32>, size_t, size_t)>>('gsl_sort_uint');
  late final _gsl_sort_uint = _gsl_sort_uintPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint32>, int, int)>();

  void gsl_sort2_uint(
    ffi.Pointer<ffi.Uint32> data1,
    int stride1,
    ffi.Pointer<ffi.Uint32> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2_uint(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2_uintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint32>, size_t,
              ffi.Pointer<ffi.Uint32>, size_t, size_t)>>('gsl_sort2_uint');
  late final _gsl_sort2_uint = _gsl_sort2_uintPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<ffi.Uint32>, int, int)>();

  void gsl_sort_uint_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint32> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_uint_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_uint_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint32>,
              size_t, size_t)>>('gsl_sort_uint_index');
  late final _gsl_sort_uint_index = _gsl_sort_uint_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_sort_uint_smallest(
    ffi.Pointer<ffi.Uint32> dest,
    int k,
    ffi.Pointer<ffi.Uint32> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_uint_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_uint_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_sort_uint_smallest');
  late final _gsl_sort_uint_smallest = _gsl_sort_uint_smallestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_sort_uint_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Uint32> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_uint_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_uint_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_sort_uint_smallest_index');
  late final _gsl_sort_uint_smallest_index =
      _gsl_sort_uint_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_sort_uint_largest(
    ffi.Pointer<ffi.Uint32> dest,
    int k,
    ffi.Pointer<ffi.Uint32> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_uint_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_uint_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint32>,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_sort_uint_largest');
  late final _gsl_sort_uint_largest = _gsl_sort_uint_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint32>, int, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_sort_uint_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Uint32> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_uint_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_uint_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Uint32>,
              size_t,
              size_t)>>('gsl_sort_uint_largest_index');
  late final _gsl_sort_uint_largest_index =
      _gsl_sort_uint_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Uint32>, int, int)>();

  int gsl_dft_complex_float_forward(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Float> result,
  ) {
    return _gsl_dft_complex_float_forward(
      data,
      stride,
      n,
      result,
    );
  }

  late final _gsl_dft_complex_float_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Pointer<ffi.Float>)>>('gsl_dft_complex_float_forward');
  late final _gsl_dft_complex_float_forward =
      _gsl_dft_complex_float_forwardPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>, int, int, ffi.Pointer<ffi.Float>)>();

  int gsl_dft_complex_float_backward(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Float> result,
  ) {
    return _gsl_dft_complex_float_backward(
      data,
      stride,
      n,
      result,
    );
  }

  late final _gsl_dft_complex_float_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Pointer<ffi.Float>)>>('gsl_dft_complex_float_backward');
  late final _gsl_dft_complex_float_backward =
      _gsl_dft_complex_float_backwardPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>, int, int, ffi.Pointer<ffi.Float>)>();

  int gsl_dft_complex_float_inverse(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Float> result,
  ) {
    return _gsl_dft_complex_float_inverse(
      data,
      stride,
      n,
      result,
    );
  }

  late final _gsl_dft_complex_float_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, size_t, size_t,
              ffi.Pointer<ffi.Float>)>>('gsl_dft_complex_float_inverse');
  late final _gsl_dft_complex_float_inverse =
      _gsl_dft_complex_float_inversePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>, int, int, ffi.Pointer<ffi.Float>)>();

  int gsl_dft_complex_float_transform(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<ffi.Float> result,
    int sign,
  ) {
    return _gsl_dft_complex_float_transform(
      data,
      stride,
      n,
      result,
      sign,
    );
  }

  late final _gsl_dft_complex_float_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Float>,
              ffi.Int32)>>('gsl_dft_complex_float_transform');
  late final _gsl_dft_complex_float_transform =
      _gsl_dft_complex_float_transformPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>, int, int, ffi.Pointer<ffi.Float>, int)>();

  ffi.Pointer<gsl_histogram2d> gsl_histogram2d_alloc(
    int nx,
    int ny,
  ) {
    return _gsl_histogram2d_alloc(
      nx,
      ny,
    );
  }

  late final _gsl_histogram2d_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_histogram2d> Function(
              size_t, size_t)>>('gsl_histogram2d_alloc');
  late final _gsl_histogram2d_alloc = _gsl_histogram2d_allocPtr
      .asFunction<ffi.Pointer<gsl_histogram2d> Function(int, int)>();

  ffi.Pointer<gsl_histogram2d> gsl_histogram2d_calloc(
    int nx,
    int ny,
  ) {
    return _gsl_histogram2d_calloc(
      nx,
      ny,
    );
  }

  late final _gsl_histogram2d_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_histogram2d> Function(
              size_t, size_t)>>('gsl_histogram2d_calloc');
  late final _gsl_histogram2d_calloc = _gsl_histogram2d_callocPtr
      .asFunction<ffi.Pointer<gsl_histogram2d> Function(int, int)>();

  ffi.Pointer<gsl_histogram2d> gsl_histogram2d_calloc_uniform(
    int nx,
    int ny,
    double xmin,
    double xmax,
    double ymin,
    double ymax,
  ) {
    return _gsl_histogram2d_calloc_uniform(
      nx,
      ny,
      xmin,
      xmax,
      ymin,
      ymax,
    );
  }

  late final _gsl_histogram2d_calloc_uniformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_histogram2d> Function(
              size_t,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('gsl_histogram2d_calloc_uniform');
  late final _gsl_histogram2d_calloc_uniform =
      _gsl_histogram2d_calloc_uniformPtr.asFunction<
          ffi.Pointer<gsl_histogram2d> Function(
              int, int, double, double, double, double)>();

  void gsl_histogram2d_free(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_free(
      h,
    );
  }

  late final _gsl_histogram2d_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_histogram2d>)>>(
      'gsl_histogram2d_free');
  late final _gsl_histogram2d_free = _gsl_histogram2d_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_increment(
    ffi.Pointer<gsl_histogram2d> h,
    double x,
    double y,
  ) {
    return _gsl_histogram2d_increment(
      h,
      x,
      y,
    );
  }

  late final _gsl_histogram2d_incrementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>, ffi.Double,
              ffi.Double)>>('gsl_histogram2d_increment');
  late final _gsl_histogram2d_increment = _gsl_histogram2d_incrementPtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram2d>, double, double)>();

  int gsl_histogram2d_accumulate(
    ffi.Pointer<gsl_histogram2d> h,
    double x,
    double y,
    double weight,
  ) {
    return _gsl_histogram2d_accumulate(
      h,
      x,
      y,
      weight,
    );
  }

  late final _gsl_histogram2d_accumulatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>, ffi.Double,
              ffi.Double, ffi.Double)>>('gsl_histogram2d_accumulate');
  late final _gsl_histogram2d_accumulate =
      _gsl_histogram2d_accumulatePtr.asFunction<
          int Function(ffi.Pointer<gsl_histogram2d>, double, double, double)>();

  int gsl_histogram2d_find(
    ffi.Pointer<gsl_histogram2d> h,
    double x,
    double y,
    ffi.Pointer<size_t> i,
    ffi.Pointer<size_t> j,
  ) {
    return _gsl_histogram2d_find(
      h,
      x,
      y,
      i,
      j,
    );
  }

  late final _gsl_histogram2d_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram2d>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_histogram2d_find');
  late final _gsl_histogram2d_find = _gsl_histogram2d_findPtr.asFunction<
      int Function(ffi.Pointer<gsl_histogram2d>, double, double,
          ffi.Pointer<size_t>, ffi.Pointer<size_t>)>();

  double gsl_histogram2d_get(
    ffi.Pointer<gsl_histogram2d> h,
    int i,
    int j,
  ) {
    return _gsl_histogram2d_get(
      h,
      i,
      j,
    );
  }

  late final _gsl_histogram2d_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_histogram2d>, size_t,
              size_t)>>('gsl_histogram2d_get');
  late final _gsl_histogram2d_get = _gsl_histogram2d_getPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>, int, int)>();

  int gsl_histogram2d_get_xrange(
    ffi.Pointer<gsl_histogram2d> h,
    int i,
    ffi.Pointer<ffi.Double> xlower,
    ffi.Pointer<ffi.Double> xupper,
  ) {
    return _gsl_histogram2d_get_xrange(
      h,
      i,
      xlower,
      xupper,
    );
  }

  late final _gsl_histogram2d_get_xrangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram2d>,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_histogram2d_get_xrange');
  late final _gsl_histogram2d_get_xrange =
      _gsl_histogram2d_get_xrangePtr.asFunction<
          int Function(ffi.Pointer<gsl_histogram2d>, int,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_histogram2d_get_yrange(
    ffi.Pointer<gsl_histogram2d> h,
    int j,
    ffi.Pointer<ffi.Double> ylower,
    ffi.Pointer<ffi.Double> yupper,
  ) {
    return _gsl_histogram2d_get_yrange(
      h,
      j,
      ylower,
      yupper,
    );
  }

  late final _gsl_histogram2d_get_yrangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram2d>,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_histogram2d_get_yrange');
  late final _gsl_histogram2d_get_yrange =
      _gsl_histogram2d_get_yrangePtr.asFunction<
          int Function(ffi.Pointer<gsl_histogram2d>, int,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  double gsl_histogram2d_xmax(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_xmax(
      h,
    );
  }

  late final _gsl_histogram2d_xmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_xmax');
  late final _gsl_histogram2d_xmax = _gsl_histogram2d_xmaxPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  double gsl_histogram2d_xmin(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_xmin(
      h,
    );
  }

  late final _gsl_histogram2d_xminPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_xmin');
  late final _gsl_histogram2d_xmin = _gsl_histogram2d_xminPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_nx(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_nx(
      h,
    );
  }

  late final _gsl_histogram2d_nxPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_histogram2d>)>>(
      'gsl_histogram2d_nx');
  late final _gsl_histogram2d_nx = _gsl_histogram2d_nxPtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram2d>)>();

  double gsl_histogram2d_ymax(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_ymax(
      h,
    );
  }

  late final _gsl_histogram2d_ymaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_ymax');
  late final _gsl_histogram2d_ymax = _gsl_histogram2d_ymaxPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  double gsl_histogram2d_ymin(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_ymin(
      h,
    );
  }

  late final _gsl_histogram2d_yminPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_ymin');
  late final _gsl_histogram2d_ymin = _gsl_histogram2d_yminPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_ny(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_ny(
      h,
    );
  }

  late final _gsl_histogram2d_nyPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_histogram2d>)>>(
      'gsl_histogram2d_ny');
  late final _gsl_histogram2d_ny = _gsl_histogram2d_nyPtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram2d>)>();

  void gsl_histogram2d_reset(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_reset(
      h,
    );
  }

  late final _gsl_histogram2d_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_histogram2d>)>>(
      'gsl_histogram2d_reset');
  late final _gsl_histogram2d_reset = _gsl_histogram2d_resetPtr
      .asFunction<void Function(ffi.Pointer<gsl_histogram2d>)>();

  ffi.Pointer<gsl_histogram2d> gsl_histogram2d_calloc_range(
    int nx,
    int ny,
    ffi.Pointer<ffi.Double> xrange,
    ffi.Pointer<ffi.Double> yrange,
  ) {
    return _gsl_histogram2d_calloc_range(
      nx,
      ny,
      xrange,
      yrange,
    );
  }

  late final _gsl_histogram2d_calloc_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_histogram2d> Function(
              size_t,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_histogram2d_calloc_range');
  late final _gsl_histogram2d_calloc_range =
      _gsl_histogram2d_calloc_rangePtr.asFunction<
          ffi.Pointer<gsl_histogram2d> Function(
              int, int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_histogram2d_set_ranges_uniform(
    ffi.Pointer<gsl_histogram2d> h,
    double xmin,
    double xmax,
    double ymin,
    double ymax,
  ) {
    return _gsl_histogram2d_set_ranges_uniform(
      h,
      xmin,
      xmax,
      ymin,
      ymax,
    );
  }

  late final _gsl_histogram2d_set_ranges_uniformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram2d>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('gsl_histogram2d_set_ranges_uniform');
  late final _gsl_histogram2d_set_ranges_uniform =
      _gsl_histogram2d_set_ranges_uniformPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_histogram2d>, double, double, double, double)>();

  int gsl_histogram2d_set_ranges(
    ffi.Pointer<gsl_histogram2d> h,
    ffi.Pointer<ffi.Double> xrange,
    int xsize,
    ffi.Pointer<ffi.Double> yrange,
    int ysize,
  ) {
    return _gsl_histogram2d_set_ranges(
      h,
      xrange,
      xsize,
      yrange,
      ysize,
    );
  }

  late final _gsl_histogram2d_set_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram2d>,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t)>>('gsl_histogram2d_set_ranges');
  late final _gsl_histogram2d_set_ranges =
      _gsl_histogram2d_set_rangesPtr.asFunction<
          int Function(ffi.Pointer<gsl_histogram2d>, ffi.Pointer<ffi.Double>,
              int, ffi.Pointer<ffi.Double>, int)>();

  int gsl_histogram2d_memcpy(
    ffi.Pointer<gsl_histogram2d> dest,
    ffi.Pointer<gsl_histogram2d> source,
  ) {
    return _gsl_histogram2d_memcpy(
      dest,
      source,
    );
  }

  late final _gsl_histogram2d_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_memcpy');
  late final _gsl_histogram2d_memcpy = _gsl_histogram2d_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_histogram2d>, ffi.Pointer<gsl_histogram2d>)>();

  ffi.Pointer<gsl_histogram2d> gsl_histogram2d_clone(
    ffi.Pointer<gsl_histogram2d> source,
  ) {
    return _gsl_histogram2d_clone(
      source,
    );
  }

  late final _gsl_histogram2d_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_histogram2d> Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_clone');
  late final _gsl_histogram2d_clone = _gsl_histogram2d_clonePtr.asFunction<
      ffi.Pointer<gsl_histogram2d> Function(ffi.Pointer<gsl_histogram2d>)>();

  double gsl_histogram2d_max_val(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_max_val(
      h,
    );
  }

  late final _gsl_histogram2d_max_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_max_val');
  late final _gsl_histogram2d_max_val = _gsl_histogram2d_max_valPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  void gsl_histogram2d_max_bin(
    ffi.Pointer<gsl_histogram2d> h,
    ffi.Pointer<size_t> i,
    ffi.Pointer<size_t> j,
  ) {
    return _gsl_histogram2d_max_bin(
      h,
      i,
      j,
    );
  }

  late final _gsl_histogram2d_max_binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_histogram2d>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_histogram2d_max_bin');
  late final _gsl_histogram2d_max_bin = _gsl_histogram2d_max_binPtr.asFunction<
      void Function(ffi.Pointer<gsl_histogram2d>, ffi.Pointer<size_t>,
          ffi.Pointer<size_t>)>();

  double gsl_histogram2d_min_val(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_min_val(
      h,
    );
  }

  late final _gsl_histogram2d_min_valPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_min_val');
  late final _gsl_histogram2d_min_val = _gsl_histogram2d_min_valPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  void gsl_histogram2d_min_bin(
    ffi.Pointer<gsl_histogram2d> h,
    ffi.Pointer<size_t> i,
    ffi.Pointer<size_t> j,
  ) {
    return _gsl_histogram2d_min_bin(
      h,
      i,
      j,
    );
  }

  late final _gsl_histogram2d_min_binPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_histogram2d>, ffi.Pointer<size_t>,
              ffi.Pointer<size_t>)>>('gsl_histogram2d_min_bin');
  late final _gsl_histogram2d_min_bin = _gsl_histogram2d_min_binPtr.asFunction<
      void Function(ffi.Pointer<gsl_histogram2d>, ffi.Pointer<size_t>,
          ffi.Pointer<size_t>)>();

  double gsl_histogram2d_xmean(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_xmean(
      h,
    );
  }

  late final _gsl_histogram2d_xmeanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_xmean');
  late final _gsl_histogram2d_xmean = _gsl_histogram2d_xmeanPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  double gsl_histogram2d_ymean(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_ymean(
      h,
    );
  }

  late final _gsl_histogram2d_ymeanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_ymean');
  late final _gsl_histogram2d_ymean = _gsl_histogram2d_ymeanPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  double gsl_histogram2d_xsigma(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_xsigma(
      h,
    );
  }

  late final _gsl_histogram2d_xsigmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_xsigma');
  late final _gsl_histogram2d_xsigma = _gsl_histogram2d_xsigmaPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  double gsl_histogram2d_ysigma(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_ysigma(
      h,
    );
  }

  late final _gsl_histogram2d_ysigmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_ysigma');
  late final _gsl_histogram2d_ysigma = _gsl_histogram2d_ysigmaPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  double gsl_histogram2d_cov(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_cov(
      h,
    );
  }

  late final _gsl_histogram2d_covPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_cov');
  late final _gsl_histogram2d_cov = _gsl_histogram2d_covPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  double gsl_histogram2d_sum(
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_sum(
      h,
    );
  }

  late final _gsl_histogram2d_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_sum');
  late final _gsl_histogram2d_sum = _gsl_histogram2d_sumPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_equal_bins_p(
    ffi.Pointer<gsl_histogram2d> h1,
    ffi.Pointer<gsl_histogram2d> h2,
  ) {
    return _gsl_histogram2d_equal_bins_p(
      h1,
      h2,
    );
  }

  late final _gsl_histogram2d_equal_bins_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_equal_bins_p');
  late final _gsl_histogram2d_equal_bins_p =
      _gsl_histogram2d_equal_bins_pPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_histogram2d>, ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_add(
    ffi.Pointer<gsl_histogram2d> h1,
    ffi.Pointer<gsl_histogram2d> h2,
  ) {
    return _gsl_histogram2d_add(
      h1,
      h2,
    );
  }

  late final _gsl_histogram2d_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_add');
  late final _gsl_histogram2d_add = _gsl_histogram2d_addPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_histogram2d>, ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_sub(
    ffi.Pointer<gsl_histogram2d> h1,
    ffi.Pointer<gsl_histogram2d> h2,
  ) {
    return _gsl_histogram2d_sub(
      h1,
      h2,
    );
  }

  late final _gsl_histogram2d_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_sub');
  late final _gsl_histogram2d_sub = _gsl_histogram2d_subPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_histogram2d>, ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_mul(
    ffi.Pointer<gsl_histogram2d> h1,
    ffi.Pointer<gsl_histogram2d> h2,
  ) {
    return _gsl_histogram2d_mul(
      h1,
      h2,
    );
  }

  late final _gsl_histogram2d_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_mul');
  late final _gsl_histogram2d_mul = _gsl_histogram2d_mulPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_histogram2d>, ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_div(
    ffi.Pointer<gsl_histogram2d> h1,
    ffi.Pointer<gsl_histogram2d> h2,
  ) {
    return _gsl_histogram2d_div(
      h1,
      h2,
    );
  }

  late final _gsl_histogram2d_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_div');
  late final _gsl_histogram2d_div = _gsl_histogram2d_divPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_histogram2d>, ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_scale(
    ffi.Pointer<gsl_histogram2d> h,
    double scale,
  ) {
    return _gsl_histogram2d_scale(
      h,
      scale,
    );
  }

  late final _gsl_histogram2d_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>,
              ffi.Double)>>('gsl_histogram2d_scale');
  late final _gsl_histogram2d_scale = _gsl_histogram2d_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram2d>, double)>();

  int gsl_histogram2d_shift(
    ffi.Pointer<gsl_histogram2d> h,
    double shift,
  ) {
    return _gsl_histogram2d_shift(
      h,
      shift,
    );
  }

  late final _gsl_histogram2d_shiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d>,
              ffi.Double)>>('gsl_histogram2d_shift');
  late final _gsl_histogram2d_shift = _gsl_histogram2d_shiftPtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram2d>, double)>();

  int gsl_histogram2d_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_fwrite(
      stream,
      h,
    );
  }

  late final _gsl_histogram2d_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_fwrite');
  late final _gsl_histogram2d_fwrite = _gsl_histogram2d_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_fread(
      stream,
      h,
    );
  }

  late final _gsl_histogram2d_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_fread');
  late final _gsl_histogram2d_fread = _gsl_histogram2d_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_histogram2d>)>();

  int gsl_histogram2d_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_histogram2d> h,
    ffi.Pointer<ffi.Int8> range_format,
    ffi.Pointer<ffi.Int8> bin_format,
  ) {
    return _gsl_histogram2d_fprintf(
      stream,
      h,
      range_format,
      bin_format,
    );
  }

  late final _gsl_histogram2d_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_histogram2d>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('gsl_histogram2d_fprintf');
  late final _gsl_histogram2d_fprintf = _gsl_histogram2d_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_histogram2d>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int gsl_histogram2d_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_fscanf(
      stream,
      h,
    );
  }

  late final _gsl_histogram2d_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_fscanf');
  late final _gsl_histogram2d_fscanf = _gsl_histogram2d_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_histogram2d>)>();

  ffi.Pointer<gsl_histogram2d_pdf> gsl_histogram2d_pdf_alloc(
    int nx,
    int ny,
  ) {
    return _gsl_histogram2d_pdf_alloc(
      nx,
      ny,
    );
  }

  late final _gsl_histogram2d_pdf_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_histogram2d_pdf> Function(
              size_t, size_t)>>('gsl_histogram2d_pdf_alloc');
  late final _gsl_histogram2d_pdf_alloc = _gsl_histogram2d_pdf_allocPtr
      .asFunction<ffi.Pointer<gsl_histogram2d_pdf> Function(int, int)>();

  int gsl_histogram2d_pdf_init(
    ffi.Pointer<gsl_histogram2d_pdf> p,
    ffi.Pointer<gsl_histogram2d> h,
  ) {
    return _gsl_histogram2d_pdf_init(
      p,
      h,
    );
  }

  late final _gsl_histogram2d_pdf_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram2d_pdf>,
              ffi.Pointer<gsl_histogram2d>)>>('gsl_histogram2d_pdf_init');
  late final _gsl_histogram2d_pdf_init =
      _gsl_histogram2d_pdf_initPtr.asFunction<
          int Function(ffi.Pointer<gsl_histogram2d_pdf>,
              ffi.Pointer<gsl_histogram2d>)>();

  void gsl_histogram2d_pdf_free(
    ffi.Pointer<gsl_histogram2d_pdf> p,
  ) {
    return _gsl_histogram2d_pdf_free(
      p,
    );
  }

  late final _gsl_histogram2d_pdf_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_histogram2d_pdf>)>>('gsl_histogram2d_pdf_free');
  late final _gsl_histogram2d_pdf_free = _gsl_histogram2d_pdf_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_histogram2d_pdf>)>();

  int gsl_histogram2d_pdf_sample(
    ffi.Pointer<gsl_histogram2d_pdf> p,
    double r1,
    double r2,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_histogram2d_pdf_sample(
      p,
      r1,
      r2,
      x,
      y,
    );
  }

  late final _gsl_histogram2d_pdf_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram2d_pdf>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_histogram2d_pdf_sample');
  late final _gsl_histogram2d_pdf_sample =
      _gsl_histogram2d_pdf_samplePtr.asFunction<
          int Function(ffi.Pointer<gsl_histogram2d_pdf>, double, double,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void gsl_sort(
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_sort(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_sort');
  late final _gsl_sort = _gsl_sortPtr
      .asFunction<void Function(ffi.Pointer<ffi.Double>, int, int)>();

  void gsl_sort2(
    ffi.Pointer<ffi.Double> data1,
    int stride1,
    ffi.Pointer<ffi.Double> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_sort2');
  late final _gsl_sort2 = _gsl_sort2Ptr.asFunction<
      void Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  void gsl_sort_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>,
              size_t, size_t)>>('gsl_sort_index');
  late final _gsl_sort_index = _gsl_sort_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_sort_smallest(
    ffi.Pointer<ffi.Double> dest,
    int k,
    ffi.Pointer<ffi.Double> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_sort_smallest');
  late final _gsl_sort_smallest = _gsl_sort_smallestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_sort_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Double> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t)>>('gsl_sort_smallest_index');
  late final _gsl_sort_smallest_index = _gsl_sort_smallest_indexPtr.asFunction<
      int Function(
          ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_sort_largest(
    ffi.Pointer<ffi.Double> dest,
    int k,
    ffi.Pointer<ffi.Double> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t,
              ffi.Pointer<ffi.Double>, size_t, size_t)>>('gsl_sort_largest');
  late final _gsl_sort_largest = _gsl_sort_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>, int, int)>();

  int gsl_sort_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Double> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t)>>('gsl_sort_largest_index');
  late final _gsl_sort_largest_index = _gsl_sort_largest_indexPtr.asFunction<
      int Function(
          ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Double>, int, int)>();

  ffi.Pointer<gsl_min_fminimizer> gsl_min_fminimizer_alloc(
    ffi.Pointer<gsl_min_fminimizer_type> T,
  ) {
    return _gsl_min_fminimizer_alloc(
      T,
    );
  }

  late final _gsl_min_fminimizer_allocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_min_fminimizer> Function(
                  ffi.Pointer<gsl_min_fminimizer_type>)>>(
      'gsl_min_fminimizer_alloc');
  late final _gsl_min_fminimizer_alloc =
      _gsl_min_fminimizer_allocPtr.asFunction<
          ffi.Pointer<gsl_min_fminimizer> Function(
              ffi.Pointer<gsl_min_fminimizer_type>)>();

  void gsl_min_fminimizer_free(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_free(
      s,
    );
  }

  late final _gsl_min_fminimizer_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_min_fminimizer>)>>('gsl_min_fminimizer_free');
  late final _gsl_min_fminimizer_free = _gsl_min_fminimizer_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_min_fminimizer>)>();

  int gsl_min_fminimizer_set(
    ffi.Pointer<gsl_min_fminimizer> s,
    ffi.Pointer<gsl_function> f,
    double x_minimum,
    double x_lower,
    double x_upper,
  ) {
    return _gsl_min_fminimizer_set(
      s,
      f,
      x_minimum,
      x_lower,
      x_upper,
    );
  }

  late final _gsl_min_fminimizer_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_min_fminimizer>,
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('gsl_min_fminimizer_set');
  late final _gsl_min_fminimizer_set = _gsl_min_fminimizer_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_min_fminimizer>, ffi.Pointer<gsl_function>,
          double, double, double)>();

  int gsl_min_fminimizer_set_with_values(
    ffi.Pointer<gsl_min_fminimizer> s,
    ffi.Pointer<gsl_function> f,
    double x_minimum,
    double f_minimum,
    double x_lower,
    double f_lower,
    double x_upper,
    double f_upper,
  ) {
    return _gsl_min_fminimizer_set_with_values(
      s,
      f,
      x_minimum,
      f_minimum,
      x_lower,
      f_lower,
      x_upper,
      f_upper,
    );
  }

  late final _gsl_min_fminimizer_set_with_valuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_min_fminimizer>,
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('gsl_min_fminimizer_set_with_values');
  late final _gsl_min_fminimizer_set_with_values =
      _gsl_min_fminimizer_set_with_valuesPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_min_fminimizer>,
              ffi.Pointer<gsl_function>,
              double,
              double,
              double,
              double,
              double,
              double)>();

  int gsl_min_fminimizer_iterate(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_iterate(
      s,
    );
  }

  late final _gsl_min_fminimizer_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_min_fminimizer>)>>('gsl_min_fminimizer_iterate');
  late final _gsl_min_fminimizer_iterate = _gsl_min_fminimizer_iteratePtr
      .asFunction<int Function(ffi.Pointer<gsl_min_fminimizer>)>();

  ffi.Pointer<ffi.Int8> gsl_min_fminimizer_name(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_name(
      s,
    );
  }

  late final _gsl_min_fminimizer_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_min_fminimizer>)>>('gsl_min_fminimizer_name');
  late final _gsl_min_fminimizer_name = _gsl_min_fminimizer_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_min_fminimizer>)>();

  double gsl_min_fminimizer_x_minimum(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_x_minimum(
      s,
    );
  }

  late final _gsl_min_fminimizer_x_minimumPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<gsl_min_fminimizer>)>>(
      'gsl_min_fminimizer_x_minimum');
  late final _gsl_min_fminimizer_x_minimum = _gsl_min_fminimizer_x_minimumPtr
      .asFunction<double Function(ffi.Pointer<gsl_min_fminimizer>)>();

  double gsl_min_fminimizer_x_lower(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_x_lower(
      s,
    );
  }

  late final _gsl_min_fminimizer_x_lowerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_min_fminimizer>)>>('gsl_min_fminimizer_x_lower');
  late final _gsl_min_fminimizer_x_lower = _gsl_min_fminimizer_x_lowerPtr
      .asFunction<double Function(ffi.Pointer<gsl_min_fminimizer>)>();

  double gsl_min_fminimizer_x_upper(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_x_upper(
      s,
    );
  }

  late final _gsl_min_fminimizer_x_upperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_min_fminimizer>)>>('gsl_min_fminimizer_x_upper');
  late final _gsl_min_fminimizer_x_upper = _gsl_min_fminimizer_x_upperPtr
      .asFunction<double Function(ffi.Pointer<gsl_min_fminimizer>)>();

  double gsl_min_fminimizer_f_minimum(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_f_minimum(
      s,
    );
  }

  late final _gsl_min_fminimizer_f_minimumPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<gsl_min_fminimizer>)>>(
      'gsl_min_fminimizer_f_minimum');
  late final _gsl_min_fminimizer_f_minimum = _gsl_min_fminimizer_f_minimumPtr
      .asFunction<double Function(ffi.Pointer<gsl_min_fminimizer>)>();

  double gsl_min_fminimizer_f_lower(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_f_lower(
      s,
    );
  }

  late final _gsl_min_fminimizer_f_lowerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_min_fminimizer>)>>('gsl_min_fminimizer_f_lower');
  late final _gsl_min_fminimizer_f_lower = _gsl_min_fminimizer_f_lowerPtr
      .asFunction<double Function(ffi.Pointer<gsl_min_fminimizer>)>();

  double gsl_min_fminimizer_f_upper(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_f_upper(
      s,
    );
  }

  late final _gsl_min_fminimizer_f_upperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_min_fminimizer>)>>('gsl_min_fminimizer_f_upper');
  late final _gsl_min_fminimizer_f_upper = _gsl_min_fminimizer_f_upperPtr
      .asFunction<double Function(ffi.Pointer<gsl_min_fminimizer>)>();

  double gsl_min_fminimizer_minimum(
    ffi.Pointer<gsl_min_fminimizer> s,
  ) {
    return _gsl_min_fminimizer_minimum(
      s,
    );
  }

  late final _gsl_min_fminimizer_minimumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_min_fminimizer>)>>('gsl_min_fminimizer_minimum');
  late final _gsl_min_fminimizer_minimum = _gsl_min_fminimizer_minimumPtr
      .asFunction<double Function(ffi.Pointer<gsl_min_fminimizer>)>();

  int gsl_min_test_interval(
    double x_lower,
    double x_upper,
    double epsabs,
    double epsrel,
  ) {
    return _gsl_min_test_interval(
      x_lower,
      x_upper,
      epsabs,
      epsrel,
    );
  }

  late final _gsl_min_test_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_min_test_interval');
  late final _gsl_min_test_interval = _gsl_min_test_intervalPtr
      .asFunction<int Function(double, double, double, double)>();

  late final ffi.Pointer<ffi.Pointer<gsl_min_fminimizer_type>>
      _gsl_min_fminimizer_goldensection =
      _lookup<ffi.Pointer<gsl_min_fminimizer_type>>(
          'gsl_min_fminimizer_goldensection');

  ffi.Pointer<gsl_min_fminimizer_type> get gsl_min_fminimizer_goldensection =>
      _gsl_min_fminimizer_goldensection.value;

  set gsl_min_fminimizer_goldensection(
          ffi.Pointer<gsl_min_fminimizer_type> value) =>
      _gsl_min_fminimizer_goldensection.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_min_fminimizer_type>>
      _gsl_min_fminimizer_brent =
      _lookup<ffi.Pointer<gsl_min_fminimizer_type>>('gsl_min_fminimizer_brent');

  ffi.Pointer<gsl_min_fminimizer_type> get gsl_min_fminimizer_brent =>
      _gsl_min_fminimizer_brent.value;

  set gsl_min_fminimizer_brent(ffi.Pointer<gsl_min_fminimizer_type> value) =>
      _gsl_min_fminimizer_brent.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_min_fminimizer_type>>
      _gsl_min_fminimizer_quad_golden =
      _lookup<ffi.Pointer<gsl_min_fminimizer_type>>(
          'gsl_min_fminimizer_quad_golden');

  ffi.Pointer<gsl_min_fminimizer_type> get gsl_min_fminimizer_quad_golden =>
      _gsl_min_fminimizer_quad_golden.value;

  set gsl_min_fminimizer_quad_golden(
          ffi.Pointer<gsl_min_fminimizer_type> value) =>
      _gsl_min_fminimizer_quad_golden.value = value;

  int gsl_min_find_bracket(
    ffi.Pointer<gsl_function> f,
    ffi.Pointer<ffi.Double> x_minimum,
    ffi.Pointer<ffi.Double> f_minimum,
    ffi.Pointer<ffi.Double> x_lower,
    ffi.Pointer<ffi.Double> f_lower,
    ffi.Pointer<ffi.Double> x_upper,
    ffi.Pointer<ffi.Double> f_upper,
    int eval_max,
  ) {
    return _gsl_min_find_bracket(
      f,
      x_minimum,
      f_minimum,
      x_lower,
      f_lower,
      x_upper,
      f_upper,
      eval_max,
    );
  }

  late final _gsl_min_find_bracketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t)>>('gsl_min_find_bracket');
  late final _gsl_min_find_bracket = _gsl_min_find_bracketPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          int)>();

  void gsl_sort_int(
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_int(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_sort_int');
  late final _gsl_sort_int = _gsl_sort_intPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>, int, int)>();

  void gsl_sort2_int(
    ffi.Pointer<ffi.Int32> data1,
    int stride1,
    ffi.Pointer<ffi.Int32> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2_int(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int32>, size_t,
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_sort2_int');
  late final _gsl_sort2_int = _gsl_sort2_intPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Int32>, int, int)>();

  void gsl_sort_int_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int32> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_int_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_int_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int32>, size_t,
              size_t)>>('gsl_sort_int_index');
  late final _gsl_sort_int_index = _gsl_sort_int_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_sort_int_smallest(
    ffi.Pointer<ffi.Int32> dest,
    int k,
    ffi.Pointer<ffi.Int32> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_int_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_int_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int32>,
              size_t,
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t)>>('gsl_sort_int_smallest');
  late final _gsl_sort_int_smallest = _gsl_sort_int_smallestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_sort_int_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Int32> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_int_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_int_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t)>>('gsl_sort_int_smallest_index');
  late final _gsl_sort_int_smallest_index =
      _gsl_sort_int_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_sort_int_largest(
    ffi.Pointer<ffi.Int32> dest,
    int k,
    ffi.Pointer<ffi.Int32> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_int_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_int_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, size_t,
              ffi.Pointer<ffi.Int32>, size_t, size_t)>>('gsl_sort_int_largest');
  late final _gsl_sort_int_largest = _gsl_sort_int_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int32>, int, ffi.Pointer<ffi.Int32>, int, int)>();

  int gsl_sort_int_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Int32> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_int_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_int_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Int32>,
              size_t,
              size_t)>>('gsl_sort_int_largest_index');
  late final _gsl_sort_int_largest_index =
      _gsl_sort_int_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Int32>, int, int)>();

  ffi.Pointer<gsl_root_fsolver> gsl_root_fsolver_alloc(
    ffi.Pointer<gsl_root_fsolver_type> T,
  ) {
    return _gsl_root_fsolver_alloc(
      T,
    );
  }

  late final _gsl_root_fsolver_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_root_fsolver> Function(
              ffi.Pointer<gsl_root_fsolver_type>)>>('gsl_root_fsolver_alloc');
  late final _gsl_root_fsolver_alloc = _gsl_root_fsolver_allocPtr.asFunction<
      ffi.Pointer<gsl_root_fsolver> Function(
          ffi.Pointer<gsl_root_fsolver_type>)>();

  void gsl_root_fsolver_free(
    ffi.Pointer<gsl_root_fsolver> s,
  ) {
    return _gsl_root_fsolver_free(
      s,
    );
  }

  late final _gsl_root_fsolver_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_root_fsolver>)>>(
      'gsl_root_fsolver_free');
  late final _gsl_root_fsolver_free = _gsl_root_fsolver_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_root_fsolver>)>();

  int gsl_root_fsolver_set(
    ffi.Pointer<gsl_root_fsolver> s,
    ffi.Pointer<gsl_function> f,
    double x_lower,
    double x_upper,
  ) {
    return _gsl_root_fsolver_set(
      s,
      f,
      x_lower,
      x_upper,
    );
  }

  late final _gsl_root_fsolver_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_root_fsolver>,
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double)>>('gsl_root_fsolver_set');
  late final _gsl_root_fsolver_set = _gsl_root_fsolver_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_root_fsolver>, ffi.Pointer<gsl_function>,
          double, double)>();

  int gsl_root_fsolver_iterate(
    ffi.Pointer<gsl_root_fsolver> s,
  ) {
    return _gsl_root_fsolver_iterate(
      s,
    );
  }

  late final _gsl_root_fsolver_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_root_fsolver>)>>('gsl_root_fsolver_iterate');
  late final _gsl_root_fsolver_iterate = _gsl_root_fsolver_iteratePtr
      .asFunction<int Function(ffi.Pointer<gsl_root_fsolver>)>();

  ffi.Pointer<ffi.Int8> gsl_root_fsolver_name(
    ffi.Pointer<gsl_root_fsolver> s,
  ) {
    return _gsl_root_fsolver_name(
      s,
    );
  }

  late final _gsl_root_fsolver_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_root_fsolver>)>>('gsl_root_fsolver_name');
  late final _gsl_root_fsolver_name = _gsl_root_fsolver_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_root_fsolver>)>();

  double gsl_root_fsolver_root(
    ffi.Pointer<gsl_root_fsolver> s,
  ) {
    return _gsl_root_fsolver_root(
      s,
    );
  }

  late final _gsl_root_fsolver_rootPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_root_fsolver>)>>('gsl_root_fsolver_root');
  late final _gsl_root_fsolver_root = _gsl_root_fsolver_rootPtr
      .asFunction<double Function(ffi.Pointer<gsl_root_fsolver>)>();

  double gsl_root_fsolver_x_lower(
    ffi.Pointer<gsl_root_fsolver> s,
  ) {
    return _gsl_root_fsolver_x_lower(
      s,
    );
  }

  late final _gsl_root_fsolver_x_lowerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_root_fsolver>)>>('gsl_root_fsolver_x_lower');
  late final _gsl_root_fsolver_x_lower = _gsl_root_fsolver_x_lowerPtr
      .asFunction<double Function(ffi.Pointer<gsl_root_fsolver>)>();

  double gsl_root_fsolver_x_upper(
    ffi.Pointer<gsl_root_fsolver> s,
  ) {
    return _gsl_root_fsolver_x_upper(
      s,
    );
  }

  late final _gsl_root_fsolver_x_upperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_root_fsolver>)>>('gsl_root_fsolver_x_upper');
  late final _gsl_root_fsolver_x_upper = _gsl_root_fsolver_x_upperPtr
      .asFunction<double Function(ffi.Pointer<gsl_root_fsolver>)>();

  ffi.Pointer<gsl_root_fdfsolver> gsl_root_fdfsolver_alloc(
    ffi.Pointer<gsl_root_fdfsolver_type> T,
  ) {
    return _gsl_root_fdfsolver_alloc(
      T,
    );
  }

  late final _gsl_root_fdfsolver_allocPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_root_fdfsolver> Function(
                  ffi.Pointer<gsl_root_fdfsolver_type>)>>(
      'gsl_root_fdfsolver_alloc');
  late final _gsl_root_fdfsolver_alloc =
      _gsl_root_fdfsolver_allocPtr.asFunction<
          ffi.Pointer<gsl_root_fdfsolver> Function(
              ffi.Pointer<gsl_root_fdfsolver_type>)>();

  int gsl_root_fdfsolver_set(
    ffi.Pointer<gsl_root_fdfsolver> s,
    ffi.Pointer<gsl_function_fdf> fdf,
    double root,
  ) {
    return _gsl_root_fdfsolver_set(
      s,
      fdf,
      root,
    );
  }

  late final _gsl_root_fdfsolver_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_root_fdfsolver>,
              ffi.Pointer<gsl_function_fdf>,
              ffi.Double)>>('gsl_root_fdfsolver_set');
  late final _gsl_root_fdfsolver_set = _gsl_root_fdfsolver_setPtr.asFunction<
      int Function(ffi.Pointer<gsl_root_fdfsolver>,
          ffi.Pointer<gsl_function_fdf>, double)>();

  int gsl_root_fdfsolver_iterate(
    ffi.Pointer<gsl_root_fdfsolver> s,
  ) {
    return _gsl_root_fdfsolver_iterate(
      s,
    );
  }

  late final _gsl_root_fdfsolver_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_root_fdfsolver>)>>('gsl_root_fdfsolver_iterate');
  late final _gsl_root_fdfsolver_iterate = _gsl_root_fdfsolver_iteratePtr
      .asFunction<int Function(ffi.Pointer<gsl_root_fdfsolver>)>();

  void gsl_root_fdfsolver_free(
    ffi.Pointer<gsl_root_fdfsolver> s,
  ) {
    return _gsl_root_fdfsolver_free(
      s,
    );
  }

  late final _gsl_root_fdfsolver_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_root_fdfsolver>)>>('gsl_root_fdfsolver_free');
  late final _gsl_root_fdfsolver_free = _gsl_root_fdfsolver_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_root_fdfsolver>)>();

  ffi.Pointer<ffi.Int8> gsl_root_fdfsolver_name(
    ffi.Pointer<gsl_root_fdfsolver> s,
  ) {
    return _gsl_root_fdfsolver_name(
      s,
    );
  }

  late final _gsl_root_fdfsolver_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_root_fdfsolver>)>>('gsl_root_fdfsolver_name');
  late final _gsl_root_fdfsolver_name = _gsl_root_fdfsolver_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_root_fdfsolver>)>();

  double gsl_root_fdfsolver_root(
    ffi.Pointer<gsl_root_fdfsolver> s,
  ) {
    return _gsl_root_fdfsolver_root(
      s,
    );
  }

  late final _gsl_root_fdfsolver_rootPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_root_fdfsolver>)>>('gsl_root_fdfsolver_root');
  late final _gsl_root_fdfsolver_root = _gsl_root_fdfsolver_rootPtr
      .asFunction<double Function(ffi.Pointer<gsl_root_fdfsolver>)>();

  int gsl_root_test_interval(
    double x_lower,
    double x_upper,
    double epsabs,
    double epsrel,
  ) {
    return _gsl_root_test_interval(
      x_lower,
      x_upper,
      epsabs,
      epsrel,
    );
  }

  late final _gsl_root_test_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_root_test_interval');
  late final _gsl_root_test_interval = _gsl_root_test_intervalPtr
      .asFunction<int Function(double, double, double, double)>();

  int gsl_root_test_residual(
    double f,
    double epsabs,
  ) {
    return _gsl_root_test_residual(
      f,
      epsabs,
    );
  }

  late final _gsl_root_test_residualPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double, ffi.Double)>>(
          'gsl_root_test_residual');
  late final _gsl_root_test_residual =
      _gsl_root_test_residualPtr.asFunction<int Function(double, double)>();

  int gsl_root_test_delta(
    double x1,
    double x0,
    double epsabs,
    double epsrel,
  ) {
    return _gsl_root_test_delta(
      x1,
      x0,
      epsabs,
      epsrel,
    );
  }

  late final _gsl_root_test_deltaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_root_test_delta');
  late final _gsl_root_test_delta = _gsl_root_test_deltaPtr
      .asFunction<int Function(double, double, double, double)>();

  late final ffi.Pointer<ffi.Pointer<gsl_root_fsolver_type>>
      _gsl_root_fsolver_bisection =
      _lookup<ffi.Pointer<gsl_root_fsolver_type>>('gsl_root_fsolver_bisection');

  ffi.Pointer<gsl_root_fsolver_type> get gsl_root_fsolver_bisection =>
      _gsl_root_fsolver_bisection.value;

  set gsl_root_fsolver_bisection(ffi.Pointer<gsl_root_fsolver_type> value) =>
      _gsl_root_fsolver_bisection.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_root_fsolver_type>>
      _gsl_root_fsolver_brent =
      _lookup<ffi.Pointer<gsl_root_fsolver_type>>('gsl_root_fsolver_brent');

  ffi.Pointer<gsl_root_fsolver_type> get gsl_root_fsolver_brent =>
      _gsl_root_fsolver_brent.value;

  set gsl_root_fsolver_brent(ffi.Pointer<gsl_root_fsolver_type> value) =>
      _gsl_root_fsolver_brent.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_root_fsolver_type>>
      _gsl_root_fsolver_falsepos =
      _lookup<ffi.Pointer<gsl_root_fsolver_type>>('gsl_root_fsolver_falsepos');

  ffi.Pointer<gsl_root_fsolver_type> get gsl_root_fsolver_falsepos =>
      _gsl_root_fsolver_falsepos.value;

  set gsl_root_fsolver_falsepos(ffi.Pointer<gsl_root_fsolver_type> value) =>
      _gsl_root_fsolver_falsepos.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_root_fdfsolver_type>>
      _gsl_root_fdfsolver_newton =
      _lookup<ffi.Pointer<gsl_root_fdfsolver_type>>(
          'gsl_root_fdfsolver_newton');

  ffi.Pointer<gsl_root_fdfsolver_type> get gsl_root_fdfsolver_newton =>
      _gsl_root_fdfsolver_newton.value;

  set gsl_root_fdfsolver_newton(ffi.Pointer<gsl_root_fdfsolver_type> value) =>
      _gsl_root_fdfsolver_newton.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_root_fdfsolver_type>>
      _gsl_root_fdfsolver_secant =
      _lookup<ffi.Pointer<gsl_root_fdfsolver_type>>(
          'gsl_root_fdfsolver_secant');

  ffi.Pointer<gsl_root_fdfsolver_type> get gsl_root_fdfsolver_secant =>
      _gsl_root_fdfsolver_secant.value;

  set gsl_root_fdfsolver_secant(ffi.Pointer<gsl_root_fdfsolver_type> value) =>
      _gsl_root_fdfsolver_secant.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_root_fdfsolver_type>>
      _gsl_root_fdfsolver_steffenson =
      _lookup<ffi.Pointer<gsl_root_fdfsolver_type>>(
          'gsl_root_fdfsolver_steffenson');

  ffi.Pointer<gsl_root_fdfsolver_type> get gsl_root_fdfsolver_steffenson =>
      _gsl_root_fdfsolver_steffenson.value;

  set gsl_root_fdfsolver_steffenson(
          ffi.Pointer<gsl_root_fdfsolver_type> value) =>
      _gsl_root_fdfsolver_steffenson.value = value;

  int gsl_ran_bernoulli(
    ffi.Pointer<gsl_rng> r,
    double p,
  ) {
    return _gsl_ran_bernoulli(
      r,
      p,
    );
  }

  late final _gsl_ran_bernoulliPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_bernoulli');
  late final _gsl_ran_bernoulli = _gsl_ran_bernoulliPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_bernoulli_pdf(
    int k,
    double p,
  ) {
    return _gsl_ran_bernoulli_pdf(
      k,
      p,
    );
  }

  late final _gsl_ran_bernoulli_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Double)>>(
          'gsl_ran_bernoulli_pdf');
  late final _gsl_ran_bernoulli_pdf =
      _gsl_ran_bernoulli_pdfPtr.asFunction<double Function(int, double)>();

  double gsl_ran_beta(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_beta(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_betaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double, ffi.Double)>>('gsl_ran_beta');
  late final _gsl_ran_beta = _gsl_ran_betaPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_beta_pdf(
    double x,
    double a,
    double b,
  ) {
    return _gsl_ran_beta_pdf(
      x,
      a,
      b,
    );
  }

  late final _gsl_ran_beta_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_beta_pdf');
  late final _gsl_ran_beta_pdf = _gsl_ran_beta_pdfPtr
      .asFunction<double Function(double, double, double)>();

  int gsl_ran_binomial(
    ffi.Pointer<gsl_rng> r,
    double p,
    int n,
  ) {
    return _gsl_ran_binomial(
      r,
      p,
      n,
    );
  }

  late final _gsl_ran_binomialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Uint32)>>('gsl_ran_binomial');
  late final _gsl_ran_binomial = _gsl_ran_binomialPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, double, int)>();

  int gsl_ran_binomial_knuth(
    ffi.Pointer<gsl_rng> r,
    double p,
    int n,
  ) {
    return _gsl_ran_binomial_knuth(
      r,
      p,
      n,
    );
  }

  late final _gsl_ran_binomial_knuthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Uint32)>>('gsl_ran_binomial_knuth');
  late final _gsl_ran_binomial_knuth = _gsl_ran_binomial_knuthPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, double, int)>();

  int gsl_ran_binomial_tpe(
    ffi.Pointer<gsl_rng> r,
    double p,
    int n,
  ) {
    return _gsl_ran_binomial_tpe(
      r,
      p,
      n,
    );
  }

  late final _gsl_ran_binomial_tpePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Uint32)>>('gsl_ran_binomial_tpe');
  late final _gsl_ran_binomial_tpe = _gsl_ran_binomial_tpePtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, double, int)>();

  double gsl_ran_binomial_pdf(
    int k,
    double p,
    int n,
  ) {
    return _gsl_ran_binomial_pdf(
      k,
      p,
      n,
    );
  }

  late final _gsl_ran_binomial_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Uint32, ffi.Double, ffi.Uint32)>>('gsl_ran_binomial_pdf');
  late final _gsl_ran_binomial_pdf =
      _gsl_ran_binomial_pdfPtr.asFunction<double Function(int, double, int)>();

  double gsl_ran_exponential(
    ffi.Pointer<gsl_rng> r,
    double mu,
  ) {
    return _gsl_ran_exponential(
      r,
      mu,
    );
  }

  late final _gsl_ran_exponentialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_exponential');
  late final _gsl_ran_exponential = _gsl_ran_exponentialPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_exponential_pdf(
    double x,
    double mu,
  ) {
    return _gsl_ran_exponential_pdf(
      x,
      mu,
    );
  }

  late final _gsl_ran_exponential_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_ran_exponential_pdf');
  late final _gsl_ran_exponential_pdf =
      _gsl_ran_exponential_pdfPtr.asFunction<double Function(double, double)>();

  double gsl_ran_exppow(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_exppow(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_exppowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double, ffi.Double)>>('gsl_ran_exppow');
  late final _gsl_ran_exppow = _gsl_ran_exppowPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_exppow_pdf(
    double x,
    double a,
    double b,
  ) {
    return _gsl_ran_exppow_pdf(
      x,
      a,
      b,
    );
  }

  late final _gsl_ran_exppow_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_exppow_pdf');
  late final _gsl_ran_exppow_pdf = _gsl_ran_exppow_pdfPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_ran_cauchy(
    ffi.Pointer<gsl_rng> r,
    double a,
  ) {
    return _gsl_ran_cauchy(
      r,
      a,
    );
  }

  late final _gsl_ran_cauchyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_cauchy');
  late final _gsl_ran_cauchy = _gsl_ran_cauchyPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_cauchy_pdf(
    double x,
    double a,
  ) {
    return _gsl_ran_cauchy_pdf(
      x,
      a,
    );
  }

  late final _gsl_ran_cauchy_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_ran_cauchy_pdf');
  late final _gsl_ran_cauchy_pdf =
      _gsl_ran_cauchy_pdfPtr.asFunction<double Function(double, double)>();

  double gsl_ran_chisq(
    ffi.Pointer<gsl_rng> r,
    double nu,
  ) {
    return _gsl_ran_chisq(
      r,
      nu,
    );
  }

  late final _gsl_ran_chisqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_chisq');
  late final _gsl_ran_chisq = _gsl_ran_chisqPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_chisq_pdf(
    double x,
    double nu,
  ) {
    return _gsl_ran_chisq_pdf(
      x,
      nu,
    );
  }

  late final _gsl_ran_chisq_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_ran_chisq_pdf');
  late final _gsl_ran_chisq_pdf =
      _gsl_ran_chisq_pdfPtr.asFunction<double Function(double, double)>();

  void gsl_ran_dirichlet(
    ffi.Pointer<gsl_rng> r,
    int K,
    ffi.Pointer<ffi.Double> alpha,
    ffi.Pointer<ffi.Double> theta,
  ) {
    return _gsl_ran_dirichlet(
      r,
      K,
      alpha,
      theta,
    );
  }

  late final _gsl_ran_dirichletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_rng>,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_ran_dirichlet');
  late final _gsl_ran_dirichlet = _gsl_ran_dirichletPtr.asFunction<
      void Function(ffi.Pointer<gsl_rng>, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  double gsl_ran_dirichlet_pdf(
    int K,
    ffi.Pointer<ffi.Double> alpha,
    ffi.Pointer<ffi.Double> theta,
  ) {
    return _gsl_ran_dirichlet_pdf(
      K,
      alpha,
      theta,
    );
  }

  late final _gsl_ran_dirichlet_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(size_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_ran_dirichlet_pdf');
  late final _gsl_ran_dirichlet_pdf = _gsl_ran_dirichlet_pdfPtr.asFunction<
      double Function(int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  double gsl_ran_dirichlet_lnpdf(
    int K,
    ffi.Pointer<ffi.Double> alpha,
    ffi.Pointer<ffi.Double> theta,
  ) {
    return _gsl_ran_dirichlet_lnpdf(
      K,
      alpha,
      theta,
    );
  }

  late final _gsl_ran_dirichlet_lnpdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(size_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_ran_dirichlet_lnpdf');
  late final _gsl_ran_dirichlet_lnpdf = _gsl_ran_dirichlet_lnpdfPtr.asFunction<
      double Function(int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  double gsl_ran_erlang(
    ffi.Pointer<gsl_rng> r,
    double a,
    double n,
  ) {
    return _gsl_ran_erlang(
      r,
      a,
      n,
    );
  }

  late final _gsl_ran_erlangPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double, ffi.Double)>>('gsl_ran_erlang');
  late final _gsl_ran_erlang = _gsl_ran_erlangPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_erlang_pdf(
    double x,
    double a,
    double n,
  ) {
    return _gsl_ran_erlang_pdf(
      x,
      a,
      n,
    );
  }

  late final _gsl_ran_erlang_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_erlang_pdf');
  late final _gsl_ran_erlang_pdf = _gsl_ran_erlang_pdfPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_ran_fdist(
    ffi.Pointer<gsl_rng> r,
    double nu1,
    double nu2,
  ) {
    return _gsl_ran_fdist(
      r,
      nu1,
      nu2,
    );
  }

  late final _gsl_ran_fdistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double, ffi.Double)>>('gsl_ran_fdist');
  late final _gsl_ran_fdist = _gsl_ran_fdistPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_fdist_pdf(
    double x,
    double nu1,
    double nu2,
  ) {
    return _gsl_ran_fdist_pdf(
      x,
      nu1,
      nu2,
    );
  }

  late final _gsl_ran_fdist_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_fdist_pdf');
  late final _gsl_ran_fdist_pdf = _gsl_ran_fdist_pdfPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_ran_flat(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_flat(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_flatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double, ffi.Double)>>('gsl_ran_flat');
  late final _gsl_ran_flat = _gsl_ran_flatPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_flat_pdf(
    double x,
    double a,
    double b,
  ) {
    return _gsl_ran_flat_pdf(
      x,
      a,
      b,
    );
  }

  late final _gsl_ran_flat_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_flat_pdf');
  late final _gsl_ran_flat_pdf = _gsl_ran_flat_pdfPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_ran_gamma(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_gamma(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_gammaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double, ffi.Double)>>('gsl_ran_gamma');
  late final _gsl_ran_gamma = _gsl_ran_gammaPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_gamma_int(
    ffi.Pointer<gsl_rng> r,
    int a,
  ) {
    return _gsl_ran_gamma_int(
      r,
      a,
    );
  }

  late final _gsl_ran_gamma_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Uint32)>>('gsl_ran_gamma_int');
  late final _gsl_ran_gamma_int = _gsl_ran_gamma_intPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, int)>();

  double gsl_ran_gamma_pdf(
    double x,
    double a,
    double b,
  ) {
    return _gsl_ran_gamma_pdf(
      x,
      a,
      b,
    );
  }

  late final _gsl_ran_gamma_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_gamma_pdf');
  late final _gsl_ran_gamma_pdf = _gsl_ran_gamma_pdfPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_ran_gamma_mt(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_gamma_mt(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_gamma_mtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Double)>>('gsl_ran_gamma_mt');
  late final _gsl_ran_gamma_mt = _gsl_ran_gamma_mtPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_gamma_knuth(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_gamma_knuth(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_gamma_knuthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Double)>>('gsl_ran_gamma_knuth');
  late final _gsl_ran_gamma_knuth = _gsl_ran_gamma_knuthPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_gaussian(
    ffi.Pointer<gsl_rng> r,
    double sigma,
  ) {
    return _gsl_ran_gaussian(
      r,
      sigma,
    );
  }

  late final _gsl_ran_gaussianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_gaussian');
  late final _gsl_ran_gaussian = _gsl_ran_gaussianPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_gaussian_ratio_method(
    ffi.Pointer<gsl_rng> r,
    double sigma,
  ) {
    return _gsl_ran_gaussian_ratio_method(
      r,
      sigma,
    );
  }

  late final _gsl_ran_gaussian_ratio_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>,
              ffi.Double)>>('gsl_ran_gaussian_ratio_method');
  late final _gsl_ran_gaussian_ratio_method = _gsl_ran_gaussian_ratio_methodPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_gaussian_ziggurat(
    ffi.Pointer<gsl_rng> r,
    double sigma,
  ) {
    return _gsl_ran_gaussian_ziggurat(
      r,
      sigma,
    );
  }

  late final _gsl_ran_gaussian_zigguratPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_gaussian_ziggurat');
  late final _gsl_ran_gaussian_ziggurat = _gsl_ran_gaussian_zigguratPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_gaussian_pdf(
    double x,
    double sigma,
  ) {
    return _gsl_ran_gaussian_pdf(
      x,
      sigma,
    );
  }

  late final _gsl_ran_gaussian_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_ran_gaussian_pdf');
  late final _gsl_ran_gaussian_pdf =
      _gsl_ran_gaussian_pdfPtr.asFunction<double Function(double, double)>();

  double gsl_ran_ugaussian(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_ran_ugaussian(
      r,
    );
  }

  late final _gsl_ran_ugaussianPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_ran_ugaussian');
  late final _gsl_ran_ugaussian =
      _gsl_ran_ugaussianPtr.asFunction<double Function(ffi.Pointer<gsl_rng>)>();

  double gsl_ran_ugaussian_ratio_method(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_ran_ugaussian_ratio_method(
      r,
    );
  }

  late final _gsl_ran_ugaussian_ratio_methodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_ran_ugaussian_ratio_method');
  late final _gsl_ran_ugaussian_ratio_method =
      _gsl_ran_ugaussian_ratio_methodPtr
          .asFunction<double Function(ffi.Pointer<gsl_rng>)>();

  double gsl_ran_ugaussian_pdf(
    double x,
  ) {
    return _gsl_ran_ugaussian_pdf(
      x,
    );
  }

  late final _gsl_ran_ugaussian_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_ran_ugaussian_pdf');
  late final _gsl_ran_ugaussian_pdf =
      _gsl_ran_ugaussian_pdfPtr.asFunction<double Function(double)>();

  double gsl_ran_gaussian_tail(
    ffi.Pointer<gsl_rng> r,
    double a,
    double sigma,
  ) {
    return _gsl_ran_gaussian_tail(
      r,
      a,
      sigma,
    );
  }

  late final _gsl_ran_gaussian_tailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Double)>>('gsl_ran_gaussian_tail');
  late final _gsl_ran_gaussian_tail = _gsl_ran_gaussian_tailPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_gaussian_tail_pdf(
    double x,
    double a,
    double sigma,
  ) {
    return _gsl_ran_gaussian_tail_pdf(
      x,
      a,
      sigma,
    );
  }

  late final _gsl_ran_gaussian_tail_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_ran_gaussian_tail_pdf');
  late final _gsl_ran_gaussian_tail_pdf = _gsl_ran_gaussian_tail_pdfPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_ran_ugaussian_tail(
    ffi.Pointer<gsl_rng> r,
    double a,
  ) {
    return _gsl_ran_ugaussian_tail(
      r,
      a,
    );
  }

  late final _gsl_ran_ugaussian_tailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_ugaussian_tail');
  late final _gsl_ran_ugaussian_tail = _gsl_ran_ugaussian_tailPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_ugaussian_tail_pdf(
    double x,
    double a,
  ) {
    return _gsl_ran_ugaussian_tail_pdf(
      x,
      a,
    );
  }

  late final _gsl_ran_ugaussian_tail_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_ran_ugaussian_tail_pdf');
  late final _gsl_ran_ugaussian_tail_pdf = _gsl_ran_ugaussian_tail_pdfPtr
      .asFunction<double Function(double, double)>();

  void gsl_ran_bivariate_gaussian(
    ffi.Pointer<gsl_rng> r,
    double sigma_x,
    double sigma_y,
    double rho,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_ran_bivariate_gaussian(
      r,
      sigma_x,
      sigma_y,
      rho,
      x,
      y,
    );
  }

  late final _gsl_ran_bivariate_gaussianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_rng>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_ran_bivariate_gaussian');
  late final _gsl_ran_bivariate_gaussian =
      _gsl_ran_bivariate_gaussianPtr.asFunction<
          void Function(ffi.Pointer<gsl_rng>, double, double, double,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  double gsl_ran_bivariate_gaussian_pdf(
    double x,
    double y,
    double sigma_x,
    double sigma_y,
    double rho,
  ) {
    return _gsl_ran_bivariate_gaussian_pdf(
      x,
      y,
      sigma_x,
      sigma_y,
      rho,
    );
  }

  late final _gsl_ran_bivariate_gaussian_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_ran_bivariate_gaussian_pdf');
  late final _gsl_ran_bivariate_gaussian_pdf =
      _gsl_ran_bivariate_gaussian_pdfPtr.asFunction<
          double Function(double, double, double, double, double)>();

  int gsl_ran_multivariate_gaussian(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<gsl_vector> mu,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_vector> result,
  ) {
    return _gsl_ran_multivariate_gaussian(
      r,
      mu,
      L,
      result,
    );
  }

  late final _gsl_ran_multivariate_gaussianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_ran_multivariate_gaussian');
  late final _gsl_ran_multivariate_gaussian =
      _gsl_ran_multivariate_gaussianPtr.asFunction<
          int Function(ffi.Pointer<gsl_rng>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_ran_multivariate_gaussian_log_pdf(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> mu,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_ran_multivariate_gaussian_log_pdf(
      x,
      mu,
      L,
      result,
      work,
    );
  }

  late final _gsl_ran_multivariate_gaussian_log_pdfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_vector>)>>(
      'gsl_ran_multivariate_gaussian_log_pdf');
  late final _gsl_ran_multivariate_gaussian_log_pdf =
      _gsl_ran_multivariate_gaussian_log_pdfPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_ran_multivariate_gaussian_pdf(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> mu,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_ran_multivariate_gaussian_pdf(
      x,
      mu,
      L,
      result,
      work,
    );
  }

  late final _gsl_ran_multivariate_gaussian_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>>('gsl_ran_multivariate_gaussian_pdf');
  late final _gsl_ran_multivariate_gaussian_pdf =
      _gsl_ran_multivariate_gaussian_pdfPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_ran_multivariate_gaussian_mean(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> mu_hat,
  ) {
    return _gsl_ran_multivariate_gaussian_mean(
      X,
      mu_hat,
    );
  }

  late final _gsl_ran_multivariate_gaussian_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_ran_multivariate_gaussian_mean');
  late final _gsl_ran_multivariate_gaussian_mean =
      _gsl_ran_multivariate_gaussian_meanPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_ran_multivariate_gaussian_vcov(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_matrix> sigma_hat,
  ) {
    return _gsl_ran_multivariate_gaussian_vcov(
      X,
      sigma_hat,
    );
  }

  late final _gsl_ran_multivariate_gaussian_vcovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_ran_multivariate_gaussian_vcov');
  late final _gsl_ran_multivariate_gaussian_vcov =
      _gsl_ran_multivariate_gaussian_vcovPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_ran_wishart(
    ffi.Pointer<gsl_rng> r,
    double df,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_matrix> result,
    ffi.Pointer<gsl_matrix> work,
  ) {
    return _gsl_ran_wishart(
      r,
      df,
      L,
      result,
      work,
    );
  }

  late final _gsl_ran_wishartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_rng>,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>)>>('gsl_ran_wishart');
  late final _gsl_ran_wishart = _gsl_ran_wishartPtr.asFunction<
      int Function(ffi.Pointer<gsl_rng>, double, ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>)>();

  int gsl_ran_wishart_log_pdf(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_matrix> L_X,
    double df,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<gsl_matrix> work,
  ) {
    return _gsl_ran_wishart_log_pdf(
      X,
      L_X,
      df,
      L,
      result,
      work,
    );
  }

  late final _gsl_ran_wishart_log_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_matrix>)>>('gsl_ran_wishart_log_pdf');
  late final _gsl_ran_wishart_log_pdf = _gsl_ran_wishart_log_pdfPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          double,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_matrix>)>();

  int gsl_ran_wishart_pdf(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_matrix> L_X,
    double df,
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<gsl_matrix> work,
  ) {
    return _gsl_ran_wishart_pdf(
      X,
      L_X,
      df,
      L,
      result,
      work,
    );
  }

  late final _gsl_ran_wishart_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_matrix>,
              ffi.Double,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_matrix>)>>('gsl_ran_wishart_pdf');
  late final _gsl_ran_wishart_pdf = _gsl_ran_wishart_pdfPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<gsl_matrix>,
          double,
          ffi.Pointer<gsl_matrix>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_matrix>)>();

  double gsl_ran_landau(
    ffi.Pointer<gsl_rng> r,
  ) {
    return _gsl_ran_landau(
      r,
    );
  }

  late final _gsl_ran_landauPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_rng>)>>(
          'gsl_ran_landau');
  late final _gsl_ran_landau =
      _gsl_ran_landauPtr.asFunction<double Function(ffi.Pointer<gsl_rng>)>();

  double gsl_ran_landau_pdf(
    double x,
  ) {
    return _gsl_ran_landau_pdf(
      x,
    );
  }

  late final _gsl_ran_landau_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'gsl_ran_landau_pdf');
  late final _gsl_ran_landau_pdf =
      _gsl_ran_landau_pdfPtr.asFunction<double Function(double)>();

  int gsl_ran_geometric(
    ffi.Pointer<gsl_rng> r,
    double p,
  ) {
    return _gsl_ran_geometric(
      r,
      p,
    );
  }

  late final _gsl_ran_geometricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_geometric');
  late final _gsl_ran_geometric = _gsl_ran_geometricPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_geometric_pdf(
    int k,
    double p,
  ) {
    return _gsl_ran_geometric_pdf(
      k,
      p,
    );
  }

  late final _gsl_ran_geometric_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Double)>>(
          'gsl_ran_geometric_pdf');
  late final _gsl_ran_geometric_pdf =
      _gsl_ran_geometric_pdfPtr.asFunction<double Function(int, double)>();

  int gsl_ran_hypergeometric(
    ffi.Pointer<gsl_rng> r,
    int n1,
    int n2,
    int t,
  ) {
    return _gsl_ran_hypergeometric(
      r,
      n1,
      n2,
      t,
    );
  }

  late final _gsl_ran_hypergeometricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<gsl_rng>, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('gsl_ran_hypergeometric');
  late final _gsl_ran_hypergeometric = _gsl_ran_hypergeometricPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, int, int, int)>();

  double gsl_ran_hypergeometric_pdf(
    int k,
    int n1,
    int n2,
    int t,
  ) {
    return _gsl_ran_hypergeometric_pdf(
      k,
      n1,
      n2,
      t,
    );
  }

  late final _gsl_ran_hypergeometric_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Uint32, ffi.Uint32, ffi.Uint32,
              ffi.Uint32)>>('gsl_ran_hypergeometric_pdf');
  late final _gsl_ran_hypergeometric_pdf = _gsl_ran_hypergeometric_pdfPtr
      .asFunction<double Function(int, int, int, int)>();

  double gsl_ran_gumbel1(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_gumbel1(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_gumbel1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Double)>>('gsl_ran_gumbel1');
  late final _gsl_ran_gumbel1 = _gsl_ran_gumbel1Ptr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_gumbel1_pdf(
    double x,
    double a,
    double b,
  ) {
    return _gsl_ran_gumbel1_pdf(
      x,
      a,
      b,
    );
  }

  late final _gsl_ran_gumbel1_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_gumbel1_pdf');
  late final _gsl_ran_gumbel1_pdf = _gsl_ran_gumbel1_pdfPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_ran_gumbel2(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_gumbel2(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_gumbel2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Double)>>('gsl_ran_gumbel2');
  late final _gsl_ran_gumbel2 = _gsl_ran_gumbel2Ptr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_gumbel2_pdf(
    double x,
    double a,
    double b,
  ) {
    return _gsl_ran_gumbel2_pdf(
      x,
      a,
      b,
    );
  }

  late final _gsl_ran_gumbel2_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_gumbel2_pdf');
  late final _gsl_ran_gumbel2_pdf = _gsl_ran_gumbel2_pdfPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_ran_logistic(
    ffi.Pointer<gsl_rng> r,
    double a,
  ) {
    return _gsl_ran_logistic(
      r,
      a,
    );
  }

  late final _gsl_ran_logisticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_logistic');
  late final _gsl_ran_logistic = _gsl_ran_logisticPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_logistic_pdf(
    double x,
    double a,
  ) {
    return _gsl_ran_logistic_pdf(
      x,
      a,
    );
  }

  late final _gsl_ran_logistic_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_ran_logistic_pdf');
  late final _gsl_ran_logistic_pdf =
      _gsl_ran_logistic_pdfPtr.asFunction<double Function(double, double)>();

  double gsl_ran_lognormal(
    ffi.Pointer<gsl_rng> r,
    double zeta,
    double sigma,
  ) {
    return _gsl_ran_lognormal(
      r,
      zeta,
      sigma,
    );
  }

  late final _gsl_ran_lognormalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Double)>>('gsl_ran_lognormal');
  late final _gsl_ran_lognormal = _gsl_ran_lognormalPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_lognormal_pdf(
    double x,
    double zeta,
    double sigma,
  ) {
    return _gsl_ran_lognormal_pdf(
      x,
      zeta,
      sigma,
    );
  }

  late final _gsl_ran_lognormal_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_lognormal_pdf');
  late final _gsl_ran_lognormal_pdf = _gsl_ran_lognormal_pdfPtr
      .asFunction<double Function(double, double, double)>();

  int gsl_ran_logarithmic(
    ffi.Pointer<gsl_rng> r,
    double p,
  ) {
    return _gsl_ran_logarithmic(
      r,
      p,
    );
  }

  late final _gsl_ran_logarithmicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_logarithmic');
  late final _gsl_ran_logarithmic = _gsl_ran_logarithmicPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_logarithmic_pdf(
    int k,
    double p,
  ) {
    return _gsl_ran_logarithmic_pdf(
      k,
      p,
    );
  }

  late final _gsl_ran_logarithmic_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Double)>>(
          'gsl_ran_logarithmic_pdf');
  late final _gsl_ran_logarithmic_pdf =
      _gsl_ran_logarithmic_pdfPtr.asFunction<double Function(int, double)>();

  void gsl_ran_multinomial(
    ffi.Pointer<gsl_rng> r,
    int K,
    int N,
    ffi.Pointer<ffi.Double> p,
    ffi.Pointer<ffi.Uint32> n,
  ) {
    return _gsl_ran_multinomial(
      r,
      K,
      N,
      p,
      n,
    );
  }

  late final _gsl_ran_multinomialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_rng>,
              size_t,
              ffi.Uint32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint32>)>>('gsl_ran_multinomial');
  late final _gsl_ran_multinomial = _gsl_ran_multinomialPtr.asFunction<
      void Function(ffi.Pointer<gsl_rng>, int, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Uint32>)>();

  double gsl_ran_multinomial_pdf(
    int K,
    ffi.Pointer<ffi.Double> p,
    ffi.Pointer<ffi.Uint32> n,
  ) {
    return _gsl_ran_multinomial_pdf(
      K,
      p,
      n,
    );
  }

  late final _gsl_ran_multinomial_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(size_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint32>)>>('gsl_ran_multinomial_pdf');
  late final _gsl_ran_multinomial_pdf = _gsl_ran_multinomial_pdfPtr.asFunction<
      double Function(int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint32>)>();

  double gsl_ran_multinomial_lnpdf(
    int K,
    ffi.Pointer<ffi.Double> p,
    ffi.Pointer<ffi.Uint32> n,
  ) {
    return _gsl_ran_multinomial_lnpdf(
      K,
      p,
      n,
    );
  }

  late final _gsl_ran_multinomial_lnpdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(size_t, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Uint32>)>>('gsl_ran_multinomial_lnpdf');
  late final _gsl_ran_multinomial_lnpdf =
      _gsl_ran_multinomial_lnpdfPtr.asFunction<
          double Function(
              int, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Uint32>)>();

  int gsl_ran_negative_binomial(
    ffi.Pointer<gsl_rng> r,
    double p,
    double n,
  ) {
    return _gsl_ran_negative_binomial(
      r,
      p,
      n,
    );
  }

  late final _gsl_ran_negative_binomialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Double)>>('gsl_ran_negative_binomial');
  late final _gsl_ran_negative_binomial = _gsl_ran_negative_binomialPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_negative_binomial_pdf(
    int k,
    double p,
    double n,
  ) {
    return _gsl_ran_negative_binomial_pdf(
      k,
      p,
      n,
    );
  }

  late final _gsl_ran_negative_binomial_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Uint32, ffi.Double,
              ffi.Double)>>('gsl_ran_negative_binomial_pdf');
  late final _gsl_ran_negative_binomial_pdf = _gsl_ran_negative_binomial_pdfPtr
      .asFunction<double Function(int, double, double)>();

  int gsl_ran_pascal(
    ffi.Pointer<gsl_rng> r,
    double p,
    int n,
  ) {
    return _gsl_ran_pascal(
      r,
      p,
      n,
    );
  }

  late final _gsl_ran_pascalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_rng>, ffi.Double, ffi.Uint32)>>('gsl_ran_pascal');
  late final _gsl_ran_pascal = _gsl_ran_pascalPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, double, int)>();

  double gsl_ran_pascal_pdf(
    int k,
    double p,
    int n,
  ) {
    return _gsl_ran_pascal_pdf(
      k,
      p,
      n,
    );
  }

  late final _gsl_ran_pascal_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Uint32, ffi.Double, ffi.Uint32)>>('gsl_ran_pascal_pdf');
  late final _gsl_ran_pascal_pdf =
      _gsl_ran_pascal_pdfPtr.asFunction<double Function(int, double, int)>();

  double gsl_ran_pareto(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_pareto(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_paretoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double, ffi.Double)>>('gsl_ran_pareto');
  late final _gsl_ran_pareto = _gsl_ran_paretoPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_pareto_pdf(
    double x,
    double a,
    double b,
  ) {
    return _gsl_ran_pareto_pdf(
      x,
      a,
      b,
    );
  }

  late final _gsl_ran_pareto_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_pareto_pdf');
  late final _gsl_ran_pareto_pdf = _gsl_ran_pareto_pdfPtr
      .asFunction<double Function(double, double, double)>();

  int gsl_ran_poisson(
    ffi.Pointer<gsl_rng> r,
    double mu,
  ) {
    return _gsl_ran_poisson(
      r,
      mu,
    );
  }

  late final _gsl_ran_poissonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_poisson');
  late final _gsl_ran_poisson = _gsl_ran_poissonPtr
      .asFunction<int Function(ffi.Pointer<gsl_rng>, double)>();

  void gsl_ran_poisson_array(
    ffi.Pointer<gsl_rng> r,
    int n,
    ffi.Pointer<ffi.Uint32> array,
    double mu,
  ) {
    return _gsl_ran_poisson_array(
      r,
      n,
      array,
      mu,
    );
  }

  late final _gsl_ran_poisson_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_rng>, size_t,
              ffi.Pointer<ffi.Uint32>, ffi.Double)>>('gsl_ran_poisson_array');
  late final _gsl_ran_poisson_array = _gsl_ran_poisson_arrayPtr.asFunction<
      void Function(
          ffi.Pointer<gsl_rng>, int, ffi.Pointer<ffi.Uint32>, double)>();

  double gsl_ran_poisson_pdf(
    int k,
    double mu,
  ) {
    return _gsl_ran_poisson_pdf(
      k,
      mu,
    );
  }

  late final _gsl_ran_poisson_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Uint32, ffi.Double)>>(
          'gsl_ran_poisson_pdf');
  late final _gsl_ran_poisson_pdf =
      _gsl_ran_poisson_pdfPtr.asFunction<double Function(int, double)>();

  double gsl_ran_rayleigh(
    ffi.Pointer<gsl_rng> r,
    double sigma,
  ) {
    return _gsl_ran_rayleigh(
      r,
      sigma,
    );
  }

  late final _gsl_ran_rayleighPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_rayleigh');
  late final _gsl_ran_rayleigh = _gsl_ran_rayleighPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_rayleigh_pdf(
    double x,
    double sigma,
  ) {
    return _gsl_ran_rayleigh_pdf(
      x,
      sigma,
    );
  }

  late final _gsl_ran_rayleigh_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_ran_rayleigh_pdf');
  late final _gsl_ran_rayleigh_pdf =
      _gsl_ran_rayleigh_pdfPtr.asFunction<double Function(double, double)>();

  double gsl_ran_rayleigh_tail(
    ffi.Pointer<gsl_rng> r,
    double a,
    double sigma,
  ) {
    return _gsl_ran_rayleigh_tail(
      r,
      a,
      sigma,
    );
  }

  late final _gsl_ran_rayleigh_tailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Double)>>('gsl_ran_rayleigh_tail');
  late final _gsl_ran_rayleigh_tail = _gsl_ran_rayleigh_tailPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_rayleigh_tail_pdf(
    double x,
    double a,
    double sigma,
  ) {
    return _gsl_ran_rayleigh_tail_pdf(
      x,
      a,
      sigma,
    );
  }

  late final _gsl_ran_rayleigh_tail_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_ran_rayleigh_tail_pdf');
  late final _gsl_ran_rayleigh_tail_pdf = _gsl_ran_rayleigh_tail_pdfPtr
      .asFunction<double Function(double, double, double)>();

  double gsl_ran_tdist(
    ffi.Pointer<gsl_rng> r,
    double nu,
  ) {
    return _gsl_ran_tdist(
      r,
      nu,
    );
  }

  late final _gsl_ran_tdistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_tdist');
  late final _gsl_ran_tdist = _gsl_ran_tdistPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_tdist_pdf(
    double x,
    double nu,
  ) {
    return _gsl_ran_tdist_pdf(
      x,
      nu,
    );
  }

  late final _gsl_ran_tdist_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_ran_tdist_pdf');
  late final _gsl_ran_tdist_pdf =
      _gsl_ran_tdist_pdfPtr.asFunction<double Function(double, double)>();

  double gsl_ran_laplace(
    ffi.Pointer<gsl_rng> r,
    double a,
  ) {
    return _gsl_ran_laplace(
      r,
      a,
    );
  }

  late final _gsl_ran_laplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double)>>('gsl_ran_laplace');
  late final _gsl_ran_laplace = _gsl_ran_laplacePtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double)>();

  double gsl_ran_laplace_pdf(
    double x,
    double a,
  ) {
    return _gsl_ran_laplace_pdf(
      x,
      a,
    );
  }

  late final _gsl_ran_laplace_pdfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'gsl_ran_laplace_pdf');
  late final _gsl_ran_laplace_pdf =
      _gsl_ran_laplace_pdfPtr.asFunction<double Function(double, double)>();

  double gsl_ran_levy(
    ffi.Pointer<gsl_rng> r,
    double c,
    double alpha,
  ) {
    return _gsl_ran_levy(
      r,
      c,
      alpha,
    );
  }

  late final _gsl_ran_levyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_rng>, ffi.Double, ffi.Double)>>('gsl_ran_levy');
  late final _gsl_ran_levy = _gsl_ran_levyPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_levy_skew(
    ffi.Pointer<gsl_rng> r,
    double c,
    double alpha,
    double beta,
  ) {
    return _gsl_ran_levy_skew(
      r,
      c,
      alpha,
      beta,
    );
  }

  late final _gsl_ran_levy_skewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>, ffi.Double, ffi.Double,
              ffi.Double)>>('gsl_ran_levy_skew');
  late final _gsl_ran_levy_skew = _gsl_ran_levy_skewPtr.asFunction<
      double Function(ffi.Pointer<gsl_rng>, double, double, double)>();

  double gsl_ran_weibull(
    ffi.Pointer<gsl_rng> r,
    double a,
    double b,
  ) {
    return _gsl_ran_weibull(
      r,
      a,
      b,
    );
  }

  late final _gsl_ran_weibullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_rng>, ffi.Double,
              ffi.Double)>>('gsl_ran_weibull');
  late final _gsl_ran_weibull = _gsl_ran_weibullPtr
      .asFunction<double Function(ffi.Pointer<gsl_rng>, double, double)>();

  double gsl_ran_weibull_pdf(
    double x,
    double a,
    double b,
  ) {
    return _gsl_ran_weibull_pdf(
      x,
      a,
      b,
    );
  }

  late final _gsl_ran_weibull_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Double)>>('gsl_ran_weibull_pdf');
  late final _gsl_ran_weibull_pdf = _gsl_ran_weibull_pdfPtr
      .asFunction<double Function(double, double, double)>();

  void gsl_ran_dir_2d(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_ran_dir_2d(
      r,
      x,
      y,
    );
  }

  late final _gsl_ran_dir_2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_ran_dir_2d');
  late final _gsl_ran_dir_2d = _gsl_ran_dir_2dPtr.asFunction<
      void Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_ran_dir_2d_trig_method(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _gsl_ran_dir_2d_trig_method(
      r,
      x,
      y,
    );
  }

  late final _gsl_ran_dir_2d_trig_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_ran_dir_2d_trig_method');
  late final _gsl_ran_dir_2d_trig_method =
      _gsl_ran_dir_2d_trig_methodPtr.asFunction<
          void Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void gsl_ran_dir_3d(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> z,
  ) {
    return _gsl_ran_dir_3d(
      r,
      x,
      y,
      z,
    );
  }

  late final _gsl_ran_dir_3dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_ran_dir_3d');
  late final _gsl_ran_dir_3d = _gsl_ran_dir_3dPtr.asFunction<
      void Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void gsl_ran_dir_nd(
    ffi.Pointer<gsl_rng> r,
    int n,
    ffi.Pointer<ffi.Double> x,
  ) {
    return _gsl_ran_dir_nd(
      r,
      n,
      x,
    );
  }

  late final _gsl_ran_dir_ndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_rng>, size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_ran_dir_nd');
  late final _gsl_ran_dir_nd = _gsl_ran_dir_ndPtr.asFunction<
      void Function(ffi.Pointer<gsl_rng>, int, ffi.Pointer<ffi.Double>)>();

  void gsl_ran_shuffle(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<ffi.Void> base,
    int nmembm,
    int size,
  ) {
    return _gsl_ran_shuffle(
      r,
      base,
      nmembm,
      size,
    );
  }

  late final _gsl_ran_shufflePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Void>, size_t,
              size_t)>>('gsl_ran_shuffle');
  late final _gsl_ran_shuffle = _gsl_ran_shufflePtr.asFunction<
      void Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Void>, int, int)>();

  int gsl_ran_choose(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<ffi.Void> dest,
    int k,
    ffi.Pointer<ffi.Void> src,
    int n,
    int size,
  ) {
    return _gsl_ran_choose(
      r,
      dest,
      k,
      src,
      n,
      size,
    );
  }

  late final _gsl_ran_choosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t)>>('gsl_ran_choose');
  late final _gsl_ran_choose = _gsl_ran_choosePtr.asFunction<
      int Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int, int)>();

  void gsl_ran_sample(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<ffi.Void> dest,
    int k,
    ffi.Pointer<ffi.Void> src,
    int n,
    int size,
  ) {
    return _gsl_ran_sample(
      r,
      dest,
      k,
      src,
      n,
      size,
    );
  }

  late final _gsl_ran_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('gsl_ran_sample');
  late final _gsl_ran_sample = _gsl_ran_samplePtr.asFunction<
      void Function(ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<gsl_ran_discrete_t> gsl_ran_discrete_preproc(
    int K,
    ffi.Pointer<ffi.Double> P,
  ) {
    return _gsl_ran_discrete_preproc(
      K,
      P,
    );
  }

  late final _gsl_ran_discrete_preprocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_ran_discrete_t> Function(
              size_t, ffi.Pointer<ffi.Double>)>>('gsl_ran_discrete_preproc');
  late final _gsl_ran_discrete_preproc =
      _gsl_ran_discrete_preprocPtr.asFunction<
          ffi.Pointer<gsl_ran_discrete_t> Function(
              int, ffi.Pointer<ffi.Double>)>();

  void gsl_ran_discrete_free(
    ffi.Pointer<gsl_ran_discrete_t> g,
  ) {
    return _gsl_ran_discrete_free(
      g,
    );
  }

  late final _gsl_ran_discrete_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_ran_discrete_t>)>>('gsl_ran_discrete_free');
  late final _gsl_ran_discrete_free = _gsl_ran_discrete_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_ran_discrete_t>)>();

  int gsl_ran_discrete(
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<gsl_ran_discrete_t> g,
  ) {
    return _gsl_ran_discrete(
      r,
      g,
    );
  }

  late final _gsl_ran_discretePtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<gsl_rng>,
              ffi.Pointer<gsl_ran_discrete_t>)>>('gsl_ran_discrete');
  late final _gsl_ran_discrete = _gsl_ran_discretePtr.asFunction<
      int Function(ffi.Pointer<gsl_rng>, ffi.Pointer<gsl_ran_discrete_t>)>();

  double gsl_ran_discrete_pdf(
    int k,
    ffi.Pointer<gsl_ran_discrete_t> g,
  ) {
    return _gsl_ran_discrete_pdf(
      k,
      g,
    );
  }

  late final _gsl_ran_discrete_pdfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(size_t,
              ffi.Pointer<gsl_ran_discrete_t>)>>('gsl_ran_discrete_pdf');
  late final _gsl_ran_discrete_pdf = _gsl_ran_discrete_pdfPtr
      .asFunction<double Function(int, ffi.Pointer<gsl_ran_discrete_t>)>();

  ffi.Pointer<gsl_integration_workspace> gsl_integration_workspace_alloc(
    int n,
  ) {
    return _gsl_integration_workspace_alloc(
      n,
    );
  }

  late final _gsl_integration_workspace_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_integration_workspace> Function(
              size_t)>>('gsl_integration_workspace_alloc');
  late final _gsl_integration_workspace_alloc =
      _gsl_integration_workspace_allocPtr
          .asFunction<ffi.Pointer<gsl_integration_workspace> Function(int)>();

  void gsl_integration_workspace_free(
    ffi.Pointer<gsl_integration_workspace> w,
  ) {
    return _gsl_integration_workspace_free(
      w,
    );
  }

  late final _gsl_integration_workspace_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_integration_workspace>)>>(
      'gsl_integration_workspace_free');
  late final _gsl_integration_workspace_free =
      _gsl_integration_workspace_freePtr
          .asFunction<void Function(ffi.Pointer<gsl_integration_workspace>)>();

  ffi.Pointer<gsl_integration_qaws_table> gsl_integration_qaws_table_alloc(
    double alpha,
    double beta,
    int mu,
    int nu,
  ) {
    return _gsl_integration_qaws_table_alloc(
      alpha,
      beta,
      mu,
      nu,
    );
  }

  late final _gsl_integration_qaws_table_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_integration_qaws_table> Function(
              ffi.Double,
              ffi.Double,
              ffi.Int32,
              ffi.Int32)>>('gsl_integration_qaws_table_alloc');
  late final _gsl_integration_qaws_table_alloc =
      _gsl_integration_qaws_table_allocPtr.asFunction<
          ffi.Pointer<gsl_integration_qaws_table> Function(
              double, double, int, int)>();

  int gsl_integration_qaws_table_set(
    ffi.Pointer<gsl_integration_qaws_table> t,
    double alpha,
    double beta,
    int mu,
    int nu,
  ) {
    return _gsl_integration_qaws_table_set(
      t,
      alpha,
      beta,
      mu,
      nu,
    );
  }

  late final _gsl_integration_qaws_table_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_integration_qaws_table>,
              ffi.Double,
              ffi.Double,
              ffi.Int32,
              ffi.Int32)>>('gsl_integration_qaws_table_set');
  late final _gsl_integration_qaws_table_set =
      _gsl_integration_qaws_table_setPtr.asFunction<
          int Function(ffi.Pointer<gsl_integration_qaws_table>, double, double,
              int, int)>();

  void gsl_integration_qaws_table_free(
    ffi.Pointer<gsl_integration_qaws_table> t,
  ) {
    return _gsl_integration_qaws_table_free(
      t,
    );
  }

  late final _gsl_integration_qaws_table_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_integration_qaws_table>)>>(
      'gsl_integration_qaws_table_free');
  late final _gsl_integration_qaws_table_free =
      _gsl_integration_qaws_table_freePtr
          .asFunction<void Function(ffi.Pointer<gsl_integration_qaws_table>)>();

  ffi.Pointer<gsl_integration_qawo_table> gsl_integration_qawo_table_alloc(
    double omega,
    double L,
    int sine,
    int n,
  ) {
    return _gsl_integration_qawo_table_alloc(
      omega,
      L,
      sine,
      n,
    );
  }

  late final _gsl_integration_qawo_table_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_integration_qawo_table> Function(
              ffi.Double,
              ffi.Double,
              ffi.Int32,
              size_t)>>('gsl_integration_qawo_table_alloc');
  late final _gsl_integration_qawo_table_alloc =
      _gsl_integration_qawo_table_allocPtr.asFunction<
          ffi.Pointer<gsl_integration_qawo_table> Function(
              double, double, int, int)>();

  int gsl_integration_qawo_table_set(
    ffi.Pointer<gsl_integration_qawo_table> t,
    double omega,
    double L,
    int sine,
  ) {
    return _gsl_integration_qawo_table_set(
      t,
      omega,
      L,
      sine,
    );
  }

  late final _gsl_integration_qawo_table_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_integration_qawo_table>,
              ffi.Double,
              ffi.Double,
              ffi.Int32)>>('gsl_integration_qawo_table_set');
  late final _gsl_integration_qawo_table_set =
      _gsl_integration_qawo_table_setPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_integration_qawo_table>, double, double, int)>();

  int gsl_integration_qawo_table_set_length(
    ffi.Pointer<gsl_integration_qawo_table> t,
    double L,
  ) {
    return _gsl_integration_qawo_table_set_length(
      t,
      L,
    );
  }

  late final _gsl_integration_qawo_table_set_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_integration_qawo_table>,
              ffi.Double)>>('gsl_integration_qawo_table_set_length');
  late final _gsl_integration_qawo_table_set_length =
      _gsl_integration_qawo_table_set_lengthPtr.asFunction<
          int Function(ffi.Pointer<gsl_integration_qawo_table>, double)>();

  void gsl_integration_qawo_table_free(
    ffi.Pointer<gsl_integration_qawo_table> t,
  ) {
    return _gsl_integration_qawo_table_free(
      t,
    );
  }

  late final _gsl_integration_qawo_table_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_integration_qawo_table>)>>(
      'gsl_integration_qawo_table_free');
  late final _gsl_integration_qawo_table_free =
      _gsl_integration_qawo_table_freePtr
          .asFunction<void Function(ffi.Pointer<gsl_integration_qawo_table>)>();

  void gsl_integration_qk15(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
    ffi.Pointer<ffi.Double> resabs,
    ffi.Pointer<ffi.Double> resasc,
  ) {
    return _gsl_integration_qk15(
      f,
      a,
      b,
      result,
      abserr,
      resabs,
      resasc,
    );
  }

  late final _gsl_integration_qk15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qk15');
  late final _gsl_integration_qk15 = _gsl_integration_qk15Ptr.asFunction<
      void Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_integration_qk21(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
    ffi.Pointer<ffi.Double> resabs,
    ffi.Pointer<ffi.Double> resasc,
  ) {
    return _gsl_integration_qk21(
      f,
      a,
      b,
      result,
      abserr,
      resabs,
      resasc,
    );
  }

  late final _gsl_integration_qk21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qk21');
  late final _gsl_integration_qk21 = _gsl_integration_qk21Ptr.asFunction<
      void Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_integration_qk31(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
    ffi.Pointer<ffi.Double> resabs,
    ffi.Pointer<ffi.Double> resasc,
  ) {
    return _gsl_integration_qk31(
      f,
      a,
      b,
      result,
      abserr,
      resabs,
      resasc,
    );
  }

  late final _gsl_integration_qk31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qk31');
  late final _gsl_integration_qk31 = _gsl_integration_qk31Ptr.asFunction<
      void Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_integration_qk41(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
    ffi.Pointer<ffi.Double> resabs,
    ffi.Pointer<ffi.Double> resasc,
  ) {
    return _gsl_integration_qk41(
      f,
      a,
      b,
      result,
      abserr,
      resabs,
      resasc,
    );
  }

  late final _gsl_integration_qk41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qk41');
  late final _gsl_integration_qk41 = _gsl_integration_qk41Ptr.asFunction<
      void Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_integration_qk51(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
    ffi.Pointer<ffi.Double> resabs,
    ffi.Pointer<ffi.Double> resasc,
  ) {
    return _gsl_integration_qk51(
      f,
      a,
      b,
      result,
      abserr,
      resabs,
      resasc,
    );
  }

  late final _gsl_integration_qk51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qk51');
  late final _gsl_integration_qk51 = _gsl_integration_qk51Ptr.asFunction<
      void Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_integration_qk61(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
    ffi.Pointer<ffi.Double> resabs,
    ffi.Pointer<ffi.Double> resasc,
  ) {
    return _gsl_integration_qk61(
      f,
      a,
      b,
      result,
      abserr,
      resabs,
      resasc,
    );
  }

  late final _gsl_integration_qk61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qk61');
  late final _gsl_integration_qk61 = _gsl_integration_qk61Ptr.asFunction<
      void Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_integration_qcheb(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<ffi.Double> cheb12,
    ffi.Pointer<ffi.Double> cheb24,
  ) {
    return _gsl_integration_qcheb(
      f,
      a,
      b,
      cheb12,
      cheb24,
    );
  }

  late final _gsl_integration_qchebPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qcheb');
  late final _gsl_integration_qcheb = _gsl_integration_qchebPtr.asFunction<
      void Function(ffi.Pointer<gsl_function>, double, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void gsl_integration_qk(
    int n,
    ffi.Pointer<ffi.Double> xgk,
    ffi.Pointer<ffi.Double> wg,
    ffi.Pointer<ffi.Double> wgk,
    ffi.Pointer<ffi.Double> fv1,
    ffi.Pointer<ffi.Double> fv2,
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
    ffi.Pointer<ffi.Double> resabs,
    ffi.Pointer<ffi.Double> resasc,
  ) {
    return _gsl_integration_qk(
      n,
      xgk,
      wg,
      wgk,
      fv1,
      fv2,
      f,
      a,
      b,
      result,
      abserr,
      resabs,
      resasc,
    );
  }

  late final _gsl_integration_qkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qk');
  late final _gsl_integration_qk = _gsl_integration_qkPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_function>,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qng(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    double epsabs,
    double epsrel,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
    ffi.Pointer<size_t> neval,
  ) {
    return _gsl_integration_qng(
      f,
      a,
      b,
      epsabs,
      epsrel,
      result,
      abserr,
      neval,
    );
  }

  late final _gsl_integration_qngPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<size_t>)>>('gsl_integration_qng');
  late final _gsl_integration_qng = _gsl_integration_qngPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<size_t>)>();

  int gsl_integration_qag(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    double epsabs,
    double epsrel,
    int limit,
    int key,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qag(
      f,
      a,
      b,
      epsabs,
      epsrel,
      limit,
      key,
      workspace,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Int32,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qag');
  late final _gsl_integration_qag = _gsl_integration_qagPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          double,
          double,
          int,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qagi(
    ffi.Pointer<gsl_function> f,
    double epsabs,
    double epsrel,
    int limit,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qagi(
      f,
      epsabs,
      epsrel,
      limit,
      workspace,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qagiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qagi');
  late final _gsl_integration_qagi = _gsl_integration_qagiPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qagiu(
    ffi.Pointer<gsl_function> f,
    double a,
    double epsabs,
    double epsrel,
    int limit,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qagiu(
      f,
      a,
      epsabs,
      epsrel,
      limit,
      workspace,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qagiuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qagiu');
  late final _gsl_integration_qagiu = _gsl_integration_qagiuPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          double,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qagil(
    ffi.Pointer<gsl_function> f,
    double b,
    double epsabs,
    double epsrel,
    int limit,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qagil(
      f,
      b,
      epsabs,
      epsrel,
      limit,
      workspace,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qagilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qagil');
  late final _gsl_integration_qagil = _gsl_integration_qagilPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          double,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qags(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    double epsabs,
    double epsrel,
    int limit,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qags(
      f,
      a,
      b,
      epsabs,
      epsrel,
      limit,
      workspace,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qags');
  late final _gsl_integration_qags = _gsl_integration_qagsPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          double,
          double,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qagp(
    ffi.Pointer<gsl_function> f,
    ffi.Pointer<ffi.Double> pts,
    int npts,
    double epsabs,
    double epsrel,
    int limit,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qagp(
      f,
      pts,
      npts,
      epsabs,
      epsrel,
      limit,
      workspace,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qagpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qagp');
  late final _gsl_integration_qagp = _gsl_integration_qagpPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          ffi.Pointer<ffi.Double>,
          int,
          double,
          double,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qawc(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    double c,
    double epsabs,
    double epsrel,
    int limit,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qawc(
      f,
      a,
      b,
      c,
      epsabs,
      epsrel,
      limit,
      workspace,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qawcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qawc');
  late final _gsl_integration_qawc = _gsl_integration_qawcPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          double,
          double,
          double,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qaws(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<gsl_integration_qaws_table> t,
    double epsabs,
    double epsrel,
    int limit,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qaws(
      f,
      a,
      b,
      t,
      epsabs,
      epsrel,
      limit,
      workspace,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qawsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_integration_qaws_table>,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qaws');
  late final _gsl_integration_qaws = _gsl_integration_qawsPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          ffi.Pointer<gsl_integration_qaws_table>,
          double,
          double,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qawo(
    ffi.Pointer<gsl_function> f,
    double a,
    double epsabs,
    double epsrel,
    int limit,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<gsl_integration_qawo_table> wf,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qawo(
      f,
      a,
      epsabs,
      epsrel,
      limit,
      workspace,
      wf,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qawoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<gsl_integration_qawo_table>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qawo');
  late final _gsl_integration_qawo = _gsl_integration_qawoPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          double,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<gsl_integration_qawo_table>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_integration_qawf(
    ffi.Pointer<gsl_function> f,
    double a,
    double epsabs,
    int limit,
    ffi.Pointer<gsl_integration_workspace> workspace,
    ffi.Pointer<gsl_integration_workspace> cycle_workspace,
    ffi.Pointer<gsl_integration_qawo_table> wf,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_integration_qawf(
      f,
      a,
      epsabs,
      limit,
      workspace,
      cycle_workspace,
      wf,
      result,
      abserr,
    );
  }

  late final _gsl_integration_qawfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              size_t,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<gsl_integration_workspace>,
              ffi.Pointer<gsl_integration_qawo_table>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_integration_qawf');
  late final _gsl_integration_qawf = _gsl_integration_qawfPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          int,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<gsl_integration_workspace>,
          ffi.Pointer<gsl_integration_qawo_table>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_integration_glfixed_table>
      gsl_integration_glfixed_table_alloc(
    int n,
  ) {
    return _gsl_integration_glfixed_table_alloc(
      n,
    );
  }

  late final _gsl_integration_glfixed_table_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_integration_glfixed_table> Function(
              size_t)>>('gsl_integration_glfixed_table_alloc');
  late final _gsl_integration_glfixed_table_alloc =
      _gsl_integration_glfixed_table_allocPtr.asFunction<
          ffi.Pointer<gsl_integration_glfixed_table> Function(int)>();

  void gsl_integration_glfixed_table_free(
    ffi.Pointer<gsl_integration_glfixed_table> t,
  ) {
    return _gsl_integration_glfixed_table_free(
      t,
    );
  }

  late final _gsl_integration_glfixed_table_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_integration_glfixed_table>)>>(
      'gsl_integration_glfixed_table_free');
  late final _gsl_integration_glfixed_table_free =
      _gsl_integration_glfixed_table_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_integration_glfixed_table>)>();

  double gsl_integration_glfixed(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    ffi.Pointer<gsl_integration_glfixed_table> t,
  ) {
    return _gsl_integration_glfixed(
      f,
      a,
      b,
      t,
    );
  }

  late final _gsl_integration_glfixedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<gsl_function>, ffi.Double,
                  ffi.Double, ffi.Pointer<gsl_integration_glfixed_table>)>>(
      'gsl_integration_glfixed');
  late final _gsl_integration_glfixed = _gsl_integration_glfixedPtr.asFunction<
      double Function(ffi.Pointer<gsl_function>, double, double,
          ffi.Pointer<gsl_integration_glfixed_table>)>();

  int gsl_integration_glfixed_point(
    double a,
    double b,
    int i,
    ffi.Pointer<ffi.Double> xi,
    ffi.Pointer<ffi.Double> wi,
    ffi.Pointer<gsl_integration_glfixed_table> t,
  ) {
    return _gsl_integration_glfixed_point(
      a,
      b,
      i,
      xi,
      wi,
      t,
    );
  }

  late final _gsl_integration_glfixed_pointPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double,
                  ffi.Double,
                  size_t,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_integration_glfixed_table>)>>(
      'gsl_integration_glfixed_point');
  late final _gsl_integration_glfixed_point =
      _gsl_integration_glfixed_pointPtr.asFunction<
          int Function(
              double,
              double,
              int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_integration_glfixed_table>)>();

  ffi.Pointer<gsl_integration_cquad_workspace>
      gsl_integration_cquad_workspace_alloc(
    int n,
  ) {
    return _gsl_integration_cquad_workspace_alloc(
      n,
    );
  }

  late final _gsl_integration_cquad_workspace_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_integration_cquad_workspace> Function(
              size_t)>>('gsl_integration_cquad_workspace_alloc');
  late final _gsl_integration_cquad_workspace_alloc =
      _gsl_integration_cquad_workspace_allocPtr.asFunction<
          ffi.Pointer<gsl_integration_cquad_workspace> Function(int)>();

  void gsl_integration_cquad_workspace_free(
    ffi.Pointer<gsl_integration_cquad_workspace> w,
  ) {
    return _gsl_integration_cquad_workspace_free(
      w,
    );
  }

  late final _gsl_integration_cquad_workspace_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_integration_cquad_workspace>)>>(
      'gsl_integration_cquad_workspace_free');
  late final _gsl_integration_cquad_workspace_free =
      _gsl_integration_cquad_workspace_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_integration_cquad_workspace>)>();

  int gsl_integration_cquad(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    double epsabs,
    double epsrel,
    ffi.Pointer<gsl_integration_cquad_workspace> ws,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
    ffi.Pointer<size_t> nevals,
  ) {
    return _gsl_integration_cquad(
      f,
      a,
      b,
      epsabs,
      epsrel,
      ws,
      result,
      abserr,
      nevals,
    );
  }

  late final _gsl_integration_cquadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_integration_cquad_workspace>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<size_t>)>>('gsl_integration_cquad');
  late final _gsl_integration_cquad = _gsl_integration_cquadPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          double,
          double,
          ffi.Pointer<gsl_integration_cquad_workspace>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<size_t>)>();

  ffi.Pointer<gsl_integration_romberg_workspace> gsl_integration_romberg_alloc(
    int n,
  ) {
    return _gsl_integration_romberg_alloc(
      n,
    );
  }

  late final _gsl_integration_romberg_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_integration_romberg_workspace> Function(
              size_t)>>('gsl_integration_romberg_alloc');
  late final _gsl_integration_romberg_alloc =
      _gsl_integration_romberg_allocPtr.asFunction<
          ffi.Pointer<gsl_integration_romberg_workspace> Function(int)>();

  void gsl_integration_romberg_free(
    ffi.Pointer<gsl_integration_romberg_workspace> w,
  ) {
    return _gsl_integration_romberg_free(
      w,
    );
  }

  late final _gsl_integration_romberg_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<gsl_integration_romberg_workspace>)>>(
      'gsl_integration_romberg_free');
  late final _gsl_integration_romberg_free =
      _gsl_integration_romberg_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_integration_romberg_workspace>)>();

  int gsl_integration_romberg(
    ffi.Pointer<gsl_function> f,
    double a,
    double b,
    double epsabs,
    double epsrel,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<size_t> neval,
    ffi.Pointer<gsl_integration_romberg_workspace> w,
  ) {
    return _gsl_integration_romberg(
      f,
      a,
      b,
      epsabs,
      epsrel,
      result,
      neval,
      w,
    );
  }

  late final _gsl_integration_rombergPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_function>,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<size_t>,
                  ffi.Pointer<gsl_integration_romberg_workspace>)>>(
      'gsl_integration_romberg');
  late final _gsl_integration_romberg = _gsl_integration_rombergPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_function>,
          double,
          double,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<size_t>,
          ffi.Pointer<gsl_integration_romberg_workspace>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_integration_fixed_type>>
      _gsl_integration_fixed_legendre =
      _lookup<ffi.Pointer<gsl_integration_fixed_type>>(
          'gsl_integration_fixed_legendre');

  ffi.Pointer<gsl_integration_fixed_type> get gsl_integration_fixed_legendre =>
      _gsl_integration_fixed_legendre.value;

  set gsl_integration_fixed_legendre(
          ffi.Pointer<gsl_integration_fixed_type> value) =>
      _gsl_integration_fixed_legendre.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_integration_fixed_type>>
      _gsl_integration_fixed_chebyshev =
      _lookup<ffi.Pointer<gsl_integration_fixed_type>>(
          'gsl_integration_fixed_chebyshev');

  ffi.Pointer<gsl_integration_fixed_type> get gsl_integration_fixed_chebyshev =>
      _gsl_integration_fixed_chebyshev.value;

  set gsl_integration_fixed_chebyshev(
          ffi.Pointer<gsl_integration_fixed_type> value) =>
      _gsl_integration_fixed_chebyshev.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_integration_fixed_type>>
      _gsl_integration_fixed_gegenbauer =
      _lookup<ffi.Pointer<gsl_integration_fixed_type>>(
          'gsl_integration_fixed_gegenbauer');

  ffi.Pointer<gsl_integration_fixed_type>
      get gsl_integration_fixed_gegenbauer =>
          _gsl_integration_fixed_gegenbauer.value;

  set gsl_integration_fixed_gegenbauer(
          ffi.Pointer<gsl_integration_fixed_type> value) =>
      _gsl_integration_fixed_gegenbauer.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_integration_fixed_type>>
      _gsl_integration_fixed_jacobi =
      _lookup<ffi.Pointer<gsl_integration_fixed_type>>(
          'gsl_integration_fixed_jacobi');

  ffi.Pointer<gsl_integration_fixed_type> get gsl_integration_fixed_jacobi =>
      _gsl_integration_fixed_jacobi.value;

  set gsl_integration_fixed_jacobi(
          ffi.Pointer<gsl_integration_fixed_type> value) =>
      _gsl_integration_fixed_jacobi.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_integration_fixed_type>>
      _gsl_integration_fixed_laguerre =
      _lookup<ffi.Pointer<gsl_integration_fixed_type>>(
          'gsl_integration_fixed_laguerre');

  ffi.Pointer<gsl_integration_fixed_type> get gsl_integration_fixed_laguerre =>
      _gsl_integration_fixed_laguerre.value;

  set gsl_integration_fixed_laguerre(
          ffi.Pointer<gsl_integration_fixed_type> value) =>
      _gsl_integration_fixed_laguerre.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_integration_fixed_type>>
      _gsl_integration_fixed_hermite =
      _lookup<ffi.Pointer<gsl_integration_fixed_type>>(
          'gsl_integration_fixed_hermite');

  ffi.Pointer<gsl_integration_fixed_type> get gsl_integration_fixed_hermite =>
      _gsl_integration_fixed_hermite.value;

  set gsl_integration_fixed_hermite(
          ffi.Pointer<gsl_integration_fixed_type> value) =>
      _gsl_integration_fixed_hermite.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_integration_fixed_type>>
      _gsl_integration_fixed_exponential =
      _lookup<ffi.Pointer<gsl_integration_fixed_type>>(
          'gsl_integration_fixed_exponential');

  ffi.Pointer<gsl_integration_fixed_type>
      get gsl_integration_fixed_exponential =>
          _gsl_integration_fixed_exponential.value;

  set gsl_integration_fixed_exponential(
          ffi.Pointer<gsl_integration_fixed_type> value) =>
      _gsl_integration_fixed_exponential.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_integration_fixed_type>>
      _gsl_integration_fixed_rational =
      _lookup<ffi.Pointer<gsl_integration_fixed_type>>(
          'gsl_integration_fixed_rational');

  ffi.Pointer<gsl_integration_fixed_type> get gsl_integration_fixed_rational =>
      _gsl_integration_fixed_rational.value;

  set gsl_integration_fixed_rational(
          ffi.Pointer<gsl_integration_fixed_type> value) =>
      _gsl_integration_fixed_rational.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_integration_fixed_type>>
      _gsl_integration_fixed_chebyshev2 =
      _lookup<ffi.Pointer<gsl_integration_fixed_type>>(
          'gsl_integration_fixed_chebyshev2');

  ffi.Pointer<gsl_integration_fixed_type>
      get gsl_integration_fixed_chebyshev2 =>
          _gsl_integration_fixed_chebyshev2.value;

  set gsl_integration_fixed_chebyshev2(
          ffi.Pointer<gsl_integration_fixed_type> value) =>
      _gsl_integration_fixed_chebyshev2.value = value;

  ffi.Pointer<gsl_integration_fixed_workspace> gsl_integration_fixed_alloc(
    ffi.Pointer<gsl_integration_fixed_type> type,
    int n,
    double a,
    double b,
    double alpha,
    double beta,
  ) {
    return _gsl_integration_fixed_alloc(
      type,
      n,
      a,
      b,
      alpha,
      beta,
    );
  }

  late final _gsl_integration_fixed_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_integration_fixed_workspace> Function(
              ffi.Pointer<gsl_integration_fixed_type>,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('gsl_integration_fixed_alloc');
  late final _gsl_integration_fixed_alloc =
      _gsl_integration_fixed_allocPtr.asFunction<
          ffi.Pointer<gsl_integration_fixed_workspace> Function(
              ffi.Pointer<gsl_integration_fixed_type>,
              int,
              double,
              double,
              double,
              double)>();

  void gsl_integration_fixed_free(
    ffi.Pointer<gsl_integration_fixed_workspace> w,
  ) {
    return _gsl_integration_fixed_free(
      w,
    );
  }

  late final _gsl_integration_fixed_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_integration_fixed_workspace>)>>(
      'gsl_integration_fixed_free');
  late final _gsl_integration_fixed_free =
      _gsl_integration_fixed_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_integration_fixed_workspace>)>();

  int gsl_integration_fixed_n(
    ffi.Pointer<gsl_integration_fixed_workspace> w,
  ) {
    return _gsl_integration_fixed_n(
      w,
    );
  }

  late final _gsl_integration_fixed_nPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_integration_fixed_workspace>)>>(
      'gsl_integration_fixed_n');
  late final _gsl_integration_fixed_n = _gsl_integration_fixed_nPtr
      .asFunction<int Function(ffi.Pointer<gsl_integration_fixed_workspace>)>();

  ffi.Pointer<ffi.Double> gsl_integration_fixed_nodes(
    ffi.Pointer<gsl_integration_fixed_workspace> w,
  ) {
    return _gsl_integration_fixed_nodes(
      w,
    );
  }

  late final _gsl_integration_fixed_nodesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Double> Function(
                  ffi.Pointer<gsl_integration_fixed_workspace>)>>(
      'gsl_integration_fixed_nodes');
  late final _gsl_integration_fixed_nodes =
      _gsl_integration_fixed_nodesPtr.asFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<gsl_integration_fixed_workspace>)>();

  ffi.Pointer<ffi.Double> gsl_integration_fixed_weights(
    ffi.Pointer<gsl_integration_fixed_workspace> w,
  ) {
    return _gsl_integration_fixed_weights(
      w,
    );
  }

  late final _gsl_integration_fixed_weightsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Double> Function(
                  ffi.Pointer<gsl_integration_fixed_workspace>)>>(
      'gsl_integration_fixed_weights');
  late final _gsl_integration_fixed_weights =
      _gsl_integration_fixed_weightsPtr.asFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<gsl_integration_fixed_workspace>)>();

  int gsl_integration_fixed(
    ffi.Pointer<gsl_function> func,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<gsl_integration_fixed_workspace> w,
  ) {
    return _gsl_integration_fixed(
      func,
      result,
      w,
    );
  }

  late final _gsl_integration_fixedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_function>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_integration_fixed_workspace>)>>(
      'gsl_integration_fixed');
  late final _gsl_integration_fixed = _gsl_integration_fixedPtr.asFunction<
      int Function(ffi.Pointer<gsl_function>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<gsl_integration_fixed_workspace>)>();

  void gsl_sort_char(
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_char(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_sort_char');
  late final _gsl_sort_char = _gsl_sort_charPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int8>, int, int)>();

  void gsl_sort2_char(
    ffi.Pointer<ffi.Int8> data1,
    int stride1,
    ffi.Pointer<ffi.Int8> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2_char(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_sort2_char');
  late final _gsl_sort2_char = _gsl_sort2_charPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int, int)>();

  void gsl_sort_char_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Int8> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_char_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_char_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, size_t,
              size_t)>>('gsl_sort_char_index');
  late final _gsl_sort_char_index = _gsl_sort_char_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_sort_char_smallest(
    ffi.Pointer<ffi.Int8> dest,
    int k,
    ffi.Pointer<ffi.Int8> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_char_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_char_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t)>>('gsl_sort_char_smallest');
  late final _gsl_sort_char_smallest = _gsl_sort_char_smallestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_sort_char_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Int8> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_char_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_char_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, size_t, ffi.Pointer<ffi.Int8>,
              size_t, size_t)>>('gsl_sort_char_smallest_index');
  late final _gsl_sort_char_smallest_index =
      _gsl_sort_char_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_sort_char_largest(
    ffi.Pointer<ffi.Int8> dest,
    int k,
    ffi.Pointer<ffi.Int8> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_char_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_char_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<ffi.Int8>, size_t, size_t)>>('gsl_sort_char_largest');
  late final _gsl_sort_char_largest = _gsl_sort_char_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int, int)>();

  int gsl_sort_char_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Int8> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_char_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_char_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<size_t>, size_t, ffi.Pointer<ffi.Int8>,
              size_t, size_t)>>('gsl_sort_char_largest_index');
  late final _gsl_sort_char_largest_index =
      _gsl_sort_char_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Int8>, int, int)>();

  void gsl_sort_uchar(
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_uchar(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_ucharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, size_t, size_t)>>('gsl_sort_uchar');
  late final _gsl_sort_uchar = _gsl_sort_ucharPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  void gsl_sort2_uchar(
    ffi.Pointer<ffi.Uint8> data1,
    int stride1,
    ffi.Pointer<ffi.Uint8> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2_uchar(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2_ucharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, size_t,
              ffi.Pointer<ffi.Uint8>, size_t, size_t)>>('gsl_sort2_uchar');
  late final _gsl_sort2_uchar = _gsl_sort2_ucharPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void gsl_sort_uchar_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint8> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_uchar_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_uchar_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint8>, size_t,
              size_t)>>('gsl_sort_uchar_index');
  late final _gsl_sort_uchar_index = _gsl_sort_uchar_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_sort_uchar_smallest(
    ffi.Pointer<ffi.Uint8> dest,
    int k,
    ffi.Pointer<ffi.Uint8> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_uchar_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_uchar_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_sort_uchar_smallest');
  late final _gsl_sort_uchar_smallest = _gsl_sort_uchar_smallestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_sort_uchar_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Uint8> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_uchar_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_uchar_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_sort_uchar_smallest_index');
  late final _gsl_sort_uchar_smallest_index =
      _gsl_sort_uchar_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_sort_uchar_largest(
    ffi.Pointer<ffi.Uint8> dest,
    int k,
    ffi.Pointer<ffi.Uint8> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_uchar_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_uchar_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint8>,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_sort_uchar_largest');
  late final _gsl_sort_uchar_largest = _gsl_sort_uchar_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  int gsl_sort_uchar_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Uint8> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_uchar_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_uchar_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Uint8>,
              size_t,
              size_t)>>('gsl_sort_uchar_largest_index');
  late final _gsl_sort_uchar_largest_index =
      _gsl_sort_uchar_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void gsl_sort_float(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_float(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_sort_float');
  late final _gsl_sort_float = _gsl_sort_floatPtr
      .asFunction<void Function(ffi.Pointer<ffi.Float>, int, int)>();

  void gsl_sort2_float(
    ffi.Pointer<ffi.Float> data1,
    int stride1,
    ffi.Pointer<ffi.Float> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2_float(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, size_t,
              ffi.Pointer<ffi.Float>, size_t, size_t)>>('gsl_sort2_float');
  late final _gsl_sort2_float = _gsl_sort2_floatPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  void gsl_sort_float_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_float_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_float_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_sort_float_index');
  late final _gsl_sort_float_index = _gsl_sort_float_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_sort_float_smallest(
    ffi.Pointer<ffi.Float> dest,
    int k,
    ffi.Pointer<ffi.Float> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_float_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_float_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_sort_float_smallest');
  late final _gsl_sort_float_smallest = _gsl_sort_float_smallestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_sort_float_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Float> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_float_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_float_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_sort_float_smallest_index');
  late final _gsl_sort_float_smallest_index =
      _gsl_sort_float_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_sort_float_largest(
    ffi.Pointer<ffi.Float> dest,
    int k,
    ffi.Pointer<ffi.Float> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_float_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_float_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Float>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_sort_float_largest');
  late final _gsl_sort_float_largest = _gsl_sort_float_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Float>, int, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_sort_float_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Float> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_float_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_float_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Float>,
              size_t,
              size_t)>>('gsl_sort_float_largest_index');
  late final _gsl_sort_float_largest_index =
      _gsl_sort_float_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Float>, int, int)>();

  void gsl_sort_ulong(
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_ulong(
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint64>, size_t, size_t)>>('gsl_sort_ulong');
  late final _gsl_sort_ulong = _gsl_sort_ulongPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint64>, int, int)>();

  void gsl_sort2_ulong(
    ffi.Pointer<ffi.Uint64> data1,
    int stride1,
    ffi.Pointer<ffi.Uint64> data2,
    int stride2,
    int n,
  ) {
    return _gsl_sort2_ulong(
      data1,
      stride1,
      data2,
      stride2,
      n,
    );
  }

  late final _gsl_sort2_ulongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint64>, size_t,
              ffi.Pointer<ffi.Uint64>, size_t, size_t)>>('gsl_sort2_ulong');
  late final _gsl_sort2_ulong = _gsl_sort2_ulongPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>, int, int)>();

  void gsl_sort_ulong_index(
    ffi.Pointer<size_t> p,
    ffi.Pointer<ffi.Uint64> data,
    int stride,
    int n,
  ) {
    return _gsl_sort_ulong_index(
      p,
      data,
      stride,
      n,
    );
  }

  late final _gsl_sort_ulong_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint64>,
              size_t, size_t)>>('gsl_sort_ulong_index');
  late final _gsl_sort_ulong_index = _gsl_sort_ulong_indexPtr.asFunction<
      void Function(ffi.Pointer<size_t>, ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_sort_ulong_smallest(
    ffi.Pointer<ffi.Uint64> dest,
    int k,
    ffi.Pointer<ffi.Uint64> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_ulong_smallest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_ulong_smallestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_sort_ulong_smallest');
  late final _gsl_sort_ulong_smallest = _gsl_sort_ulong_smallestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_sort_ulong_smallest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Uint64> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_ulong_smallest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_ulong_smallest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_sort_ulong_smallest_index');
  late final _gsl_sort_ulong_smallest_index =
      _gsl_sort_ulong_smallest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_sort_ulong_largest(
    ffi.Pointer<ffi.Uint64> dest,
    int k,
    ffi.Pointer<ffi.Uint64> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_ulong_largest(
      dest,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_ulong_largestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint64>,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_sort_ulong_largest');
  late final _gsl_sort_ulong_largest = _gsl_sort_ulong_largestPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Uint64>, int, ffi.Pointer<ffi.Uint64>, int, int)>();

  int gsl_sort_ulong_largest_index(
    ffi.Pointer<size_t> p,
    int k,
    ffi.Pointer<ffi.Uint64> src,
    int stride,
    int n,
  ) {
    return _gsl_sort_ulong_largest_index(
      p,
      k,
      src,
      stride,
      n,
    );
  }

  late final _gsl_sort_ulong_largest_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<size_t>,
              size_t,
              ffi.Pointer<ffi.Uint64>,
              size_t,
              size_t)>>('gsl_sort_ulong_largest_index');
  late final _gsl_sort_ulong_largest_index =
      _gsl_sort_ulong_largest_indexPtr.asFunction<
          int Function(
              ffi.Pointer<size_t>, int, ffi.Pointer<ffi.Uint64>, int, int)>();

  ffi.Pointer<gsl_movstat_workspace> gsl_movstat_alloc(
    int K,
  ) {
    return _gsl_movstat_alloc(
      K,
    );
  }

  late final _gsl_movstat_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_movstat_workspace> Function(
              size_t)>>('gsl_movstat_alloc');
  late final _gsl_movstat_alloc = _gsl_movstat_allocPtr
      .asFunction<ffi.Pointer<gsl_movstat_workspace> Function(int)>();

  ffi.Pointer<gsl_movstat_workspace> gsl_movstat_alloc2(
    int H,
    int J,
  ) {
    return _gsl_movstat_alloc2(
      H,
      J,
    );
  }

  late final _gsl_movstat_alloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_movstat_workspace> Function(
              size_t, size_t)>>('gsl_movstat_alloc2');
  late final _gsl_movstat_alloc2 = _gsl_movstat_alloc2Ptr
      .asFunction<ffi.Pointer<gsl_movstat_workspace> Function(int, int)>();

  ffi.Pointer<gsl_movstat_workspace> gsl_movstat_alloc_with_size(
    int accum_state_size,
    int H,
    int J,
  ) {
    return _gsl_movstat_alloc_with_size(
      accum_state_size,
      H,
      J,
    );
  }

  late final _gsl_movstat_alloc_with_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_movstat_workspace> Function(
              size_t, size_t, size_t)>>('gsl_movstat_alloc_with_size');
  late final _gsl_movstat_alloc_with_size = _gsl_movstat_alloc_with_sizePtr
      .asFunction<ffi.Pointer<gsl_movstat_workspace> Function(int, int, int)>();

  void gsl_movstat_free(
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_free(
      w,
    );
  }

  late final _gsl_movstat_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_free');
  late final _gsl_movstat_free = _gsl_movstat_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_apply_accum(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_movstat_accum> accum,
    ffi.Pointer<ffi.Void> accum_params,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> z,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_apply_accum(
      endtype,
      x,
      accum,
      accum_params,
      y,
      z,
      w,
    );
  }

  late final _gsl_movstat_apply_accumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_accum>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_apply_accum');
  late final _gsl_movstat_apply_accum = _gsl_movstat_apply_accumPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_accum>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_apply(
    int endtype,
    ffi.Pointer<gsl_movstat_function> F,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_apply(
      endtype,
      F,
      x,
      y,
      w,
    );
  }

  late final _gsl_movstat_applyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_movstat_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_apply');
  late final _gsl_movstat_apply = _gsl_movstat_applyPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<gsl_movstat_function>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_fill(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    int idx,
    int H,
    int J,
    ffi.Pointer<ffi.Double> window,
  ) {
    return _gsl_movstat_fill(
      endtype,
      x,
      idx,
      H,
      J,
      window,
    );
  }

  late final _gsl_movstat_fillPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Int32, ffi.Pointer<gsl_vector>, size_t, size_t,
              size_t, ffi.Pointer<ffi.Double>)>>('gsl_movstat_fill');
  late final _gsl_movstat_fill = _gsl_movstat_fillPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, int, int, int,
          ffi.Pointer<ffi.Double>)>();

  int gsl_movstat_mean(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_mean(
      endtype,
      x,
      y,
      w,
    );
  }

  late final _gsl_movstat_meanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_mean');
  late final _gsl_movstat_mean = _gsl_movstat_meanPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_variance(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_variance(
      endtype,
      x,
      y,
      w,
    );
  }

  late final _gsl_movstat_variancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_variance');
  late final _gsl_movstat_variance = _gsl_movstat_variancePtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_sd(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_sd(
      endtype,
      x,
      y,
      w,
    );
  }

  late final _gsl_movstat_sdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_sd');
  late final _gsl_movstat_sd = _gsl_movstat_sdPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_median(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_median(
      endtype,
      x,
      y,
      w,
    );
  }

  late final _gsl_movstat_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_median');
  late final _gsl_movstat_median = _gsl_movstat_medianPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_min(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_min(
      endtype,
      x,
      y,
      w,
    );
  }

  late final _gsl_movstat_minPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_min');
  late final _gsl_movstat_min = _gsl_movstat_minPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_max(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_max(
      endtype,
      x,
      y,
      w,
    );
  }

  late final _gsl_movstat_maxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_max');
  late final _gsl_movstat_max = _gsl_movstat_maxPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_minmax(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y_min,
    ffi.Pointer<gsl_vector> y_max,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_minmax(
      endtype,
      x,
      y_min,
      y_max,
      w,
    );
  }

  late final _gsl_movstat_minmaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_minmax');
  late final _gsl_movstat_minmax = _gsl_movstat_minmaxPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_mad0(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> xmedian,
    ffi.Pointer<gsl_vector> xmad,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_mad0(
      endtype,
      x,
      xmedian,
      xmad,
      w,
    );
  }

  late final _gsl_movstat_mad0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_mad0');
  late final _gsl_movstat_mad0 = _gsl_movstat_mad0Ptr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_mad(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> xmedian,
    ffi.Pointer<gsl_vector> xmad,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_mad(
      endtype,
      x,
      xmedian,
      xmad,
      w,
    );
  }

  late final _gsl_movstat_madPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_mad');
  late final _gsl_movstat_mad = _gsl_movstat_madPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_qqr(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    double q,
    ffi.Pointer<gsl_vector> xqqr,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_qqr(
      endtype,
      x,
      q,
      xqqr,
      w,
    );
  }

  late final _gsl_movstat_qqrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_qqr');
  late final _gsl_movstat_qqr = _gsl_movstat_qqrPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, double,
          ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_Sn(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> xscale,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_Sn(
      endtype,
      x,
      xscale,
      w,
    );
  }

  late final _gsl_movstat_SnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_Sn');
  late final _gsl_movstat_Sn = _gsl_movstat_SnPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_Qn(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> xscale,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_Qn(
      endtype,
      x,
      xscale,
      w,
    );
  }

  late final _gsl_movstat_QnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_Qn');
  late final _gsl_movstat_Qn = _gsl_movstat_QnPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  int gsl_movstat_sum(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_movstat_workspace> w,
  ) {
    return _gsl_movstat_sum(
      endtype,
      x,
      y,
      w,
    );
  }

  late final _gsl_movstat_sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_movstat_workspace>)>>('gsl_movstat_sum');
  late final _gsl_movstat_sum = _gsl_movstat_sumPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_movstat_workspace>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_mad =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_mad');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_mad =>
      _gsl_movstat_accum_mad.value;

  set gsl_movstat_accum_mad(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_mad.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_max =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_max');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_max =>
      _gsl_movstat_accum_max.value;

  set gsl_movstat_accum_max(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_max.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_mean =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_mean');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_mean =>
      _gsl_movstat_accum_mean.value;

  set gsl_movstat_accum_mean(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_mean.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_median =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_median');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_median =>
      _gsl_movstat_accum_median.value;

  set gsl_movstat_accum_median(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_median.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_min =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_min');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_min =>
      _gsl_movstat_accum_min.value;

  set gsl_movstat_accum_min(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_min.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_minmax =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_minmax');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_minmax =>
      _gsl_movstat_accum_minmax.value;

  set gsl_movstat_accum_minmax(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_minmax.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>> _gsl_movstat_accum_sd =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_sd');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_sd =>
      _gsl_movstat_accum_sd.value;

  set gsl_movstat_accum_sd(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_sd.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>> _gsl_movstat_accum_Sn =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_Sn');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_Sn =>
      _gsl_movstat_accum_Sn.value;

  set gsl_movstat_accum_Sn(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_Sn.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_sum =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_sum');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_sum =>
      _gsl_movstat_accum_sum.value;

  set gsl_movstat_accum_sum(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_sum.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>> _gsl_movstat_accum_Qn =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_Qn');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_Qn =>
      _gsl_movstat_accum_Qn.value;

  set gsl_movstat_accum_Qn(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_Qn.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_qqr =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_qqr');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_qqr =>
      _gsl_movstat_accum_qqr.value;

  set gsl_movstat_accum_qqr(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_qqr.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_userfunc =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_userfunc');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_userfunc =>
      _gsl_movstat_accum_userfunc.value;

  set gsl_movstat_accum_userfunc(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_userfunc.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_movstat_accum>>
      _gsl_movstat_accum_variance =
      _lookup<ffi.Pointer<gsl_movstat_accum>>('gsl_movstat_accum_variance');

  ffi.Pointer<gsl_movstat_accum> get gsl_movstat_accum_variance =>
      _gsl_movstat_accum_variance.value;

  set gsl_movstat_accum_variance(ffi.Pointer<gsl_movstat_accum> value) =>
      _gsl_movstat_accum_variance.value = value;

  ffi.Pointer<gsl_combination> gsl_combination_alloc(
    int n,
    int k,
  ) {
    return _gsl_combination_alloc(
      n,
      k,
    );
  }

  late final _gsl_combination_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_combination> Function(
              size_t, size_t)>>('gsl_combination_alloc');
  late final _gsl_combination_alloc = _gsl_combination_allocPtr
      .asFunction<ffi.Pointer<gsl_combination> Function(int, int)>();

  ffi.Pointer<gsl_combination> gsl_combination_calloc(
    int n,
    int k,
  ) {
    return _gsl_combination_calloc(
      n,
      k,
    );
  }

  late final _gsl_combination_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_combination> Function(
              size_t, size_t)>>('gsl_combination_calloc');
  late final _gsl_combination_calloc = _gsl_combination_callocPtr
      .asFunction<ffi.Pointer<gsl_combination> Function(int, int)>();

  void gsl_combination_init_first(
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_init_first(
      c,
    );
  }

  late final _gsl_combination_init_firstPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_combination>)>>(
      'gsl_combination_init_first');
  late final _gsl_combination_init_first = _gsl_combination_init_firstPtr
      .asFunction<void Function(ffi.Pointer<gsl_combination>)>();

  void gsl_combination_init_last(
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_init_last(
      c,
    );
  }

  late final _gsl_combination_init_lastPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_combination>)>>(
      'gsl_combination_init_last');
  late final _gsl_combination_init_last = _gsl_combination_init_lastPtr
      .asFunction<void Function(ffi.Pointer<gsl_combination>)>();

  void gsl_combination_free(
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_free(
      c,
    );
  }

  late final _gsl_combination_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_combination>)>>(
      'gsl_combination_free');
  late final _gsl_combination_free = _gsl_combination_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_combination>)>();

  int gsl_combination_memcpy(
    ffi.Pointer<gsl_combination> dest,
    ffi.Pointer<gsl_combination> src,
  ) {
    return _gsl_combination_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_combination_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_combination>,
              ffi.Pointer<gsl_combination>)>>('gsl_combination_memcpy');
  late final _gsl_combination_memcpy = _gsl_combination_memcpyPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_combination>, ffi.Pointer<gsl_combination>)>();

  int gsl_combination_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_fread(
      stream,
      c,
    );
  }

  late final _gsl_combination_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_combination>)>>('gsl_combination_fread');
  late final _gsl_combination_fread = _gsl_combination_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_combination>)>();

  int gsl_combination_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_fwrite(
      stream,
      c,
    );
  }

  late final _gsl_combination_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_combination>)>>('gsl_combination_fwrite');
  late final _gsl_combination_fwrite = _gsl_combination_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_combination>)>();

  int gsl_combination_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_fscanf(
      stream,
      c,
    );
  }

  late final _gsl_combination_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_combination>)>>('gsl_combination_fscanf');
  late final _gsl_combination_fscanf = _gsl_combination_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_combination>)>();

  int gsl_combination_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_combination> c,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_combination_fprintf(
      stream,
      c,
      format,
    );
  }

  late final _gsl_combination_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_combination>,
              ffi.Pointer<ffi.Int8>)>>('gsl_combination_fprintf');
  late final _gsl_combination_fprintf = _gsl_combination_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_combination>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_combination_n(
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_n(
      c,
    );
  }

  late final _gsl_combination_nPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_combination>)>>(
      'gsl_combination_n');
  late final _gsl_combination_n = _gsl_combination_nPtr
      .asFunction<int Function(ffi.Pointer<gsl_combination>)>();

  int gsl_combination_k(
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_k(
      c,
    );
  }

  late final _gsl_combination_kPtr = _lookup<
          ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_combination>)>>(
      'gsl_combination_k');
  late final _gsl_combination_k = _gsl_combination_kPtr
      .asFunction<int Function(ffi.Pointer<gsl_combination>)>();

  ffi.Pointer<size_t> gsl_combination_data(
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_data(
      c,
    );
  }

  late final _gsl_combination_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<size_t> Function(
              ffi.Pointer<gsl_combination>)>>('gsl_combination_data');
  late final _gsl_combination_data = _gsl_combination_dataPtr
      .asFunction<ffi.Pointer<size_t> Function(ffi.Pointer<gsl_combination>)>();

  int gsl_combination_valid(
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_valid(
      c,
    );
  }

  late final _gsl_combination_validPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_combination>)>>(
      'gsl_combination_valid');
  late final _gsl_combination_valid = _gsl_combination_validPtr
      .asFunction<int Function(ffi.Pointer<gsl_combination>)>();

  int gsl_combination_next(
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_next(
      c,
    );
  }

  late final _gsl_combination_nextPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_combination>)>>(
      'gsl_combination_next');
  late final _gsl_combination_next = _gsl_combination_nextPtr
      .asFunction<int Function(ffi.Pointer<gsl_combination>)>();

  int gsl_combination_prev(
    ffi.Pointer<gsl_combination> c,
  ) {
    return _gsl_combination_prev(
      c,
    );
  }

  late final _gsl_combination_prevPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_combination>)>>(
      'gsl_combination_prev');
  late final _gsl_combination_prev = _gsl_combination_prevPtr
      .asFunction<int Function(ffi.Pointer<gsl_combination>)>();

  int gsl_combination_get(
    ffi.Pointer<gsl_combination> c,
    int i,
  ) {
    return _gsl_combination_get(
      c,
      i,
    );
  }

  late final _gsl_combination_getPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_combination>, size_t)>>('gsl_combination_get');
  late final _gsl_combination_get = _gsl_combination_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_combination>, int)>();

  int gsl_monte_plain_integrate(
    ffi.Pointer<gsl_monte_function> f,
    ffi.Pointer<ffi.Double> xl,
    ffi.Pointer<ffi.Double> xu,
    int dim,
    int calls,
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<gsl_monte_plain_state> state,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_monte_plain_integrate(
      f,
      xl,
      xu,
      dim,
      calls,
      r,
      state,
      result,
      abserr,
    );
  }

  late final _gsl_monte_plain_integratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_monte_function>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<gsl_monte_plain_state>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_monte_plain_integrate');
  late final _gsl_monte_plain_integrate =
      _gsl_monte_plain_integratePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_monte_function>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              int,
              int,
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<gsl_monte_plain_state>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_monte_plain_state> gsl_monte_plain_alloc(
    int dim,
  ) {
    return _gsl_monte_plain_alloc(
      dim,
    );
  }

  late final _gsl_monte_plain_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_monte_plain_state> Function(
              size_t)>>('gsl_monte_plain_alloc');
  late final _gsl_monte_plain_alloc = _gsl_monte_plain_allocPtr
      .asFunction<ffi.Pointer<gsl_monte_plain_state> Function(int)>();

  int gsl_monte_plain_init(
    ffi.Pointer<gsl_monte_plain_state> state,
  ) {
    return _gsl_monte_plain_init(
      state,
    );
  }

  late final _gsl_monte_plain_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_monte_plain_state>)>>('gsl_monte_plain_init');
  late final _gsl_monte_plain_init = _gsl_monte_plain_initPtr
      .asFunction<int Function(ffi.Pointer<gsl_monte_plain_state>)>();

  void gsl_monte_plain_free(
    ffi.Pointer<gsl_monte_plain_state> state,
  ) {
    return _gsl_monte_plain_free(
      state,
    );
  }

  late final _gsl_monte_plain_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_monte_plain_state>)>>('gsl_monte_plain_free');
  late final _gsl_monte_plain_free = _gsl_monte_plain_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_monte_plain_state>)>();

  int gsl_monte_miser_integrate(
    ffi.Pointer<gsl_monte_function> f,
    ffi.Pointer<ffi.Double> xl,
    ffi.Pointer<ffi.Double> xh,
    int dim,
    int calls,
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<gsl_monte_miser_state> state,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_monte_miser_integrate(
      f,
      xl,
      xh,
      dim,
      calls,
      r,
      state,
      result,
      abserr,
    );
  }

  late final _gsl_monte_miser_integratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_monte_function>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<gsl_monte_miser_state>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_monte_miser_integrate');
  late final _gsl_monte_miser_integrate =
      _gsl_monte_miser_integratePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_monte_function>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              int,
              int,
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<gsl_monte_miser_state>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_monte_miser_state> gsl_monte_miser_alloc(
    int dim,
  ) {
    return _gsl_monte_miser_alloc(
      dim,
    );
  }

  late final _gsl_monte_miser_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_monte_miser_state> Function(
              size_t)>>('gsl_monte_miser_alloc');
  late final _gsl_monte_miser_alloc = _gsl_monte_miser_allocPtr
      .asFunction<ffi.Pointer<gsl_monte_miser_state> Function(int)>();

  int gsl_monte_miser_init(
    ffi.Pointer<gsl_monte_miser_state> state,
  ) {
    return _gsl_monte_miser_init(
      state,
    );
  }

  late final _gsl_monte_miser_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_monte_miser_state>)>>('gsl_monte_miser_init');
  late final _gsl_monte_miser_init = _gsl_monte_miser_initPtr
      .asFunction<int Function(ffi.Pointer<gsl_monte_miser_state>)>();

  void gsl_monte_miser_free(
    ffi.Pointer<gsl_monte_miser_state> state,
  ) {
    return _gsl_monte_miser_free(
      state,
    );
  }

  late final _gsl_monte_miser_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_monte_miser_state>)>>('gsl_monte_miser_free');
  late final _gsl_monte_miser_free = _gsl_monte_miser_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_monte_miser_state>)>();

  void gsl_monte_miser_params_get(
    ffi.Pointer<gsl_monte_miser_state> state,
    ffi.Pointer<gsl_monte_miser_params> params,
  ) {
    return _gsl_monte_miser_params_get(
      state,
      params,
    );
  }

  late final _gsl_monte_miser_params_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_monte_miser_state>,
                  ffi.Pointer<gsl_monte_miser_params>)>>(
      'gsl_monte_miser_params_get');
  late final _gsl_monte_miser_params_get =
      _gsl_monte_miser_params_getPtr.asFunction<
          void Function(ffi.Pointer<gsl_monte_miser_state>,
              ffi.Pointer<gsl_monte_miser_params>)>();

  void gsl_monte_miser_params_set(
    ffi.Pointer<gsl_monte_miser_state> state,
    ffi.Pointer<gsl_monte_miser_params> params,
  ) {
    return _gsl_monte_miser_params_set(
      state,
      params,
    );
  }

  late final _gsl_monte_miser_params_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_monte_miser_state>,
                  ffi.Pointer<gsl_monte_miser_params>)>>(
      'gsl_monte_miser_params_set');
  late final _gsl_monte_miser_params_set =
      _gsl_monte_miser_params_setPtr.asFunction<
          void Function(ffi.Pointer<gsl_monte_miser_state>,
              ffi.Pointer<gsl_monte_miser_params>)>();

  double gsl_poly_eval(
    ffi.Pointer<ffi.Double> c,
    int len,
    double x,
  ) {
    return _gsl_poly_eval(
      c,
      len,
      x,
    );
  }

  late final _gsl_poly_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Int32,
              ffi.Double)>>('gsl_poly_eval');
  late final _gsl_poly_eval = _gsl_poly_evalPtr
      .asFunction<double Function(ffi.Pointer<ffi.Double>, int, double)>();

  gsl_complex gsl_poly_complex_eval(
    ffi.Pointer<ffi.Double> c,
    int len,
    gsl_complex z,
  ) {
    return _gsl_poly_complex_eval(
      c,
      len,
      z,
    );
  }

  late final _gsl_poly_complex_evalPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex Function(ffi.Pointer<ffi.Double>, ffi.Int32,
              gsl_complex)>>('gsl_poly_complex_eval');
  late final _gsl_poly_complex_eval = _gsl_poly_complex_evalPtr.asFunction<
      gsl_complex Function(ffi.Pointer<ffi.Double>, int, gsl_complex)>();

  gsl_complex gsl_complex_poly_complex_eval(
    ffi.Pointer<gsl_complex> c,
    int len,
    gsl_complex z,
  ) {
    return _gsl_complex_poly_complex_eval(
      c,
      len,
      z,
    );
  }

  late final _gsl_complex_poly_complex_evalPtr = _lookup<
      ffi.NativeFunction<
          gsl_complex Function(ffi.Pointer<gsl_complex>, ffi.Int32,
              gsl_complex)>>('gsl_complex_poly_complex_eval');
  late final _gsl_complex_poly_complex_eval =
      _gsl_complex_poly_complex_evalPtr.asFunction<
          gsl_complex Function(ffi.Pointer<gsl_complex>, int, gsl_complex)>();

  int gsl_poly_eval_derivs(
    ffi.Pointer<ffi.Double> c,
    int lenc,
    double x,
    ffi.Pointer<ffi.Double> res,
    int lenres,
  ) {
    return _gsl_poly_eval_derivs(
      c,
      lenc,
      x,
      res,
      lenres,
    );
  }

  late final _gsl_poly_eval_derivsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, size_t, ffi.Double,
              ffi.Pointer<ffi.Double>, size_t)>>('gsl_poly_eval_derivs');
  late final _gsl_poly_eval_derivs = _gsl_poly_eval_derivsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, int, double,
          ffi.Pointer<ffi.Double>, int)>();

  int gsl_poly_dd_init(
    ffi.Pointer<ffi.Double> dd,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
    int size,
  ) {
    return _gsl_poly_dd_init(
      dd,
      x,
      y,
      size,
    );
  }

  late final _gsl_poly_dd_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, size_t)>>('gsl_poly_dd_init');
  late final _gsl_poly_dd_init = _gsl_poly_dd_initPtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int)>();

  double gsl_poly_dd_eval(
    ffi.Pointer<ffi.Double> dd,
    ffi.Pointer<ffi.Double> xa,
    int size,
    double x,
  ) {
    return _gsl_poly_dd_eval(
      dd,
      xa,
      size,
      x,
    );
  }

  late final _gsl_poly_dd_evalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>,
              size_t, ffi.Double)>>('gsl_poly_dd_eval');
  late final _gsl_poly_dd_eval = _gsl_poly_dd_evalPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, int, double)>();

  int gsl_poly_dd_taylor(
    ffi.Pointer<ffi.Double> c,
    double xp,
    ffi.Pointer<ffi.Double> dd,
    ffi.Pointer<ffi.Double> x,
    int size,
    ffi.Pointer<ffi.Double> w,
  ) {
    return _gsl_poly_dd_taylor(
      c,
      xp,
      dd,
      x,
      size,
      w,
    );
  }

  late final _gsl_poly_dd_taylorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<ffi.Double>)>>('gsl_poly_dd_taylor');
  late final _gsl_poly_dd_taylor = _gsl_poly_dd_taylorPtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, double, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ffi.Double>)>();

  int gsl_poly_dd_hermite_init(
    ffi.Pointer<ffi.Double> dd,
    ffi.Pointer<ffi.Double> z,
    ffi.Pointer<ffi.Double> xa,
    ffi.Pointer<ffi.Double> ya,
    ffi.Pointer<ffi.Double> dya,
    int size,
  ) {
    return _gsl_poly_dd_hermite_init(
      dd,
      z,
      xa,
      ya,
      dya,
      size,
    );
  }

  late final _gsl_poly_dd_hermite_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t)>>('gsl_poly_dd_hermite_init');
  late final _gsl_poly_dd_hermite_init =
      _gsl_poly_dd_hermite_initPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              int)>();

  int gsl_poly_solve_quadratic(
    double a,
    double b,
    double c,
    ffi.Pointer<ffi.Double> x0,
    ffi.Pointer<ffi.Double> x1,
  ) {
    return _gsl_poly_solve_quadratic(
      a,
      b,
      c,
      x0,
      x1,
    );
  }

  late final _gsl_poly_solve_quadraticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_poly_solve_quadratic');
  late final _gsl_poly_solve_quadratic =
      _gsl_poly_solve_quadraticPtr.asFunction<
          int Function(double, double, double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int gsl_poly_complex_solve_quadratic(
    double a,
    double b,
    double c,
    ffi.Pointer<gsl_complex> z0,
    ffi.Pointer<gsl_complex> z1,
  ) {
    return _gsl_poly_complex_solve_quadratic(
      a,
      b,
      c,
      z0,
      z1,
    );
  }

  late final _gsl_poly_complex_solve_quadraticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_complex>,
              ffi.Pointer<gsl_complex>)>>('gsl_poly_complex_solve_quadratic');
  late final _gsl_poly_complex_solve_quadratic =
      _gsl_poly_complex_solve_quadraticPtr.asFunction<
          int Function(double, double, double, ffi.Pointer<gsl_complex>,
              ffi.Pointer<gsl_complex>)>();

  int gsl_poly_solve_cubic(
    double a,
    double b,
    double c,
    ffi.Pointer<ffi.Double> x0,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> x2,
  ) {
    return _gsl_poly_solve_cubic(
      a,
      b,
      c,
      x0,
      x1,
      x2,
    );
  }

  late final _gsl_poly_solve_cubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_poly_solve_cubic');
  late final _gsl_poly_solve_cubic = _gsl_poly_solve_cubicPtr.asFunction<
      int Function(double, double, double, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_poly_complex_solve_cubic(
    double a,
    double b,
    double c,
    ffi.Pointer<gsl_complex> z0,
    ffi.Pointer<gsl_complex> z1,
    ffi.Pointer<gsl_complex> z2,
  ) {
    return _gsl_poly_complex_solve_cubic(
      a,
      b,
      c,
      z0,
      z1,
      z2,
    );
  }

  late final _gsl_poly_complex_solve_cubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_complex>,
              ffi.Pointer<gsl_complex>,
              ffi.Pointer<gsl_complex>)>>('gsl_poly_complex_solve_cubic');
  late final _gsl_poly_complex_solve_cubic =
      _gsl_poly_complex_solve_cubicPtr.asFunction<
          int Function(double, double, double, ffi.Pointer<gsl_complex>,
              ffi.Pointer<gsl_complex>, ffi.Pointer<gsl_complex>)>();

  ffi.Pointer<gsl_poly_complex_workspace> gsl_poly_complex_workspace_alloc(
    int n,
  ) {
    return _gsl_poly_complex_workspace_alloc(
      n,
    );
  }

  late final _gsl_poly_complex_workspace_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_poly_complex_workspace> Function(
              size_t)>>('gsl_poly_complex_workspace_alloc');
  late final _gsl_poly_complex_workspace_alloc =
      _gsl_poly_complex_workspace_allocPtr
          .asFunction<ffi.Pointer<gsl_poly_complex_workspace> Function(int)>();

  void gsl_poly_complex_workspace_free(
    ffi.Pointer<gsl_poly_complex_workspace> w,
  ) {
    return _gsl_poly_complex_workspace_free(
      w,
    );
  }

  late final _gsl_poly_complex_workspace_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_poly_complex_workspace>)>>(
      'gsl_poly_complex_workspace_free');
  late final _gsl_poly_complex_workspace_free =
      _gsl_poly_complex_workspace_freePtr
          .asFunction<void Function(ffi.Pointer<gsl_poly_complex_workspace>)>();

  int gsl_poly_complex_solve(
    ffi.Pointer<ffi.Double> a,
    int n,
    ffi.Pointer<gsl_poly_complex_workspace> w,
    gsl_complex_packed_ptr z,
  ) {
    return _gsl_poly_complex_solve(
      a,
      n,
      w,
      z,
    );
  }

  late final _gsl_poly_complex_solvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<gsl_poly_complex_workspace>,
              gsl_complex_packed_ptr)>>('gsl_poly_complex_solve');
  late final _gsl_poly_complex_solve = _gsl_poly_complex_solvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Double>, int,
          ffi.Pointer<gsl_poly_complex_workspace>, gsl_complex_packed_ptr)>();

  ffi.Pointer<gsl_multilarge_nlinear_workspace> gsl_multilarge_nlinear_alloc(
    ffi.Pointer<gsl_multilarge_nlinear_type> T,
    ffi.Pointer<gsl_multilarge_nlinear_parameters> params,
    int n,
    int p,
  ) {
    return _gsl_multilarge_nlinear_alloc(
      T,
      params,
      n,
      p,
    );
  }

  late final _gsl_multilarge_nlinear_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multilarge_nlinear_workspace> Function(
              ffi.Pointer<gsl_multilarge_nlinear_type>,
              ffi.Pointer<gsl_multilarge_nlinear_parameters>,
              size_t,
              size_t)>>('gsl_multilarge_nlinear_alloc');
  late final _gsl_multilarge_nlinear_alloc =
      _gsl_multilarge_nlinear_allocPtr.asFunction<
          ffi.Pointer<gsl_multilarge_nlinear_workspace> Function(
              ffi.Pointer<gsl_multilarge_nlinear_type>,
              ffi.Pointer<gsl_multilarge_nlinear_parameters>,
              int,
              int)>();

  void gsl_multilarge_nlinear_free(
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_free(
      w,
    );
  }

  late final _gsl_multilarge_nlinear_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_free');
  late final _gsl_multilarge_nlinear_free =
      _gsl_multilarge_nlinear_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  gsl_multilarge_nlinear_parameters
      gsl_multilarge_nlinear_default_parameters() {
    return _gsl_multilarge_nlinear_default_parameters();
  }

  late final _gsl_multilarge_nlinear_default_parametersPtr =
      _lookup<ffi.NativeFunction<gsl_multilarge_nlinear_parameters Function()>>(
          'gsl_multilarge_nlinear_default_parameters');
  late final _gsl_multilarge_nlinear_default_parameters =
      _gsl_multilarge_nlinear_default_parametersPtr
          .asFunction<gsl_multilarge_nlinear_parameters Function()>();

  int gsl_multilarge_nlinear_init(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_multilarge_nlinear_fdf> fdf,
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_init(
      x,
      fdf,
      w,
    );
  }

  late final _gsl_multilarge_nlinear_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_nlinear_fdf>,
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_init');
  late final _gsl_multilarge_nlinear_init =
      _gsl_multilarge_nlinear_initPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  int gsl_multilarge_nlinear_winit(
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> wts,
    ffi.Pointer<gsl_multilarge_nlinear_fdf> fdf,
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_winit(
      x,
      wts,
      fdf,
      w,
    );
  }

  late final _gsl_multilarge_nlinear_winitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_nlinear_fdf>,
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_winit');
  late final _gsl_multilarge_nlinear_winit =
      _gsl_multilarge_nlinear_winitPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  int gsl_multilarge_nlinear_iterate(
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_iterate(
      w,
    );
  }

  late final _gsl_multilarge_nlinear_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_iterate');
  late final _gsl_multilarge_nlinear_iterate =
      _gsl_multilarge_nlinear_iteratePtr.asFunction<
          int Function(ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  double gsl_multilarge_nlinear_avratio(
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_avratio(
      w,
    );
  }

  late final _gsl_multilarge_nlinear_avratioPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_avratio');
  late final _gsl_multilarge_nlinear_avratio =
      _gsl_multilarge_nlinear_avratioPtr.asFunction<
          double Function(ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  int gsl_multilarge_nlinear_rcond(
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_rcond(
      rcond,
      w,
    );
  }

  late final _gsl_multilarge_nlinear_rcondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_rcond');
  late final _gsl_multilarge_nlinear_rcond =
      _gsl_multilarge_nlinear_rcondPtr.asFunction<
          int Function(ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  int gsl_multilarge_nlinear_covar(
    ffi.Pointer<gsl_matrix> covar,
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_covar(
      covar,
      w,
    );
  }

  late final _gsl_multilarge_nlinear_covarPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_covar');
  late final _gsl_multilarge_nlinear_covar =
      _gsl_multilarge_nlinear_covarPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  int gsl_multilarge_nlinear_driver(
    int maxiter,
    double xtol,
    double gtol,
    double ftol,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(size_t, ffi.Pointer<ffi.Void>,
                    ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>
        callback,
    ffi.Pointer<ffi.Void> callback_params,
    ffi.Pointer<ffi.Int32> info,
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_driver(
      maxiter,
      xtol,
      gtol,
      ftol,
      callback,
      callback_params,
      info,
      w,
    );
  }

  late final _gsl_multilarge_nlinear_driverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  size_t,
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(size_t, ffi.Pointer<ffi.Void>,
                              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_driver');
  late final _gsl_multilarge_nlinear_driver =
      _gsl_multilarge_nlinear_driverPtr.asFunction<
          int Function(
              int,
              double,
              double,
              double,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(size_t, ffi.Pointer<ffi.Void>,
                          ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  ffi.Pointer<ffi.Int8> gsl_multilarge_nlinear_name(
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_name(
      w,
    );
  }

  late final _gsl_multilarge_nlinear_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_name');
  late final _gsl_multilarge_nlinear_name =
      _gsl_multilarge_nlinear_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  ffi.Pointer<gsl_vector> gsl_multilarge_nlinear_position(
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_position(
      w,
    );
  }

  late final _gsl_multilarge_nlinear_positionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_position');
  late final _gsl_multilarge_nlinear_position =
      _gsl_multilarge_nlinear_positionPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  ffi.Pointer<gsl_vector> gsl_multilarge_nlinear_residual(
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_residual(
      w,
    );
  }

  late final _gsl_multilarge_nlinear_residualPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_residual');
  late final _gsl_multilarge_nlinear_residual =
      _gsl_multilarge_nlinear_residualPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  ffi.Pointer<gsl_vector> gsl_multilarge_nlinear_step(
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_step(
      w,
    );
  }

  late final _gsl_multilarge_nlinear_stepPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_step');
  late final _gsl_multilarge_nlinear_step =
      _gsl_multilarge_nlinear_stepPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  int gsl_multilarge_nlinear_niter(
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_niter(
      w,
    );
  }

  late final _gsl_multilarge_nlinear_niterPtr = _lookup<
          ffi.NativeFunction<
              size_t Function(ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_niter');
  late final _gsl_multilarge_nlinear_niter =
      _gsl_multilarge_nlinear_niterPtr.asFunction<
          int Function(ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  ffi.Pointer<ffi.Int8> gsl_multilarge_nlinear_trs_name(
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_trs_name(
      w,
    );
  }

  late final _gsl_multilarge_nlinear_trs_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_trs_name');
  late final _gsl_multilarge_nlinear_trs_name =
      _gsl_multilarge_nlinear_trs_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  int gsl_multilarge_nlinear_eval_f(
    ffi.Pointer<gsl_multilarge_nlinear_fdf> fdf,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> swts,
    ffi.Pointer<gsl_vector> y,
  ) {
    return _gsl_multilarge_nlinear_eval_f(
      fdf,
      x,
      swts,
      y,
    );
  }

  late final _gsl_multilarge_nlinear_eval_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multilarge_nlinear_eval_f');
  late final _gsl_multilarge_nlinear_eval_f =
      _gsl_multilarge_nlinear_eval_fPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multilarge_nlinear_eval_df(
    int TransJ,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_vector> u,
    ffi.Pointer<gsl_vector> swts,
    double h,
    int fdtype,
    ffi.Pointer<gsl_multilarge_nlinear_fdf> fdf,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_matrix> JTJ,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_multilarge_nlinear_eval_df(
      TransJ,
      x,
      f,
      u,
      swts,
      h,
      fdtype,
      fdf,
      v,
      JTJ,
      work,
    );
  }

  late final _gsl_multilarge_nlinear_eval_dfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_multilarge_nlinear_eval_df');
  late final _gsl_multilarge_nlinear_eval_df =
      _gsl_multilarge_nlinear_eval_dfPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              double,
              int,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multilarge_nlinear_eval_fvv(
    double h,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_vector> swts,
    ffi.Pointer<gsl_multilarge_nlinear_fdf> fdf,
    ffi.Pointer<gsl_vector> yvv,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_multilarge_nlinear_eval_fvv(
      h,
      x,
      v,
      f,
      swts,
      fdf,
      yvv,
      work,
    );
  }

  late final _gsl_multilarge_nlinear_eval_fvvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multilarge_nlinear_eval_fvv');
  late final _gsl_multilarge_nlinear_eval_fvv =
      _gsl_multilarge_nlinear_eval_fvvPtr.asFunction<
          int Function(
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multilarge_nlinear_test(
    double xtol,
    double gtol,
    double ftol,
    ffi.Pointer<ffi.Int32> info,
    ffi.Pointer<gsl_multilarge_nlinear_workspace> w,
  ) {
    return _gsl_multilarge_nlinear_test(
      xtol,
      gtol,
      ftol,
      info,
      w,
    );
  }

  late final _gsl_multilarge_nlinear_testPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double,
                  ffi.Double,
                  ffi.Double,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<gsl_multilarge_nlinear_workspace>)>>(
      'gsl_multilarge_nlinear_test');
  late final _gsl_multilarge_nlinear_test =
      _gsl_multilarge_nlinear_testPtr.asFunction<
          int Function(double, double, double, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<gsl_multilarge_nlinear_workspace>)>();

  int gsl_multilarge_nlinear_df(
    double h,
    int fdtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> wts,
    ffi.Pointer<gsl_multilarge_nlinear_fdf> fdf,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_matrix> J,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_multilarge_nlinear_df(
      h,
      fdtype,
      x,
      wts,
      fdf,
      f,
      J,
      work,
    );
  }

  late final _gsl_multilarge_nlinear_dfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_multilarge_nlinear_df');
  late final _gsl_multilarge_nlinear_df =
      _gsl_multilarge_nlinear_dfPtr.asFunction<
          int Function(
              double,
              int,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>();

  int gsl_multilarge_nlinear_fdfvv(
    double h,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> v,
    ffi.Pointer<gsl_vector> f,
    ffi.Pointer<gsl_matrix> J,
    ffi.Pointer<gsl_vector> swts,
    ffi.Pointer<gsl_multilarge_nlinear_fdf> fdf,
    ffi.Pointer<gsl_vector> fvv,
    ffi.Pointer<gsl_vector> work,
  ) {
    return _gsl_multilarge_nlinear_fdfvv(
      h,
      x,
      v,
      f,
      J,
      swts,
      fdf,
      fvv,
      work,
    );
  }

  late final _gsl_multilarge_nlinear_fdfvvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multilarge_nlinear_fdfvv');
  late final _gsl_multilarge_nlinear_fdfvv =
      _gsl_multilarge_nlinear_fdfvvPtr.asFunction<
          int Function(
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_type>>
      _gsl_multilarge_nlinear_trust =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_type>>(
          'gsl_multilarge_nlinear_trust');

  ffi.Pointer<gsl_multilarge_nlinear_type> get gsl_multilarge_nlinear_trust =>
      _gsl_multilarge_nlinear_trust.value;

  set gsl_multilarge_nlinear_trust(
          ffi.Pointer<gsl_multilarge_nlinear_type> value) =>
      _gsl_multilarge_nlinear_trust.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_trs>>
      _gsl_multilarge_nlinear_trs_lm =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_trs>>(
          'gsl_multilarge_nlinear_trs_lm');

  ffi.Pointer<gsl_multilarge_nlinear_trs> get gsl_multilarge_nlinear_trs_lm =>
      _gsl_multilarge_nlinear_trs_lm.value;

  set gsl_multilarge_nlinear_trs_lm(
          ffi.Pointer<gsl_multilarge_nlinear_trs> value) =>
      _gsl_multilarge_nlinear_trs_lm.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_trs>>
      _gsl_multilarge_nlinear_trs_lmaccel =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_trs>>(
          'gsl_multilarge_nlinear_trs_lmaccel');

  ffi.Pointer<gsl_multilarge_nlinear_trs>
      get gsl_multilarge_nlinear_trs_lmaccel =>
          _gsl_multilarge_nlinear_trs_lmaccel.value;

  set gsl_multilarge_nlinear_trs_lmaccel(
          ffi.Pointer<gsl_multilarge_nlinear_trs> value) =>
      _gsl_multilarge_nlinear_trs_lmaccel.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_trs>>
      _gsl_multilarge_nlinear_trs_dogleg =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_trs>>(
          'gsl_multilarge_nlinear_trs_dogleg');

  ffi.Pointer<gsl_multilarge_nlinear_trs>
      get gsl_multilarge_nlinear_trs_dogleg =>
          _gsl_multilarge_nlinear_trs_dogleg.value;

  set gsl_multilarge_nlinear_trs_dogleg(
          ffi.Pointer<gsl_multilarge_nlinear_trs> value) =>
      _gsl_multilarge_nlinear_trs_dogleg.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_trs>>
      _gsl_multilarge_nlinear_trs_ddogleg =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_trs>>(
          'gsl_multilarge_nlinear_trs_ddogleg');

  ffi.Pointer<gsl_multilarge_nlinear_trs>
      get gsl_multilarge_nlinear_trs_ddogleg =>
          _gsl_multilarge_nlinear_trs_ddogleg.value;

  set gsl_multilarge_nlinear_trs_ddogleg(
          ffi.Pointer<gsl_multilarge_nlinear_trs> value) =>
      _gsl_multilarge_nlinear_trs_ddogleg.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_trs>>
      _gsl_multilarge_nlinear_trs_subspace2D =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_trs>>(
          'gsl_multilarge_nlinear_trs_subspace2D');

  ffi.Pointer<gsl_multilarge_nlinear_trs>
      get gsl_multilarge_nlinear_trs_subspace2D =>
          _gsl_multilarge_nlinear_trs_subspace2D.value;

  set gsl_multilarge_nlinear_trs_subspace2D(
          ffi.Pointer<gsl_multilarge_nlinear_trs> value) =>
      _gsl_multilarge_nlinear_trs_subspace2D.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_trs>>
      _gsl_multilarge_nlinear_trs_cgst =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_trs>>(
          'gsl_multilarge_nlinear_trs_cgst');

  ffi.Pointer<gsl_multilarge_nlinear_trs> get gsl_multilarge_nlinear_trs_cgst =>
      _gsl_multilarge_nlinear_trs_cgst.value;

  set gsl_multilarge_nlinear_trs_cgst(
          ffi.Pointer<gsl_multilarge_nlinear_trs> value) =>
      _gsl_multilarge_nlinear_trs_cgst.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_scale>>
      _gsl_multilarge_nlinear_scale_levenberg =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_scale>>(
          'gsl_multilarge_nlinear_scale_levenberg');

  ffi.Pointer<gsl_multilarge_nlinear_scale>
      get gsl_multilarge_nlinear_scale_levenberg =>
          _gsl_multilarge_nlinear_scale_levenberg.value;

  set gsl_multilarge_nlinear_scale_levenberg(
          ffi.Pointer<gsl_multilarge_nlinear_scale> value) =>
      _gsl_multilarge_nlinear_scale_levenberg.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_scale>>
      _gsl_multilarge_nlinear_scale_marquardt =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_scale>>(
          'gsl_multilarge_nlinear_scale_marquardt');

  ffi.Pointer<gsl_multilarge_nlinear_scale>
      get gsl_multilarge_nlinear_scale_marquardt =>
          _gsl_multilarge_nlinear_scale_marquardt.value;

  set gsl_multilarge_nlinear_scale_marquardt(
          ffi.Pointer<gsl_multilarge_nlinear_scale> value) =>
      _gsl_multilarge_nlinear_scale_marquardt.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_scale>>
      _gsl_multilarge_nlinear_scale_more =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_scale>>(
          'gsl_multilarge_nlinear_scale_more');

  ffi.Pointer<gsl_multilarge_nlinear_scale>
      get gsl_multilarge_nlinear_scale_more =>
          _gsl_multilarge_nlinear_scale_more.value;

  set gsl_multilarge_nlinear_scale_more(
          ffi.Pointer<gsl_multilarge_nlinear_scale> value) =>
      _gsl_multilarge_nlinear_scale_more.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_solver>>
      _gsl_multilarge_nlinear_solver_cholesky =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_solver>>(
          'gsl_multilarge_nlinear_solver_cholesky');

  ffi.Pointer<gsl_multilarge_nlinear_solver>
      get gsl_multilarge_nlinear_solver_cholesky =>
          _gsl_multilarge_nlinear_solver_cholesky.value;

  set gsl_multilarge_nlinear_solver_cholesky(
          ffi.Pointer<gsl_multilarge_nlinear_solver> value) =>
      _gsl_multilarge_nlinear_solver_cholesky.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_solver>>
      _gsl_multilarge_nlinear_solver_mcholesky =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_solver>>(
          'gsl_multilarge_nlinear_solver_mcholesky');

  ffi.Pointer<gsl_multilarge_nlinear_solver>
      get gsl_multilarge_nlinear_solver_mcholesky =>
          _gsl_multilarge_nlinear_solver_mcholesky.value;

  set gsl_multilarge_nlinear_solver_mcholesky(
          ffi.Pointer<gsl_multilarge_nlinear_solver> value) =>
      _gsl_multilarge_nlinear_solver_mcholesky.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_nlinear_solver>>
      _gsl_multilarge_nlinear_solver_none =
      _lookup<ffi.Pointer<gsl_multilarge_nlinear_solver>>(
          'gsl_multilarge_nlinear_solver_none');

  ffi.Pointer<gsl_multilarge_nlinear_solver>
      get gsl_multilarge_nlinear_solver_none =>
          _gsl_multilarge_nlinear_solver_none.value;

  set gsl_multilarge_nlinear_solver_none(
          ffi.Pointer<gsl_multilarge_nlinear_solver> value) =>
      _gsl_multilarge_nlinear_solver_none.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_linear_type>>
      _gsl_multilarge_linear_normal =
      _lookup<ffi.Pointer<gsl_multilarge_linear_type>>(
          'gsl_multilarge_linear_normal');

  ffi.Pointer<gsl_multilarge_linear_type> get gsl_multilarge_linear_normal =>
      _gsl_multilarge_linear_normal.value;

  set gsl_multilarge_linear_normal(
          ffi.Pointer<gsl_multilarge_linear_type> value) =>
      _gsl_multilarge_linear_normal.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multilarge_linear_type>>
      _gsl_multilarge_linear_tsqr =
      _lookup<ffi.Pointer<gsl_multilarge_linear_type>>(
          'gsl_multilarge_linear_tsqr');

  ffi.Pointer<gsl_multilarge_linear_type> get gsl_multilarge_linear_tsqr =>
      _gsl_multilarge_linear_tsqr.value;

  set gsl_multilarge_linear_tsqr(
          ffi.Pointer<gsl_multilarge_linear_type> value) =>
      _gsl_multilarge_linear_tsqr.value = value;

  ffi.Pointer<gsl_multilarge_linear_workspace> gsl_multilarge_linear_alloc(
    ffi.Pointer<gsl_multilarge_linear_type> T,
    int p,
  ) {
    return _gsl_multilarge_linear_alloc(
      T,
      p,
    );
  }

  late final _gsl_multilarge_linear_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multilarge_linear_workspace> Function(
              ffi.Pointer<gsl_multilarge_linear_type>,
              size_t)>>('gsl_multilarge_linear_alloc');
  late final _gsl_multilarge_linear_alloc =
      _gsl_multilarge_linear_allocPtr.asFunction<
          ffi.Pointer<gsl_multilarge_linear_workspace> Function(
              ffi.Pointer<gsl_multilarge_linear_type>, int)>();

  void gsl_multilarge_linear_free(
    ffi.Pointer<gsl_multilarge_linear_workspace> w,
  ) {
    return _gsl_multilarge_linear_free(
      w,
    );
  }

  late final _gsl_multilarge_linear_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_free');
  late final _gsl_multilarge_linear_free =
      _gsl_multilarge_linear_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  ffi.Pointer<ffi.Int8> gsl_multilarge_linear_name(
    ffi.Pointer<gsl_multilarge_linear_workspace> w,
  ) {
    return _gsl_multilarge_linear_name(
      w,
    );
  }

  late final _gsl_multilarge_linear_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_name');
  late final _gsl_multilarge_linear_name =
      _gsl_multilarge_linear_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_reset(
    ffi.Pointer<gsl_multilarge_linear_workspace> w,
  ) {
    return _gsl_multilarge_linear_reset(
      w,
    );
  }

  late final _gsl_multilarge_linear_resetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_reset');
  late final _gsl_multilarge_linear_reset = _gsl_multilarge_linear_resetPtr
      .asFunction<int Function(ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_accumulate(
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_multilarge_linear_workspace> w,
  ) {
    return _gsl_multilarge_linear_accumulate(
      X,
      y,
      w,
    );
  }

  late final _gsl_multilarge_linear_accumulatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_accumulate');
  late final _gsl_multilarge_linear_accumulate =
      _gsl_multilarge_linear_accumulatePtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_solve(
    double lambda,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<ffi.Double> rnorm,
    ffi.Pointer<ffi.Double> snorm,
    ffi.Pointer<gsl_multilarge_linear_workspace> w,
  ) {
    return _gsl_multilarge_linear_solve(
      lambda,
      c,
      rnorm,
      snorm,
      w,
    );
  }

  late final _gsl_multilarge_linear_solvePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_solve');
  late final _gsl_multilarge_linear_solve =
      _gsl_multilarge_linear_solvePtr.asFunction<
          int Function(
              double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_rcond(
    ffi.Pointer<ffi.Double> rcond,
    ffi.Pointer<gsl_multilarge_linear_workspace> w,
  ) {
    return _gsl_multilarge_linear_rcond(
      rcond,
      w,
    );
  }

  late final _gsl_multilarge_linear_rcondPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Double>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_rcond');
  late final _gsl_multilarge_linear_rcond =
      _gsl_multilarge_linear_rcondPtr.asFunction<
          int Function(ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_lcurve(
    ffi.Pointer<gsl_vector> reg_param,
    ffi.Pointer<gsl_vector> rho,
    ffi.Pointer<gsl_vector> eta,
    ffi.Pointer<gsl_multilarge_linear_workspace> w,
  ) {
    return _gsl_multilarge_linear_lcurve(
      reg_param,
      rho,
      eta,
      w,
    );
  }

  late final _gsl_multilarge_linear_lcurvePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_lcurve');
  late final _gsl_multilarge_linear_lcurve =
      _gsl_multilarge_linear_lcurvePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_wstdform1(
    ffi.Pointer<gsl_vector> L,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_matrix> Xs,
    ffi.Pointer<gsl_vector> ys,
    ffi.Pointer<gsl_multilarge_linear_workspace> work,
  ) {
    return _gsl_multilarge_linear_wstdform1(
      L,
      X,
      w,
      y,
      Xs,
      ys,
      work,
    );
  }

  late final _gsl_multilarge_linear_wstdform1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_wstdform1');
  late final _gsl_multilarge_linear_wstdform1 =
      _gsl_multilarge_linear_wstdform1Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_stdform1(
    ffi.Pointer<gsl_vector> L,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_matrix> Xs,
    ffi.Pointer<gsl_vector> ys,
    ffi.Pointer<gsl_multilarge_linear_workspace> work,
  ) {
    return _gsl_multilarge_linear_stdform1(
      L,
      X,
      y,
      Xs,
      ys,
      work,
    );
  }

  late final _gsl_multilarge_linear_stdform1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_stdform1');
  late final _gsl_multilarge_linear_stdform1 =
      _gsl_multilarge_linear_stdform1Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_L_decomp(
    ffi.Pointer<gsl_matrix> L,
    ffi.Pointer<gsl_vector> tau,
  ) {
    return _gsl_multilarge_linear_L_decomp(
      L,
      tau,
    );
  }

  late final _gsl_multilarge_linear_L_decompPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>>('gsl_multilarge_linear_L_decomp');
  late final _gsl_multilarge_linear_L_decomp =
      _gsl_multilarge_linear_L_decompPtr.asFunction<
          int Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>();

  int gsl_multilarge_linear_wstdform2(
    ffi.Pointer<gsl_matrix> LQR,
    ffi.Pointer<gsl_vector> Ltau,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> w,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_matrix> Xs,
    ffi.Pointer<gsl_vector> ys,
    ffi.Pointer<gsl_multilarge_linear_workspace> work,
  ) {
    return _gsl_multilarge_linear_wstdform2(
      LQR,
      Ltau,
      X,
      w,
      y,
      Xs,
      ys,
      work,
    );
  }

  late final _gsl_multilarge_linear_wstdform2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_wstdform2');
  late final _gsl_multilarge_linear_wstdform2 =
      _gsl_multilarge_linear_wstdform2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_stdform2(
    ffi.Pointer<gsl_matrix> LQR,
    ffi.Pointer<gsl_vector> Ltau,
    ffi.Pointer<gsl_matrix> X,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_matrix> Xs,
    ffi.Pointer<gsl_vector> ys,
    ffi.Pointer<gsl_multilarge_linear_workspace> work,
  ) {
    return _gsl_multilarge_linear_stdform2(
      LQR,
      Ltau,
      X,
      y,
      Xs,
      ys,
      work,
    );
  }

  late final _gsl_multilarge_linear_stdform2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_stdform2');
  late final _gsl_multilarge_linear_stdform2 =
      _gsl_multilarge_linear_stdform2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_genform1(
    ffi.Pointer<gsl_vector> L,
    ffi.Pointer<gsl_vector> cs,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_multilarge_linear_workspace> work,
  ) {
    return _gsl_multilarge_linear_genform1(
      L,
      cs,
      c,
      work,
    );
  }

  late final _gsl_multilarge_linear_genform1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_genform1');
  late final _gsl_multilarge_linear_genform1 =
      _gsl_multilarge_linear_genform1Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  int gsl_multilarge_linear_genform2(
    ffi.Pointer<gsl_matrix> LQR,
    ffi.Pointer<gsl_vector> Ltau,
    ffi.Pointer<gsl_vector> cs,
    ffi.Pointer<gsl_vector> c,
    ffi.Pointer<gsl_multilarge_linear_workspace> work,
  ) {
    return _gsl_multilarge_linear_genform2(
      LQR,
      Ltau,
      cs,
      c,
      work,
    );
  }

  late final _gsl_multilarge_linear_genform2Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_genform2');
  late final _gsl_multilarge_linear_genform2 =
      _gsl_multilarge_linear_genform2Ptr.asFunction<
          int Function(
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  ffi.Pointer<gsl_matrix> gsl_multilarge_linear_matrix_ptr(
    ffi.Pointer<gsl_multilarge_linear_workspace> work,
  ) {
    return _gsl_multilarge_linear_matrix_ptr(
      work,
    );
  }

  late final _gsl_multilarge_linear_matrix_ptrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_matrix> Function(
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_matrix_ptr');
  late final _gsl_multilarge_linear_matrix_ptr =
      _gsl_multilarge_linear_matrix_ptrPtr.asFunction<
          ffi.Pointer<gsl_matrix> Function(
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  ffi.Pointer<gsl_vector> gsl_multilarge_linear_rhs_ptr(
    ffi.Pointer<gsl_multilarge_linear_workspace> work,
  ) {
    return _gsl_multilarge_linear_rhs_ptr(
      work,
    );
  }

  late final _gsl_multilarge_linear_rhs_ptrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multilarge_linear_workspace>)>>(
      'gsl_multilarge_linear_rhs_ptr');
  late final _gsl_multilarge_linear_rhs_ptr =
      _gsl_multilarge_linear_rhs_ptrPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multilarge_linear_workspace>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_wavelet_type>>
      _gsl_wavelet_daubechies =
      _lookup<ffi.Pointer<gsl_wavelet_type>>('gsl_wavelet_daubechies');

  ffi.Pointer<gsl_wavelet_type> get gsl_wavelet_daubechies =>
      _gsl_wavelet_daubechies.value;

  set gsl_wavelet_daubechies(ffi.Pointer<gsl_wavelet_type> value) =>
      _gsl_wavelet_daubechies.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_wavelet_type>>
      _gsl_wavelet_daubechies_centered =
      _lookup<ffi.Pointer<gsl_wavelet_type>>('gsl_wavelet_daubechies_centered');

  ffi.Pointer<gsl_wavelet_type> get gsl_wavelet_daubechies_centered =>
      _gsl_wavelet_daubechies_centered.value;

  set gsl_wavelet_daubechies_centered(ffi.Pointer<gsl_wavelet_type> value) =>
      _gsl_wavelet_daubechies_centered.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_wavelet_type>> _gsl_wavelet_haar =
      _lookup<ffi.Pointer<gsl_wavelet_type>>('gsl_wavelet_haar');

  ffi.Pointer<gsl_wavelet_type> get gsl_wavelet_haar => _gsl_wavelet_haar.value;

  set gsl_wavelet_haar(ffi.Pointer<gsl_wavelet_type> value) =>
      _gsl_wavelet_haar.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_wavelet_type>>
      _gsl_wavelet_haar_centered =
      _lookup<ffi.Pointer<gsl_wavelet_type>>('gsl_wavelet_haar_centered');

  ffi.Pointer<gsl_wavelet_type> get gsl_wavelet_haar_centered =>
      _gsl_wavelet_haar_centered.value;

  set gsl_wavelet_haar_centered(ffi.Pointer<gsl_wavelet_type> value) =>
      _gsl_wavelet_haar_centered.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_wavelet_type>> _gsl_wavelet_bspline =
      _lookup<ffi.Pointer<gsl_wavelet_type>>('gsl_wavelet_bspline');

  ffi.Pointer<gsl_wavelet_type> get gsl_wavelet_bspline =>
      _gsl_wavelet_bspline.value;

  set gsl_wavelet_bspline(ffi.Pointer<gsl_wavelet_type> value) =>
      _gsl_wavelet_bspline.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_wavelet_type>>
      _gsl_wavelet_bspline_centered =
      _lookup<ffi.Pointer<gsl_wavelet_type>>('gsl_wavelet_bspline_centered');

  ffi.Pointer<gsl_wavelet_type> get gsl_wavelet_bspline_centered =>
      _gsl_wavelet_bspline_centered.value;

  set gsl_wavelet_bspline_centered(ffi.Pointer<gsl_wavelet_type> value) =>
      _gsl_wavelet_bspline_centered.value = value;

  ffi.Pointer<gsl_wavelet> gsl_wavelet_alloc(
    ffi.Pointer<gsl_wavelet_type> T,
    int k,
  ) {
    return _gsl_wavelet_alloc(
      T,
      k,
    );
  }

  late final _gsl_wavelet_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_wavelet> Function(
              ffi.Pointer<gsl_wavelet_type>, size_t)>>('gsl_wavelet_alloc');
  late final _gsl_wavelet_alloc = _gsl_wavelet_allocPtr.asFunction<
      ffi.Pointer<gsl_wavelet> Function(ffi.Pointer<gsl_wavelet_type>, int)>();

  void gsl_wavelet_free(
    ffi.Pointer<gsl_wavelet> w,
  ) {
    return _gsl_wavelet_free(
      w,
    );
  }

  late final _gsl_wavelet_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_wavelet>)>>(
          'gsl_wavelet_free');
  late final _gsl_wavelet_free = _gsl_wavelet_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_wavelet>)>();

  ffi.Pointer<ffi.Int8> gsl_wavelet_name(
    ffi.Pointer<gsl_wavelet> w,
  ) {
    return _gsl_wavelet_name(
      w,
    );
  }

  late final _gsl_wavelet_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_wavelet>)>>('gsl_wavelet_name');
  late final _gsl_wavelet_name = _gsl_wavelet_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<gsl_wavelet>)>();

  ffi.Pointer<gsl_wavelet_workspace> gsl_wavelet_workspace_alloc(
    int n,
  ) {
    return _gsl_wavelet_workspace_alloc(
      n,
    );
  }

  late final _gsl_wavelet_workspace_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_wavelet_workspace> Function(
              size_t)>>('gsl_wavelet_workspace_alloc');
  late final _gsl_wavelet_workspace_alloc = _gsl_wavelet_workspace_allocPtr
      .asFunction<ffi.Pointer<gsl_wavelet_workspace> Function(int)>();

  void gsl_wavelet_workspace_free(
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet_workspace_free(
      work,
    );
  }

  late final _gsl_wavelet_workspace_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet_workspace_free');
  late final _gsl_wavelet_workspace_free = _gsl_wavelet_workspace_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet_transform(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    int dir,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet_transform(
      w,
      data,
      stride,
      n,
      dir,
      work,
    );
  }

  late final _gsl_wavelet_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_wavelet>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Int32,
              ffi.Pointer<gsl_wavelet_workspace>)>>('gsl_wavelet_transform');
  late final _gsl_wavelet_transform = _gsl_wavelet_transformPtr.asFunction<
      int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<ffi.Double>, int, int,
          int, ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet_transform_forward(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet_transform_forward(
      w,
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_wavelet_transform_forwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet_transform_forward');
  late final _gsl_wavelet_transform_forward =
      _gsl_wavelet_transform_forwardPtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<ffi.Double>, int,
              int, ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet_transform_inverse(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<ffi.Double> data,
    int stride,
    int n,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet_transform_inverse(
      w,
      data,
      stride,
      n,
      work,
    );
  }

  late final _gsl_wavelet_transform_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet_transform_inverse');
  late final _gsl_wavelet_transform_inverse =
      _gsl_wavelet_transform_inversePtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<ffi.Double>, int,
              int, ffi.Pointer<gsl_wavelet_workspace>)>();

  ffi.Pointer<gsl_filter_gaussian_workspace> gsl_filter_gaussian_alloc(
    int K,
  ) {
    return _gsl_filter_gaussian_alloc(
      K,
    );
  }

  late final _gsl_filter_gaussian_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_filter_gaussian_workspace> Function(
              size_t)>>('gsl_filter_gaussian_alloc');
  late final _gsl_filter_gaussian_alloc = _gsl_filter_gaussian_allocPtr
      .asFunction<ffi.Pointer<gsl_filter_gaussian_workspace> Function(int)>();

  void gsl_filter_gaussian_free(
    ffi.Pointer<gsl_filter_gaussian_workspace> w,
  ) {
    return _gsl_filter_gaussian_free(
      w,
    );
  }

  late final _gsl_filter_gaussian_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_filter_gaussian_workspace>)>>(
      'gsl_filter_gaussian_free');
  late final _gsl_filter_gaussian_free = _gsl_filter_gaussian_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_filter_gaussian_workspace>)>();

  int gsl_filter_gaussian(
    int endtype,
    double alpha,
    int order,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_filter_gaussian_workspace> w,
  ) {
    return _gsl_filter_gaussian(
      endtype,
      alpha,
      order,
      x,
      y,
      w,
    );
  }

  late final _gsl_filter_gaussianPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Double,
                  size_t,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_filter_gaussian_workspace>)>>(
      'gsl_filter_gaussian');
  late final _gsl_filter_gaussian = _gsl_filter_gaussianPtr.asFunction<
      int Function(
          int,
          double,
          int,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_filter_gaussian_workspace>)>();

  int gsl_filter_gaussian_kernel(
    double alpha,
    int order,
    int normalize,
    ffi.Pointer<gsl_vector> kernel,
  ) {
    return _gsl_filter_gaussian_kernel(
      alpha,
      order,
      normalize,
      kernel,
    );
  }

  late final _gsl_filter_gaussian_kernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, size_t, ffi.Int32,
              ffi.Pointer<gsl_vector>)>>('gsl_filter_gaussian_kernel');
  late final _gsl_filter_gaussian_kernel = _gsl_filter_gaussian_kernelPtr
      .asFunction<int Function(double, int, int, ffi.Pointer<gsl_vector>)>();

  ffi.Pointer<gsl_filter_median_workspace> gsl_filter_median_alloc(
    int K,
  ) {
    return _gsl_filter_median_alloc(
      K,
    );
  }

  late final _gsl_filter_median_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_filter_median_workspace> Function(
              size_t)>>('gsl_filter_median_alloc');
  late final _gsl_filter_median_alloc = _gsl_filter_median_allocPtr
      .asFunction<ffi.Pointer<gsl_filter_median_workspace> Function(int)>();

  void gsl_filter_median_free(
    ffi.Pointer<gsl_filter_median_workspace> w,
  ) {
    return _gsl_filter_median_free(
      w,
    );
  }

  late final _gsl_filter_median_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_filter_median_workspace>)>>(
      'gsl_filter_median_free');
  late final _gsl_filter_median_free = _gsl_filter_median_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_filter_median_workspace>)>();

  int gsl_filter_median(
    int endtype,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_filter_median_workspace> w,
  ) {
    return _gsl_filter_median(
      endtype,
      x,
      y,
      w,
    );
  }

  late final _gsl_filter_medianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_filter_median_workspace>)>>('gsl_filter_median');
  late final _gsl_filter_median = _gsl_filter_medianPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_filter_median_workspace>)>();

  ffi.Pointer<gsl_filter_rmedian_workspace> gsl_filter_rmedian_alloc(
    int K,
  ) {
    return _gsl_filter_rmedian_alloc(
      K,
    );
  }

  late final _gsl_filter_rmedian_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_filter_rmedian_workspace> Function(
              size_t)>>('gsl_filter_rmedian_alloc');
  late final _gsl_filter_rmedian_alloc = _gsl_filter_rmedian_allocPtr
      .asFunction<ffi.Pointer<gsl_filter_rmedian_workspace> Function(int)>();

  void gsl_filter_rmedian_free(
    ffi.Pointer<gsl_filter_rmedian_workspace> w,
  ) {
    return _gsl_filter_rmedian_free(
      w,
    );
  }

  late final _gsl_filter_rmedian_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_filter_rmedian_workspace>)>>(
      'gsl_filter_rmedian_free');
  late final _gsl_filter_rmedian_free = _gsl_filter_rmedian_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_filter_rmedian_workspace>)>();

  int gsl_filter_rmedian(
    int arg0,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_filter_rmedian_workspace> w,
  ) {
    return _gsl_filter_rmedian(
      arg0,
      x,
      y,
      w,
    );
  }

  late final _gsl_filter_rmedianPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_filter_rmedian_workspace>)>>(
      'gsl_filter_rmedian');
  late final _gsl_filter_rmedian = _gsl_filter_rmedianPtr.asFunction<
      int Function(int, ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_filter_rmedian_workspace>)>();

  ffi.Pointer<gsl_filter_impulse_workspace> gsl_filter_impulse_alloc(
    int K,
  ) {
    return _gsl_filter_impulse_alloc(
      K,
    );
  }

  late final _gsl_filter_impulse_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_filter_impulse_workspace> Function(
              size_t)>>('gsl_filter_impulse_alloc');
  late final _gsl_filter_impulse_alloc = _gsl_filter_impulse_allocPtr
      .asFunction<ffi.Pointer<gsl_filter_impulse_workspace> Function(int)>();

  void gsl_filter_impulse_free(
    ffi.Pointer<gsl_filter_impulse_workspace> w,
  ) {
    return _gsl_filter_impulse_free(
      w,
    );
  }

  late final _gsl_filter_impulse_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_filter_impulse_workspace>)>>(
      'gsl_filter_impulse_free');
  late final _gsl_filter_impulse_free = _gsl_filter_impulse_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_filter_impulse_workspace>)>();

  int gsl_filter_impulse(
    int endtype,
    int scale_type,
    double t,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> y,
    ffi.Pointer<gsl_vector> xmedian,
    ffi.Pointer<gsl_vector> xsigma,
    ffi.Pointer<size_t> noutlier,
    ffi.Pointer<gsl_vector_int> ioutlier,
    ffi.Pointer<gsl_filter_impulse_workspace> w,
  ) {
    return _gsl_filter_impulse(
      endtype,
      scale_type,
      t,
      x,
      y,
      xmedian,
      xsigma,
      noutlier,
      ioutlier,
      w,
    );
  }

  late final _gsl_filter_impulsePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Double,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<gsl_vector>,
                  ffi.Pointer<size_t>,
                  ffi.Pointer<gsl_vector_int>,
                  ffi.Pointer<gsl_filter_impulse_workspace>)>>(
      'gsl_filter_impulse');
  late final _gsl_filter_impulse = _gsl_filter_impulsePtr.asFunction<
      int Function(
          int,
          int,
          double,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>,
          ffi.Pointer<size_t>,
          ffi.Pointer<gsl_vector_int>,
          ffi.Pointer<gsl_filter_impulse_workspace>)>();

  int gsl_deriv_central(
    ffi.Pointer<gsl_function> f,
    double x,
    double h,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_deriv_central(
      f,
      x,
      h,
      result,
      abserr,
    );
  }

  late final _gsl_deriv_centralPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_deriv_central');
  late final _gsl_deriv_central = _gsl_deriv_centralPtr.asFunction<
      int Function(ffi.Pointer<gsl_function>, double, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_deriv_backward(
    ffi.Pointer<gsl_function> f,
    double x,
    double h,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_deriv_backward(
      f,
      x,
      h,
      result,
      abserr,
    );
  }

  late final _gsl_deriv_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_deriv_backward');
  late final _gsl_deriv_backward = _gsl_deriv_backwardPtr.asFunction<
      int Function(ffi.Pointer<gsl_function>, double, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int gsl_deriv_forward(
    ffi.Pointer<gsl_function> f,
    double x,
    double h,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_deriv_forward(
      f,
      x,
      h,
      result,
      abserr,
    );
  }

  late final _gsl_deriv_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_deriv_forward');
  late final _gsl_deriv_forward = _gsl_deriv_forwardPtr.asFunction<
      int Function(ffi.Pointer<gsl_function>, double, double,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_histogram> gsl_histogram_alloc(
    int n,
  ) {
    return _gsl_histogram_alloc(
      n,
    );
  }

  late final _gsl_histogram_allocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_histogram> Function(size_t)>>(
          'gsl_histogram_alloc');
  late final _gsl_histogram_alloc = _gsl_histogram_allocPtr
      .asFunction<ffi.Pointer<gsl_histogram> Function(int)>();

  ffi.Pointer<gsl_histogram> gsl_histogram_calloc(
    int n,
  ) {
    return _gsl_histogram_calloc(
      n,
    );
  }

  late final _gsl_histogram_callocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<gsl_histogram> Function(size_t)>>(
          'gsl_histogram_calloc');
  late final _gsl_histogram_calloc = _gsl_histogram_callocPtr
      .asFunction<ffi.Pointer<gsl_histogram> Function(int)>();

  ffi.Pointer<gsl_histogram> gsl_histogram_calloc_uniform(
    int n,
    double xmin,
    double xmax,
  ) {
    return _gsl_histogram_calloc_uniform(
      n,
      xmin,
      xmax,
    );
  }

  late final _gsl_histogram_calloc_uniformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_histogram> Function(
              size_t, ffi.Double, ffi.Double)>>('gsl_histogram_calloc_uniform');
  late final _gsl_histogram_calloc_uniform = _gsl_histogram_calloc_uniformPtr
      .asFunction<ffi.Pointer<gsl_histogram> Function(int, double, double)>();

  void gsl_histogram_free(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_free(
      h,
    );
  }

  late final _gsl_histogram_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_histogram>)>>(
      'gsl_histogram_free');
  late final _gsl_histogram_free = _gsl_histogram_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_increment(
    ffi.Pointer<gsl_histogram> h,
    double x,
  ) {
    return _gsl_histogram_increment(
      h,
      x,
    );
  }

  late final _gsl_histogram_incrementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>,
              ffi.Double)>>('gsl_histogram_increment');
  late final _gsl_histogram_increment = _gsl_histogram_incrementPtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram>, double)>();

  int gsl_histogram_accumulate(
    ffi.Pointer<gsl_histogram> h,
    double x,
    double weight,
  ) {
    return _gsl_histogram_accumulate(
      h,
      x,
      weight,
    );
  }

  late final _gsl_histogram_accumulatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>, ffi.Double,
              ffi.Double)>>('gsl_histogram_accumulate');
  late final _gsl_histogram_accumulate = _gsl_histogram_accumulatePtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram>, double, double)>();

  int gsl_histogram_find(
    ffi.Pointer<gsl_histogram> h,
    double x,
    ffi.Pointer<size_t> i,
  ) {
    return _gsl_histogram_find(
      h,
      x,
      i,
    );
  }

  late final _gsl_histogram_findPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>, ffi.Double,
              ffi.Pointer<size_t>)>>('gsl_histogram_find');
  late final _gsl_histogram_find = _gsl_histogram_findPtr.asFunction<
      int Function(ffi.Pointer<gsl_histogram>, double, ffi.Pointer<size_t>)>();

  double gsl_histogram_get(
    ffi.Pointer<gsl_histogram> h,
    int i,
  ) {
    return _gsl_histogram_get(
      h,
      i,
    );
  }

  late final _gsl_histogram_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_histogram>, size_t)>>('gsl_histogram_get');
  late final _gsl_histogram_get = _gsl_histogram_getPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram>, int)>();

  int gsl_histogram_get_range(
    ffi.Pointer<gsl_histogram> h,
    int i,
    ffi.Pointer<ffi.Double> lower,
    ffi.Pointer<ffi.Double> upper,
  ) {
    return _gsl_histogram_get_range(
      h,
      i,
      lower,
      upper,
    );
  }

  late final _gsl_histogram_get_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram>,
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_histogram_get_range');
  late final _gsl_histogram_get_range = _gsl_histogram_get_rangePtr.asFunction<
      int Function(ffi.Pointer<gsl_histogram>, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  double gsl_histogram_max(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_max(
      h,
    );
  }

  late final _gsl_histogram_maxPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_histogram>)>>(
      'gsl_histogram_max');
  late final _gsl_histogram_max = _gsl_histogram_maxPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram>)>();

  double gsl_histogram_min(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_min(
      h,
    );
  }

  late final _gsl_histogram_minPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_histogram>)>>(
      'gsl_histogram_min');
  late final _gsl_histogram_min = _gsl_histogram_minPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_bins(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_bins(
      h,
    );
  }

  late final _gsl_histogram_binsPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_histogram>)>>(
          'gsl_histogram_bins');
  late final _gsl_histogram_bins = _gsl_histogram_binsPtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram>)>();

  void gsl_histogram_reset(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_reset(
      h,
    );
  }

  late final _gsl_histogram_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_histogram>)>>(
      'gsl_histogram_reset');
  late final _gsl_histogram_reset = _gsl_histogram_resetPtr
      .asFunction<void Function(ffi.Pointer<gsl_histogram>)>();

  ffi.Pointer<gsl_histogram> gsl_histogram_calloc_range(
    int n,
    ffi.Pointer<ffi.Double> range,
  ) {
    return _gsl_histogram_calloc_range(
      n,
      range,
    );
  }

  late final _gsl_histogram_calloc_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_histogram> Function(
              size_t, ffi.Pointer<ffi.Double>)>>('gsl_histogram_calloc_range');
  late final _gsl_histogram_calloc_range =
      _gsl_histogram_calloc_rangePtr.asFunction<
          ffi.Pointer<gsl_histogram> Function(int, ffi.Pointer<ffi.Double>)>();

  int gsl_histogram_set_ranges(
    ffi.Pointer<gsl_histogram> h,
    ffi.Pointer<ffi.Double> range,
    int size,
  ) {
    return _gsl_histogram_set_ranges(
      h,
      range,
      size,
    );
  }

  late final _gsl_histogram_set_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>,
              ffi.Pointer<ffi.Double>, size_t)>>('gsl_histogram_set_ranges');
  late final _gsl_histogram_set_ranges =
      _gsl_histogram_set_rangesPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_histogram>, ffi.Pointer<ffi.Double>, int)>();

  int gsl_histogram_set_ranges_uniform(
    ffi.Pointer<gsl_histogram> h,
    double xmin,
    double xmax,
  ) {
    return _gsl_histogram_set_ranges_uniform(
      h,
      xmin,
      xmax,
    );
  }

  late final _gsl_histogram_set_ranges_uniformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>, ffi.Double,
              ffi.Double)>>('gsl_histogram_set_ranges_uniform');
  late final _gsl_histogram_set_ranges_uniform =
      _gsl_histogram_set_ranges_uniformPtr.asFunction<
          int Function(ffi.Pointer<gsl_histogram>, double, double)>();

  int gsl_histogram_memcpy(
    ffi.Pointer<gsl_histogram> dest,
    ffi.Pointer<gsl_histogram> source,
  ) {
    return _gsl_histogram_memcpy(
      dest,
      source,
    );
  }

  late final _gsl_histogram_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_memcpy');
  late final _gsl_histogram_memcpy = _gsl_histogram_memcpyPtr.asFunction<
      int Function(ffi.Pointer<gsl_histogram>, ffi.Pointer<gsl_histogram>)>();

  ffi.Pointer<gsl_histogram> gsl_histogram_clone(
    ffi.Pointer<gsl_histogram> source,
  ) {
    return _gsl_histogram_clone(
      source,
    );
  }

  late final _gsl_histogram_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_histogram> Function(
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_clone');
  late final _gsl_histogram_clone = _gsl_histogram_clonePtr.asFunction<
      ffi.Pointer<gsl_histogram> Function(ffi.Pointer<gsl_histogram>)>();

  double gsl_histogram_max_val(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_max_val(
      h,
    );
  }

  late final _gsl_histogram_max_valPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_histogram>)>>(
      'gsl_histogram_max_val');
  late final _gsl_histogram_max_val = _gsl_histogram_max_valPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_max_bin(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_max_bin(
      h,
    );
  }

  late final _gsl_histogram_max_binPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_histogram>)>>(
          'gsl_histogram_max_bin');
  late final _gsl_histogram_max_bin = _gsl_histogram_max_binPtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram>)>();

  double gsl_histogram_min_val(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_min_val(
      h,
    );
  }

  late final _gsl_histogram_min_valPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_histogram>)>>(
      'gsl_histogram_min_val');
  late final _gsl_histogram_min_val = _gsl_histogram_min_valPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_min_bin(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_min_bin(
      h,
    );
  }

  late final _gsl_histogram_min_binPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_histogram>)>>(
          'gsl_histogram_min_bin');
  late final _gsl_histogram_min_bin = _gsl_histogram_min_binPtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_equal_bins_p(
    ffi.Pointer<gsl_histogram> h1,
    ffi.Pointer<gsl_histogram> h2,
  ) {
    return _gsl_histogram_equal_bins_p(
      h1,
      h2,
    );
  }

  late final _gsl_histogram_equal_bins_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_equal_bins_p');
  late final _gsl_histogram_equal_bins_p =
      _gsl_histogram_equal_bins_pPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_histogram>, ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_add(
    ffi.Pointer<gsl_histogram> h1,
    ffi.Pointer<gsl_histogram> h2,
  ) {
    return _gsl_histogram_add(
      h1,
      h2,
    );
  }

  late final _gsl_histogram_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_add');
  late final _gsl_histogram_add = _gsl_histogram_addPtr.asFunction<
      int Function(ffi.Pointer<gsl_histogram>, ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_sub(
    ffi.Pointer<gsl_histogram> h1,
    ffi.Pointer<gsl_histogram> h2,
  ) {
    return _gsl_histogram_sub(
      h1,
      h2,
    );
  }

  late final _gsl_histogram_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_sub');
  late final _gsl_histogram_sub = _gsl_histogram_subPtr.asFunction<
      int Function(ffi.Pointer<gsl_histogram>, ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_mul(
    ffi.Pointer<gsl_histogram> h1,
    ffi.Pointer<gsl_histogram> h2,
  ) {
    return _gsl_histogram_mul(
      h1,
      h2,
    );
  }

  late final _gsl_histogram_mulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_mul');
  late final _gsl_histogram_mul = _gsl_histogram_mulPtr.asFunction<
      int Function(ffi.Pointer<gsl_histogram>, ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_div(
    ffi.Pointer<gsl_histogram> h1,
    ffi.Pointer<gsl_histogram> h2,
  ) {
    return _gsl_histogram_div(
      h1,
      h2,
    );
  }

  late final _gsl_histogram_divPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_div');
  late final _gsl_histogram_div = _gsl_histogram_divPtr.asFunction<
      int Function(ffi.Pointer<gsl_histogram>, ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_scale(
    ffi.Pointer<gsl_histogram> h,
    double scale,
  ) {
    return _gsl_histogram_scale(
      h,
      scale,
    );
  }

  late final _gsl_histogram_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram>, ffi.Double)>>('gsl_histogram_scale');
  late final _gsl_histogram_scale = _gsl_histogram_scalePtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram>, double)>();

  int gsl_histogram_shift(
    ffi.Pointer<gsl_histogram> h,
    double shift,
  ) {
    return _gsl_histogram_shift(
      h,
      shift,
    );
  }

  late final _gsl_histogram_shiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram>, ffi.Double)>>('gsl_histogram_shift');
  late final _gsl_histogram_shift = _gsl_histogram_shiftPtr
      .asFunction<int Function(ffi.Pointer<gsl_histogram>, double)>();

  double gsl_histogram_sigma(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_sigma(
      h,
    );
  }

  late final _gsl_histogram_sigmaPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_histogram>)>>(
      'gsl_histogram_sigma');
  late final _gsl_histogram_sigma = _gsl_histogram_sigmaPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram>)>();

  double gsl_histogram_mean(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_mean(
      h,
    );
  }

  late final _gsl_histogram_meanPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_histogram>)>>(
      'gsl_histogram_mean');
  late final _gsl_histogram_mean = _gsl_histogram_meanPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram>)>();

  double gsl_histogram_sum(
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_sum(
      h,
    );
  }

  late final _gsl_histogram_sumPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<gsl_histogram>)>>(
      'gsl_histogram_sum');
  late final _gsl_histogram_sum = _gsl_histogram_sumPtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_fwrite(
      stream,
      h,
    );
  }

  late final _gsl_histogram_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_fwrite');
  late final _gsl_histogram_fwrite = _gsl_histogram_fwritePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_fread(
      stream,
      h,
    );
  }

  late final _gsl_histogram_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_fread');
  late final _gsl_histogram_fread = _gsl_histogram_freadPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_histogram>)>();

  int gsl_histogram_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_histogram> h,
    ffi.Pointer<ffi.Int8> range_format,
    ffi.Pointer<ffi.Int8> bin_format,
  ) {
    return _gsl_histogram_fprintf(
      stream,
      h,
      range_format,
      bin_format,
    );
  }

  late final _gsl_histogram_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<gsl_histogram>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('gsl_histogram_fprintf');
  late final _gsl_histogram_fprintf = _gsl_histogram_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_histogram>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int gsl_histogram_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_fscanf(
      stream,
      h,
    );
  }

  late final _gsl_histogram_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_fscanf');
  late final _gsl_histogram_fscanf = _gsl_histogram_fscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_histogram>)>();

  ffi.Pointer<gsl_histogram_pdf> gsl_histogram_pdf_alloc(
    int n,
  ) {
    return _gsl_histogram_pdf_alloc(
      n,
    );
  }

  late final _gsl_histogram_pdf_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<gsl_histogram_pdf> Function(size_t)>>(
      'gsl_histogram_pdf_alloc');
  late final _gsl_histogram_pdf_alloc = _gsl_histogram_pdf_allocPtr
      .asFunction<ffi.Pointer<gsl_histogram_pdf> Function(int)>();

  int gsl_histogram_pdf_init(
    ffi.Pointer<gsl_histogram_pdf> p,
    ffi.Pointer<gsl_histogram> h,
  ) {
    return _gsl_histogram_pdf_init(
      p,
      h,
    );
  }

  late final _gsl_histogram_pdf_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_histogram_pdf>,
              ffi.Pointer<gsl_histogram>)>>('gsl_histogram_pdf_init');
  late final _gsl_histogram_pdf_init = _gsl_histogram_pdf_initPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_histogram_pdf>, ffi.Pointer<gsl_histogram>)>();

  void gsl_histogram_pdf_free(
    ffi.Pointer<gsl_histogram_pdf> p,
  ) {
    return _gsl_histogram_pdf_free(
      p,
    );
  }

  late final _gsl_histogram_pdf_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_histogram_pdf>)>>('gsl_histogram_pdf_free');
  late final _gsl_histogram_pdf_free = _gsl_histogram_pdf_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_histogram_pdf>)>();

  double gsl_histogram_pdf_sample(
    ffi.Pointer<gsl_histogram_pdf> p,
    double r,
  ) {
    return _gsl_histogram_pdf_sample(
      p,
      r,
    );
  }

  late final _gsl_histogram_pdf_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<gsl_histogram_pdf>,
              ffi.Double)>>('gsl_histogram_pdf_sample');
  late final _gsl_histogram_pdf_sample = _gsl_histogram_pdf_samplePtr
      .asFunction<double Function(ffi.Pointer<gsl_histogram_pdf>, double)>();

  int gsl_diff_central(
    ffi.Pointer<gsl_function> f,
    double x,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_diff_central(
      f,
      x,
      result,
      abserr,
    );
  }

  late final _gsl_diff_centralPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_diff_central');
  late final _gsl_diff_central = _gsl_diff_centralPtr.asFunction<
      int Function(ffi.Pointer<gsl_function>, double, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_diff_backward(
    ffi.Pointer<gsl_function> f,
    double x,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_diff_backward(
      f,
      x,
      result,
      abserr,
    );
  }

  late final _gsl_diff_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_diff_backward');
  late final _gsl_diff_backward = _gsl_diff_backwardPtr.asFunction<
      int Function(ffi.Pointer<gsl_function>, double, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int gsl_diff_forward(
    ffi.Pointer<gsl_function> f,
    double x,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_diff_forward(
      f,
      x,
      result,
      abserr,
    );
  }

  late final _gsl_diff_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_diff_forward');
  late final _gsl_diff_forward = _gsl_diff_forwardPtr.asFunction<
      int Function(ffi.Pointer<gsl_function>, double, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_multiset> gsl_multiset_alloc(
    int n,
    int k,
  ) {
    return _gsl_multiset_alloc(
      n,
      k,
    );
  }

  late final _gsl_multiset_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multiset> Function(
              size_t, size_t)>>('gsl_multiset_alloc');
  late final _gsl_multiset_alloc = _gsl_multiset_allocPtr
      .asFunction<ffi.Pointer<gsl_multiset> Function(int, int)>();

  ffi.Pointer<gsl_multiset> gsl_multiset_calloc(
    int n,
    int k,
  ) {
    return _gsl_multiset_calloc(
      n,
      k,
    );
  }

  late final _gsl_multiset_callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multiset> Function(
              size_t, size_t)>>('gsl_multiset_calloc');
  late final _gsl_multiset_calloc = _gsl_multiset_callocPtr
      .asFunction<ffi.Pointer<gsl_multiset> Function(int, int)>();

  void gsl_multiset_init_first(
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_init_first(
      c,
    );
  }

  late final _gsl_multiset_init_firstPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_multiset>)>>(
          'gsl_multiset_init_first');
  late final _gsl_multiset_init_first = _gsl_multiset_init_firstPtr
      .asFunction<void Function(ffi.Pointer<gsl_multiset>)>();

  void gsl_multiset_init_last(
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_init_last(
      c,
    );
  }

  late final _gsl_multiset_init_lastPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_multiset>)>>(
          'gsl_multiset_init_last');
  late final _gsl_multiset_init_last = _gsl_multiset_init_lastPtr
      .asFunction<void Function(ffi.Pointer<gsl_multiset>)>();

  void gsl_multiset_free(
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_free(
      c,
    );
  }

  late final _gsl_multiset_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<gsl_multiset>)>>(
          'gsl_multiset_free');
  late final _gsl_multiset_free = _gsl_multiset_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_memcpy(
    ffi.Pointer<gsl_multiset> dest,
    ffi.Pointer<gsl_multiset> src,
  ) {
    return _gsl_multiset_memcpy(
      dest,
      src,
    );
  }

  late final _gsl_multiset_memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_multiset>,
              ffi.Pointer<gsl_multiset>)>>('gsl_multiset_memcpy');
  late final _gsl_multiset_memcpy = _gsl_multiset_memcpyPtr.asFunction<
      int Function(ffi.Pointer<gsl_multiset>, ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_fread(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_fread(
      stream,
      c,
    );
  }

  late final _gsl_multiset_freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_multiset>)>>('gsl_multiset_fread');
  late final _gsl_multiset_fread = _gsl_multiset_freadPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_fwrite(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_fwrite(
      stream,
      c,
    );
  }

  late final _gsl_multiset_fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_multiset>)>>('gsl_multiset_fwrite');
  late final _gsl_multiset_fwrite = _gsl_multiset_fwritePtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_fscanf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_fscanf(
      stream,
      c,
    );
  }

  late final _gsl_multiset_fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<gsl_multiset>)>>('gsl_multiset_fscanf');
  late final _gsl_multiset_fscanf = _gsl_multiset_fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_fprintf(
    ffi.Pointer<FILE> stream,
    ffi.Pointer<gsl_multiset> c,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _gsl_multiset_fprintf(
      stream,
      c,
      format,
    );
  }

  late final _gsl_multiset_fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_multiset>,
              ffi.Pointer<ffi.Int8>)>>('gsl_multiset_fprintf');
  late final _gsl_multiset_fprintf = _gsl_multiset_fprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<gsl_multiset>,
          ffi.Pointer<ffi.Int8>)>();

  int gsl_multiset_n(
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_n(
      c,
    );
  }

  late final _gsl_multiset_nPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_multiset>)>>(
          'gsl_multiset_n');
  late final _gsl_multiset_n =
      _gsl_multiset_nPtr.asFunction<int Function(ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_k(
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_k(
      c,
    );
  }

  late final _gsl_multiset_kPtr =
      _lookup<ffi.NativeFunction<size_t Function(ffi.Pointer<gsl_multiset>)>>(
          'gsl_multiset_k');
  late final _gsl_multiset_k =
      _gsl_multiset_kPtr.asFunction<int Function(ffi.Pointer<gsl_multiset>)>();

  ffi.Pointer<size_t> gsl_multiset_data(
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_data(
      c,
    );
  }

  late final _gsl_multiset_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<size_t> Function(
              ffi.Pointer<gsl_multiset>)>>('gsl_multiset_data');
  late final _gsl_multiset_data = _gsl_multiset_dataPtr
      .asFunction<ffi.Pointer<size_t> Function(ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_valid(
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_valid(
      c,
    );
  }

  late final _gsl_multiset_validPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_multiset>)>>(
      'gsl_multiset_valid');
  late final _gsl_multiset_valid = _gsl_multiset_validPtr
      .asFunction<int Function(ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_next(
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_next(
      c,
    );
  }

  late final _gsl_multiset_nextPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_multiset>)>>(
      'gsl_multiset_next');
  late final _gsl_multiset_next = _gsl_multiset_nextPtr
      .asFunction<int Function(ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_prev(
    ffi.Pointer<gsl_multiset> c,
  ) {
    return _gsl_multiset_prev(
      c,
    );
  }

  late final _gsl_multiset_prevPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_multiset>)>>(
      'gsl_multiset_prev');
  late final _gsl_multiset_prev = _gsl_multiset_prevPtr
      .asFunction<int Function(ffi.Pointer<gsl_multiset>)>();

  int gsl_multiset_get(
    ffi.Pointer<gsl_multiset> c,
    int i,
  ) {
    return _gsl_multiset_get(
      c,
      i,
    );
  }

  late final _gsl_multiset_getPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_multiset>, size_t)>>('gsl_multiset_get');
  late final _gsl_multiset_get = _gsl_multiset_getPtr
      .asFunction<int Function(ffi.Pointer<gsl_multiset>, int)>();

  ffi.Pointer<gsl_ntuple> gsl_ntuple_open(
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Void> ntuple_data,
    int size,
  ) {
    return _gsl_ntuple_open(
      filename,
      ntuple_data,
      size,
    );
  }

  late final _gsl_ntuple_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_ntuple> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>, size_t)>>('gsl_ntuple_open');
  late final _gsl_ntuple_open = _gsl_ntuple_openPtr.asFunction<
      ffi.Pointer<gsl_ntuple> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<gsl_ntuple> gsl_ntuple_create(
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Void> ntuple_data,
    int size,
  ) {
    return _gsl_ntuple_create(
      filename,
      ntuple_data,
      size,
    );
  }

  late final _gsl_ntuple_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_ntuple> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>, size_t)>>('gsl_ntuple_create');
  late final _gsl_ntuple_create = _gsl_ntuple_createPtr.asFunction<
      ffi.Pointer<gsl_ntuple> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>, int)>();

  int gsl_ntuple_write(
    ffi.Pointer<gsl_ntuple> ntuple,
  ) {
    return _gsl_ntuple_write(
      ntuple,
    );
  }

  late final _gsl_ntuple_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_ntuple>)>>(
          'gsl_ntuple_write');
  late final _gsl_ntuple_write =
      _gsl_ntuple_writePtr.asFunction<int Function(ffi.Pointer<gsl_ntuple>)>();

  int gsl_ntuple_read(
    ffi.Pointer<gsl_ntuple> ntuple,
  ) {
    return _gsl_ntuple_read(
      ntuple,
    );
  }

  late final _gsl_ntuple_readPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_ntuple>)>>(
          'gsl_ntuple_read');
  late final _gsl_ntuple_read =
      _gsl_ntuple_readPtr.asFunction<int Function(ffi.Pointer<gsl_ntuple>)>();

  int gsl_ntuple_bookdata(
    ffi.Pointer<gsl_ntuple> ntuple,
  ) {
    return _gsl_ntuple_bookdata(
      ntuple,
    );
  }

  late final _gsl_ntuple_bookdataPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_ntuple>)>>(
          'gsl_ntuple_bookdata');
  late final _gsl_ntuple_bookdata = _gsl_ntuple_bookdataPtr
      .asFunction<int Function(ffi.Pointer<gsl_ntuple>)>();

  int gsl_ntuple_project(
    ffi.Pointer<gsl_histogram> h,
    ffi.Pointer<gsl_ntuple> ntuple,
    ffi.Pointer<gsl_ntuple_value_fn> value_func,
    ffi.Pointer<gsl_ntuple_select_fn> select_func,
  ) {
    return _gsl_ntuple_project(
      h,
      ntuple,
      value_func,
      select_func,
    );
  }

  late final _gsl_ntuple_projectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_histogram>,
              ffi.Pointer<gsl_ntuple>,
              ffi.Pointer<gsl_ntuple_value_fn>,
              ffi.Pointer<gsl_ntuple_select_fn>)>>('gsl_ntuple_project');
  late final _gsl_ntuple_project = _gsl_ntuple_projectPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_histogram>,
          ffi.Pointer<gsl_ntuple>,
          ffi.Pointer<gsl_ntuple_value_fn>,
          ffi.Pointer<gsl_ntuple_select_fn>)>();

  int gsl_ntuple_close(
    ffi.Pointer<gsl_ntuple> ntuple,
  ) {
    return _gsl_ntuple_close(
      ntuple,
    );
  }

  late final _gsl_ntuple_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<gsl_ntuple>)>>(
          'gsl_ntuple_close');
  late final _gsl_ntuple_close =
      _gsl_ntuple_closePtr.asFunction<int Function(ffi.Pointer<gsl_ntuple>)>();

  void gsl_message(
    ffi.Pointer<ffi.Int8> message,
    ffi.Pointer<ffi.Int8> file,
    int line,
    int mask,
  ) {
    return _gsl_message(
      message,
      file,
      line,
      mask,
    );
  }

  late final _gsl_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, ffi.Uint32)>>('gsl_message');
  late final _gsl_message = _gsl_messagePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, int)>();

  late final ffi.Pointer<ffi.Uint32> _gsl_message_mask =
      _lookup<ffi.Uint32>('gsl_message_mask');

  int get gsl_message_mask => _gsl_message_mask.value;

  set gsl_message_mask(int value) => _gsl_message_mask.value = value;

  int gsl_fft_halfcomplex_float_radix2_backward(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_float_radix2_backward(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_float_radix2_backwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_fft_halfcomplex_float_radix2_backward');
  late final _gsl_fft_halfcomplex_float_radix2_backward =
      _gsl_fft_halfcomplex_float_radix2_backwardPtr
          .asFunction<int Function(ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_fft_halfcomplex_float_radix2_inverse(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_float_radix2_inverse(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_float_radix2_inversePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_fft_halfcomplex_float_radix2_inverse');
  late final _gsl_fft_halfcomplex_float_radix2_inverse =
      _gsl_fft_halfcomplex_float_radix2_inversePtr
          .asFunction<int Function(ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_fft_halfcomplex_float_radix2_transform(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_float_radix2_transform(
      data,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_float_radix2_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, size_t,
              size_t)>>('gsl_fft_halfcomplex_float_radix2_transform');
  late final _gsl_fft_halfcomplex_float_radix2_transform =
      _gsl_fft_halfcomplex_float_radix2_transformPtr
          .asFunction<int Function(ffi.Pointer<ffi.Float>, int, int)>();

  ffi.Pointer<gsl_fft_halfcomplex_wavetable_float>
      gsl_fft_halfcomplex_wavetable_float_alloc(
    int n,
  ) {
    return _gsl_fft_halfcomplex_wavetable_float_alloc(
      n,
    );
  }

  late final _gsl_fft_halfcomplex_wavetable_float_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_fft_halfcomplex_wavetable_float> Function(
              size_t)>>('gsl_fft_halfcomplex_wavetable_float_alloc');
  late final _gsl_fft_halfcomplex_wavetable_float_alloc =
      _gsl_fft_halfcomplex_wavetable_float_allocPtr.asFunction<
          ffi.Pointer<gsl_fft_halfcomplex_wavetable_float> Function(int)>();

  void gsl_fft_halfcomplex_wavetable_float_free(
    ffi.Pointer<gsl_fft_halfcomplex_wavetable_float> wavetable,
  ) {
    return _gsl_fft_halfcomplex_wavetable_float_free(
      wavetable,
    );
  }

  late final _gsl_fft_halfcomplex_wavetable_float_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<gsl_fft_halfcomplex_wavetable_float>)>>(
      'gsl_fft_halfcomplex_wavetable_float_free');
  late final _gsl_fft_halfcomplex_wavetable_float_free =
      _gsl_fft_halfcomplex_wavetable_float_freePtr.asFunction<
          void Function(ffi.Pointer<gsl_fft_halfcomplex_wavetable_float>)>();

  int gsl_fft_halfcomplex_float_backward(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_halfcomplex_wavetable_float> wavetable,
    ffi.Pointer<gsl_fft_real_workspace_float> work,
  ) {
    return _gsl_fft_halfcomplex_float_backward(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_halfcomplex_float_backwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Float>,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_halfcomplex_wavetable_float>,
                  ffi.Pointer<gsl_fft_real_workspace_float>)>>(
      'gsl_fft_halfcomplex_float_backward');
  late final _gsl_fft_halfcomplex_float_backward =
      _gsl_fft_halfcomplex_float_backwardPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>,
              int,
              int,
              ffi.Pointer<gsl_fft_halfcomplex_wavetable_float>,
              ffi.Pointer<gsl_fft_real_workspace_float>)>();

  int gsl_fft_halfcomplex_float_inverse(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_halfcomplex_wavetable_float> wavetable,
    ffi.Pointer<gsl_fft_real_workspace_float> work,
  ) {
    return _gsl_fft_halfcomplex_float_inverse(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_halfcomplex_float_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Float>,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_halfcomplex_wavetable_float>,
                  ffi.Pointer<gsl_fft_real_workspace_float>)>>(
      'gsl_fft_halfcomplex_float_inverse');
  late final _gsl_fft_halfcomplex_float_inverse =
      _gsl_fft_halfcomplex_float_inversePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>,
              int,
              int,
              ffi.Pointer<gsl_fft_halfcomplex_wavetable_float>,
              ffi.Pointer<gsl_fft_real_workspace_float>)>();

  int gsl_fft_halfcomplex_float_transform(
    ffi.Pointer<ffi.Float> data,
    int stride,
    int n,
    ffi.Pointer<gsl_fft_halfcomplex_wavetable_float> wavetable,
    ffi.Pointer<gsl_fft_real_workspace_float> work,
  ) {
    return _gsl_fft_halfcomplex_float_transform(
      data,
      stride,
      n,
      wavetable,
      work,
    );
  }

  late final _gsl_fft_halfcomplex_float_transformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Float>,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_fft_halfcomplex_wavetable_float>,
                  ffi.Pointer<gsl_fft_real_workspace_float>)>>(
      'gsl_fft_halfcomplex_float_transform');
  late final _gsl_fft_halfcomplex_float_transform =
      _gsl_fft_halfcomplex_float_transformPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>,
              int,
              int,
              ffi.Pointer<gsl_fft_halfcomplex_wavetable_float>,
              ffi.Pointer<gsl_fft_real_workspace_float>)>();

  int gsl_fft_halfcomplex_float_unpack(
    ffi.Pointer<ffi.Float> halfcomplex_coefficient,
    ffi.Pointer<ffi.Float> complex_coefficient,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_float_unpack(
      halfcomplex_coefficient,
      complex_coefficient,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_float_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              size_t, size_t)>>('gsl_fft_halfcomplex_float_unpack');
  late final _gsl_fft_halfcomplex_float_unpack =
      _gsl_fft_halfcomplex_float_unpackPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_fft_halfcomplex_float_radix2_unpack(
    ffi.Pointer<ffi.Float> halfcomplex_coefficient,
    ffi.Pointer<ffi.Float> complex_coefficient,
    int stride,
    int n,
  ) {
    return _gsl_fft_halfcomplex_float_radix2_unpack(
      halfcomplex_coefficient,
      complex_coefficient,
      stride,
      n,
    );
  }

  late final _gsl_fft_halfcomplex_float_radix2_unpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>,
              size_t, size_t)>>('gsl_fft_halfcomplex_float_radix2_unpack');
  late final _gsl_fft_halfcomplex_float_radix2_unpack =
      _gsl_fft_halfcomplex_float_radix2_unpackPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>, int, int)>();

  int gsl_wavelet2d_transform(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<ffi.Double> data,
    int tda,
    int size1,
    int size2,
    int dir,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_transform(
      w,
      data,
      tda,
      size1,
      size2,
      dir,
      work,
    );
  }

  late final _gsl_wavelet2d_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_wavelet>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              size_t,
              ffi.Int32,
              ffi.Pointer<gsl_wavelet_workspace>)>>('gsl_wavelet2d_transform');
  late final _gsl_wavelet2d_transform = _gsl_wavelet2d_transformPtr.asFunction<
      int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<ffi.Double>, int, int,
          int, int, ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_transform_forward(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<ffi.Double> data,
    int tda,
    int size1,
    int size2,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_transform_forward(
      w,
      data,
      tda,
      size1,
      size2,
      work,
    );
  }

  late final _gsl_wavelet2d_transform_forwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_transform_forward');
  late final _gsl_wavelet2d_transform_forward =
      _gsl_wavelet2d_transform_forwardPtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<ffi.Double>, int,
              int, int, ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_transform_inverse(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<ffi.Double> data,
    int tda,
    int size1,
    int size2,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_transform_inverse(
      w,
      data,
      tda,
      size1,
      size2,
      work,
    );
  }

  late final _gsl_wavelet2d_transform_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_transform_inverse');
  late final _gsl_wavelet2d_transform_inverse =
      _gsl_wavelet2d_transform_inversePtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<ffi.Double>, int,
              int, int, ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_nstransform(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<ffi.Double> data,
    int tda,
    int size1,
    int size2,
    int dir,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_nstransform(
      w,
      data,
      tda,
      size1,
      size2,
      dir,
      work,
    );
  }

  late final _gsl_wavelet2d_nstransformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  size_t,
                  ffi.Int32,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_nstransform');
  late final _gsl_wavelet2d_nstransform =
      _gsl_wavelet2d_nstransformPtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<ffi.Double>, int,
              int, int, int, ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_nstransform_forward(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<ffi.Double> data,
    int tda,
    int size1,
    int size2,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_nstransform_forward(
      w,
      data,
      tda,
      size1,
      size2,
      work,
    );
  }

  late final _gsl_wavelet2d_nstransform_forwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_nstransform_forward');
  late final _gsl_wavelet2d_nstransform_forward =
      _gsl_wavelet2d_nstransform_forwardPtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<ffi.Double>, int,
              int, int, ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_nstransform_inverse(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<ffi.Double> data,
    int tda,
    int size1,
    int size2,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_nstransform_inverse(
      w,
      data,
      tda,
      size1,
      size2,
      work,
    );
  }

  late final _gsl_wavelet2d_nstransform_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<ffi.Double>,
                  size_t,
                  size_t,
                  size_t,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_nstransform_inverse');
  late final _gsl_wavelet2d_nstransform_inverse =
      _gsl_wavelet2d_nstransform_inversePtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<ffi.Double>, int,
              int, int, ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_transform_matrix(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<gsl_matrix> a,
    int dir,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_transform_matrix(
      w,
      a,
      dir,
      work,
    );
  }

  late final _gsl_wavelet2d_transform_matrixPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Int32,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_transform_matrix');
  late final _gsl_wavelet2d_transform_matrix =
      _gsl_wavelet2d_transform_matrixPtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<gsl_matrix>, int,
              ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_transform_matrix_forward(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_transform_matrix_forward(
      w,
      a,
      work,
    );
  }

  late final _gsl_wavelet2d_transform_matrix_forwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_transform_matrix_forward');
  late final _gsl_wavelet2d_transform_matrix_forward =
      _gsl_wavelet2d_transform_matrix_forwardPtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_transform_matrix_inverse(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_transform_matrix_inverse(
      w,
      a,
      work,
    );
  }

  late final _gsl_wavelet2d_transform_matrix_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_transform_matrix_inverse');
  late final _gsl_wavelet2d_transform_matrix_inverse =
      _gsl_wavelet2d_transform_matrix_inversePtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_nstransform_matrix(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<gsl_matrix> a,
    int dir,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_nstransform_matrix(
      w,
      a,
      dir,
      work,
    );
  }

  late final _gsl_wavelet2d_nstransform_matrixPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Int32,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_nstransform_matrix');
  late final _gsl_wavelet2d_nstransform_matrix =
      _gsl_wavelet2d_nstransform_matrixPtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<gsl_matrix>, int,
              ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_nstransform_matrix_forward(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_nstransform_matrix_forward(
      w,
      a,
      work,
    );
  }

  late final _gsl_wavelet2d_nstransform_matrix_forwardPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_nstransform_matrix_forward');
  late final _gsl_wavelet2d_nstransform_matrix_forward =
      _gsl_wavelet2d_nstransform_matrix_forwardPtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_wavelet2d_nstransform_matrix_inverse(
    ffi.Pointer<gsl_wavelet> w,
    ffi.Pointer<gsl_matrix> a,
    ffi.Pointer<gsl_wavelet_workspace> work,
  ) {
    return _gsl_wavelet2d_nstransform_matrix_inverse(
      w,
      a,
      work,
    );
  }

  late final _gsl_wavelet2d_nstransform_matrix_inversePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<gsl_wavelet>,
                  ffi.Pointer<gsl_matrix>,
                  ffi.Pointer<gsl_wavelet_workspace>)>>(
      'gsl_wavelet2d_nstransform_matrix_inverse');
  late final _gsl_wavelet2d_nstransform_matrix_inverse =
      _gsl_wavelet2d_nstransform_matrix_inversePtr.asFunction<
          int Function(ffi.Pointer<gsl_wavelet>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_wavelet_workspace>)>();

  int gsl_multimin_diff(
    ffi.Pointer<gsl_multimin_function> f,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> g,
  ) {
    return _gsl_multimin_diff(
      f,
      x,
      g,
    );
  }

  late final _gsl_multimin_diffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multimin_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multimin_diff');
  late final _gsl_multimin_diff = _gsl_multimin_diffPtr.asFunction<
      int Function(ffi.Pointer<gsl_multimin_function>, ffi.Pointer<gsl_vector>,
          ffi.Pointer<gsl_vector>)>();

  ffi.Pointer<gsl_multimin_fminimizer> gsl_multimin_fminimizer_alloc(
    ffi.Pointer<gsl_multimin_fminimizer_type> T,
    int n,
  ) {
    return _gsl_multimin_fminimizer_alloc(
      T,
      n,
    );
  }

  late final _gsl_multimin_fminimizer_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multimin_fminimizer> Function(
              ffi.Pointer<gsl_multimin_fminimizer_type>,
              size_t)>>('gsl_multimin_fminimizer_alloc');
  late final _gsl_multimin_fminimizer_alloc =
      _gsl_multimin_fminimizer_allocPtr.asFunction<
          ffi.Pointer<gsl_multimin_fminimizer> Function(
              ffi.Pointer<gsl_multimin_fminimizer_type>, int)>();

  int gsl_multimin_fminimizer_set(
    ffi.Pointer<gsl_multimin_fminimizer> s,
    ffi.Pointer<gsl_multimin_function> f,
    ffi.Pointer<gsl_vector> x,
    ffi.Pointer<gsl_vector> step_size,
  ) {
    return _gsl_multimin_fminimizer_set(
      s,
      f,
      x,
      step_size,
    );
  }

  late final _gsl_multimin_fminimizer_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multimin_fminimizer>,
              ffi.Pointer<gsl_multimin_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>>('gsl_multimin_fminimizer_set');
  late final _gsl_multimin_fminimizer_set =
      _gsl_multimin_fminimizer_setPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multimin_fminimizer>,
              ffi.Pointer<gsl_multimin_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>();

  void gsl_multimin_fminimizer_free(
    ffi.Pointer<gsl_multimin_fminimizer> s,
  ) {
    return _gsl_multimin_fminimizer_free(
      s,
    );
  }

  late final _gsl_multimin_fminimizer_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multimin_fminimizer>)>>(
      'gsl_multimin_fminimizer_free');
  late final _gsl_multimin_fminimizer_free = _gsl_multimin_fminimizer_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_multimin_fminimizer>)>();

  ffi.Pointer<ffi.Int8> gsl_multimin_fminimizer_name(
    ffi.Pointer<gsl_multimin_fminimizer> s,
  ) {
    return _gsl_multimin_fminimizer_name(
      s,
    );
  }

  late final _gsl_multimin_fminimizer_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multimin_fminimizer>)>>(
      'gsl_multimin_fminimizer_name');
  late final _gsl_multimin_fminimizer_name =
      _gsl_multimin_fminimizer_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multimin_fminimizer>)>();

  int gsl_multimin_fminimizer_iterate(
    ffi.Pointer<gsl_multimin_fminimizer> s,
  ) {
    return _gsl_multimin_fminimizer_iterate(
      s,
    );
  }

  late final _gsl_multimin_fminimizer_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_multimin_fminimizer>)>>(
      'gsl_multimin_fminimizer_iterate');
  late final _gsl_multimin_fminimizer_iterate =
      _gsl_multimin_fminimizer_iteratePtr
          .asFunction<int Function(ffi.Pointer<gsl_multimin_fminimizer>)>();

  ffi.Pointer<gsl_vector> gsl_multimin_fminimizer_x(
    ffi.Pointer<gsl_multimin_fminimizer> s,
  ) {
    return _gsl_multimin_fminimizer_x(
      s,
    );
  }

  late final _gsl_multimin_fminimizer_xPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multimin_fminimizer>)>>(
      'gsl_multimin_fminimizer_x');
  late final _gsl_multimin_fminimizer_x =
      _gsl_multimin_fminimizer_xPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multimin_fminimizer>)>();

  double gsl_multimin_fminimizer_minimum(
    ffi.Pointer<gsl_multimin_fminimizer> s,
  ) {
    return _gsl_multimin_fminimizer_minimum(
      s,
    );
  }

  late final _gsl_multimin_fminimizer_minimumPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<gsl_multimin_fminimizer>)>>(
      'gsl_multimin_fminimizer_minimum');
  late final _gsl_multimin_fminimizer_minimum =
      _gsl_multimin_fminimizer_minimumPtr
          .asFunction<double Function(ffi.Pointer<gsl_multimin_fminimizer>)>();

  double gsl_multimin_fminimizer_size(
    ffi.Pointer<gsl_multimin_fminimizer> s,
  ) {
    return _gsl_multimin_fminimizer_size(
      s,
    );
  }

  late final _gsl_multimin_fminimizer_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<gsl_multimin_fminimizer>)>>(
      'gsl_multimin_fminimizer_size');
  late final _gsl_multimin_fminimizer_size = _gsl_multimin_fminimizer_sizePtr
      .asFunction<double Function(ffi.Pointer<gsl_multimin_fminimizer>)>();

  int gsl_multimin_test_gradient(
    ffi.Pointer<gsl_vector> g,
    double epsabs,
  ) {
    return _gsl_multimin_test_gradient(
      g,
      epsabs,
    );
  }

  late final _gsl_multimin_test_gradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>,
              ffi.Double)>>('gsl_multimin_test_gradient');
  late final _gsl_multimin_test_gradient = _gsl_multimin_test_gradientPtr
      .asFunction<int Function(ffi.Pointer<gsl_vector>, double)>();

  int gsl_multimin_test_size(
    double size,
    double epsabs,
  ) {
    return _gsl_multimin_test_size(
      size,
      epsabs,
    );
  }

  late final _gsl_multimin_test_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Double, ffi.Double)>>(
          'gsl_multimin_test_size');
  late final _gsl_multimin_test_size =
      _gsl_multimin_test_sizePtr.asFunction<int Function(double, double)>();

  ffi.Pointer<gsl_multimin_fdfminimizer> gsl_multimin_fdfminimizer_alloc(
    ffi.Pointer<gsl_multimin_fdfminimizer_type> T,
    int n,
  ) {
    return _gsl_multimin_fdfminimizer_alloc(
      T,
      n,
    );
  }

  late final _gsl_multimin_fdfminimizer_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_multimin_fdfminimizer> Function(
              ffi.Pointer<gsl_multimin_fdfminimizer_type>,
              size_t)>>('gsl_multimin_fdfminimizer_alloc');
  late final _gsl_multimin_fdfminimizer_alloc =
      _gsl_multimin_fdfminimizer_allocPtr.asFunction<
          ffi.Pointer<gsl_multimin_fdfminimizer> Function(
              ffi.Pointer<gsl_multimin_fdfminimizer_type>, int)>();

  int gsl_multimin_fdfminimizer_set(
    ffi.Pointer<gsl_multimin_fdfminimizer> s,
    ffi.Pointer<gsl_multimin_function_fdf> fdf,
    ffi.Pointer<gsl_vector> x,
    double step_size,
    double tol,
  ) {
    return _gsl_multimin_fdfminimizer_set(
      s,
      fdf,
      x,
      step_size,
      tol,
    );
  }

  late final _gsl_multimin_fdfminimizer_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_multimin_fdfminimizer>,
              ffi.Pointer<gsl_multimin_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Double)>>('gsl_multimin_fdfminimizer_set');
  late final _gsl_multimin_fdfminimizer_set =
      _gsl_multimin_fdfminimizer_setPtr.asFunction<
          int Function(
              ffi.Pointer<gsl_multimin_fdfminimizer>,
              ffi.Pointer<gsl_multimin_function_fdf>,
              ffi.Pointer<gsl_vector>,
              double,
              double)>();

  void gsl_multimin_fdfminimizer_free(
    ffi.Pointer<gsl_multimin_fdfminimizer> s,
  ) {
    return _gsl_multimin_fdfminimizer_free(
      s,
    );
  }

  late final _gsl_multimin_fdfminimizer_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_multimin_fdfminimizer>)>>(
      'gsl_multimin_fdfminimizer_free');
  late final _gsl_multimin_fdfminimizer_free =
      _gsl_multimin_fdfminimizer_freePtr
          .asFunction<void Function(ffi.Pointer<gsl_multimin_fdfminimizer>)>();

  ffi.Pointer<ffi.Int8> gsl_multimin_fdfminimizer_name(
    ffi.Pointer<gsl_multimin_fdfminimizer> s,
  ) {
    return _gsl_multimin_fdfminimizer_name(
      s,
    );
  }

  late final _gsl_multimin_fdfminimizer_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int8> Function(
                  ffi.Pointer<gsl_multimin_fdfminimizer>)>>(
      'gsl_multimin_fdfminimizer_name');
  late final _gsl_multimin_fdfminimizer_name =
      _gsl_multimin_fdfminimizer_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<gsl_multimin_fdfminimizer>)>();

  int gsl_multimin_fdfminimizer_iterate(
    ffi.Pointer<gsl_multimin_fdfminimizer> s,
  ) {
    return _gsl_multimin_fdfminimizer_iterate(
      s,
    );
  }

  late final _gsl_multimin_fdfminimizer_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_multimin_fdfminimizer>)>>(
      'gsl_multimin_fdfminimizer_iterate');
  late final _gsl_multimin_fdfminimizer_iterate =
      _gsl_multimin_fdfminimizer_iteratePtr
          .asFunction<int Function(ffi.Pointer<gsl_multimin_fdfminimizer>)>();

  int gsl_multimin_fdfminimizer_restart(
    ffi.Pointer<gsl_multimin_fdfminimizer> s,
  ) {
    return _gsl_multimin_fdfminimizer_restart(
      s,
    );
  }

  late final _gsl_multimin_fdfminimizer_restartPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<gsl_multimin_fdfminimizer>)>>(
      'gsl_multimin_fdfminimizer_restart');
  late final _gsl_multimin_fdfminimizer_restart =
      _gsl_multimin_fdfminimizer_restartPtr
          .asFunction<int Function(ffi.Pointer<gsl_multimin_fdfminimizer>)>();

  ffi.Pointer<gsl_vector> gsl_multimin_fdfminimizer_x(
    ffi.Pointer<gsl_multimin_fdfminimizer> s,
  ) {
    return _gsl_multimin_fdfminimizer_x(
      s,
    );
  }

  late final _gsl_multimin_fdfminimizer_xPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multimin_fdfminimizer>)>>(
      'gsl_multimin_fdfminimizer_x');
  late final _gsl_multimin_fdfminimizer_x =
      _gsl_multimin_fdfminimizer_xPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multimin_fdfminimizer>)>();

  ffi.Pointer<gsl_vector> gsl_multimin_fdfminimizer_dx(
    ffi.Pointer<gsl_multimin_fdfminimizer> s,
  ) {
    return _gsl_multimin_fdfminimizer_dx(
      s,
    );
  }

  late final _gsl_multimin_fdfminimizer_dxPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multimin_fdfminimizer>)>>(
      'gsl_multimin_fdfminimizer_dx');
  late final _gsl_multimin_fdfminimizer_dx =
      _gsl_multimin_fdfminimizer_dxPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multimin_fdfminimizer>)>();

  ffi.Pointer<gsl_vector> gsl_multimin_fdfminimizer_gradient(
    ffi.Pointer<gsl_multimin_fdfminimizer> s,
  ) {
    return _gsl_multimin_fdfminimizer_gradient(
      s,
    );
  }

  late final _gsl_multimin_fdfminimizer_gradientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<gsl_vector> Function(
                  ffi.Pointer<gsl_multimin_fdfminimizer>)>>(
      'gsl_multimin_fdfminimizer_gradient');
  late final _gsl_multimin_fdfminimizer_gradient =
      _gsl_multimin_fdfminimizer_gradientPtr.asFunction<
          ffi.Pointer<gsl_vector> Function(
              ffi.Pointer<gsl_multimin_fdfminimizer>)>();

  double gsl_multimin_fdfminimizer_minimum(
    ffi.Pointer<gsl_multimin_fdfminimizer> s,
  ) {
    return _gsl_multimin_fdfminimizer_minimum(
      s,
    );
  }

  late final _gsl_multimin_fdfminimizer_minimumPtr = _lookup<
          ffi.NativeFunction<
              ffi.Double Function(ffi.Pointer<gsl_multimin_fdfminimizer>)>>(
      'gsl_multimin_fdfminimizer_minimum');
  late final _gsl_multimin_fdfminimizer_minimum =
      _gsl_multimin_fdfminimizer_minimumPtr.asFunction<
          double Function(ffi.Pointer<gsl_multimin_fdfminimizer>)>();

  late final ffi.Pointer<ffi.Pointer<gsl_multimin_fdfminimizer_type>>
      _gsl_multimin_fdfminimizer_steepest_descent =
      _lookup<ffi.Pointer<gsl_multimin_fdfminimizer_type>>(
          'gsl_multimin_fdfminimizer_steepest_descent');

  ffi.Pointer<gsl_multimin_fdfminimizer_type>
      get gsl_multimin_fdfminimizer_steepest_descent =>
          _gsl_multimin_fdfminimizer_steepest_descent.value;

  set gsl_multimin_fdfminimizer_steepest_descent(
          ffi.Pointer<gsl_multimin_fdfminimizer_type> value) =>
      _gsl_multimin_fdfminimizer_steepest_descent.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multimin_fdfminimizer_type>>
      _gsl_multimin_fdfminimizer_conjugate_pr =
      _lookup<ffi.Pointer<gsl_multimin_fdfminimizer_type>>(
          'gsl_multimin_fdfminimizer_conjugate_pr');

  ffi.Pointer<gsl_multimin_fdfminimizer_type>
      get gsl_multimin_fdfminimizer_conjugate_pr =>
          _gsl_multimin_fdfminimizer_conjugate_pr.value;

  set gsl_multimin_fdfminimizer_conjugate_pr(
          ffi.Pointer<gsl_multimin_fdfminimizer_type> value) =>
      _gsl_multimin_fdfminimizer_conjugate_pr.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multimin_fdfminimizer_type>>
      _gsl_multimin_fdfminimizer_conjugate_fr =
      _lookup<ffi.Pointer<gsl_multimin_fdfminimizer_type>>(
          'gsl_multimin_fdfminimizer_conjugate_fr');

  ffi.Pointer<gsl_multimin_fdfminimizer_type>
      get gsl_multimin_fdfminimizer_conjugate_fr =>
          _gsl_multimin_fdfminimizer_conjugate_fr.value;

  set gsl_multimin_fdfminimizer_conjugate_fr(
          ffi.Pointer<gsl_multimin_fdfminimizer_type> value) =>
      _gsl_multimin_fdfminimizer_conjugate_fr.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multimin_fdfminimizer_type>>
      _gsl_multimin_fdfminimizer_vector_bfgs =
      _lookup<ffi.Pointer<gsl_multimin_fdfminimizer_type>>(
          'gsl_multimin_fdfminimizer_vector_bfgs');

  ffi.Pointer<gsl_multimin_fdfminimizer_type>
      get gsl_multimin_fdfminimizer_vector_bfgs =>
          _gsl_multimin_fdfminimizer_vector_bfgs.value;

  set gsl_multimin_fdfminimizer_vector_bfgs(
          ffi.Pointer<gsl_multimin_fdfminimizer_type> value) =>
      _gsl_multimin_fdfminimizer_vector_bfgs.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multimin_fdfminimizer_type>>
      _gsl_multimin_fdfminimizer_vector_bfgs2 =
      _lookup<ffi.Pointer<gsl_multimin_fdfminimizer_type>>(
          'gsl_multimin_fdfminimizer_vector_bfgs2');

  ffi.Pointer<gsl_multimin_fdfminimizer_type>
      get gsl_multimin_fdfminimizer_vector_bfgs2 =>
          _gsl_multimin_fdfminimizer_vector_bfgs2.value;

  set gsl_multimin_fdfminimizer_vector_bfgs2(
          ffi.Pointer<gsl_multimin_fdfminimizer_type> value) =>
      _gsl_multimin_fdfminimizer_vector_bfgs2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multimin_fminimizer_type>>
      _gsl_multimin_fminimizer_nmsimplex =
      _lookup<ffi.Pointer<gsl_multimin_fminimizer_type>>(
          'gsl_multimin_fminimizer_nmsimplex');

  ffi.Pointer<gsl_multimin_fminimizer_type>
      get gsl_multimin_fminimizer_nmsimplex =>
          _gsl_multimin_fminimizer_nmsimplex.value;

  set gsl_multimin_fminimizer_nmsimplex(
          ffi.Pointer<gsl_multimin_fminimizer_type> value) =>
      _gsl_multimin_fminimizer_nmsimplex.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multimin_fminimizer_type>>
      _gsl_multimin_fminimizer_nmsimplex2 =
      _lookup<ffi.Pointer<gsl_multimin_fminimizer_type>>(
          'gsl_multimin_fminimizer_nmsimplex2');

  ffi.Pointer<gsl_multimin_fminimizer_type>
      get gsl_multimin_fminimizer_nmsimplex2 =>
          _gsl_multimin_fminimizer_nmsimplex2.value;

  set gsl_multimin_fminimizer_nmsimplex2(
          ffi.Pointer<gsl_multimin_fminimizer_type> value) =>
      _gsl_multimin_fminimizer_nmsimplex2.value = value;

  late final ffi.Pointer<ffi.Pointer<gsl_multimin_fminimizer_type>>
      _gsl_multimin_fminimizer_nmsimplex2rand =
      _lookup<ffi.Pointer<gsl_multimin_fminimizer_type>>(
          'gsl_multimin_fminimizer_nmsimplex2rand');

  ffi.Pointer<gsl_multimin_fminimizer_type>
      get gsl_multimin_fminimizer_nmsimplex2rand =>
          _gsl_multimin_fminimizer_nmsimplex2rand.value;

  set gsl_multimin_fminimizer_nmsimplex2rand(
          ffi.Pointer<gsl_multimin_fminimizer_type> value) =>
      _gsl_multimin_fminimizer_nmsimplex2rand.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _gsl_version =
      _lookup<ffi.Pointer<ffi.Int8>>('gsl_version');

  ffi.Pointer<ffi.Int8> get gsl_version => _gsl_version.value;

  set gsl_version(ffi.Pointer<ffi.Int8> value) => _gsl_version.value = value;

  int gsl_spblas_dgemv(
    int TransA,
    double alpha,
    ffi.Pointer<gsl_spmatrix> A,
    ffi.Pointer<gsl_vector> x,
    double beta,
    ffi.Pointer<gsl_vector> y,
  ) {
    return _gsl_spblas_dgemv(
      TransA,
      alpha,
      A,
      x,
      beta,
      y,
    );
  }

  late final _gsl_spblas_dgemvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Pointer<gsl_vector>)>>('gsl_spblas_dgemv');
  late final _gsl_spblas_dgemv = _gsl_spblas_dgemvPtr.asFunction<
      int Function(int, double, ffi.Pointer<gsl_spmatrix>,
          ffi.Pointer<gsl_vector>, double, ffi.Pointer<gsl_vector>)>();

  int gsl_spblas_dgemm(
    double alpha,
    ffi.Pointer<gsl_spmatrix> A,
    ffi.Pointer<gsl_spmatrix> B,
    ffi.Pointer<gsl_spmatrix> C,
  ) {
    return _gsl_spblas_dgemm(
      alpha,
      A,
      B,
      C,
    );
  }

  late final _gsl_spblas_dgemmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_spmatrix>)>>('gsl_spblas_dgemm');
  late final _gsl_spblas_dgemm = _gsl_spblas_dgemmPtr.asFunction<
      int Function(double, ffi.Pointer<gsl_spmatrix>, ffi.Pointer<gsl_spmatrix>,
          ffi.Pointer<gsl_spmatrix>)>();

  int gsl_spblas_scatter(
    ffi.Pointer<gsl_spmatrix> A,
    int j,
    double alpha,
    ffi.Pointer<ffi.Int32> w,
    ffi.Pointer<ffi.Double> x,
    int mark,
    ffi.Pointer<gsl_spmatrix> C,
    int nz,
  ) {
    return _gsl_spblas_scatter(
      A,
      j,
      alpha,
      w,
      x,
      mark,
      C,
      nz,
    );
  }

  late final _gsl_spblas_scatterPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<gsl_spmatrix>,
              size_t,
              ffi.Double,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<gsl_spmatrix>,
              size_t)>>('gsl_spblas_scatter');
  late final _gsl_spblas_scatter = _gsl_spblas_scatterPtr.asFunction<
      int Function(
          ffi.Pointer<gsl_spmatrix>,
          int,
          double,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Double>,
          int,
          ffi.Pointer<gsl_spmatrix>,
          int)>();

  int gsl_monte_vegas_integrate(
    ffi.Pointer<gsl_monte_function> f,
    ffi.Pointer<ffi.Double> xl,
    ffi.Pointer<ffi.Double> xu,
    int dim,
    int calls,
    ffi.Pointer<gsl_rng> r,
    ffi.Pointer<gsl_monte_vegas_state> state,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> abserr,
  ) {
    return _gsl_monte_vegas_integrate(
      f,
      xl,
      xu,
      dim,
      calls,
      r,
      state,
      result,
      abserr,
    );
  }

  late final _gsl_monte_vegas_integratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_monte_function>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<gsl_monte_vegas_state>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_monte_vegas_integrate');
  late final _gsl_monte_vegas_integrate =
      _gsl_monte_vegas_integratePtr.asFunction<
          int Function(
              ffi.Pointer<gsl_monte_function>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              int,
              int,
              ffi.Pointer<gsl_rng>,
              ffi.Pointer<gsl_monte_vegas_state>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<gsl_monte_vegas_state> gsl_monte_vegas_alloc(
    int dim,
  ) {
    return _gsl_monte_vegas_alloc(
      dim,
    );
  }

  late final _gsl_monte_vegas_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<gsl_monte_vegas_state> Function(
              size_t)>>('gsl_monte_vegas_alloc');
  late final _gsl_monte_vegas_alloc = _gsl_monte_vegas_allocPtr
      .asFunction<ffi.Pointer<gsl_monte_vegas_state> Function(int)>();

  int gsl_monte_vegas_init(
    ffi.Pointer<gsl_monte_vegas_state> state,
  ) {
    return _gsl_monte_vegas_init(
      state,
    );
  }

  late final _gsl_monte_vegas_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_monte_vegas_state>)>>('gsl_monte_vegas_init');
  late final _gsl_monte_vegas_init = _gsl_monte_vegas_initPtr
      .asFunction<int Function(ffi.Pointer<gsl_monte_vegas_state>)>();

  void gsl_monte_vegas_free(
    ffi.Pointer<gsl_monte_vegas_state> state,
  ) {
    return _gsl_monte_vegas_free(
      state,
    );
  }

  late final _gsl_monte_vegas_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_monte_vegas_state>)>>('gsl_monte_vegas_free');
  late final _gsl_monte_vegas_free = _gsl_monte_vegas_freePtr
      .asFunction<void Function(ffi.Pointer<gsl_monte_vegas_state>)>();

  double gsl_monte_vegas_chisq(
    ffi.Pointer<gsl_monte_vegas_state> state,
  ) {
    return _gsl_monte_vegas_chisq(
      state,
    );
  }

  late final _gsl_monte_vegas_chisqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_monte_vegas_state>)>>('gsl_monte_vegas_chisq');
  late final _gsl_monte_vegas_chisq = _gsl_monte_vegas_chisqPtr
      .asFunction<double Function(ffi.Pointer<gsl_monte_vegas_state>)>();

  void gsl_monte_vegas_runval(
    ffi.Pointer<gsl_monte_vegas_state> state,
    ffi.Pointer<ffi.Double> result,
    ffi.Pointer<ffi.Double> sigma,
  ) {
    return _gsl_monte_vegas_runval(
      state,
      result,
      sigma,
    );
  }

  late final _gsl_monte_vegas_runvalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<gsl_monte_vegas_state>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('gsl_monte_vegas_runval');
  late final _gsl_monte_vegas_runval = _gsl_monte_vegas_runvalPtr.asFunction<
      void Function(ffi.Pointer<gsl_monte_vegas_state>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void gsl_monte_vegas_params_get(
    ffi.Pointer<gsl_monte_vegas_state> state,
    ffi.Pointer<gsl_monte_vegas_params> params,
  ) {
    return _gsl_monte_vegas_params_get(
      state,
      params,
    );
  }

  late final _gsl_monte_vegas_params_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_monte_vegas_state>,
                  ffi.Pointer<gsl_monte_vegas_params>)>>(
      'gsl_monte_vegas_params_get');
  late final _gsl_monte_vegas_params_get =
      _gsl_monte_vegas_params_getPtr.asFunction<
          void Function(ffi.Pointer<gsl_monte_vegas_state>,
              ffi.Pointer<gsl_monte_vegas_params>)>();

  void gsl_monte_vegas_params_set(
    ffi.Pointer<gsl_monte_vegas_state> state,
    ffi.Pointer<gsl_monte_vegas_params> params,
  ) {
    return _gsl_monte_vegas_params_set(
      state,
      params,
    );
  }

  late final _gsl_monte_vegas_params_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<gsl_monte_vegas_state>,
                  ffi.Pointer<gsl_monte_vegas_params>)>>(
      'gsl_monte_vegas_params_set');
  late final _gsl_monte_vegas_params_set =
      _gsl_monte_vegas_params_setPtr.asFunction<
          void Function(ffi.Pointer<gsl_monte_vegas_state>,
              ffi.Pointer<gsl_monte_vegas_params>)>();
}

class gsl_complex extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> dat;
}

class gsl_complex_long_double extends ffi.Opaque {}

class gsl_complex_float extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> dat;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

class wait extends ffi.Opaque {}

class __WAIT_STATUS extends ffi.Union {
  external ffi.Pointer<wait> __uptr;

  external ffi.Pointer<ffi.Int32> __iptr;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

typedef size_t = ffi.Uint64;

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __val;
}

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __time_t = ffi.Int64;
typedef __syscall_slong_t = ffi.Int64;

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __suseconds_t = ffi.Int64;

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Int64;

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external UnnamedStruct3 __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __futex;

  @ffi.Uint64()
  external int __total_seq;

  @ffi.Uint64()
  external int __wakeup_seq;

  @ffi.Uint64()
  external int __woken_seq;

  external ffi.Pointer<ffi.Void> __mutex;

  @ffi.Uint32()
  external int __nwaiters;

  @ffi.Uint32()
  external int __broadcast_seq;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external UnnamedStruct4 __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class UnnamedStruct4 extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __nr_readers;

  @ffi.Uint32()
  external int __readers_wakeup;

  @ffi.Uint32()
  external int __writer_wakeup;

  @ffi.Uint32()
  external int __nr_readers_queued;

  @ffi.Uint32()
  external int __nr_writers_queued;

  @ffi.Int32()
  external int __writer;

  @ffi.Int32()
  external int __shared;

  @ffi.Int8()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> __pad1;

  @ffi.Uint64()
  external int __pad2;

  @ffi.Uint32()
  external int __flags;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __old_x;

  @ffi.Uint16()
  external int __c;

  @ffi.Uint16()
  external int __init;

  @ffi.Uint64()
  external int __a;
}

typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef wchar_t = ffi.Int32;

class _IO_FILE extends ffi.Struct {
  @ffi.Int32()
  external int _flags;

  external ffi.Pointer<ffi.Int8> _IO_read_ptr;

  external ffi.Pointer<ffi.Int8> _IO_read_end;

  external ffi.Pointer<ffi.Int8> _IO_read_base;

  external ffi.Pointer<ffi.Int8> _IO_write_base;

  external ffi.Pointer<ffi.Int8> _IO_write_ptr;

  external ffi.Pointer<ffi.Int8> _IO_write_end;

  external ffi.Pointer<ffi.Int8> _IO_buf_base;

  external ffi.Pointer<ffi.Int8> _IO_buf_end;

  external ffi.Pointer<ffi.Int8> _IO_save_base;

  external ffi.Pointer<ffi.Int8> _IO_backup_base;

  external ffi.Pointer<ffi.Int8> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int32()
  external int _fileno;

  @ffi.Int32()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.Uint16()
  external int _cur_column;

  @ffi.Int8()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<ffi.Void> __pad1;

  external ffi.Pointer<ffi.Void> __pad2;

  external ffi.Pointer<ffi.Void> __pad3;

  external ffi.Pointer<ffi.Void> __pad4;

  @size_t()
  external int __pad5;

  @ffi.Int32()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Int8> _unused2;
}

class _IO_marker extends ffi.Struct {
  external ffi.Pointer<_IO_marker> _next;

  external ffi.Pointer<_IO_FILE> _sbuf;

  @ffi.Int32()
  external int _pos;
}

typedef __off_t = ffi.Int64;
typedef _IO_lock_t = ffi.Void;
typedef __off64_t = ffi.Int64;

class __mbstate_t extends ffi.Struct {
  @ffi.Int32()
  external int __count;

  external UnnamedUnion1 __value;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Uint32()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __wchb;
}

class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

class _IO_jump_t extends ffi.Opaque {}

abstract class __codecvt_result {
  static const int __codecvt_ok = 0;
  static const int __codecvt_partial = 1;
  static const int __codecvt_error = 2;
  static const int __codecvt_noconv = 3;
}

class _IO_FILE_plus extends ffi.Opaque {}

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef __ssize_t = ffi.Int64;
typedef FILE = _IO_FILE;
typedef fpos_t = _G_fpos_t;
typedef gsl_error_handler_t = ffi.NativeFunction<
    ffi.Void Function(
        ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32)>;
typedef gsl_stream_handler_t = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Int32,
        ffi.Pointer<ffi.Int8>)>;

class gsl_block_complex_float_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Float> data;
}

typedef gsl_block_complex_float = gsl_block_complex_float_struct;

class gsl_sum_levin_u_workspace extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int i;

  @size_t()
  external int terms_used;

  @ffi.Double()
  external double sum_plain;

  external ffi.Pointer<ffi.Double> q_num;

  external ffi.Pointer<ffi.Double> q_den;

  external ffi.Pointer<ffi.Double> dq_num;

  external ffi.Pointer<ffi.Double> dq_den;

  external ffi.Pointer<ffi.Double> dsum;
}

class gsl_sum_levin_utrunc_workspace extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int i;

  @size_t()
  external int terms_used;

  @ffi.Double()
  external double sum_plain;

  external ffi.Pointer<ffi.Double> q_num;

  external ffi.Pointer<ffi.Double> q_den;

  external ffi.Pointer<ffi.Double> dsum;
}

class gsl_sf_result_struct extends ffi.Struct {
  @ffi.Double()
  external double val;

  @ffi.Double()
  external double err;
}

class gsl_sf_result_e10_struct extends ffi.Struct {
  @ffi.Double()
  external double val;

  @ffi.Double()
  external double err;

  @ffi.Int32()
  external int e10;
}

typedef gsl_sf_result_e10 = gsl_sf_result_e10_struct;
typedef gsl_sf_result = gsl_sf_result_struct;

class gsl_block_long_double_struct extends ffi.Opaque {}

typedef gsl_block_long_double = gsl_block_long_double_struct;

class gsl_vector_long_double extends ffi.Opaque {}

class _gsl_vector_long_double_view extends ffi.Opaque {}

class _gsl_vector_long_double_const_view extends ffi.Opaque {}

class gsl_block_complex_long_double_struct extends ffi.Opaque {}

typedef gsl_block_complex_long_double = gsl_block_complex_long_double_struct;

class gsl_vector_complex_long_double extends ffi.Opaque {}

class _gsl_vector_complex_long_double_view extends ffi.Opaque {}

class _gsl_vector_complex_long_double_const_view extends ffi.Opaque {}

class gsl_block_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Double> data;
}

typedef gsl_block = gsl_block_struct;

class gsl_vector extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Double> data;

  external ffi.Pointer<gsl_block> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_view extends ffi.Struct {
  external gsl_vector vector;
}

class _gsl_vector_const_view extends ffi.Struct {
  external gsl_vector vector;
}

class gsl_block_complex_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Double> data;
}

typedef gsl_block_complex = gsl_block_complex_struct;

class gsl_vector_complex extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Double> data;

  external ffi.Pointer<gsl_block_complex> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_complex_view extends ffi.Struct {
  external gsl_vector_complex vector;
}

class _gsl_vector_complex_const_view extends ffi.Struct {
  external gsl_vector_complex vector;
}

class gsl_block_float_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Float> data;
}

typedef gsl_block_float = gsl_block_float_struct;

class gsl_vector_float extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Float> data;

  external ffi.Pointer<gsl_block_float> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_float_view extends ffi.Struct {
  external gsl_vector_float vector;
}

class _gsl_vector_float_const_view extends ffi.Struct {
  external gsl_vector_float vector;
}

class gsl_vector_complex_float extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Float> data;

  external ffi.Pointer<gsl_block_complex_float1> block;

  @ffi.Int32()
  external int owner;
}

typedef gsl_block_complex_float1 = gsl_block_complex_float_struct;

class _gsl_vector_complex_float_view extends ffi.Struct {
  external gsl_vector_complex_float vector;
}

class _gsl_vector_complex_float_const_view extends ffi.Struct {
  external gsl_vector_complex_float vector;
}

class gsl_block_ulong_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Uint64> data;
}

typedef gsl_block_ulong = gsl_block_ulong_struct;

class gsl_vector_ulong extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Uint64> data;

  external ffi.Pointer<gsl_block_ulong> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_ulong_view extends ffi.Struct {
  external gsl_vector_ulong vector;
}

class _gsl_vector_ulong_const_view extends ffi.Struct {
  external gsl_vector_ulong vector;
}

class gsl_block_long_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Int64> data;
}

typedef gsl_block_long = gsl_block_long_struct;

class gsl_vector_long extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Int64> data;

  external ffi.Pointer<gsl_block_long> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_long_view extends ffi.Struct {
  external gsl_vector_long vector;
}

class _gsl_vector_long_const_view extends ffi.Struct {
  external gsl_vector_long vector;
}

class gsl_block_uint_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Uint32> data;
}

typedef gsl_block_uint = gsl_block_uint_struct;

class gsl_vector_uint extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Uint32> data;

  external ffi.Pointer<gsl_block_uint> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_uint_view extends ffi.Struct {
  external gsl_vector_uint vector;
}

class _gsl_vector_uint_const_view extends ffi.Struct {
  external gsl_vector_uint vector;
}

class gsl_block_int_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Int32> data;
}

typedef gsl_block_int = gsl_block_int_struct;

class gsl_vector_int extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Int32> data;

  external ffi.Pointer<gsl_block_int> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_int_view extends ffi.Struct {
  external gsl_vector_int vector;
}

class _gsl_vector_int_const_view extends ffi.Struct {
  external gsl_vector_int vector;
}

class gsl_block_ushort_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Uint16> data;
}

typedef gsl_block_ushort = gsl_block_ushort_struct;

class gsl_vector_ushort extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Uint16> data;

  external ffi.Pointer<gsl_block_ushort> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_ushort_view extends ffi.Struct {
  external gsl_vector_ushort vector;
}

class _gsl_vector_ushort_const_view extends ffi.Struct {
  external gsl_vector_ushort vector;
}

class gsl_block_short_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Int16> data;
}

typedef gsl_block_short = gsl_block_short_struct;

class gsl_vector_short extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Int16> data;

  external ffi.Pointer<gsl_block_short> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_short_view extends ffi.Struct {
  external gsl_vector_short vector;
}

class _gsl_vector_short_const_view extends ffi.Struct {
  external gsl_vector_short vector;
}

class gsl_block_uchar_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Uint8> data;
}

typedef gsl_block_uchar = gsl_block_uchar_struct;

class gsl_vector_uchar extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Uint8> data;

  external ffi.Pointer<gsl_block_uchar> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_uchar_view extends ffi.Struct {
  external gsl_vector_uchar vector;
}

class _gsl_vector_uchar_const_view extends ffi.Struct {
  external gsl_vector_uchar vector;
}

class gsl_block_char_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Int8> data;
}

typedef gsl_block_char = gsl_block_char_struct;

class gsl_vector_char extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int stride;

  external ffi.Pointer<ffi.Int8> data;

  external ffi.Pointer<gsl_block_char> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_vector_char_view extends ffi.Struct {
  external gsl_vector_char vector;
}

class _gsl_vector_char_const_view extends ffi.Struct {
  external gsl_vector_char vector;
}

class max_align_t extends ffi.Opaque {}

abstract class CBLAS_ORDER {
  static const int CblasRowMajor = 101;
  static const int CblasColMajor = 102;
}

abstract class CBLAS_TRANSPOSE {
  static const int CblasNoTrans = 111;
  static const int CblasTrans = 112;
  static const int CblasConjTrans = 113;
}

abstract class CBLAS_UPLO {
  static const int CblasUpper = 121;
  static const int CblasLower = 122;
}

abstract class CBLAS_DIAG {
  static const int CblasNonUnit = 131;
  static const int CblasUnit = 132;
}

abstract class CBLAS_SIDE {
  static const int CblasLeft = 141;
  static const int CblasRight = 142;
}

class gsl_matrix_complex_long_double extends ffi.Opaque {}

class _gsl_matrix_complex_long_double_view extends ffi.Opaque {}

class _gsl_matrix_complex_long_double_const_view extends ffi.Opaque {}

class gsl_matrix_complex extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Double> data;

  external ffi.Pointer<gsl_block_complex> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_complex_view extends ffi.Struct {
  external gsl_matrix_complex matrix;
}

class _gsl_matrix_complex_const_view extends ffi.Struct {
  external gsl_matrix_complex matrix;
}

class gsl_matrix_complex_float extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Float> data;

  external ffi.Pointer<gsl_block_complex_float1> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_complex_float_view extends ffi.Struct {
  external gsl_matrix_complex_float matrix;
}

class _gsl_matrix_complex_float_const_view extends ffi.Struct {
  external gsl_matrix_complex_float matrix;
}

class gsl_matrix_long_double extends ffi.Opaque {}

class _gsl_matrix_long_double_view extends ffi.Opaque {}

class _gsl_matrix_long_double_const_view extends ffi.Opaque {}

class gsl_matrix extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Double> data;

  external ffi.Pointer<gsl_block> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_view extends ffi.Struct {
  external gsl_matrix matrix;
}

class _gsl_matrix_const_view extends ffi.Struct {
  external gsl_matrix matrix;
}

class gsl_matrix_float extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Float> data;

  external ffi.Pointer<gsl_block_float> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_float_view extends ffi.Struct {
  external gsl_matrix_float matrix;
}

class _gsl_matrix_float_const_view extends ffi.Struct {
  external gsl_matrix_float matrix;
}

class gsl_matrix_ulong extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Uint64> data;

  external ffi.Pointer<gsl_block_ulong> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_ulong_view extends ffi.Struct {
  external gsl_matrix_ulong matrix;
}

class _gsl_matrix_ulong_const_view extends ffi.Struct {
  external gsl_matrix_ulong matrix;
}

class gsl_matrix_long extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Int64> data;

  external ffi.Pointer<gsl_block_long> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_long_view extends ffi.Struct {
  external gsl_matrix_long matrix;
}

class _gsl_matrix_long_const_view extends ffi.Struct {
  external gsl_matrix_long matrix;
}

class gsl_matrix_uint extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Uint32> data;

  external ffi.Pointer<gsl_block_uint> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_uint_view extends ffi.Struct {
  external gsl_matrix_uint matrix;
}

class _gsl_matrix_uint_const_view extends ffi.Struct {
  external gsl_matrix_uint matrix;
}

class gsl_matrix_int extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Int32> data;

  external ffi.Pointer<gsl_block_int> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_int_view extends ffi.Struct {
  external gsl_matrix_int matrix;
}

class _gsl_matrix_int_const_view extends ffi.Struct {
  external gsl_matrix_int matrix;
}

class gsl_matrix_ushort extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Uint16> data;

  external ffi.Pointer<gsl_block_ushort> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_ushort_view extends ffi.Struct {
  external gsl_matrix_ushort matrix;
}

class _gsl_matrix_ushort_const_view extends ffi.Struct {
  external gsl_matrix_ushort matrix;
}

class gsl_matrix_short extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Int16> data;

  external ffi.Pointer<gsl_block_short> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_short_view extends ffi.Struct {
  external gsl_matrix_short matrix;
}

class _gsl_matrix_short_const_view extends ffi.Struct {
  external gsl_matrix_short matrix;
}

class gsl_matrix_uchar extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Uint8> data;

  external ffi.Pointer<gsl_block_uchar> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_uchar_view extends ffi.Struct {
  external gsl_matrix_uchar matrix;
}

class _gsl_matrix_uchar_const_view extends ffi.Struct {
  external gsl_matrix_uchar matrix;
}

class gsl_matrix_char extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  @size_t()
  external int tda;

  external ffi.Pointer<ffi.Int8> data;

  external ffi.Pointer<gsl_block_char> block;

  @ffi.Int32()
  external int owner;
}

class _gsl_matrix_char_view extends ffi.Struct {
  external gsl_matrix_char matrix;
}

class _gsl_matrix_char_const_view extends ffi.Struct {
  external gsl_matrix_char matrix;
}

class gsl_eigen_symm_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Double> d;

  external ffi.Pointer<ffi.Double> sd;
}

class gsl_eigen_symmv_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Double> d;

  external ffi.Pointer<ffi.Double> sd;

  external ffi.Pointer<ffi.Double> gc;

  external ffi.Pointer<ffi.Double> gs;
}

class gsl_eigen_herm_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Double> d;

  external ffi.Pointer<ffi.Double> sd;

  external ffi.Pointer<ffi.Double> tau;
}

class gsl_eigen_hermv_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<ffi.Double> d;

  external ffi.Pointer<ffi.Double> sd;

  external ffi.Pointer<ffi.Double> tau;

  external ffi.Pointer<ffi.Double> gc;

  external ffi.Pointer<ffi.Double> gs;
}

class gsl_eigen_francis_workspace extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int max_iterations;

  @size_t()
  external int n_iter;

  @size_t()
  external int n_evals;

  @ffi.Int32()
  external int compute_t;

  external ffi.Pointer<gsl_matrix> H;

  external ffi.Pointer<gsl_matrix> Z;
}

class gsl_eigen_nonsymm_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<gsl_vector> diag;

  external ffi.Pointer<gsl_vector> tau;

  external ffi.Pointer<gsl_matrix> Z;

  @ffi.Int32()
  external int do_balance;

  @size_t()
  external int n_evals;

  external ffi.Pointer<gsl_eigen_francis_workspace> francis_workspace_p;
}

class gsl_eigen_nonsymmv_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<gsl_vector> work;

  external ffi.Pointer<gsl_vector> work2;

  external ffi.Pointer<gsl_vector> work3;

  external ffi.Pointer<gsl_matrix> Z;

  external ffi.Pointer<gsl_eigen_nonsymm_workspace> nonsymm_workspace_p;
}

class gsl_eigen_gensymm_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<gsl_eigen_symm_workspace> symm_workspace_p;
}

class gsl_eigen_gensymmv_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<gsl_eigen_symmv_workspace> symmv_workspace_p;
}

class gsl_eigen_genherm_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<gsl_eigen_herm_workspace> herm_workspace_p;
}

class gsl_eigen_genhermv_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<gsl_eigen_hermv_workspace> hermv_workspace_p;
}

class gsl_eigen_gen_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<gsl_vector> work;

  @size_t()
  external int n_evals;

  @size_t()
  external int max_iterations;

  @size_t()
  external int n_iter;

  @ffi.Double()
  external double eshift;

  @ffi.Int32()
  external int needtop;

  @ffi.Double()
  external double atol;

  @ffi.Double()
  external double btol;

  @ffi.Double()
  external double ascale;

  @ffi.Double()
  external double bscale;

  external ffi.Pointer<gsl_matrix> H;

  external ffi.Pointer<gsl_matrix> R;

  @ffi.Int32()
  external int compute_s;

  @ffi.Int32()
  external int compute_t;

  external ffi.Pointer<gsl_matrix> Q;

  external ffi.Pointer<gsl_matrix> Z;
}

class gsl_eigen_genv_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<gsl_vector> work1;

  external ffi.Pointer<gsl_vector> work2;

  external ffi.Pointer<gsl_vector> work3;

  external ffi.Pointer<gsl_vector> work4;

  external ffi.Pointer<gsl_vector> work5;

  external ffi.Pointer<gsl_vector> work6;

  external ffi.Pointer<gsl_matrix> Q;

  external ffi.Pointer<gsl_matrix> Z;

  external ffi.Pointer<gsl_eigen_gen_workspace> gen_workspace_p;
}

abstract class gsl_eigen_sort_t {
  static const int GSL_EIGEN_SORT_VAL_ASC = 0;
  static const int GSL_EIGEN_SORT_VAL_DESC = 1;
  static const int GSL_EIGEN_SORT_ABS_ASC = 2;
  static const int GSL_EIGEN_SORT_ABS_DESC = 3;
}

class gsl_sf_mathieu_workspace extends ffi.Struct {
  @size_t()
  external int size;

  @size_t()
  external int even_order;

  @size_t()
  external int odd_order;

  @ffi.Int32()
  external int extra_values;

  @ffi.Double()
  external double qa;

  @ffi.Double()
  external double qb;

  external ffi.Pointer<ffi.Double> aa;

  external ffi.Pointer<ffi.Double> bb;

  external ffi.Pointer<ffi.Double> dd;

  external ffi.Pointer<ffi.Double> ee;

  external ffi.Pointer<ffi.Double> tt;

  external ffi.Pointer<ffi.Double> e2;

  external ffi.Pointer<ffi.Double> zz;

  external ffi.Pointer<gsl_vector> eval;

  external ffi.Pointer<gsl_matrix> evec;

  external ffi.Pointer<gsl_eigen_symmv_workspace> wmat;
}

abstract class _LIB_VERSION_TYPE {
  static const int _IEEE_ = -1;
  static const int _SVID_ = 0;
  static const int _XOPEN_ = 1;
  static const int _POSIX_ = 2;
  static const int _ISOC_ = 3;
}

class exception extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

class gsl_function_struct extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Void>)>> function;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_function_fdf_struct extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Void>)>> f;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Void>)>> df;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Double, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>> fdf;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_function_vec_struct extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Void>)>>
      function;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_spmatrix_pool_node extends ffi.Struct {
  external ffi.Pointer<gsl_spmatrix_pool_node> next;

  external ffi.Pointer<ffi.Void> block_ptr;

  external ffi.Pointer<ffi.Uint8> free_slot;
}

class gsl_bst_allocator extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(size_t, ffi.Pointer<ffi.Void>)>> alloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_bst_avl_node extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<gsl_bst_avl_node>> avl_link;

  external ffi.Pointer<ffi.Void> avl_data;

  @ffi.Int8()
  external int avl_balance;
}

class gsl_bst_avl_table extends ffi.Struct {
  external ffi.Pointer<gsl_bst_avl_node> avl_root;

  external ffi.Pointer<gsl_bst_cmp_function> avl_compare;

  external ffi.Pointer<ffi.Void> avl_param;

  external ffi.Pointer<gsl_bst_allocator> avl_alloc;

  @size_t()
  external int avl_count;

  @ffi.Uint64()
  external int avl_generation;
}

typedef gsl_bst_cmp_function = ffi.NativeFunction<
    ffi.Int32 Function(
        ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>;

class gsl_bst_avl_traverser extends ffi.Struct {
  external ffi.Pointer<gsl_bst_avl_table> avl_table;

  external ffi.Pointer<gsl_bst_avl_node> avl_node;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Pointer<gsl_bst_avl_node>> avl_stack;

  @size_t()
  external int avl_height;

  @ffi.Uint64()
  external int avl_generation;
}

class gsl_bst_rb_node extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<gsl_bst_rb_node>> rb_link;

  external ffi.Pointer<ffi.Void> rb_data;

  @ffi.Uint8()
  external int rb_color;
}

class gsl_bst_rb_table extends ffi.Struct {
  external ffi.Pointer<gsl_bst_rb_node> rb_root;

  external ffi.Pointer<gsl_bst_cmp_function> rb_compare;

  external ffi.Pointer<ffi.Void> rb_param;

  external ffi.Pointer<gsl_bst_allocator> rb_alloc;

  @size_t()
  external int rb_count;

  @ffi.Uint64()
  external int rb_generation;
}

class gsl_bst_rb_traverser extends ffi.Struct {
  external ffi.Pointer<gsl_bst_rb_table> rb_table;

  external ffi.Pointer<gsl_bst_rb_node> rb_node;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Pointer<gsl_bst_rb_node>> rb_stack;

  @size_t()
  external int rb_height;

  @ffi.Uint64()
  external int rb_generation;
}

class gsl_bst_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int node_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_bst_allocator>,
              ffi.Pointer<gsl_bst_cmp_function>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>> init;

  external ffi
          .Pointer<ffi.NativeFunction<size_t Function(ffi.Pointer<ffi.Void>)>>
      nodes;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> insert;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> find;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> remove;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>> empty;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      trav_init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> trav_first;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> trav_last;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> trav_find;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> trav_insert;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> trav_copy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> trav_next;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> trav_prev;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> trav_cur;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> trav_replace;
}

class gsl_bst_workspace extends ffi.Struct {
  external ffi.Pointer<gsl_bst_type> type;

  external UnnamedUnion2 table;
}

class UnnamedUnion2 extends ffi.Union {
  external gsl_bst_avl_table avl_table;

  external gsl_bst_rb_table rb_table;
}

class gsl_bst_trav extends ffi.Struct {
  external ffi.Pointer<gsl_bst_type> type;

  external UnnamedUnion3 trav_data;
}

class UnnamedUnion3 extends ffi.Union {
  external gsl_bst_avl_traverser avl_trav;

  external gsl_bst_rb_traverser rb_trav;
}

class gsl_spmatrix_complex_long_double extends ffi.Opaque {}

class gsl_spmatrix_complex extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Double> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion5 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

typedef gsl_spmatrix_pool = gsl_spmatrix_pool_node;

class UnnamedUnion5 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Double> work_atomic;
}

class gsl_spmatrix_complex_float extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Float> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion6 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion6 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Float> work_atomic;
}

class gsl_spmatrix_long_double extends ffi.Opaque {}

class gsl_spmatrix extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Double> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion8 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion8 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Double> work_atomic;
}

class gsl_spmatrix_float extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Float> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion9 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion9 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Float> work_atomic;
}

class gsl_spmatrix_ulong extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Uint64> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion10 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion10 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Uint64> work_atomic;
}

class gsl_spmatrix_long extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Int64> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion11 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion11 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Int64> work_atomic;
}

class gsl_spmatrix_uint extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Uint32> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion12 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion12 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Uint32> work_atomic;
}

class gsl_spmatrix_int extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Int32> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion13 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion13 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Int32> work_atomic;
}

class gsl_spmatrix_ushort extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Uint16> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion14 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion14 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Uint16> work_atomic;
}

class gsl_spmatrix_short extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Int16> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion15 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion15 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Int16> work_atomic;
}

class gsl_spmatrix_uchar extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Uint8> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion16 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion16 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Uint8> work_atomic;
}

class gsl_spmatrix_char extends ffi.Struct {
  @size_t()
  external int size1;

  @size_t()
  external int size2;

  external ffi.Pointer<ffi.Int32> i;

  external ffi.Pointer<ffi.Int8> data;

  external ffi.Pointer<ffi.Int32> p;

  @size_t()
  external int nzmax;

  @size_t()
  external int nz;

  external ffi.Pointer<gsl_bst_workspace> tree;

  external ffi.Pointer<gsl_spmatrix_pool> pool;

  @size_t()
  external int node_size;

  external UnnamedUnion17 work;

  @ffi.Int32()
  external int sptype;

  @size_t()
  external int spflags;
}

class UnnamedUnion17 extends ffi.Union {
  external ffi.Pointer<ffi.Void> work_void;

  external ffi.Pointer<ffi.Int32> work_int;

  external ffi.Pointer<ffi.Int8> work_atomic;
}

class gsl_permutation_struct extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<size_t> data;
}

typedef gsl_permutation = gsl_permutation_struct;
typedef CBLAS_INDEX_t = size_t;

abstract class gsl_linalg_matrix_mod_t {
  static const int GSL_LINALG_MOD_NONE = 0;
  static const int GSL_LINALG_MOD_TRANSPOSE = 1;
  static const int GSL_LINALG_MOD_CONJUGATE = 2;
}

typedef gsl_mode_t = ffi.Uint32;

class gsl_splinalg_itersolve_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>> alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_spmatrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Void>)>> iterate;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>> normr;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_splinalg_itersolve extends ffi.Struct {
  external ffi.Pointer<gsl_splinalg_itersolve_type> type;

  @ffi.Double()
  external double normr;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_odeiv_system extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Void>)>> function;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Void>)>> jacobian;

  @size_t()
  external int dimension;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_odeiv_step_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int can_use_dydt_in;

  @ffi.Int32()
  external int gives_exact_dydt_out;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_odeiv_system>)>> apply;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>, size_t)>>
      reset;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>> order;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_odeiv_step extends ffi.Struct {
  external ffi.Pointer<gsl_odeiv_step_type> type;

  @size_t()
  external int dimension;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_odeiv_control_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>> init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Uint32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>> hadjust;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_odeiv_control extends ffi.Struct {
  external ffi.Pointer<gsl_odeiv_control_type> type;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_odeiv_evolve extends ffi.Struct {
  @size_t()
  external int dimension;

  external ffi.Pointer<ffi.Double> y0;

  external ffi.Pointer<ffi.Double> yerr;

  external ffi.Pointer<ffi.Double> dydt_in;

  external ffi.Pointer<ffi.Double> dydt_out;

  @ffi.Double()
  external double last_step;

  @ffi.Uint64()
  external int count;

  @ffi.Uint64()
  external int failed_steps;
}

class gsl_ieee_float_rep extends ffi.Struct {
  @ffi.Int32()
  external int sign;

  @ffi.Array.multi([24])
  external ffi.Array<ffi.Int8> mantissa;

  @ffi.Int32()
  external int exponent;

  @ffi.Int32()
  external int type;
}

class gsl_ieee_double_rep extends ffi.Struct {
  @ffi.Int32()
  external int sign;

  @ffi.Array.multi([53])
  external ffi.Array<ffi.Int8> mantissa;

  @ffi.Int32()
  external int exponent;

  @ffi.Int32()
  external int type;
}

class gsl_interp_accel extends ffi.Struct {
  @size_t()
  external int cache;

  @size_t()
  external int miss_count;

  @size_t()
  external int hit_count;
}

class gsl_interp_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int min_size;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, size_t)>> init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>> eval;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>> eval_deriv;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>> eval_deriv2;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>)>> eval_integ;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_interp extends ffi.Struct {
  external ffi.Pointer<gsl_interp_type> type;

  @ffi.Double()
  external double xmin;

  @ffi.Double()
  external double xmax;

  @size_t()
  external int size;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_spline extends ffi.Struct {
  external ffi.Pointer<gsl_interp> interp;

  external ffi.Pointer<ffi.Double> x;

  external ffi.Pointer<ffi.Double> y;

  @size_t()
  external int size;
}

abstract class gsl_sf_legendre_t {
  static const int GSL_SF_LEGENDRE_SCHMIDT = 0;
  static const int GSL_SF_LEGENDRE_SPHARM = 1;
  static const int GSL_SF_LEGENDRE_FULL = 2;
  static const int GSL_SF_LEGENDRE_NONE = 3;
}

class gsl_multifit_function_struct extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>)>> f;

  @size_t()
  external int n;

  @size_t()
  external int p;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_multifit_fsolver_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, size_t, size_t)>> alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multifit_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multifit_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>> iterate;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

typedef gsl_multifit_function = gsl_multifit_function_struct;

class gsl_multifit_fsolver extends ffi.Struct {
  external ffi.Pointer<gsl_multifit_fsolver_type> type;

  external ffi.Pointer<gsl_multifit_function> function;

  external ffi.Pointer<gsl_vector> x;

  external ffi.Pointer<gsl_vector> f;

  external ffi.Pointer<gsl_vector> dx;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_multifit_function_fdf_struct extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>)>> f;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_matrix>)>> df;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>)>> fdf;

  @size_t()
  external int n;

  @size_t()
  external int p;

  external ffi.Pointer<ffi.Void> params;

  @size_t()
  external int nevalf;

  @size_t()
  external int nevaldf;
}

class gsl_multifit_fdfsolver_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, size_t, size_t)>> alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>> iterate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_vector>)>> gradient;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_matrix>)>> jac;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

typedef gsl_multifit_function_fdf = gsl_multifit_function_fdf_struct;

class gsl_multifit_fdfsolver extends ffi.Struct {
  external ffi.Pointer<gsl_multifit_fdfsolver_type> type;

  external ffi.Pointer<gsl_multifit_function_fdf> fdf;

  external ffi.Pointer<gsl_vector> x;

  external ffi.Pointer<gsl_vector> f;

  external ffi.Pointer<gsl_vector> dx;

  external ffi.Pointer<gsl_vector> g;

  external ffi.Pointer<gsl_vector> sqrt_wts;

  @size_t()
  external int niter;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_multifit_fdfridge extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int p;

  @ffi.Double()
  external double lambda;

  external ffi.Pointer<gsl_vector> L_diag;

  external ffi.Pointer<gsl_matrix> L;

  external ffi.Pointer<gsl_vector> f;

  external ffi.Pointer<gsl_vector> wts;

  external ffi.Pointer<gsl_multifit_fdfsolver> s;

  external ffi.Pointer<gsl_multifit_function_fdf> fdf;

  external gsl_multifit_function_fdf fdftik;
}

class gsl_multiroot_function_struct extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>)>> f;

  @size_t()
  external int n;

  external ffi.Pointer<ffi.Void> params;
}

typedef gsl_multiroot_function = gsl_multiroot_function_struct;

class gsl_multiroot_fsolver_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int size;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>, size_t)>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multiroot_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multiroot_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>> iterate;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_multiroot_fsolver extends ffi.Struct {
  external ffi.Pointer<gsl_multiroot_fsolver_type> type;

  external ffi.Pointer<gsl_multiroot_function> function;

  external ffi.Pointer<gsl_vector> x;

  external ffi.Pointer<gsl_vector> f;

  external ffi.Pointer<gsl_vector> dx;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_multiroot_function_fdf_struct extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>)>> f;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_matrix>)>> df;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_matrix>)>> fdf;

  @size_t()
  external int n;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_multiroot_fdfsolver_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int size;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>, size_t)>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multiroot_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multiroot_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>> iterate;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

typedef gsl_multiroot_function_fdf = gsl_multiroot_function_fdf_struct;

class gsl_multiroot_fdfsolver extends ffi.Struct {
  external ffi.Pointer<gsl_multiroot_fdfsolver_type> type;

  external ffi.Pointer<gsl_multiroot_function_fdf> fdf;

  external ffi.Pointer<gsl_vector> x;

  external ffi.Pointer<gsl_vector> f;

  external ffi.Pointer<gsl_matrix> J;

  external ffi.Pointer<gsl_vector> dx;

  external ffi.Pointer<ffi.Void> state;
}

abstract class gsl_fft_direction {
  static const int gsl_fft_forward = -1;
  static const int gsl_fft_backward = 1;
}

typedef gsl_complex_packed_array_float = ffi.Pointer<ffi.Float>;

class gsl_fft_complex_wavetable_float extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int nf;

  @ffi.Array.multi([64])
  external ffi.Array<size_t> factor;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<gsl_complex_float>> twiddle;

  external ffi.Pointer<gsl_complex_float> trig;
}

class gsl_fft_complex_workspace_float extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Float> scratch;
}

class gsl_fft_real_wavetable_float extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int nf;

  @ffi.Array.multi([64])
  external ffi.Array<size_t> factor;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<gsl_complex_float>> twiddle;

  external ffi.Pointer<gsl_complex_float> trig;
}

class gsl_fft_real_workspace_float extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Float> scratch;
}

class gsl_cheb_series_struct extends ffi.Struct {
  external ffi.Pointer<ffi.Double> c;

  @size_t()
  external int order;

  @ffi.Double()
  external double a;

  @ffi.Double()
  external double b;

  @size_t()
  external int order_sp;

  external ffi.Pointer<ffi.Double> f;
}

typedef gsl_cheb_series = gsl_cheb_series_struct;
typedef gsl_function = gsl_function_struct;

class gsl_fft_real_wavetable extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int nf;

  @ffi.Array.multi([64])
  external ffi.Array<size_t> factor;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<gsl_complex>> twiddle;

  external ffi.Pointer<gsl_complex> trig;
}

class gsl_fft_real_workspace extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Double> scratch;
}

class gsl_fft_halfcomplex_wavetable extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int nf;

  @ffi.Array.multi([64])
  external ffi.Array<size_t> factor;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<gsl_complex>> twiddle;

  external ffi.Pointer<gsl_complex> trig;
}

class gsl_qrng_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int max_dimension;

  external ffi.Pointer<ffi.NativeFunction<size_t Function(ffi.Uint32)>>
      state_size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Uint32)>> init_state;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint32, ffi.Pointer<ffi.Double>)>>
      get1;
}

class gsl_qrng extends ffi.Struct {
  external ffi.Pointer<gsl_qrng_type> type;

  @ffi.Uint32()
  external int dimension;

  @size_t()
  external int state_size;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_bspline_workspace extends ffi.Struct {
  @size_t()
  external int k;

  @size_t()
  external int km1;

  @size_t()
  external int l;

  @size_t()
  external int nbreak;

  @size_t()
  external int n;

  external ffi.Pointer<gsl_vector> knots;

  external ffi.Pointer<gsl_vector> deltal;

  external ffi.Pointer<gsl_vector> deltar;

  external ffi.Pointer<gsl_vector> B;

  external ffi.Pointer<gsl_matrix> A;

  external ffi.Pointer<gsl_matrix> dB;
}

typedef gsl_complex_packed_array = ffi.Pointer<ffi.Double>;

class gsl_fft_complex_wavetable extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int nf;

  @ffi.Array.multi([64])
  external ffi.Array<size_t> factor;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<gsl_complex>> twiddle;

  external ffi.Pointer<gsl_complex> trig;
}

class gsl_fft_complex_workspace extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Double> scratch;
}

class gsl_monte_function_struct extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Double>, size_t, ffi.Pointer<ffi.Void>)>> f;

  @size_t()
  external int dim;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_interp2d_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int min_size;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>> alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t)>> init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>> eval;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>> eval_deriv_x;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>> eval_deriv_y;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>> eval_deriv_xx;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>> eval_deriv_xy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              size_t,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<gsl_interp_accel>,
              ffi.Pointer<ffi.Double>)>> eval_deriv_yy;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_interp2d extends ffi.Struct {
  external ffi.Pointer<gsl_interp2d_type> type;

  @ffi.Double()
  external double xmin;

  @ffi.Double()
  external double xmax;

  @ffi.Double()
  external double ymin;

  @ffi.Double()
  external double ymax;

  @size_t()
  external int xsize;

  @size_t()
  external int ysize;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_spline2d extends ffi.Struct {
  external gsl_interp2d interp_object;

  external ffi.Pointer<ffi.Double> xarr;

  external ffi.Pointer<ffi.Double> yarr;

  external ffi.Pointer<ffi.Double> zarr;
}

class gsl_rstat_quantile_workspace extends ffi.Struct {
  @ffi.Double()
  external double p;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Double> q;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Int32> npos;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Double> np;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Double> dnp;

  @size_t()
  external int n;
}

class gsl_rstat_workspace extends ffi.Struct {
  @ffi.Double()
  external double min;

  @ffi.Double()
  external double max;

  @ffi.Double()
  external double mean;

  @ffi.Double()
  external double M2;

  @ffi.Double()
  external double M3;

  @ffi.Double()
  external double M4;

  @size_t()
  external int n;

  external ffi.Pointer<gsl_rstat_quantile_workspace> median_workspace_p;
}

class gsl_dht_struct extends ffi.Struct {
  @size_t()
  external int size;

  @ffi.Double()
  external double nu;

  @ffi.Double()
  external double xmax;

  @ffi.Double()
  external double kmax;

  external ffi.Pointer<ffi.Double> j;

  external ffi.Pointer<ffi.Double> Jjj;

  external ffi.Pointer<ffi.Double> J2;
}

typedef gsl_dht = gsl_dht_struct;
typedef gsl_comparison_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class gsl_rng_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint64()
  external int max;

  @ffi.Uint64()
  external int min;

  @size_t()
  external int size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint64)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<ffi.Void>)>> get1;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>>
      get_double;
}

class gsl_rng extends ffi.Struct {
  external ffi.Pointer<gsl_rng_type> type;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_siman_params_t extends ffi.Struct {
  @ffi.Int32()
  external int n_tries;

  @ffi.Int32()
  external int iters_fixed_T;

  @ffi.Double()
  external double step_size;

  @ffi.Double()
  external double k;

  @ffi.Double()
  external double t_initial;

  @ffi.Double()
  external double mu_t;

  @ffi.Double()
  external double t_min;
}

typedef gsl_siman_Efunc_t = ffi
    .Pointer<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>>;
typedef gsl_siman_step_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<gsl_rng>, ffi.Pointer<ffi.Void>, ffi.Double)>>;
typedef gsl_siman_metric_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Double Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef gsl_siman_print_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef gsl_siman_copy_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef gsl_siman_copy_construct_t = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef gsl_siman_destroy_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

abstract class gsl_multifit_nlinear_fdtype {
  static const int GSL_MULTIFIT_NLINEAR_FWDIFF = 0;
  static const int GSL_MULTIFIT_NLINEAR_CTRDIFF = 1;
}

class gsl_multifit_nlinear_fdf extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>)>> f;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_matrix>)>> df;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_vector>)>> fvv;

  @size_t()
  external int n;

  @size_t()
  external int p;

  external ffi.Pointer<ffi.Void> params;

  @size_t()
  external int nevalf;

  @size_t()
  external int nevaldf;

  @size_t()
  external int nevalfvv;
}

class gsl_multifit_nlinear_trs extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t, size_t)>> alloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      init;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      preloop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>)>> step;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Void>)>> preduction;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_multifit_nlinear_scale extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>> init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>> update;
}

class gsl_multifit_nlinear_solver extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>> alloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      init;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      presolve;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> solve;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Void>)>> rcond;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_multifit_nlinear_parameters extends ffi.Struct {
  external ffi.Pointer<gsl_multifit_nlinear_trs> trs;

  external ffi.Pointer<gsl_multifit_nlinear_scale> scale;

  external ffi.Pointer<gsl_multifit_nlinear_solver> solver;

  @ffi.Int32()
  external int fdtype;

  @ffi.Double()
  external double factor_up;

  @ffi.Double()
  external double factor_down;

  @ffi.Double()
  external double avmax;

  @ffi.Double()
  external double h_df;

  @ffi.Double()
  external double h_fvv;
}

class gsl_multifit_nlinear_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gsl_multifit_nlinear_parameters>,
              size_t,
              size_t)>> alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>> init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multifit_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>> iterate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Void>)>> rcond;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>> avratio;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_multifit_nlinear_trust_state extends ffi.Struct {
  external ffi.Pointer<gsl_vector> x;

  external ffi.Pointer<gsl_vector> f;

  external ffi.Pointer<gsl_vector> g;

  external ffi.Pointer<gsl_matrix> J;

  external ffi.Pointer<gsl_vector> diag;

  external ffi.Pointer<gsl_vector> sqrt_wts;

  external ffi.Pointer<ffi.Double> mu;

  external ffi.Pointer<gsl_multifit_nlinear_parameters> params;

  external ffi.Pointer<ffi.Void> solver_state;

  external ffi.Pointer<gsl_multifit_nlinear_fdf> fdf;

  external ffi.Pointer<ffi.Double> avratio;
}

class gsl_multifit_nlinear_workspace extends ffi.Struct {
  external ffi.Pointer<gsl_multifit_nlinear_type> type;

  external ffi.Pointer<gsl_multifit_nlinear_fdf> fdf;

  external ffi.Pointer<gsl_vector> x;

  external ffi.Pointer<gsl_vector> f;

  external ffi.Pointer<gsl_vector> dx;

  external ffi.Pointer<gsl_vector> g;

  external ffi.Pointer<gsl_matrix> J;

  external ffi.Pointer<gsl_vector> sqrt_wts_work;

  external ffi.Pointer<gsl_vector> sqrt_wts;

  @size_t()
  external int niter;

  external gsl_multifit_nlinear_parameters params;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_multifit_linear_workspace extends ffi.Struct {
  @size_t()
  external int nmax;

  @size_t()
  external int pmax;

  @size_t()
  external int n;

  @size_t()
  external int p;

  external ffi.Pointer<gsl_matrix> A;

  external ffi.Pointer<gsl_matrix> Q;

  external ffi.Pointer<gsl_matrix> QSI;

  external ffi.Pointer<gsl_vector> S;

  external ffi.Pointer<gsl_vector> t;

  external ffi.Pointer<gsl_vector> xt;

  external ffi.Pointer<gsl_vector> D;

  @ffi.Double()
  external double rcond;
}

class gsl_multifit_robust_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>> wfun;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>)>> psi_deriv;

  @ffi.Double()
  external double tuning_default;
}

class gsl_multifit_robust_stats extends ffi.Struct {
  @ffi.Double()
  external double sigma_ols;

  @ffi.Double()
  external double sigma_mad;

  @ffi.Double()
  external double sigma_rob;

  @ffi.Double()
  external double sigma;

  @ffi.Double()
  external double Rsq;

  @ffi.Double()
  external double adj_Rsq;

  @ffi.Double()
  external double rmse;

  @ffi.Double()
  external double sse;

  @size_t()
  external int dof;

  @size_t()
  external int numit;

  external ffi.Pointer<gsl_vector> weights;

  external ffi.Pointer<gsl_vector> r;
}

class gsl_multifit_robust_workspace extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int p;

  @size_t()
  external int numit;

  @size_t()
  external int maxiter;

  external ffi.Pointer<gsl_multifit_robust_type> type;

  @ffi.Double()
  external double tune;

  external ffi.Pointer<gsl_vector> r;

  external ffi.Pointer<gsl_vector> weights;

  external ffi.Pointer<gsl_vector> c_prev;

  external ffi.Pointer<gsl_vector> resfac;

  external ffi.Pointer<gsl_vector> psi;

  external ffi.Pointer<gsl_vector> dpsi;

  external ffi.Pointer<gsl_matrix> QSI;

  external ffi.Pointer<gsl_vector> D;

  external ffi.Pointer<gsl_vector> workn;

  external gsl_multifit_robust_stats stats;

  external ffi.Pointer<gsl_multifit_linear_workspace> multifit_p;
}

class gsl_odeiv2_system extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Void>)>> function;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Void>)>> jacobian;

  @size_t()
  external int dimension;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_odeiv2_step_struct extends ffi.Struct {
  external ffi.Pointer<gsl_odeiv2_step_type> type;

  @size_t()
  external int dimension;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_odeiv2_step_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int can_use_dydt_in;

  @ffi.Int32()
  external int gives_exact_dydt_out;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_odeiv2_system>)>> apply;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_odeiv2_driver>)>>
      set_driver;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>, size_t)>>
      reset;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<ffi.Void>)>> order;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

typedef gsl_odeiv2_driver = gsl_odeiv2_driver_struct;

class gsl_odeiv2_driver_struct extends ffi.Struct {
  external ffi.Pointer<gsl_odeiv2_system> sys;

  external ffi.Pointer<gsl_odeiv2_step> s;

  external ffi.Pointer<gsl_odeiv2_control> c;

  external ffi.Pointer<gsl_odeiv2_evolve> e;

  @ffi.Double()
  external double h;

  @ffi.Double()
  external double hmin;

  @ffi.Double()
  external double hmax;

  @ffi.Uint64()
  external int n;

  @ffi.Uint64()
  external int nmax;
}

typedef gsl_odeiv2_step = gsl_odeiv2_step_struct;
typedef gsl_odeiv2_control = gsl_odeiv2_control_struct;

class gsl_odeiv2_control_struct extends ffi.Struct {
  external ffi.Pointer<gsl_odeiv2_control_type> type;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_odeiv2_control_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>> init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              size_t,
              ffi.Uint32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>> hadjust;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Double, ffi.Double,
              ffi.Double, size_t, ffi.Pointer<ffi.Double>)>> errlevel;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_odeiv2_driver1>)>>
      set_driver;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

typedef gsl_odeiv2_driver1 = gsl_odeiv2_driver_struct;
typedef gsl_odeiv2_evolve = gsl_odeiv2_evolve_struct;

class gsl_odeiv2_evolve_struct extends ffi.Struct {
  @size_t()
  external int dimension;

  external ffi.Pointer<ffi.Double> y0;

  external ffi.Pointer<ffi.Double> yerr;

  external ffi.Pointer<ffi.Double> dydt_in;

  external ffi.Pointer<ffi.Double> dydt_out;

  @ffi.Double()
  external double last_step;

  @ffi.Uint64()
  external int count;

  @ffi.Uint64()
  external int failed_steps;

  external ffi.Pointer<gsl_odeiv2_driver1> driver;
}

class gsl_histogram2d extends ffi.Struct {
  @size_t()
  external int nx;

  @size_t()
  external int ny;

  external ffi.Pointer<ffi.Double> xrange;

  external ffi.Pointer<ffi.Double> yrange;

  external ffi.Pointer<ffi.Double> bin;
}

class gsl_histogram2d_pdf extends ffi.Struct {
  @size_t()
  external int nx;

  @size_t()
  external int ny;

  external ffi.Pointer<ffi.Double> xrange;

  external ffi.Pointer<ffi.Double> yrange;

  external ffi.Pointer<ffi.Double> sum;
}

class gsl_min_fminimizer_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_function>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_function>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>> iterate;
}

class gsl_min_fminimizer extends ffi.Struct {
  external ffi.Pointer<gsl_min_fminimizer_type> type;

  external ffi.Pointer<gsl_function> function;

  @ffi.Double()
  external double x_minimum;

  @ffi.Double()
  external double x_lower;

  @ffi.Double()
  external double x_upper;

  @ffi.Double()
  external double f_minimum;

  @ffi.Double()
  external double f_lower;

  @ffi.Double()
  external double f_upper;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_root_fsolver_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_function>,
              ffi.Pointer<ffi.Double>, ffi.Double, ffi.Double)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_function>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>> iterate;
}

class gsl_root_fsolver extends ffi.Struct {
  external ffi.Pointer<gsl_root_fsolver_type> type;

  external ffi.Pointer<gsl_function> function;

  @ffi.Double()
  external double root;

  @ffi.Double()
  external double x_lower;

  @ffi.Double()
  external double x_upper;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_root_fdfsolver_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int size;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_function_fdf>, ffi.Pointer<ffi.Double>)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_function_fdf>, ffi.Pointer<ffi.Double>)>> iterate;
}

typedef gsl_function_fdf = gsl_function_fdf_struct;

class gsl_root_fdfsolver extends ffi.Struct {
  external ffi.Pointer<gsl_root_fdfsolver_type> type;

  external ffi.Pointer<gsl_function_fdf> fdf;

  @ffi.Double()
  external double root;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_ran_discrete_t extends ffi.Struct {
  @size_t()
  external int K;

  external ffi.Pointer<size_t> A;

  external ffi.Pointer<ffi.Double> F;
}

class gsl_integration_workspace extends ffi.Struct {
  @size_t()
  external int limit;

  @size_t()
  external int size;

  @size_t()
  external int nrmax;

  @size_t()
  external int i;

  @size_t()
  external int maximum_level;

  external ffi.Pointer<ffi.Double> alist;

  external ffi.Pointer<ffi.Double> blist;

  external ffi.Pointer<ffi.Double> rlist;

  external ffi.Pointer<ffi.Double> elist;

  external ffi.Pointer<size_t> order;

  external ffi.Pointer<size_t> level;
}

class gsl_integration_qaws_table extends ffi.Struct {
  @ffi.Double()
  external double alpha;

  @ffi.Double()
  external double beta;

  @ffi.Int32()
  external int mu;

  @ffi.Int32()
  external int nu;

  @ffi.Array.multi([25])
  external ffi.Array<ffi.Double> ri;

  @ffi.Array.multi([25])
  external ffi.Array<ffi.Double> rj;

  @ffi.Array.multi([25])
  external ffi.Array<ffi.Double> rg;

  @ffi.Array.multi([25])
  external ffi.Array<ffi.Double> rh;
}

abstract class gsl_integration_qawo_enum {
  static const int GSL_INTEG_COSINE = 0;
  static const int GSL_INTEG_SINE = 1;
}

class gsl_integration_qawo_table extends ffi.Struct {
  @size_t()
  external int n;

  @ffi.Double()
  external double omega;

  @ffi.Double()
  external double L;

  @ffi.Double()
  external double par;

  @ffi.Int32()
  external int sine;

  external ffi.Pointer<ffi.Double> chebmo;
}

class gsl_integration_glfixed_table extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Double> x;

  external ffi.Pointer<ffi.Double> w;

  @ffi.Int32()
  external int precomputed;
}

class gsl_integration_cquad_ival extends ffi.Struct {
  @ffi.Double()
  external double a;

  @ffi.Double()
  external double b;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Double> c;

  @ffi.Array.multi([33])
  external ffi.Array<ffi.Double> fx;

  @ffi.Double()
  external double igral;

  @ffi.Double()
  external double err;

  @ffi.Int32()
  external int depth;

  @ffi.Int32()
  external int rdepth;

  @ffi.Int32()
  external int ndiv;
}

class gsl_integration_cquad_workspace extends ffi.Struct {
  @size_t()
  external int size;

  external ffi.Pointer<gsl_integration_cquad_ival> ivals;

  external ffi.Pointer<size_t> heap;
}

class gsl_integration_romberg_workspace extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Double> work1;

  external ffi.Pointer<ffi.Double> work2;
}

class gsl_integration_fixed_params extends ffi.Struct {
  @ffi.Double()
  external double alpha;

  @ffi.Double()
  external double beta;

  @ffi.Double()
  external double a;

  @ffi.Double()
  external double b;

  @ffi.Double()
  external double zemu;

  @ffi.Double()
  external double shft;

  @ffi.Double()
  external double slp;

  @ffi.Double()
  external double al;

  @ffi.Double()
  external double be;
}

class gsl_integration_fixed_type extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              size_t, ffi.Pointer<gsl_integration_fixed_params>)>> check;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              size_t,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_integration_fixed_params>)>> init;
}

class gsl_integration_fixed_workspace extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Double> weights;

  external ffi.Pointer<ffi.Double> x;

  external ffi.Pointer<ffi.Double> diag;

  external ffi.Pointer<ffi.Double> subdiag;

  external ffi.Pointer<gsl_integration_fixed_type> type;
}

abstract class gsl_movstat_end_t {
  static const int GSL_MOVSTAT_END_PADZERO = 0;
  static const int GSL_MOVSTAT_END_PADVALUE = 1;
  static const int GSL_MOVSTAT_END_TRUNCATE = 2;
}

class gsl_movstat_accum extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<size_t Function(size_t)>> size;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(size_t, ffi.Pointer<ffi.Void>)>>
      init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Double, ffi.Pointer<ffi.Void>)>> insert;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>
      delete_oldest;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Void>)>> get1;
}

class gsl_movstat_function extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Double Function(
                  size_t, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Void>)>>
      function;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_movstat_workspace extends ffi.Struct {
  @size_t()
  external int H;

  @size_t()
  external int J;

  @size_t()
  external int K;

  external ffi.Pointer<ffi.Double> work;

  external ffi.Pointer<ffi.Void> state;

  @size_t()
  external int state_size;
}

class gsl_combination_struct extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int k;

  external ffi.Pointer<size_t> data;
}

typedef gsl_combination = gsl_combination_struct;

class gsl_monte_plain_state extends ffi.Struct {
  @size_t()
  external int dim;

  external ffi.Pointer<ffi.Double> x;
}

typedef gsl_monte_function = gsl_monte_function_struct;

class gsl_monte_miser_state extends ffi.Struct {
  @size_t()
  external int min_calls;

  @size_t()
  external int min_calls_per_bisection;

  @ffi.Double()
  external double dither;

  @ffi.Double()
  external double estimate_frac;

  @ffi.Double()
  external double alpha;

  @size_t()
  external int dim;

  @ffi.Int32()
  external int estimate_style;

  @ffi.Int32()
  external int depth;

  @ffi.Int32()
  external int verbose;

  external ffi.Pointer<ffi.Double> x;

  external ffi.Pointer<ffi.Double> xmid;

  external ffi.Pointer<ffi.Double> sigma_l;

  external ffi.Pointer<ffi.Double> sigma_r;

  external ffi.Pointer<ffi.Double> fmax_l;

  external ffi.Pointer<ffi.Double> fmax_r;

  external ffi.Pointer<ffi.Double> fmin_l;

  external ffi.Pointer<ffi.Double> fmin_r;

  external ffi.Pointer<ffi.Double> fsum_l;

  external ffi.Pointer<ffi.Double> fsum_r;

  external ffi.Pointer<ffi.Double> fsum2_l;

  external ffi.Pointer<ffi.Double> fsum2_r;

  external ffi.Pointer<size_t> hits_l;

  external ffi.Pointer<size_t> hits_r;
}

class gsl_monte_miser_params extends ffi.Struct {
  @ffi.Double()
  external double estimate_frac;

  @size_t()
  external int min_calls;

  @size_t()
  external int min_calls_per_bisection;

  @ffi.Double()
  external double alpha;

  @ffi.Double()
  external double dither;
}

class gsl_poly_complex_workspace extends ffi.Struct {
  @size_t()
  external int nc;

  external ffi.Pointer<ffi.Double> matrix;
}

typedef gsl_complex_packed_ptr = ffi.Pointer<ffi.Double>;

abstract class gsl_multilarge_nlinear_fdtype {
  static const int GSL_MULTILARGE_NLINEAR_FWDIFF = 0;
  static const int GSL_MULTILARGE_NLINEAR_CTRDIFF = 1;
}

class gsl_multilarge_nlinear_fdf extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>)>> f;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>> df;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_vector>)>> fvv;

  @size_t()
  external int n;

  @size_t()
  external int p;

  external ffi.Pointer<ffi.Void> params;

  @size_t()
  external int nevalf;

  @size_t()
  external int nevaldfu;

  @size_t()
  external int nevaldf2;

  @size_t()
  external int nevalfvv;
}

class gsl_multilarge_nlinear_trs extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t, size_t)>> alloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      init;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      preloop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Double,
              ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>)>> step;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Void>)>> preduction;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_multilarge_nlinear_scale extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>> init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>)>> update;
}

class gsl_multilarge_nlinear_solver extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>> alloc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      init;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Double, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      presolve;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> solve;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Void>)>> rcond;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Void>)>> covar;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_multilarge_nlinear_parameters extends ffi.Struct {
  external ffi.Pointer<gsl_multilarge_nlinear_trs> trs;

  external ffi.Pointer<gsl_multilarge_nlinear_scale> scale;

  external ffi.Pointer<gsl_multilarge_nlinear_solver> solver;

  @ffi.Int32()
  external int fdtype;

  @ffi.Double()
  external double factor_up;

  @ffi.Double()
  external double factor_down;

  @ffi.Double()
  external double avmax;

  @ffi.Double()
  external double h_df;

  @ffi.Double()
  external double h_fvv;

  @size_t()
  external int max_iter;

  @ffi.Double()
  external double tol;
}

class gsl_multilarge_nlinear_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<gsl_multilarge_nlinear_parameters>,
              size_t,
              size_t)>> alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>)>> init;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_multilarge_nlinear_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_matrix>,
              ffi.Pointer<gsl_vector>)>> iterate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Double>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Void>)>> rcond;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_matrix>,
              ffi.Pointer<ffi.Void>)>> covar;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Void>)>> avratio;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_multilarge_nlinear_trust_state extends ffi.Struct {
  external ffi.Pointer<gsl_vector> x;

  external ffi.Pointer<gsl_vector> f;

  external ffi.Pointer<gsl_vector> g;

  external ffi.Pointer<gsl_matrix> JTJ;

  external ffi.Pointer<gsl_vector> diag;

  external ffi.Pointer<gsl_vector> sqrt_wts;

  external ffi.Pointer<ffi.Double> mu;

  external ffi.Pointer<gsl_multilarge_nlinear_parameters> params;

  external ffi.Pointer<ffi.Void> solver_state;

  external ffi.Pointer<gsl_multilarge_nlinear_fdf> fdf;

  external ffi.Pointer<ffi.Double> avratio;
}

class gsl_multilarge_nlinear_workspace extends ffi.Struct {
  external ffi.Pointer<gsl_multilarge_nlinear_type> type;

  external ffi.Pointer<gsl_multilarge_nlinear_fdf> fdf;

  external ffi.Pointer<gsl_vector> x;

  external ffi.Pointer<gsl_vector> f;

  external ffi.Pointer<gsl_vector> dx;

  external ffi.Pointer<gsl_vector> g;

  external ffi.Pointer<gsl_matrix> JTJ;

  external ffi.Pointer<gsl_vector> sqrt_wts_work;

  external ffi.Pointer<gsl_vector> sqrt_wts;

  @size_t()
  external int n;

  @size_t()
  external int p;

  @size_t()
  external int niter;

  external gsl_multilarge_nlinear_parameters params;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_multilarge_linear_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>> reset;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_matrix>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Void>)>> accumulate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Void>)>> solve;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Void>)>> rcond;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<gsl_vector>, ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>)>> lcurve;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gsl_matrix> Function(ffi.Pointer<ffi.Void>)>> matrix_ptr;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<gsl_vector> Function(ffi.Pointer<ffi.Void>)>> rhs_ptr;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_multilarge_linear_workspace extends ffi.Struct {
  external ffi.Pointer<gsl_multilarge_linear_type> type;

  external ffi.Pointer<ffi.Void> state;

  @size_t()
  external int p;
}

abstract class gsl_wavelet_direction {
  static const int gsl_wavelet_forward = 1;
  static const int gsl_wavelet_backward = -1;
}

class gsl_wavelet_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Double>>,
              ffi.Pointer<ffi.Pointer<ffi.Double>>,
              ffi.Pointer<ffi.Pointer<ffi.Double>>,
              ffi.Pointer<ffi.Pointer<ffi.Double>>,
              ffi.Pointer<size_t>,
              ffi.Pointer<size_t>,
              size_t)>> init;
}

class gsl_wavelet extends ffi.Struct {
  external ffi.Pointer<gsl_wavelet_type> type;

  external ffi.Pointer<ffi.Double> h1;

  external ffi.Pointer<ffi.Double> g1;

  external ffi.Pointer<ffi.Double> h2;

  external ffi.Pointer<ffi.Double> g2;

  @size_t()
  external int nc;

  @size_t()
  external int offset;
}

class gsl_wavelet_workspace extends ffi.Struct {
  external ffi.Pointer<ffi.Double> scratch;

  @size_t()
  external int n;
}

abstract class gsl_filter_end_t {
  static const int GSL_FILTER_END_PADZERO = 0;
  static const int GSL_FILTER_END_PADVALUE = 1;
  static const int GSL_FILTER_END_TRUNCATE = 2;
}

abstract class gsl_filter_scale_t {
  static const int GSL_FILTER_SCALE_MAD = 0;
  static const int GSL_FILTER_SCALE_IQR = 1;
  static const int GSL_FILTER_SCALE_SN = 2;
  static const int GSL_FILTER_SCALE_QN = 3;
}

class gsl_filter_gaussian_workspace extends ffi.Struct {
  @size_t()
  external int K;

  external ffi.Pointer<ffi.Double> kernel;

  external ffi.Pointer<gsl_movstat_workspace> movstat_workspace_p;
}

class gsl_filter_median_workspace extends ffi.Struct {
  external ffi.Pointer<gsl_movstat_workspace> movstat_workspace_p;
}

class gsl_filter_rmedian_workspace extends ffi.Struct {
  @size_t()
  external int H;

  @size_t()
  external int K;

  external ffi.Pointer<ffi.Void> state;

  external ffi.Pointer<ffi.Double> window;

  external ffi.Pointer<gsl_movstat_accum> minmaxacc;

  external ffi.Pointer<gsl_movstat_workspace> movstat_workspace_p;
}

class gsl_filter_impulse_workspace extends ffi.Struct {
  external ffi.Pointer<gsl_movstat_workspace> movstat_workspace_p;
}

class gsl_histogram extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Double> range;

  external ffi.Pointer<ffi.Double> bin;
}

class gsl_histogram_pdf extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Double> range;

  external ffi.Pointer<ffi.Double> sum;
}

class gsl_multiset_struct extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int k;

  external ffi.Pointer<size_t> data;
}

typedef gsl_multiset = gsl_multiset_struct;

class gsl_ntuple extends ffi.Struct {
  external ffi.Pointer<FILE> file;

  external ffi.Pointer<ffi.Void> ntuple_data;

  @size_t()
  external int size;
}

class gsl_ntuple_select_fn extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      function;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_ntuple_value_fn extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> function;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_fft_halfcomplex_wavetable_float extends ffi.Struct {
  @size_t()
  external int n;

  @size_t()
  external int nf;

  @ffi.Array.multi([64])
  external ffi.Array<size_t> factor;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<gsl_complex_float>> twiddle;

  external ffi.Pointer<gsl_complex_float> trig;
}

class gsl_multimin_function_struct extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>)>> f;

  @size_t()
  external int n;

  external ffi.Pointer<ffi.Void> params;
}

class gsl_multimin_function_fdf_struct extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>)>> f;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_vector>)>> df;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<gsl_vector>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<gsl_vector>)>> fdf;

  @size_t()
  external int n;

  external ffi.Pointer<ffi.Void> params;
}

typedef gsl_multimin_function = gsl_multimin_function_struct;

class gsl_multimin_fminimizer_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int size;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>, size_t)>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multimin_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multimin_function>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>> iterate;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

class gsl_multimin_fminimizer extends ffi.Struct {
  external ffi.Pointer<gsl_multimin_fminimizer_type> type;

  external ffi.Pointer<gsl_multimin_function> f;

  @ffi.Double()
  external double fval;

  external ffi.Pointer<gsl_vector> x;

  @ffi.Double()
  external double size;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_multimin_fdfminimizer_type extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @size_t()
  external int size;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>, size_t)>>
      alloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multimin_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>,
              ffi.Double,
              ffi.Double)>> set1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<gsl_multimin_function_fdf>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<gsl_vector>,
              ffi.Pointer<gsl_vector>)>> iterate;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>> restart;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      free;
}

typedef gsl_multimin_function_fdf = gsl_multimin_function_fdf_struct;

class gsl_multimin_fdfminimizer extends ffi.Struct {
  external ffi.Pointer<gsl_multimin_fdfminimizer_type> type;

  external ffi.Pointer<gsl_multimin_function_fdf> fdf;

  @ffi.Double()
  external double f;

  external ffi.Pointer<gsl_vector> x;

  external ffi.Pointer<gsl_vector> gradient;

  external ffi.Pointer<gsl_vector> dx;

  external ffi.Pointer<ffi.Void> state;
}

class gsl_monte_vegas_state extends ffi.Struct {
  @size_t()
  external int dim;

  @size_t()
  external int bins_max;

  @ffi.Uint32()
  external int bins;

  @ffi.Uint32()
  external int boxes;

  external ffi.Pointer<ffi.Double> xi;

  external ffi.Pointer<ffi.Double> xin;

  external ffi.Pointer<ffi.Double> delx;

  external ffi.Pointer<ffi.Double> weight;

  @ffi.Double()
  external double vol;

  external ffi.Pointer<ffi.Double> x;

  external ffi.Pointer<ffi.Int32> bin;

  external ffi.Pointer<ffi.Int32> box;

  external ffi.Pointer<ffi.Double> d;

  @ffi.Double()
  external double alpha;

  @ffi.Int32()
  external int mode;

  @ffi.Int32()
  external int verbose;

  @ffi.Uint32()
  external int iterations;

  @ffi.Int32()
  external int stage;

  @ffi.Double()
  external double jac;

  @ffi.Double()
  external double wtd_int_sum;

  @ffi.Double()
  external double sum_wgts;

  @ffi.Double()
  external double chi_sum;

  @ffi.Double()
  external double chisq;

  @ffi.Double()
  external double result;

  @ffi.Double()
  external double sigma;

  @ffi.Uint32()
  external int it_start;

  @ffi.Uint32()
  external int it_num;

  @ffi.Uint32()
  external int samples;

  @ffi.Uint32()
  external int calls_per_box;

  external ffi.Pointer<FILE> ostream;
}

class gsl_monte_vegas_params extends ffi.Struct {
  @ffi.Double()
  external double alpha;

  @size_t()
  external int iterations;

  @ffi.Int32()
  external int stage;

  @ffi.Int32()
  external int mode;

  @ffi.Int32()
  external int verbose;

  external ffi.Pointer<FILE> ostream;
}

const int GSL_SUCCESS = 0;

const int GSL_FAILURE = -1;

const int GSL_CONTINUE = -2;

const int GSL_EDOM = 1;

const int GSL_ERANGE = 2;

const int GSL_EFAULT = 3;

const int GSL_EINVAL = 4;

const int GSL_EFAILED = 5;

const int GSL_EFACTOR = 6;

const int GSL_ESANITY = 7;

const int GSL_ENOMEM = 8;

const int GSL_EBADFUNC = 9;

const int GSL_ERUNAWAY = 10;

const int GSL_EMAXITER = 11;

const int GSL_EZERODIV = 12;

const int GSL_EBADTOL = 13;

const int GSL_ETOL = 14;

const int GSL_EUNDRFLW = 15;

const int GSL_EOVRFLW = 16;

const int GSL_ELOSS = 17;

const int GSL_EROUND = 18;

const int GSL_EBADLEN = 19;

const int GSL_ENOTSQR = 20;

const int GSL_ESING = 21;

const int GSL_EDIVERGE = 22;

const int GSL_EUNSUP = 23;

const int GSL_EUNIMPL = 24;

const int GSL_ECACHE = 25;

const int GSL_ETABLE = 26;

const int GSL_ENOPROG = 27;

const int GSL_ENOPROGJ = 28;

const int GSL_ETOLF = 29;

const int GSL_ETOLX = 30;

const int GSL_ETOLG = 31;

const int GSL_EOF = 32;

const int FP_NAN = 0;

const int FP_INFINITE = 1;

const int FP_ZERO = 2;

const int FP_SUBNORMAL = 3;

const int FP_NORMAL = 4;

const int GSL_SPMATRIX_COO = 0;

const int GSL_SPMATRIX_CSC = 1;

const int GSL_SPMATRIX_CSR = 2;

const int GSL_SPMATRIX_TRIPLET = 0;

const int GSL_SPMATRIX_CCS = 1;

const int GSL_SPMATRIX_CRS = 2;

const int GSL_IEEE_TYPE_NAN = 1;

const int GSL_IEEE_TYPE_INF = 2;

const int GSL_IEEE_TYPE_NORMAL = 3;

const int GSL_IEEE_TYPE_DENORMAL = 4;

const int GSL_IEEE_TYPE_ZERO = 5;

const int GSL_IEEE_SINGLE_PRECISION = 1;

const int GSL_IEEE_DOUBLE_PRECISION = 2;

const int GSL_IEEE_EXTENDED_PRECISION = 3;

const int GSL_IEEE_ROUND_TO_NEAREST = 1;

const int GSL_IEEE_ROUND_DOWN = 2;

const int GSL_IEEE_ROUND_UP = 3;

const int GSL_IEEE_ROUND_TO_ZERO = 4;

const int GSL_IEEE_MASK_INVALID = 1;

const int GSL_IEEE_MASK_DENORMALIZED = 2;

const int GSL_IEEE_MASK_DIVISION_BY_ZERO = 4;

const int GSL_IEEE_MASK_OVERFLOW = 8;

const int GSL_IEEE_MASK_UNDERFLOW = 16;

const int GSL_IEEE_MASK_ALL = 31;

const int GSL_IEEE_TRAP_INEXACT = 32;

const int GSL_INTEG_GAUSS15 = 1;

const int GSL_INTEG_GAUSS21 = 2;

const int GSL_INTEG_GAUSS31 = 3;

const int GSL_INTEG_GAUSS41 = 4;

const int GSL_INTEG_GAUSS51 = 5;

const int GSL_INTEG_GAUSS61 = 6;

const int GSL_MESSAGE_MASK_A = 1;

const int GSL_MESSAGE_MASK_B = 2;

const int GSL_MESSAGE_MASK_C = 4;

const int GSL_MESSAGE_MASK_D = 8;

const int GSL_MESSAGE_MASK_E = 16;

const int GSL_MESSAGE_MASK_F = 32;

const int GSL_MESSAGE_MASK_G = 64;

const int GSL_MESSAGE_MASK_H = 128;

const int GSL_VEGAS_MODE_IMPORTANCE = 1;

const int GSL_VEGAS_MODE_IMPORTANCE_ONLY = 0;

const int GSL_VEGAS_MODE_STRATIFIED = -1;

const int GSL_COMPLEX_LEGACY = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201505;

const int __STDC_NO_THREADS__ = 1;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 23;

const int _SYS_CDEFS_H = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int NULL = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __ENUM_IDTYPE_T = 1;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int _ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __FD_SETSIZE = 1024;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __time_t_defined = 1;

const int __clockid_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _SYS_SELECT_H = 1;

const String __FD_ZERO_STOS = 'stosq';

const int _SIGSET_H_types = 1;

const int _SIGSET_NWORDS = 16;

const int __timespec_defined = 1;

const int _STRUCT_TIMEVAL = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _SYS_SYSMACROS_H = 1;

const int _BITS_PTHREADTYPES_H = 1;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int __have_pthread_attr_t = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_SPINS = 0;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __PTHREAD_RWLOCK_INT_FLAGS_SHARED = 1;

const int _ALLOCA_H = 1;

const int _STDIO_H = 1;

const int __FILE_defined = 1;

const int ____FILE_defined = 1;

const int _G_config_h = 1;

const int ____mbstate_t_defined = 1;

const int _G_HAVE_MMAP = 1;

const int _G_HAVE_MREMAP = 1;

const int _G_IO_IO_FILE_VERSION = 131073;

const int _G_BUFSIZ = 8192;

const int _IO_BUFSIZ = 8192;

const int __GNUC_VA_LIST = 1;

const int _IO_UNIFIED_JUMPTABLES = 1;

const int EOF = -1;

const int _IOS_INPUT = 1;

const int _IOS_OUTPUT = 2;

const int _IOS_ATEND = 4;

const int _IOS_APPEND = 8;

const int _IOS_TRUNC = 16;

const int _IOS_NOCREATE = 32;

const int _IOS_NOREPLACE = 64;

const int _IOS_BIN = 128;

const int _IO_MAGIC = 4222418944;

const int _OLD_STDIO_MAGIC = 4206624768;

const int _IO_MAGIC_MASK = 4294901760;

const int _IO_USER_BUF = 1;

const int _IO_UNBUFFERED = 2;

const int _IO_NO_READS = 4;

const int _IO_NO_WRITES = 8;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_DELETE_DONT_CLOSE = 64;

const int _IO_LINKED = 128;

const int _IO_IN_BACKUP = 256;

const int _IO_LINE_BUF = 512;

const int _IO_TIED_PUT_GET = 1024;

const int _IO_CURRENTLY_PUTTING = 2048;

const int _IO_IS_APPENDING = 4096;

const int _IO_IS_FILEBUF = 8192;

const int _IO_BAD_SEEN = 16384;

const int _IO_USER_LOCK = 32768;

const int _IO_FLAGS2_MMAP = 1;

const int _IO_FLAGS2_NOTCANCEL = 2;

const int _IO_FLAGS2_USER_WBUF = 8;

const int _IO_SKIPWS = 1;

const int _IO_LEFT = 2;

const int _IO_RIGHT = 4;

const int _IO_INTERNAL = 8;

const int _IO_DEC = 16;

const int _IO_OCT = 32;

const int _IO_HEX = 64;

const int _IO_SHOWBASE = 128;

const int _IO_SHOWPOINT = 256;

const int _IO_UPPERCASE = 512;

const int _IO_SHOWPOS = 1024;

const int _IO_SCIENTIFIC = 2048;

const int _IO_FIXED = 4096;

const int _IO_UNITBUF = 8192;

const int _IO_STDIO = 16384;

const int _IO_DONT_CLOSE = 32768;

const int _IO_BOOLALPHA = 65536;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int _ERRNO_H = 1;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int GSL_RANGE_CHECK = 1;

const int GSL_SF_MATHIEU_COEFF = 100;

const int _GSL_PREC_T_NUM = 3;

const int _MATH_H = 1;

const int _BITS_LIBM_SIMD_DECL_STUBS_H = 1;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double INFINITY = double.infinity;

const double NAN = double.nan;

const int _MATH_H_MATHDEF = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int __MATH_DECLARE_LDOUBLE = 1;

const int FP_NAN1 = 0;

const int FP_INFINITE1 = 1;

const int FP_ZERO1 = 2;

const int FP_SUBNORMAL1 = 3;

const int FP_NORMAL1 = 4;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const double X_TLOSS = 14148475504056880.0;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const double HUGE = 3.4028234663852886e+38;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int PTHREAD_STACK_MIN = 16384;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int FLT_EVAL_METHOD = 0;

const int FLT_RADIX = 2;

const int FLT_MANT_DIG = 24;

const int DBL_MANT_DIG = 53;

const int LDBL_MANT_DIG = 64;

const int DECIMAL_DIG = 21;

const int FLT_DIG = 6;

const int DBL_DIG = 15;

const int LDBL_DIG = 18;

const int FLT_MIN_EXP = -125;

const int DBL_MIN_EXP = -1021;

const int LDBL_MIN_EXP = -16381;

const int FLT_MIN_10_EXP = -37;

const int DBL_MIN_10_EXP = -307;

const int LDBL_MIN_10_EXP = -4931;

const int FLT_MAX_EXP = 128;

const int DBL_MAX_EXP = 1024;

const int LDBL_MAX_EXP = 16384;

const int FLT_MAX_10_EXP = 38;

const int DBL_MAX_10_EXP = 308;

const int LDBL_MAX_10_EXP = 4932;

const double FLT_MAX = 3.4028234663852886e+38;

const double DBL_MAX = 1.7976931348623157e+308;

const double LDBL_MAX = double.infinity;

const double FLT_EPSILON = 1.1920928955078125e-7;

const double DBL_EPSILON = 2.220446049250313e-16;

const double LDBL_EPSILON = 1.0842021724855044e-19;

const double FLT_MIN = 1.1754943508222875e-38;

const double DBL_MIN = 2.2250738585072014e-308;

const double LDBL_MIN = 0.0;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const double DBL_TRUE_MIN = 5e-324;

const double LDBL_TRUE_MIN = 0.0;

const int FLT_DECIMAL_DIG = 9;

const int DBL_DECIMAL_DIG = 17;

const int LDBL_DECIMAL_DIG = 21;

const int FLT_HAS_SUBNORM = 1;

const int DBL_HAS_SUBNORM = 1;

const int LDBL_HAS_SUBNORM = 1;

const double GSL_DBL_EPSILON = 2.220446049250313e-16;

const double GSL_SQRT_DBL_EPSILON = 1.4901161193847656e-8;

const double GSL_ROOT3_DBL_EPSILON = 0.000006055454452393343;

const double GSL_ROOT4_DBL_EPSILON = 0.0001220703125;

const double GSL_ROOT5_DBL_EPSILON = 0.000740095979741405;

const double GSL_ROOT6_DBL_EPSILON = 0.002460783300575925;

const double GSL_LOG_DBL_EPSILON = -36.04365338911715;

const double GSL_DBL_MIN = 2.2250738585072014e-308;

const double GSL_SQRT_DBL_MIN = 1.4916681462400413e-154;

const double GSL_ROOT3_DBL_MIN = 2.8126442852362996e-103;

const double GSL_ROOT4_DBL_MIN = 1.221338669755462e-77;

const double GSL_ROOT5_DBL_MIN = 2.9476022969691763e-62;

const double GSL_ROOT6_DBL_MIN = 5.303436890579822e-52;

const double GSL_LOG_DBL_MIN = -708.3964185322641;

const double GSL_DBL_MAX = 1.7976931348623157e+308;

const double GSL_SQRT_DBL_MAX = 1.3407807929942596e+154;

const double GSL_ROOT3_DBL_MAX = 5.64380309412229e+102;

const double GSL_ROOT4_DBL_MAX = 1.157920892373162e+77;

const double GSL_ROOT5_DBL_MAX = 4.4765466227572707e+61;

const double GSL_ROOT6_DBL_MAX = 2.3756689782295612e+51;

const double GSL_LOG_DBL_MAX = 709.782712893384;

const double GSL_FLT_EPSILON = 1.1920928955078125e-7;

const double GSL_SQRT_FLT_EPSILON = 0.00034526698300124393;

const double GSL_ROOT3_FLT_EPSILON = 0.00492156660115185;

const double GSL_ROOT4_FLT_EPSILON = 0.018581361171917516;

const double GSL_ROOT5_FLT_EPSILON = 0.04123462221165294;

const double GSL_ROOT6_FLT_EPSILON = 0.07015387801933583;

const double GSL_LOG_FLT_EPSILON = -15.942385152878742;

const double GSL_FLT_MIN = 1.1754943508222875e-38;

const double GSL_SQRT_FLT_MIN = 1.0842021724855044e-19;

const double GSL_ROOT3_FLT_MIN = 2.273736754432324e-13;

const double GSL_ROOT4_FLT_MIN = 3.2927225399135965e-10;

const double GSL_ROOT5_FLT_MIN = 2.5944428542140822e-8;

const double GSL_ROOT6_FLT_MIN = 4.768371582031254e-7;

const double GSL_LOG_FLT_MIN = -87.3365447505531;

const double GSL_FLT_MAX = 3.4028234663852886e+38;

const double GSL_SQRT_FLT_MAX = 18446743523953730000.0;

const double GSL_ROOT3_FLT_MAX = 6981463519622.324;

const double GSL_ROOT4_FLT_MAX = 4294967231.9999986;

const double GSL_ROOT5_FLT_MAX = 50859007.85596004;

const double GSL_ROOT6_FLT_MAX = 2642245.923380775;

const double GSL_LOG_FLT_MAX = 88.72283905206835;

const double GSL_SFLT_EPSILON = 0.00048828125;

const double GSL_SQRT_SFLT_EPSILON = 0.02209708691207961;

const double GSL_ROOT3_SFLT_EPSILON = 0.07874506561842959;

const double GSL_ROOT4_SFLT_EPSILON = 0.14865088937534013;

const double GSL_ROOT5_SFLT_EPSILON = 0.217637640824031;

const double GSL_ROOT6_SFLT_EPSILON = 0.28061551207734325;

const double GSL_LOG_SFLT_EPSILON = -7.6246189861593985;

const double GSL_MACH_EPS = 2.220446049250313e-16;

const double GSL_SQRT_MACH_EPS = 3.2e-8;

const double GSL_ROOT3_MACH_EPS = 0.00001;

const double GSL_ROOT4_MACH_EPS = 0.000178;

const double GSL_ROOT5_MACH_EPS = 0.001;

const double GSL_ROOT6_MACH_EPS = 0.00316;

const double GSL_LOG_MACH_EPS = -34.54;

const double GSL_POSINF = double.infinity;

const double GSL_NEGINF = double.negativeInfinity;

const double GSL_NAN = double.nan;

const double GSL_POSZERO = 0.0;

const double GSL_NEGZERO = -0.0;

const double M_SQRT3 = 1.7320508075688772;

const double M_SQRTPI = 1.772453850905516;

const double M_LNPI = 1.1447298858494002;

const double M_EULER = 0.5772156649015329;

const int GSL_SPMATRIX_FLG_GROW = 1;

const int GSL_SPMATRIX_FLG_FIXED = 2;

const int GSL_BST_AVL_MAX_HEIGHT = 32;

const int GSL_BST_RB_MAX_HEIGHT = 48;

const int GSL_PREC_DOUBLE = 0;

const int GSL_PREC_SINGLE = 1;

const int GSL_PREC_APPROX = 2;

const int GSL_MODE_DEFAULT = 0;

const int GSL_ODEIV_HADJ_INC = 1;

const int GSL_ODEIV_HADJ_NIL = 0;

const int GSL_ODEIV_HADJ_DEC = -1;

const double GSL_CONST_MKS_SPEED_OF_LIGHT = 299792458.0;

const double GSL_CONST_MKS_GRAVITATIONAL_CONSTANT = 6.673e-11;

const double GSL_CONST_MKS_PLANCKS_CONSTANT_H = 6.62606896e-34;

const double GSL_CONST_MKS_PLANCKS_CONSTANT_HBAR = 1.05457162825e-34;

const double GSL_CONST_MKS_ASTRONOMICAL_UNIT = 149597870691.0;

const double GSL_CONST_MKS_LIGHT_YEAR = 9460536207070000.0;

const double GSL_CONST_MKS_PARSEC = 30856775813500000.0;

const double GSL_CONST_MKS_GRAV_ACCEL = 9.80665;

const double GSL_CONST_MKS_ELECTRON_VOLT = 1.602176487e-19;

const double GSL_CONST_MKS_MASS_ELECTRON = 9.10938188e-31;

const double GSL_CONST_MKS_MASS_MUON = 1.88353109e-28;

const double GSL_CONST_MKS_MASS_PROTON = 1.67262158e-27;

const double GSL_CONST_MKS_MASS_NEUTRON = 1.67492716e-27;

const double GSL_CONST_MKS_RYDBERG = 2.17987196968e-18;

const double GSL_CONST_MKS_BOLTZMANN = 1.3806504e-23;

const double GSL_CONST_MKS_MOLAR_GAS = 8.314472;

const double GSL_CONST_MKS_STANDARD_GAS_VOLUME = 0.022710981;

const double GSL_CONST_MKS_MINUTE = 60.0;

const double GSL_CONST_MKS_HOUR = 3600.0;

const double GSL_CONST_MKS_DAY = 86400.0;

const double GSL_CONST_MKS_WEEK = 604800.0;

const double GSL_CONST_MKS_INCH = 0.0254;

const double GSL_CONST_MKS_FOOT = 0.3048;

const double GSL_CONST_MKS_YARD = 0.9144;

const double GSL_CONST_MKS_MILE = 1609.344;

const double GSL_CONST_MKS_NAUTICAL_MILE = 1852.0;

const double GSL_CONST_MKS_FATHOM = 1.8288;

const double GSL_CONST_MKS_MIL = 0.0000254;

const double GSL_CONST_MKS_POINT = 0.000352777777778;

const double GSL_CONST_MKS_TEXPOINT = 0.000351459803515;

const double GSL_CONST_MKS_MICRON = 0.000001;

const double GSL_CONST_MKS_ANGSTROM = 1e-10;

const double GSL_CONST_MKS_HECTARE = 10000.0;

const double GSL_CONST_MKS_ACRE = 4046.85642241;

const double GSL_CONST_MKS_BARN = 1e-28;

const double GSL_CONST_MKS_LITER = 0.001;

const double GSL_CONST_MKS_US_GALLON = 0.00378541178402;

const double GSL_CONST_MKS_QUART = 0.000946352946004;

const double GSL_CONST_MKS_PINT = 0.000473176473002;

const double GSL_CONST_MKS_CUP = 0.000236588236501;

const double GSL_CONST_MKS_FLUID_OUNCE = 0.0000295735295626;

const double GSL_CONST_MKS_TABLESPOON = 0.0000147867647813;

const double GSL_CONST_MKS_TEASPOON = 0.00000492892159375;

const double GSL_CONST_MKS_CANADIAN_GALLON = 0.00454609;

const double GSL_CONST_MKS_UK_GALLON = 0.004546092;

const double GSL_CONST_MKS_MILES_PER_HOUR = 0.44704;

const double GSL_CONST_MKS_KILOMETERS_PER_HOUR = 0.277777777778;

const double GSL_CONST_MKS_KNOT = 0.514444444444;

const double GSL_CONST_MKS_POUND_MASS = 0.45359237;

const double GSL_CONST_MKS_OUNCE_MASS = 0.028349523125;

const double GSL_CONST_MKS_TON = 907.18474;

const double GSL_CONST_MKS_METRIC_TON = 1000.0;

const double GSL_CONST_MKS_UK_TON = 1016.0469088;

const double GSL_CONST_MKS_TROY_OUNCE = 0.031103475;

const double GSL_CONST_MKS_CARAT = 0.0002;

const double GSL_CONST_MKS_UNIFIED_ATOMIC_MASS = 1.660538782e-27;

const double GSL_CONST_MKS_GRAM_FORCE = 0.00980665;

const double GSL_CONST_MKS_POUND_FORCE = 4.44822161526;

const double GSL_CONST_MKS_KILOPOUND_FORCE = 4448.22161526;

const double GSL_CONST_MKS_POUNDAL = 0.138255;

const double GSL_CONST_MKS_CALORIE = 4.1868;

const double GSL_CONST_MKS_BTU = 1055.05585262;

const double GSL_CONST_MKS_THERM = 105506000.0;

const double GSL_CONST_MKS_HORSEPOWER = 745.7;

const double GSL_CONST_MKS_BAR = 100000.0;

const double GSL_CONST_MKS_STD_ATMOSPHERE = 101325.0;

const double GSL_CONST_MKS_TORR = 133.322368421;

const double GSL_CONST_MKS_METER_OF_MERCURY = 133322.368421;

const double GSL_CONST_MKS_INCH_OF_MERCURY = 3386.38815789;

const double GSL_CONST_MKS_INCH_OF_WATER = 249.0889;

const double GSL_CONST_MKS_PSI = 6894.75729317;

const double GSL_CONST_MKS_POISE = 0.1;

const double GSL_CONST_MKS_STOKES = 0.0001;

const double GSL_CONST_MKS_STILB = 10000.0;

const double GSL_CONST_MKS_LUMEN = 1.0;

const double GSL_CONST_MKS_LUX = 1.0;

const double GSL_CONST_MKS_PHOT = 10000.0;

const double GSL_CONST_MKS_FOOTCANDLE = 10.76;

const double GSL_CONST_MKS_LAMBERT = 10000.0;

const double GSL_CONST_MKS_FOOTLAMBERT = 10.7639104;

const double GSL_CONST_MKS_CURIE = 37000000000.0;

const double GSL_CONST_MKS_ROENTGEN = 0.000258;

const double GSL_CONST_MKS_RAD = 0.01;

const double GSL_CONST_MKS_SOLAR_MASS = 1.98892e+30;

const double GSL_CONST_MKS_BOHR_RADIUS = 5.291772083e-11;

const double GSL_CONST_MKS_NEWTON = 1.0;

const double GSL_CONST_MKS_DYNE = 0.00001;

const double GSL_CONST_MKS_JOULE = 1.0;

const double GSL_CONST_MKS_ERG = 1e-7;

const double GSL_CONST_MKS_STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-8;

const double GSL_CONST_MKS_THOMSON_CROSS_SECTION = 6.65245893699e-29;

const double GSL_CONST_MKS_BOHR_MAGNETON = 9.27400899e-24;

const double GSL_CONST_MKS_NUCLEAR_MAGNETON = 5.05078317e-27;

const double GSL_CONST_MKS_ELECTRON_MAGNETIC_MOMENT = 9.28476362e-24;

const double GSL_CONST_MKS_PROTON_MAGNETIC_MOMENT = 1.410606633e-26;

const double GSL_CONST_MKS_FARADAY = 96485.3429775;

const double GSL_CONST_MKS_ELECTRON_CHARGE = 1.602176487e-19;

const double GSL_CONST_MKS_VACUUM_PERMITTIVITY = 8.854187817e-12;

const double GSL_CONST_MKS_VACUUM_PERMEABILITY = 0.00000125663706144;

const double GSL_CONST_MKS_DEBYE = 3.33564095198e-30;

const double GSL_CONST_MKS_GAUSS = 0.0001;

const double GSL_CONST_CGSM_SPEED_OF_LIGHT = 29979245800.0;

const double GSL_CONST_CGSM_GRAVITATIONAL_CONSTANT = 6.673e-8;

const double GSL_CONST_CGSM_PLANCKS_CONSTANT_H = 6.62606896e-27;

const double GSL_CONST_CGSM_PLANCKS_CONSTANT_HBAR = 1.05457162825e-27;

const double GSL_CONST_CGSM_ASTRONOMICAL_UNIT = 14959787069100.0;

const double GSL_CONST_CGSM_LIGHT_YEAR = 946053620707000000.0;

const double GSL_CONST_CGSM_PARSEC = 3085677581350000000.0;

const double GSL_CONST_CGSM_GRAV_ACCEL = 980.665;

const double GSL_CONST_CGSM_ELECTRON_VOLT = 1.602176487e-12;

const double GSL_CONST_CGSM_MASS_ELECTRON = 9.10938188e-28;

const double GSL_CONST_CGSM_MASS_MUON = 1.88353109e-25;

const double GSL_CONST_CGSM_MASS_PROTON = 1.67262158e-24;

const double GSL_CONST_CGSM_MASS_NEUTRON = 1.67492716e-24;

const double GSL_CONST_CGSM_RYDBERG = 2.17987196968e-11;

const double GSL_CONST_CGSM_BOLTZMANN = 1.3806504e-16;

const double GSL_CONST_CGSM_MOLAR_GAS = 83144720.0;

const double GSL_CONST_CGSM_STANDARD_GAS_VOLUME = 22710.981;

const double GSL_CONST_CGSM_MINUTE = 60.0;

const double GSL_CONST_CGSM_HOUR = 3600.0;

const double GSL_CONST_CGSM_DAY = 86400.0;

const double GSL_CONST_CGSM_WEEK = 604800.0;

const double GSL_CONST_CGSM_INCH = 2.54;

const double GSL_CONST_CGSM_FOOT = 30.48;

const double GSL_CONST_CGSM_YARD = 91.44;

const double GSL_CONST_CGSM_MILE = 160934.4;

const double GSL_CONST_CGSM_NAUTICAL_MILE = 185200.0;

const double GSL_CONST_CGSM_FATHOM = 182.88;

const double GSL_CONST_CGSM_MIL = 0.00254;

const double GSL_CONST_CGSM_POINT = 0.0352777777778;

const double GSL_CONST_CGSM_TEXPOINT = 0.0351459803515;

const double GSL_CONST_CGSM_MICRON = 0.0001;

const double GSL_CONST_CGSM_ANGSTROM = 1e-8;

const double GSL_CONST_CGSM_HECTARE = 100000000.0;

const double GSL_CONST_CGSM_ACRE = 40468564.2241;

const double GSL_CONST_CGSM_BARN = 1e-24;

const double GSL_CONST_CGSM_LITER = 1000.0;

const double GSL_CONST_CGSM_US_GALLON = 3785.41178402;

const double GSL_CONST_CGSM_QUART = 946.352946004;

const double GSL_CONST_CGSM_PINT = 473.176473002;

const double GSL_CONST_CGSM_CUP = 236.588236501;

const double GSL_CONST_CGSM_FLUID_OUNCE = 29.5735295626;

const double GSL_CONST_CGSM_TABLESPOON = 14.7867647813;

const double GSL_CONST_CGSM_TEASPOON = 4.92892159375;

const double GSL_CONST_CGSM_CANADIAN_GALLON = 4546.09;

const double GSL_CONST_CGSM_UK_GALLON = 4546.092;

const double GSL_CONST_CGSM_MILES_PER_HOUR = 44.704;

const double GSL_CONST_CGSM_KILOMETERS_PER_HOUR = 27.7777777778;

const double GSL_CONST_CGSM_KNOT = 51.4444444444;

const double GSL_CONST_CGSM_POUND_MASS = 453.59237;

const double GSL_CONST_CGSM_OUNCE_MASS = 28.349523125;

const double GSL_CONST_CGSM_TON = 907184.74;

const double GSL_CONST_CGSM_METRIC_TON = 1000000.0;

const double GSL_CONST_CGSM_UK_TON = 1016046.9088;

const double GSL_CONST_CGSM_TROY_OUNCE = 31.103475;

const double GSL_CONST_CGSM_CARAT = 0.2;

const double GSL_CONST_CGSM_UNIFIED_ATOMIC_MASS = 1.660538782e-24;

const double GSL_CONST_CGSM_GRAM_FORCE = 980.665;

const double GSL_CONST_CGSM_POUND_FORCE = 444822.161526;

const double GSL_CONST_CGSM_KILOPOUND_FORCE = 444822161.526;

const double GSL_CONST_CGSM_POUNDAL = 13825.5;

const double GSL_CONST_CGSM_CALORIE = 41868000.0;

const double GSL_CONST_CGSM_BTU = 10550558526.2;

const double GSL_CONST_CGSM_THERM = 1055060000000000.0;

const double GSL_CONST_CGSM_HORSEPOWER = 7457000000.0;

const double GSL_CONST_CGSM_BAR = 1000000.0;

const double GSL_CONST_CGSM_STD_ATMOSPHERE = 1013250.0;

const double GSL_CONST_CGSM_TORR = 1333.22368421;

const double GSL_CONST_CGSM_METER_OF_MERCURY = 1333223.68421;

const double GSL_CONST_CGSM_INCH_OF_MERCURY = 33863.8815789;

const double GSL_CONST_CGSM_INCH_OF_WATER = 2490.889;

const double GSL_CONST_CGSM_PSI = 68947.5729317;

const double GSL_CONST_CGSM_POISE = 1.0;

const double GSL_CONST_CGSM_STOKES = 1.0;

const double GSL_CONST_CGSM_STILB = 1.0;

const double GSL_CONST_CGSM_LUMEN = 1.0;

const double GSL_CONST_CGSM_LUX = 0.0001;

const double GSL_CONST_CGSM_PHOT = 1.0;

const double GSL_CONST_CGSM_FOOTCANDLE = 0.001076;

const double GSL_CONST_CGSM_LAMBERT = 1.0;

const double GSL_CONST_CGSM_FOOTLAMBERT = 0.00107639104;

const double GSL_CONST_CGSM_CURIE = 37000000000.0;

const double GSL_CONST_CGSM_ROENTGEN = 2.58e-8;

const double GSL_CONST_CGSM_RAD = 100.0;

const double GSL_CONST_CGSM_SOLAR_MASS = 1.98892e+33;

const double GSL_CONST_CGSM_BOHR_RADIUS = 5.291772083e-9;

const double GSL_CONST_CGSM_NEWTON = 100000.0;

const double GSL_CONST_CGSM_DYNE = 1.0;

const double GSL_CONST_CGSM_JOULE = 10000000.0;

const double GSL_CONST_CGSM_ERG = 1.0;

const double GSL_CONST_CGSM_STEFAN_BOLTZMANN_CONSTANT = 0.0000567040047374;

const double GSL_CONST_CGSM_THOMSON_CROSS_SECTION = 6.65245893699e-25;

const double GSL_CONST_CGSM_BOHR_MAGNETON = 9.27400899e-21;

const double GSL_CONST_CGSM_NUCLEAR_MAGNETON = 5.05078317e-24;

const double GSL_CONST_CGSM_ELECTRON_MAGNETIC_MOMENT = 9.28476362e-21;

const double GSL_CONST_CGSM_PROTON_MAGNETIC_MOMENT = 1.410606633e-23;

const double GSL_CONST_CGSM_FARADAY = 9648.53429775;

const double GSL_CONST_CGSM_ELECTRON_CHARGE = 1.602176487e-20;

const double GSL_CONST_NUM_FINE_STRUCTURE = 0.007297352533;

const double GSL_CONST_NUM_AVOGADRO = 6.02214199e+23;

const double GSL_CONST_NUM_YOTTA = 1e+24;

const double GSL_CONST_NUM_ZETTA = 1e+21;

const double GSL_CONST_NUM_EXA = 1000000000000000000.0;

const double GSL_CONST_NUM_PETA = 1000000000000000.0;

const double GSL_CONST_NUM_TERA = 1000000000000.0;

const double GSL_CONST_NUM_GIGA = 1000000000.0;

const double GSL_CONST_NUM_MEGA = 1000000.0;

const double GSL_CONST_NUM_KILO = 1000.0;

const double GSL_CONST_NUM_MILLI = 0.001;

const double GSL_CONST_NUM_MICRO = 0.000001;

const double GSL_CONST_NUM_NANO = 1e-9;

const double GSL_CONST_NUM_PICO = 1e-12;

const double GSL_CONST_NUM_FEMTO = 1e-15;

const double GSL_CONST_NUM_ATTO = 1e-18;

const double GSL_CONST_NUM_ZEPTO = 1e-21;

const double GSL_CONST_NUM_YOCTO = 1e-24;

const double GSL_CONST_MKSA_SPEED_OF_LIGHT = 299792458.0;

const double GSL_CONST_MKSA_GRAVITATIONAL_CONSTANT = 6.673e-11;

const double GSL_CONST_MKSA_PLANCKS_CONSTANT_H = 6.62606896e-34;

const double GSL_CONST_MKSA_PLANCKS_CONSTANT_HBAR = 1.05457162825e-34;

const double GSL_CONST_MKSA_ASTRONOMICAL_UNIT = 149597870691.0;

const double GSL_CONST_MKSA_LIGHT_YEAR = 9460536207070000.0;

const double GSL_CONST_MKSA_PARSEC = 30856775813500000.0;

const double GSL_CONST_MKSA_GRAV_ACCEL = 9.80665;

const double GSL_CONST_MKSA_ELECTRON_VOLT = 1.602176487e-19;

const double GSL_CONST_MKSA_MASS_ELECTRON = 9.10938188e-31;

const double GSL_CONST_MKSA_MASS_MUON = 1.88353109e-28;

const double GSL_CONST_MKSA_MASS_PROTON = 1.67262158e-27;

const double GSL_CONST_MKSA_MASS_NEUTRON = 1.67492716e-27;

const double GSL_CONST_MKSA_RYDBERG = 2.17987196968e-18;

const double GSL_CONST_MKSA_BOLTZMANN = 1.3806504e-23;

const double GSL_CONST_MKSA_MOLAR_GAS = 8.314472;

const double GSL_CONST_MKSA_STANDARD_GAS_VOLUME = 0.022710981;

const double GSL_CONST_MKSA_MINUTE = 60.0;

const double GSL_CONST_MKSA_HOUR = 3600.0;

const double GSL_CONST_MKSA_DAY = 86400.0;

const double GSL_CONST_MKSA_WEEK = 604800.0;

const double GSL_CONST_MKSA_INCH = 0.0254;

const double GSL_CONST_MKSA_FOOT = 0.3048;

const double GSL_CONST_MKSA_YARD = 0.9144;

const double GSL_CONST_MKSA_MILE = 1609.344;

const double GSL_CONST_MKSA_NAUTICAL_MILE = 1852.0;

const double GSL_CONST_MKSA_FATHOM = 1.8288;

const double GSL_CONST_MKSA_MIL = 0.0000254;

const double GSL_CONST_MKSA_POINT = 0.000352777777778;

const double GSL_CONST_MKSA_TEXPOINT = 0.000351459803515;

const double GSL_CONST_MKSA_MICRON = 0.000001;

const double GSL_CONST_MKSA_ANGSTROM = 1e-10;

const double GSL_CONST_MKSA_HECTARE = 10000.0;

const double GSL_CONST_MKSA_ACRE = 4046.85642241;

const double GSL_CONST_MKSA_BARN = 1e-28;

const double GSL_CONST_MKSA_LITER = 0.001;

const double GSL_CONST_MKSA_US_GALLON = 0.00378541178402;

const double GSL_CONST_MKSA_QUART = 0.000946352946004;

const double GSL_CONST_MKSA_PINT = 0.000473176473002;

const double GSL_CONST_MKSA_CUP = 0.000236588236501;

const double GSL_CONST_MKSA_FLUID_OUNCE = 0.0000295735295626;

const double GSL_CONST_MKSA_TABLESPOON = 0.0000147867647813;

const double GSL_CONST_MKSA_TEASPOON = 0.00000492892159375;

const double GSL_CONST_MKSA_CANADIAN_GALLON = 0.00454609;

const double GSL_CONST_MKSA_UK_GALLON = 0.004546092;

const double GSL_CONST_MKSA_MILES_PER_HOUR = 0.44704;

const double GSL_CONST_MKSA_KILOMETERS_PER_HOUR = 0.277777777778;

const double GSL_CONST_MKSA_KNOT = 0.514444444444;

const double GSL_CONST_MKSA_POUND_MASS = 0.45359237;

const double GSL_CONST_MKSA_OUNCE_MASS = 0.028349523125;

const double GSL_CONST_MKSA_TON = 907.18474;

const double GSL_CONST_MKSA_METRIC_TON = 1000.0;

const double GSL_CONST_MKSA_UK_TON = 1016.0469088;

const double GSL_CONST_MKSA_TROY_OUNCE = 0.031103475;

const double GSL_CONST_MKSA_CARAT = 0.0002;

const double GSL_CONST_MKSA_UNIFIED_ATOMIC_MASS = 1.660538782e-27;

const double GSL_CONST_MKSA_GRAM_FORCE = 0.00980665;

const double GSL_CONST_MKSA_POUND_FORCE = 4.44822161526;

const double GSL_CONST_MKSA_KILOPOUND_FORCE = 4448.22161526;

const double GSL_CONST_MKSA_POUNDAL = 0.138255;

const double GSL_CONST_MKSA_CALORIE = 4.1868;

const double GSL_CONST_MKSA_BTU = 1055.05585262;

const double GSL_CONST_MKSA_THERM = 105506000.0;

const double GSL_CONST_MKSA_HORSEPOWER = 745.7;

const double GSL_CONST_MKSA_BAR = 100000.0;

const double GSL_CONST_MKSA_STD_ATMOSPHERE = 101325.0;

const double GSL_CONST_MKSA_TORR = 133.322368421;

const double GSL_CONST_MKSA_METER_OF_MERCURY = 133322.368421;

const double GSL_CONST_MKSA_INCH_OF_MERCURY = 3386.38815789;

const double GSL_CONST_MKSA_INCH_OF_WATER = 249.0889;

const double GSL_CONST_MKSA_PSI = 6894.75729317;

const double GSL_CONST_MKSA_POISE = 0.1;

const double GSL_CONST_MKSA_STOKES = 0.0001;

const double GSL_CONST_MKSA_STILB = 10000.0;

const double GSL_CONST_MKSA_LUMEN = 1.0;

const double GSL_CONST_MKSA_LUX = 1.0;

const double GSL_CONST_MKSA_PHOT = 10000.0;

const double GSL_CONST_MKSA_FOOTCANDLE = 10.76;

const double GSL_CONST_MKSA_LAMBERT = 10000.0;

const double GSL_CONST_MKSA_FOOTLAMBERT = 10.7639104;

const double GSL_CONST_MKSA_CURIE = 37000000000.0;

const double GSL_CONST_MKSA_ROENTGEN = 0.000258;

const double GSL_CONST_MKSA_RAD = 0.01;

const double GSL_CONST_MKSA_SOLAR_MASS = 1.98892e+30;

const double GSL_CONST_MKSA_BOHR_RADIUS = 5.291772083e-11;

const double GSL_CONST_MKSA_NEWTON = 1.0;

const double GSL_CONST_MKSA_DYNE = 0.00001;

const double GSL_CONST_MKSA_JOULE = 1.0;

const double GSL_CONST_MKSA_ERG = 1e-7;

const double GSL_CONST_MKSA_STEFAN_BOLTZMANN_CONSTANT = 5.67040047374e-8;

const double GSL_CONST_MKSA_THOMSON_CROSS_SECTION = 6.65245893699e-29;

const double GSL_CONST_MKSA_BOHR_MAGNETON = 9.27400899e-24;

const double GSL_CONST_MKSA_NUCLEAR_MAGNETON = 5.05078317e-27;

const double GSL_CONST_MKSA_ELECTRON_MAGNETIC_MOMENT = 9.28476362e-24;

const double GSL_CONST_MKSA_PROTON_MAGNETIC_MOMENT = 1.410606633e-26;

const double GSL_CONST_MKSA_FARADAY = 96485.3429775;

const double GSL_CONST_MKSA_ELECTRON_CHARGE = 1.602176487e-19;

const double GSL_CONST_MKSA_VACUUM_PERMITTIVITY = 8.854187817e-12;

const double GSL_CONST_MKSA_VACUUM_PERMEABILITY = 0.00000125663706144;

const double GSL_CONST_MKSA_DEBYE = 3.33564095198e-30;

const double GSL_CONST_MKSA_GAUSS = 0.0001;

const double GSL_SF_GAMMA_XMAX = 171.0;

const int GSL_SF_FACT_NMAX = 170;

const int GSL_SF_DOUBLEFACT_NMAX = 297;

const double GSL_CONST_CGS_SPEED_OF_LIGHT = 29979245800.0;

const double GSL_CONST_CGS_GRAVITATIONAL_CONSTANT = 6.673e-8;

const double GSL_CONST_CGS_PLANCKS_CONSTANT_H = 6.62606896e-27;

const double GSL_CONST_CGS_PLANCKS_CONSTANT_HBAR = 1.05457162825e-27;

const double GSL_CONST_CGS_ASTRONOMICAL_UNIT = 14959787069100.0;

const double GSL_CONST_CGS_LIGHT_YEAR = 946053620707000000.0;

const double GSL_CONST_CGS_PARSEC = 3085677581350000000.0;

const double GSL_CONST_CGS_GRAV_ACCEL = 980.665;

const double GSL_CONST_CGS_ELECTRON_VOLT = 1.602176487e-12;

const double GSL_CONST_CGS_MASS_ELECTRON = 9.10938188e-28;

const double GSL_CONST_CGS_MASS_MUON = 1.88353109e-25;

const double GSL_CONST_CGS_MASS_PROTON = 1.67262158e-24;

const double GSL_CONST_CGS_MASS_NEUTRON = 1.67492716e-24;

const double GSL_CONST_CGS_RYDBERG = 2.17987196968e-11;

const double GSL_CONST_CGS_BOLTZMANN = 1.3806504e-16;

const double GSL_CONST_CGS_MOLAR_GAS = 83144720.0;

const double GSL_CONST_CGS_STANDARD_GAS_VOLUME = 22710.981;

const double GSL_CONST_CGS_MINUTE = 60.0;

const double GSL_CONST_CGS_HOUR = 3600.0;

const double GSL_CONST_CGS_DAY = 86400.0;

const double GSL_CONST_CGS_WEEK = 604800.0;

const double GSL_CONST_CGS_INCH = 2.54;

const double GSL_CONST_CGS_FOOT = 30.48;

const double GSL_CONST_CGS_YARD = 91.44;

const double GSL_CONST_CGS_MILE = 160934.4;

const double GSL_CONST_CGS_NAUTICAL_MILE = 185200.0;

const double GSL_CONST_CGS_FATHOM = 182.88;

const double GSL_CONST_CGS_MIL = 0.00254;

const double GSL_CONST_CGS_POINT = 0.0352777777778;

const double GSL_CONST_CGS_TEXPOINT = 0.0351459803515;

const double GSL_CONST_CGS_MICRON = 0.0001;

const double GSL_CONST_CGS_ANGSTROM = 1e-8;

const double GSL_CONST_CGS_HECTARE = 100000000.0;

const double GSL_CONST_CGS_ACRE = 40468564.2241;

const double GSL_CONST_CGS_BARN = 1e-24;

const double GSL_CONST_CGS_LITER = 1000.0;

const double GSL_CONST_CGS_US_GALLON = 3785.41178402;

const double GSL_CONST_CGS_QUART = 946.352946004;

const double GSL_CONST_CGS_PINT = 473.176473002;

const double GSL_CONST_CGS_CUP = 236.588236501;

const double GSL_CONST_CGS_FLUID_OUNCE = 29.5735295626;

const double GSL_CONST_CGS_TABLESPOON = 14.7867647813;

const double GSL_CONST_CGS_TEASPOON = 4.92892159375;

const double GSL_CONST_CGS_CANADIAN_GALLON = 4546.09;

const double GSL_CONST_CGS_UK_GALLON = 4546.092;

const double GSL_CONST_CGS_MILES_PER_HOUR = 44.704;

const double GSL_CONST_CGS_KILOMETERS_PER_HOUR = 27.7777777778;

const double GSL_CONST_CGS_KNOT = 51.4444444444;

const double GSL_CONST_CGS_POUND_MASS = 453.59237;

const double GSL_CONST_CGS_OUNCE_MASS = 28.349523125;

const double GSL_CONST_CGS_TON = 907184.74;

const double GSL_CONST_CGS_METRIC_TON = 1000000.0;

const double GSL_CONST_CGS_UK_TON = 1016046.9088;

const double GSL_CONST_CGS_TROY_OUNCE = 31.103475;

const double GSL_CONST_CGS_CARAT = 0.2;

const double GSL_CONST_CGS_UNIFIED_ATOMIC_MASS = 1.660538782e-24;

const double GSL_CONST_CGS_GRAM_FORCE = 980.665;

const double GSL_CONST_CGS_POUND_FORCE = 444822.161526;

const double GSL_CONST_CGS_KILOPOUND_FORCE = 444822161.526;

const double GSL_CONST_CGS_POUNDAL = 13825.5;

const double GSL_CONST_CGS_CALORIE = 41868000.0;

const double GSL_CONST_CGS_BTU = 10550558526.2;

const double GSL_CONST_CGS_THERM = 1055060000000000.0;

const double GSL_CONST_CGS_HORSEPOWER = 7457000000.0;

const double GSL_CONST_CGS_BAR = 1000000.0;

const double GSL_CONST_CGS_STD_ATMOSPHERE = 1013250.0;

const double GSL_CONST_CGS_TORR = 1333.22368421;

const double GSL_CONST_CGS_METER_OF_MERCURY = 1333223.68421;

const double GSL_CONST_CGS_INCH_OF_MERCURY = 33863.8815789;

const double GSL_CONST_CGS_INCH_OF_WATER = 2490.889;

const double GSL_CONST_CGS_PSI = 68947.5729317;

const double GSL_CONST_CGS_POISE = 1.0;

const double GSL_CONST_CGS_STOKES = 1.0;

const double GSL_CONST_CGS_STILB = 1.0;

const double GSL_CONST_CGS_LUMEN = 1.0;

const double GSL_CONST_CGS_LUX = 0.0001;

const double GSL_CONST_CGS_PHOT = 1.0;

const double GSL_CONST_CGS_FOOTCANDLE = 0.001076;

const double GSL_CONST_CGS_LAMBERT = 1.0;

const double GSL_CONST_CGS_FOOTLAMBERT = 0.00107639104;

const double GSL_CONST_CGS_CURIE = 37000000000.0;

const double GSL_CONST_CGS_ROENTGEN = 2.58e-7;

const double GSL_CONST_CGS_RAD = 100.0;

const double GSL_CONST_CGS_SOLAR_MASS = 1.98892e+33;

const double GSL_CONST_CGS_BOHR_RADIUS = 5.291772083e-9;

const double GSL_CONST_CGS_NEWTON = 100000.0;

const double GSL_CONST_CGS_DYNE = 1.0;

const double GSL_CONST_CGS_JOULE = 10000000.0;

const double GSL_CONST_CGS_ERG = 1.0;

const double GSL_CONST_CGS_STEFAN_BOLTZMANN_CONSTANT = 0.0000567040047374;

const double GSL_CONST_CGS_THOMSON_CROSS_SECTION = 6.65245893699e-25;

const int GSL_MESSAGE_MASK = 4294967295;

const String GSL_VERSION = '2.7.1';

const int GSL_MAJOR_VERSION = 2;

const int GSL_MINOR_VERSION = 7;
